name: HumanEval_154_cycpattern_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given 2 words. You need to return True if the second word or any\
  \ of its rotations is a substring in the first word\n    // >>> cycpatternCheck((\"\
  abcd\"), (\"abd\"))\n    // (false)\n    // >>> cycpatternCheck((\"hello\"), (\"\
  ell\"))\n    // (true)\n    // >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n\
  \    // (false)\n    // >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n\
  \    // >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>>\
  \ cycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    def cycpatternCheck(a\
  \ : String, b : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"\
  xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\"\
  )) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n\
  \    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"\
  abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"\
  tinem\")) == (true));\n    }\n\n}\n"
completions: ["        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        for (i <- 0 until n - m + 1)\
    \ {\n            if (a.substring(i, i + m) == b) return true\n        }\n    \
    \    return false", "        val n = a.length\n        val m = b.length\n    \
    \    if (n < m) return false\n        val bb = b + b\n        for (i <- 0 until\
    \ n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n    \
    \    }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n) {\n            if (a.substring(i, i + m) == b) return true\n      \
    \  }\n        return false", "        val bs = b.toCharArray\n        for (i <-\
    \ 0 until bs.length) {\n            val c = bs(0)\n            for (j <- 0 until\
    \ bs.length - 1) {\n                bs(j) = bs(j + 1)\n            }\n       \
    \     bs(bs.length - 1) = c\n            if (a.contains(bs.mkString)) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n) {\n            var j = 0\n            while (j < m &&\
    \ a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      val aa = a.toCharArray\n        val bs2 = bs.clone\n        for (i <- 0\
    \ until bs.length) {\n            val c = bs2.head\n            bs2.remove(0)\n\
    \            bs2 :+= c\n            if (aa.mkString.contains(bs2.mkString)) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        val k = gcd(n, m)\n        val l = n / k\n        val\
    \ bb = b * l\n        return a.contains(bb)", "        val n = a.length\n    \
    \    val m = b.length\n        if (n < m) return false\n        val aa = a + a\n\
    \        for (i <- 0 until n) {\n            if (aa.substring(i, i + m) == b)\
    \ return true\n        }\n        return false", "        val bb = b + b\n   \
    \     return bb.contains(a)", "        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length; val m = b.length\n        if (m > n) return false\n \
    \       val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        if (n < m) return false\n      \
    \  val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bs = b.toCharArray\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == bs(0)) {\n   \
    \             var j = 0\n                var k = i\n                while (k <\
    \ a.length && j < bs.length && a(k) == bs(j)) {\n                    j += 1\n\
    \                    k += 1\n                }\n                if (j == bs.length)\
    \ return true\n                if (k == a.length) {\n                    k = 0\n\
    \                    while (k < i && j < bs.length && a(k) == bs(j)) {\n     \
    \                   j += 1\n                        k += 1\n                 \
    \   }\n                    if (j == bs.length) return true\n                }\n\
    \            }\n        }\n        return false", "        val n = a.length; val\
    \ m = b.length\n        if (m > n) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        val bs = b.toSet\n\
    \        for (i <- 0 until a.length) {\n            val s = a.substring(i, a.length)\
    \ + a.substring(0, i)\n            if (s.toSet.subsetOf(bs)) return true\n   \
    \     }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        val bb = b + b\n        for (i <- 0 until n) {\n     \
    \       if (a.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val bb = b + b\n        bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            val\
    \ sub = a.substring(i, i + m)\n            if (bb.contains(sub)) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        val s = a + a\n        for (i <- 0 until n) {\n          \
    \  val sub = s.substring(i, i + m)\n            if (sub == b) return true\n  \
    \      }\n        return false", "        val bs = b.toCharArray\n        for\
    \ (i <- 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++\
    \ bs.slice(0, i)\n            if (a.contains(bs1.mkString)) return true\n    \
    \    }\n        return false", "        val bs = b.toCharArray\n        for (i\
    \ <- 0 until bs.length) {\n            val c = bs(0)\n            for (j <- 0\
    \ until bs.length - 1) {\n                bs(j) = bs(j + 1)\n            }\n \
    \           bs(bs.length - 1) = c\n            if (a.contains(bs.mkString)) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            val sub = a.substring(i, i +\
    \ m)\n            if (bb.contains(sub)) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        val s =\
    \ a + a\n        for (i <- 0 until n) {\n            if (s.substring(i, i + m)\
    \ == b) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val aa = a\
    \ + a\n        for (i <- 0 until n) {\n            if (aa.substring(i, i + m)\
    \ == b) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val aa = a\
    \ + a\n        for (i <- 0 until n) {\n            if (aa.substring(i, i + m)\
    \ == b) return true\n        }\n        return false", "        val n = a.length;\
    \ val m = b.length\n        if (m > n) return false\n        val bb = b + b\n\
    \        for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m)\
    \ == b) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        val aa = a + a\n        for (i <- 0 until n)\
    \ {\n            if (aa.substring(i, i + m) == b) return true\n        }\n   \
    \     return false", "        val bs = b.toCharArray\n        for (i <- 0 until\
    \ bs.length) {\n            val c = bs(0)\n            for (j <- 0 until bs.length\
    \ - 1) {\n                bs(j) = bs(j + 1)\n            }\n            bs(bs.length\
    \ - 1) = c\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        return false", "        val bb = b + b\n        bb.contains(a)", "  \
    \      val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length; val m = b.length\n        if (m > n) return false\n \
    \       val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        val bb = b + b\n        bb.contains(a)", " \
    \       val n = a.length\n        val m = b.length\n        val bb = b + b\n \
    \       for (i <- 0 until n - m + 1) {\n            val sub = a.substring(i, i\
    \ + m)\n            if (sub == b || bb.contains(sub)) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            val sub = a.substring(i, i + m)\n          \
    \  if (bb.contains(sub)) return true\n        }\n        return false", "    \
    \    val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val c = bs(0)\n            for (j <- 0 until bs.length - 1) {\n       \
    \         bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) = c\n\
    \            if (a.contains(bs.mkString)) return true\n        }\n        return\
    \ false", "        val bb = b + b\n        return bb.contains(a)", "        val\
    \ n = a.length\n        val m = b.length\n        if (n < m) return false\n  \
    \      val bb = b + b\n        for (i <- 0 until n) {\n            if (a(i) ==\
    \ b(0)) {\n                var j = 0\n                while (j < m && a(i + j)\
    \ == bb(j)) j += 1\n                if (j == m) return true\n            }\n \
    \       }\n        false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        false", "        if (a.length < b.length) return false\n \
    \       val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        val bb = b + b\n        for (i <- 0 until n\
    \ - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n      \
    \  }\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i\
    \ + m) == bb.substring(m - i, 2 * m - i)) return true\n        }\n        false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            val\
    \ sub = a.substring(i, i + m)\n            if (bb.contains(sub)) return true\n\
    \        }\n        return false", "        val bb = b + b\n        return bb.contains(a)",
  "        val a1 = a.toList\n        val b1 = b.toList\n        val b2 = b1.tail\
    \ ::: List(b1.head)\n        val b3 = b2.tail ::: List(b2.head)\n        val b4\
    \ = b3.tail ::: List(b3.head)\n        val b5 = b4.tail ::: List(b4.head)\n  \
    \      val b6 = b5.tail ::: List(b5.head)\n        val b7 = b6.tail ::: List(b6.head)\n\
    \        val b8 = b7.tail ::: List(b7.head)\n        val b9 = b8.tail ::: List(b8.head)\n\
    \        val b10 = b9.tail ::: List(b9.head)\n        val b11 = b10.tail ::: List(b10.head)\n\
    \        val b12 = b11.tail ::: List(b11.head)\n        val b13 = b12.tail :::\
    \ List(b12.head)\n        val b14 = b13.tail ::: List(b13.head)\n        val b15\
    \ = b14.tail ::: List(b14.head)\n        val b16 = b15.tail ::: List(b15.head)\n\
    \        val b17 = b16.tail ::: List(b16.head)\n        val b18 = b17.tail :::\
    \ List(b17.head)\n        val b19 = b18.tail ::: List(b18.head)\n        val b20\
    \ = b19.tail ::: List(b19.head)\n        val b21 = b20.tail ::: List(b20.head)\n\
    \        val b22 = b21.tail ::: List(b21.head)\n        val b23 = b22.tail :::\
    \ List(b22.head)\n        val b24 = b23.tail ::: List(b23.head)\n        val b25\
    \ = b24.tail ::: List(b24.head)\n        val b26 = b25.tail ::: List(b25.head)\n\
    \        val b27 = b26.tail ::: List(b26.", "        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        val s = a + a\n   \
    \     for (i <- 0 to n - 1) {\n            if (s.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      for (i <- 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length)\
    \ ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString)) return true\n \
    \       }\n        return false", "        val aa = a.toCharArray\n        val\
    \ bb = b.toCharArray\n        val bb_len = bb.length\n        val aa_len = aa.length\n\
    \        val bb_set = bb.toSet\n        if (bb_set.size != bb_len) return false\n\
    \        val bb_map = new HashMap[Char, Int]\n        for (i <- 0 until bb_len)\
    \ {\n            if (bb_map.contains(bb(i))) bb_map(bb(i)) += 1\n            else\
    \ bb_map(bb(i)) = 1\n        }\n        for (i <- 0 until aa_len) {\n        \
    \    val aa_map = new HashMap[Char, Int]\n            for (j <- 0 until bb_len)\
    \ {\n                val k = (i + j) % aa_len\n                if (aa_map.contains(aa(k)))\
    \ aa_map(aa(k)) += 1\n                else aa_map(aa(k)) = 1\n            }\n\
    \            if (bb_map == aa_map) return true\n        }\n        false", " \
    \       def isSubstring(a : String, b : String) : Boolean = {\n            if\
    \ (a.length < b.length) return false\n            for (i <- 0 to a.length - b.length)\
    \ {\n                if (a.substring(i, i + b.length) == b) return true\n    \
    \        }\n            return false\n        }\n        if (a.length < b.length)\
    \ return false\n        for (i <- 0 to a.length - b.length) {\n            if\
    \ (isSubstring(a, b.substring(i, i + b.length))) return true\n        }\n    \
    \    return false", "        if (a.length < b.length) return false\n        val\
    \ bb = b + b\n        return bb.contains(a)", "        val bs = b.toList\n   \
    \     val bs2 = bs.tail ::: bs.head :: Nil\n        val bs3 = bs2.tail ::: bs2.head\
    \ :: Nil\n        val bs4 = bs3.tail ::: bs3.head :: Nil\n        val bs5 = bs4.tail\
    \ ::: bs4.head :: Nil\n        val bs6 = bs5.tail ::: bs5.head :: Nil\n      \
    \  val bs7 = bs6.tail ::: bs6.head :: Nil\n        val bs8 = bs7.tail ::: bs7.head\
    \ :: Nil\n        val bs9 = bs8.tail ::: bs8.head :: Nil\n        val bs10 = bs9.tail\
    \ ::: bs9.head :: Nil\n        val bs11 = bs10.tail ::: bs10.head :: Nil\n   \
    \     val bs12 = bs11.tail ::: bs11.head :: Nil\n        val bs13 = bs12.tail\
    \ ::: bs12.head :: Nil\n        val bs14 = bs13.tail ::: bs13.head :: Nil\n  \
    \      val bs15 = bs14.tail ::: bs14.head :: Nil\n        val bs16 = bs15.tail\
    \ ::: bs15.head :: Nil\n        val bs17 = bs16.tail ::: bs16.head :: Nil\n  \
    \      val bs18 = bs17.tail ::: bs17.head :: Nil\n        val bs19 = bs18.tail\
    \ ::: bs18.head :: Nil\n        val bs20 = bs19.tail ::: bs19.head :: Nil\n  \
    \      val bs21 = bs20.tail ::: bs20.head :: Nil\n        val bs22 = bs21.tail\
    \ ::: bs21.head :: Nil\n        val bs23 = bs22.tail ::: bs22.head :: Nil\n  \
    \      val bs24 = bs23.tail ::: bs23.head :: Nil\n        val bs25 = bs24.tail\
    \ ::: bs24.head :: Nil", "        val n = a.length\n        val m = b.length\n\
    \        val s = a + a\n        for (i <- 0 until n) {\n            if (s.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val bs = b.toCharArray\n        val\
    \ as = a.toCharArray\n        val n = bs.length\n        val m = as.length\n \
    \       var i = 0\n        while (i < n) {\n            var j = 0\n          \
    \  while (j < m) {\n                if (bs(i) == as(j)) {\n                  \
    \  var k = 0\n                    while (k < n) {\n                        if\
    \ (bs(k) != as((j + k) % n)) {\n                            break\n          \
    \              }\n                        k += 1\n                    }\n    \
    \                if (k == n) {\n                        return true\n        \
    \            }\n                }\n                j += 1\n            }\n   \
    \         i += 1\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        val bb2 = bb.substring(1, m + 1)\n        if (a.contains(b)) return\
    \ true\n        if (a.contains(bb2)) return true\n        return false", "   \
    \     val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n    \
    \            bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) =\
    \ temp\n            if (a.contains(bs.mkString)) return true\n        }\n    \
    \    return false", "        val n = a.length\n        val m = b.length\n    \
    \    if (n < m) return false\n        val bb = b + b\n        for (i <- 0 until\
    \ n - m + 1) {\n            val sub = a.substring(i, i + m)\n            if (bb.contains(sub))\
    \ return true\n        }\n        return false", "        val bs = b.toSet\n \
    \       val bm = b.toMap\n        val bsz = b.size\n        for (i <- 0 until\
    \ a.size) {\n            val sub = a.substring(i, i + bsz)\n            if (sub.toSet\
    \ == bs && sub.toMap == bm) return true\n        }\n        return false", " \
    \       val bs = b.toCharArray\n        val as = a.toCharArray\n        val n\
    \ = bs.length\n        val m = as.length\n        val bs2 = bs ++ bs\n       \
    \ val bs2s = bs2.mkString\n        val bs2s2 = bs2s.substring(n, n + n)\n    \
    \    if (bs2s2 == b) return true\n        for (i <- 0 until n) {\n           \
    \ val bs2s3 = bs2s.substring(i, i + n)\n            if (bs2s3 == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n \
    \           var j = 0\n            while (j < m && a(i + j) == bb(j)) j += 1\n\
    \            if (j == m) return true\n        }\n        return false", "    \
    \    val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bs = b.toList\n        val as = a.toList\n        val bslen = bs.length\n\
    \        val aslen = as.length\n        val bsrot = bs.rotate(1)\n        val\
    \ bsrot2 = bs.rotate(2)\n        val bsrot3 = bs.rotate(3)\n        val bsrot4\
    \ = bs.rotate(4)\n        val bsrot5 = bs.rotate(5)\n        val bsrot6 = bs.rotate(6)\n\
    \        val bsrot7 = bs.rotate(7)\n        val bsrot8 = bs.rotate(8)\n      \
    \  val bsrot9 = bs.rotate(9)\n        val bsrot10 = bs.rotate(10)\n        val\
    \ bsrot11 = bs.rotate(11)\n        val bsrot12 = bs.rotate(12)\n        val bsrot13\
    \ = bs.rotate(13)\n        val bsrot14 = bs.rotate(14)\n        val bsrot15 =\
    \ bs.rotate(15)\n        val bsrot16 = bs.rotate(16)\n        val bsrot17 = bs.rotate(17)\n\
    \        val bsrot18 = bs.rotate(18)\n        val bsrot19 = bs.rotate(19)\n  \
    \      val bsrot20 = bs.rotate(20)\n        val bsrot21 = bs.rotate(21)\n    \
    \    val bsrot22 = bs.rotate(22)\n        val bsrot23 = bs.rotate(23)\n      \
    \  val bsrot24 = bs.rotate(24)\n        val bsrot25 = bs.rotate(25)\n        val\
    \ bsrot26 = bs.rotate(26)\n        val bsrot27 = bs.rotate(27)\n        val bsrot28\
    \ = bs.rotate(28)\n        val bsrot29 = bs.rotate(29)\n        val bsrot30 =\
    \ bs", "        val bb = b + b\n        bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        if (bb.contains(a))\
    \ return true\n        return false", "        val n = a.length\n        val m\
    \ = b.length\n        if (n < m) return false\n        val bb = b + b\n      \
    \  for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b)\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        for (i <- 0\
    \ until n) {\n            if (a.substring(i, i + m) == b) return true\n      \
    \  }\n        return false", "        val bb = b + b\n        bb.contains(a)",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        if (a.length < b.length) return false\n   \
    \     val bb = b + b\n        for (i <- 0 to a.length - b.length) {\n        \
    \    if (a.substring(i, i + b.length) == b) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        for (i <- 0 until n - m + 1)\
    \ {\n            if (a.substring(i, i + m) == b) return true\n        }\n    \
    \    return false", "        val n = a.length\n        val m = b.length\n    \
    \    if (n < m) return false\n        val bb = b + b\n        for (i <- 0 until\
    \ n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n    \
    \    }\n        return false", "        val bb = b + b\n        bb.contains(a)",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n    \
    \            bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) =\
    \ temp\n            if (a.contains(bs.mkString)) return true\n        }\n    \
    \    return false", "        if (a.length < b.length) return false\n        val\
    \ aa = a + a\n        val bb = b + b\n        for (i <- 0 until a.length) {\n\
    \            if (aa.substring(i, i + b.length) == bb.substring(0, b.length)) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      val as = a.toCharArray\n        var i = 0\n        while (i < bs.length)\
    \ {\n            var j = 0\n            var k = i\n            while (j < bs.length\
    \ && k < bs.length && bs(k) == as(j)) {\n                j += 1\n            \
    \    k += 1\n            }\n            if (j == bs.length) return true\n    \
    \        i += 1\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bs\
    \ = b.toCharArray\n        val as = a.toCharArray\n        val n = bs.length\n\
    \        val m = as.length\n        val bs2 = bs ++ bs\n        val bs2s = bs2.mkString\n\
    \        val bs2s2 = bs2s.substring(n, n + n)\n        val bs2s3 = bs2s.substring(0,\
    \ n)\n        val bs2s4 = bs2s.substring(n + n, n + n + n)\n        val bs2s5\
    \ = bs2s.substring(n + n + n, n + n + n + n)\n        val bs2s6 = bs2s.substring(n\
    \ + n + n + n, n + n + n + n + n)\n        val bs2s7 = bs2s.substring(n + n +\
    \ n + n + n, n + n + n + n + n + n)\n        val bs2s8 = bs2s.substring(n + n\
    \ + n + n + n + n, n + n + n + n + n + n + n)\n        val bs2s9 = bs2s.substring(n\
    \ + n + n + n + n + n + n, n + n + n + n + n + n + n + n)\n        val bs2s10\
    \ = bs2s.substring(n + n + n + n + n + n + n + n, n + n + n + n + n + n + n +\
    \ n + n)\n        val bs2s11 = bs2s.substring(n + n + n + n + n + n + n + n +\
    \ n, n + n + n + n + n + n + n + n + n + n)\n        val bs2s12 = bs2s.substring(n\
    \ + n + n + n + n + n + n + n + n + n, n + n + n + n + n + n + n + n + n + n +\
    \ n)\n        val bs2s13 = bs2s.substring(", "        val bb = b + b\n       \
    \ return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        var i = 0\n        while (i < n) {\n            if (a.substring(i, i\
    \ + m) == b) return true\n            i += 1\n        }\n        return false",
  "        val aa = a.toCharArray\n        val bb = b.toCharArray\n        val bb2\
    \ = bb.clone\n        for (i <- 0 until bb.length) {\n            val c = bb2.head\n\
    \            bb2.shiftRight(1)\n            bb2(bb2.length - 1) = c\n        \
    \    if (a.contains(bb2.mkString)) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            val\
    \ sub = a.substring(i, i + m)\n            if (bb.contains(sub)) return true\n\
    \        }\n        return false", "        var s = a + a\n        s.contains(b)",
  "        val bs = b.toCharArray\n        val as = a.toCharArray\n        val n =\
    \ as.length\n        val m = bs.length\n        for (i <- 0 until n) {\n     \
    \       var j = 0\n            while (j < m && as(i) == bs(j)) {\n           \
    \     i += 1\n                j += 1\n                if (i == n) i = 0\n    \
    \        }\n            if (j == m) return true\n        }\n        return false",
  "        val n = a.length; val m = b.length\n        if (m > n) return false\n \
    \       val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        val bs = b.toSet\n        val bs1 = b.toSet\n\
    \        val bs2 = b.toSet\n        val bs3 = b.toSet\n        val bs4 = b.toSet\n\
    \        val bs5 = b.toSet\n        val bs6 = b.toSet\n        val bs7 = b.toSet\n\
    \        val bs8 = b.toSet\n        val bs9 = b.toSet\n        val bs10 = b.toSet\n\
    \        val bs11 = b.toSet\n        val bs12 = b.toSet\n        val bs13 = b.toSet\n\
    \        val bs14 = b.toSet\n        val bs15 = b.toSet\n        val bs16 = b.toSet\n\
    \        val bs17 = b.toSet\n        val bs18 = b.toSet\n        val bs19 = b.toSet\n\
    \        val bs20 = b.toSet\n        val bs21 = b.toSet\n        val bs22 = b.toSet\n\
    \        val bs23 = b.toSet\n        val bs24 = b.toSet\n        val bs25 = b.toSet\n\
    \        val bs26 = b.toSet\n        val bs27 = b.toSet\n        val bs28 = b.toSet\n\
    \        val bs29 = b.toSet\n        val bs30 = b.toSet\n        val bs31 = b.toSet\n\
    \        val bs32 = b.toSet\n        val bs33 = b.toSet\n        val bs34 = b.toSet\n\
    \        val bs35 = b.toSet\n        val bs36 = b.toSet\n        val bs37 = b.toSet\n\
    \        val bs38 = b.toSet\n        val bs39 = b.toSet\n        val bs40 = b.toSet\n\
    \        val bs41 = b.toSet\n        val bs42 = b.toSet\n        val bs43 = b.toSet\n\
    \        val bs44 = b.toSet\n        val bs45 = b.toSet\n        val bs46 =",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bb = b + b\n        bb.contains(a)", "        val n = a.length\n  \
    \      val m = b.length\n        val bb = b + b\n        for (i <- 0 until n -\
    \ m + 1) {\n            if (a.substring(i, i + m) == b) return true\n        }\n\
    \        return false", "        def isSubstring(a : String, b : String) : Boolean\
    \ = {\n            if (a.length < b.length) return false\n            for (i <-\
    \ 0 to a.length - b.length) {\n                var flag = true\n             \
    \   for (j <- 0 until b.length) {\n                    if (a(i + j) != b(j)) {\n\
    \                        flag = false\n                        break\n       \
    \             }\n                }\n                if (flag) return true\n  \
    \          }\n            return false\n        }\n        if (a.length < b.length)\
    \ return false\n        for (i <- 0 until a.length) {\n            var flag =\
    \ true\n            for (j <- 0 until b.length) {\n                if (a((i +\
    \ j) % a.length) != b(j)) {\n                    flag = false\n              \
    \      break\n                }\n            }\n            if (flag) return true\n\
    \        }\n        return false", "        val bs = b.toCharArray\n        val\
    \ as = a.toCharArray\n        val n = bs.length\n        val m = as.length\n \
    \       val bs2 = bs ++ bs\n        for (i <- 0 until n) {\n            var j\
    \ = 0\n            while (j < m && bs2(i + j) == as(j)) j += 1\n            if\
    \ (j == m) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        bb.contains(a)", " \
    \       val n = a.length\n        val m = b.length\n        if (n < m) return\
    \ false\n        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n    \
    \        if (a.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        for (i <- 0 until n - m + 1)\
    \ {\n            val aa = a.substring(i, i + m)\n            if (aa == b || bb.contains(aa))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            val s = a.substring(i,\
    \ i + m)\n            if (s == b || bb.contains(s)) return true\n        }\n \
    \       return false", "        val bs = b.toCharArray\n        val as = a.toCharArray\n\
    \        val n = bs.length\n        for (i <- 0 until n) {\n            var j\
    \ = 0\n            while (j < n && bs(j) == as(i + j)) j += 1\n            if\
    \ (j == n) return true\n        }\n        false", "        val bb = b + b\n \
    \       bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val aa = a + a\n        for\
    \ (i <- 0 until n) {\n            var flag = true\n            for (j <- 0 until\
    \ m) {\n                if (aa(i + j) != b(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val bs = b.toCharArray\n        for\
    \ (i <- 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++\
    \ bs.slice(0, i)\n            if (a.contains(bs1.mkString)) return true\n    \
    \    }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        if (a.length < b.length) return false\n\
    \        val bb = b + b\n        return bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        var result = false\n        for (i <- 0 until b.length) {\n           \
    \ if (a.contains(b.substring(i) + b.substring(0, i))) {\n                result\
    \ = true\n            }\n        }\n        result", "        val n = a.length\n\
    \        val m = b.length\n        val bb = b + b\n        for (i <- 0 until n\
    \ - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n      \
    \  }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val bb = b + b\n        return bb.contains(a)",
  "        val bs = b.toCharArray\n        val as = a.toCharArray\n        if (bs.length\
    \ > as.length) return false\n        val bs2 = bs ++ bs\n        val bs2s = bs2.mkString\n\
    \        if (bs2s.contains(a)) return true\n        return false", "        val\
    \ bb = b + b\n        bb.contains(a)", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        if (n < m) return false\n      \
    \  val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        for (i <- 0 until n) {\n\
    \            var flag = true\n            for (j <- 0 until m) {\n           \
    \     if (a(i + j) != b(j)) {\n                    flag = false\n            \
    \        break\n                }\n            }\n            if (flag) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        val bb = b + b\n        for (i <- 0 until n) {\n     \
    \       if (a.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        val aa\
    \ = a + a\n        for (i <- 0 until n) {\n            if (aa.substring(i, i +\
    \ m) == b) return true\n        }\n        return false", "        def rotate(s\
    \ : String) : String = {\n            val n = s.length\n            s.substring(1,\
    \ n) + s.substring(0, 1)\n        }\n        def check(s : String) : Boolean =\
    \ {\n            if (a.contains(s)) true\n            else if (s == b) false\n\
    \            else check(rotate(s))\n        }\n        check(b)", "        if\
    \ (a.length < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        var s = a\n        for (i <- 0 until a.length) {\n            if (s.contains(b))\
    \ return true\n            s = s.tail + s.head\n        }\n        return false",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n    \
    \            bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) =\
    \ temp\n            if (a.contains(bs.mkString)) return true\n        }\n    \
    \    return false", "        val bb = b + b\n        bb.contains(a)", "      \
    \  val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bb = b + b\n        bb.contains(a)", "        val n = a.length\n  \
    \      val m = b.length\n        val bb = b + b\n        for (i <- 0 until n -\
    \ m + 1) {\n            val sub = a.substring(i, i + m)\n            if (bb.contains(sub))\
    \ return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        val b2 = b + b\n        return b2.contains(a)",
  "        if (a.length < b.length) return false\n        val bs = b.toSet\n     \
    \   for (i <- 0 until a.length) {\n            if (a.substring(i, i + b.length).toSet\
    \ == bs) return true\n        }\n        return false", "        val bb = b +\
    \ b\n        return bb.contains(a)", "        if (a.length < b.length) return\
    \ false\n        val bb = b + b\n        return bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        val bs = b.toCharArray\n        val as = a.toCharArray\n\
    \        for (i <- 0 until a.length) {\n            var j = 0\n            while\
    \ (j < b.length && as(i + j) == bs(j)) j += 1\n            if (j == b.length)\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n) {\n            var j = 0\n            while\
    \ (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n \
    \       }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        val aa = a + a\n        for (i <- 0 until n) {\n            if (aa.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bs\
    \ = b.toCharArray\n        for (i <- 0 until bs.length) {\n            val bs1\
    \ = bs.slice(i, bs.length) ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString))\
    \ return true\n        }\n        return false", "        val bb = b + b\n   \
    \     return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val aa = a + a\n        for (i <- 0\
    \ until n) {\n            if (aa.substring(i, i + m) == b) return true\n     \
    \   }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n \
    \           val sub = a.substring(i, i + m)\n            if (sub == b || bb.contains(sub))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        if (a.length\
    \ < b.length) return false\n        val bs = b.toCharArray\n        for (i <-\
    \ 0 until bs.length) {\n            val temp = bs(0)\n            for (j <- 0\
    \ until bs.length - 1) {\n                bs(j) = bs(j + 1)\n            }\n \
    \           bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val aa = a.toCharArray\n\
    \        val bb = b.toCharArray\n        val bb_len = bb.length\n        val aa_len\
    \ = aa.length\n        val bb_len_half = bb_len / 2\n        for (i <- 0 until\
    \ aa_len) {\n            var j = 0\n            while (j < bb_len_half && aa(i\
    \ + j) == bb(j)) j += 1\n            if (j == bb_len_half) {\n               \
    \ var k = bb_len_half\n                while (k < bb_len && aa(i + k) == bb(k))\
    \ k += 1\n                if (k == bb_len) return true\n            }\n      \
    \  }\n        false", "        if (a.length < b.length) return false\n       \
    \ val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n) {\n            var j = 0\n            while\
    \ (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n \
    \       }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        val aa = a + a\n        for (i <- 0 until n) {\n            if (aa.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        return bb.contains(a)", "        val bs = b.toSet\n       \
    \ val bs2 = b.toSet.map(x => x + x)\n        val bs3 = b.toSet.map(x => x + x\
    \ + x)\n        val bs4 = b.toSet.map(x => x + x + x + x)\n        val bs5 = b.toSet.map(x\
    \ => x + x + x + x + x)\n        val bs6 = b.toSet.map(x => x + x + x + x + x\
    \ + x)\n        val bs7 = b.toSet.map(x => x + x + x + x + x + x + x)\n      \
    \  val bs8 = b.toSet.map(x => x + x + x + x + x + x + x + x)\n        val bs9\
    \ = b.toSet.map(x => x + x + x + x + x + x + x + x + x)\n        val bs10 = b.toSet.map(x\
    \ => x + x + x + x + x + x + x + x + x + x)\n        val bs11 = b.toSet.map(x\
    \ => x + x + x + x + x + x + x + x + x + x + x)\n        val bs12 = b.toSet.map(x\
    \ => x + x + x + x + x + x + x + x + x + x + x + x)\n        val bs13 = b.toSet.map(x\
    \ => x + x + x + x + x + x + x + x + x + x + x + x + x)\n        val bs14 = b.toSet.map(x\
    \ => x + x + x + x + x + x + x + x + x + x + x + x + x + x)\n        val bs15\
    \ = b.toSet.map(x => x + x + x + x + x + x + x + x + x + x + x + x + x + x + x)\n\
    \        val bs16 = b.toSet.map(x => x + x + x + x + x + x + x + x + x + x + x\
    \ + x +", "        val bs = b.toCharArray\n        val as = a.toCharArray\n  \
    \      val bslen = bs.length\n        val aslen = as.length\n        val bs2 =\
    \ bs.clone\n        for (i <- 0 until bslen) {\n            val c = bs2.head\n\
    \            bs2.remove(0)\n            bs2.append(c)\n            if (a.contains(bs2.mkString))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        val bb = b + b\n        for (i <- 0 until n\
    \ - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n      \
    \  }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (m > n) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        if (a.length < b.length) return false\n\
    \        val bs = b.toCharArray\n        for (i <- 0 until a.length) {\n     \
    \       var flag = true\n            for (j <- 0 until b.length) {\n         \
    \       if (a(i + j) != bs(j)) {\n                    flag = false\n         \
    \           break\n                }\n            }\n            if (flag) return\
    \ true\n        }\n        return false", "        if (a.length < b.length) return\
    \ false\n        val bb = b + b\n        if (bb.contains(a)) return true\n   \
    \     return false", "        val n = a.length\n        val m = b.length\n   \
    \     if (n < m) return false\n        val bb = b + b\n        for (i <- 0 until\
    \ n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n    \
    \    }\n        return false", "        if (a.length < b.length) return false\n\
    \        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        val s = a + a\n        for (i <- 0 to n - 1)\
    \ {\n            val t = s.substring(i, i + m)\n            if (t == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n) {\n            var j = 0\n            while\
    \ (j < m && a(i) == bb(j)) {\n                i += 1\n                j += 1\n\
    \            }\n            if (j == m) return true\n        }\n        return\
    \ false", "        val bb = b + b\n        return bb.contains(a)", "        if\
    \ (a.length < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length; val m = b.length\n        if (m > n) return false\n \
    \       val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            val\
    \ sub = a.substring(i, i + m)\n            if (sub == b || bb.contains(sub)) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      for (i <- 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length)\
    \ ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString)) return true\n \
    \       }\n        return false", "        val bb = b + b\n        return bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        val bb = b + b\n  \
    \      for (i <- 0 until n - m + 1) {\n            var flag = true\n         \
    \   for (j <- 0 until m) {\n                if (a(i + j) != bb(j)) {\n       \
    \             flag = false\n                    break\n                }\n   \
    \         }\n            if (flag) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        if (n == m) return a == b\n        for (i <- 0 until n) {\n         \
    \   if (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        for (i <- 0 until n)\
    \ {\n            var flag = true\n            for (j <- 0 until m) {\n       \
    \         if (a(i + j) != b(j)) {\n                    flag = false\n        \
    \            break\n                }\n            }\n            if (flag) return\
    \ true\n        }\n        false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        val s = a + a\n        for (i <- 0 to n - 1) {\n     \
    \       if (s.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        if (a.length < b.length) return false\n        val bb = b +\
    \ b\n        for (i <- 0 until b.length) {\n            if (a.contains(bb.substring(i,\
    \ i + b.length))) return true\n        }\n        return false", "        val\
    \ bs = b.toCharArray\n        val as = a.toCharArray\n        val bslen = bs.length\n\
    \        val aslen = as.length\n        if (bslen > aslen) return false\n    \
    \    for (i <- 0 until aslen) {\n            var flag = true\n            for\
    \ (j <- 0 until bslen) {\n                if (as(i + j) != bs(j)) {\n        \
    \            flag = false\n                    break\n                }\n    \
    \        }\n            if (flag) return true\n        }\n        return false",
  "        val bs = b.toCharArray\n        val as = a.toCharArray\n        val n =\
    \ bs.length\n        val m = as.length\n        var i = 0\n        while (i <\
    \ n) {\n            var j = 0\n            while (j < m) {\n                if\
    \ (bs(i) == as(j)) {\n                    var k = 1\n                    var flag\
    \ = true\n                    while (k < n && flag) {\n                      \
    \  if (bs((i + k) % n) != as((j + k) % m)) flag = false\n                    \
    \    k += 1\n                    }\n                    if (flag) return true\n\
    \                }\n                j += 1\n            }\n            i += 1\n\
    \        }\n        false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val aa = a + a\n        for (i <- 0\
    \ until n) {\n            if (aa.substring(i, i + m) == b) return true\n     \
    \   }\n        return false", "        val bs = b.toCharArray\n        for (i\
    \ <- 0 until bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++ bs.slice(0,\
    \ i)\n            if (a.contains(bs1.mkString)) return true\n        }\n     \
    \   return false", "        val n = a.length\n        val m = b.length\n     \
    \   if (n < m) return false\n        val aa = a + a\n        for (i <- 0 until\
    \ n) {\n            if (aa.substring(i, i + m) == b) return true\n        }\n\
    \        return false", "        val bs = b.toCharArray\n        for (i <- 0 until\
    \ bs.length) {\n            val temp = bs(0)\n            for (j <- 0 until bs.length\
    \ - 1) {\n                bs(j) = bs(j + 1)\n            }\n            bs(bs.length\
    \ - 1) = temp\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        val aa = a + a\n  \
    \      for (i <- 0 to n - 1) {\n            val s = aa.substring(i, i + m)\n \
    \           if (s == b) return true\n        }\n        return false", "     \
    \   def isSubstring(a : String, b : String) : Boolean = {\n            if (a.length\
    \ < b.length) return false\n            for (i <- 0 to a.length - b.length) {\n\
    \                if (a.substring(i, i + b.length) == b) return true\n        \
    \    }\n            return false\n        }\n        if (a.length < b.length)\
    \ return false\n        val bs = b + b\n        return isSubstring(a, bs)"]
stop_tokens:
- "\n    }\n"
