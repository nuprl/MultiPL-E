name: HumanEval_154_cycpattern_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given 2 words. You need to return True if the second word or any\
  \ of its rotations is a substring in the first word\n    // >>> cycpatternCheck((\"\
  abcd\"), (\"abd\"))\n    // (false)\n    // >>> cycpatternCheck((\"hello\"), (\"\
  ell\"))\n    // (true)\n    // >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n\
  \    // (false)\n    // >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n\
  \    // >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>>\
  \ cycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    def cycpatternCheck(a\
  \ : String, b : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"\
  xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\"\
  )) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n\
  \    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"\
  abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"\
  tinem\")) == (true));\n    }\n\n}\n"
completions: ["        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        for (i <- 0 until n - m + 1)\
    \ {\n            if (a.substring(i, i + m) == b) return true\n        }\n    \
    \    return false", "        val n = a.length\n        val m = b.length\n    \
    \    if (n < m) return false\n        val bb = b + b\n        for (i <- 0 until\
    \ n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n    \
    \    }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n) {\n            if (a.substring(i, i + m) == b) return true\n      \
    \  }\n        return false", "        val bs = b.toCharArray\n        for (i <-\
    \ 0 until bs.length) {\n            val c = bs(0)\n            for (j <- 0 until\
    \ bs.length - 1) {\n                bs(j) = bs(j + 1)\n            }\n       \
    \     bs(bs.length - 1) = c\n            if (a.contains(bs.mkString)) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n) {\n            var j = 0\n            while (j < m &&\
    \ a(i + j) == bb(j)) j += 1\n            if (j == m) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      val aa = a.toCharArray\n        val bs2 = bs.clone\n        for (i <- 0\
    \ until bs.length) {\n            val c = bs2.head\n            bs2.remove(0)\n\
    \            bs2 :+= c\n            if (aa.mkString.contains(bs2.mkString)) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        val k = gcd(n, m)\n        val l = n / k\n        val\
    \ bb = b * l\n        return a.contains(bb)", "        val n = a.length\n    \
    \    val m = b.length\n        if (n < m) return false\n        val aa = a + a\n\
    \        for (i <- 0 until n) {\n            if (aa.substring(i, i + m) == b)\
    \ return true\n        }\n        return false", "        val bb = b + b\n   \
    \     return bb.contains(a)", "        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length; val m = b.length\n        if (m > n) return false\n \
    \       val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        if (n < m) return false\n      \
    \  val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bs = b.toCharArray\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == bs(0)) {\n   \
    \             var j = 0\n                var k = i\n                while (k <\
    \ a.length && j < bs.length && a(k) == bs(j)) {\n                    j += 1\n\
    \                    k += 1\n                }\n                if (j == bs.length)\
    \ return true\n                if (k == a.length) {\n                    k = 0\n\
    \                    while (k < i && j < bs.length && a(k) == bs(j)) {\n     \
    \                   j += 1\n                        k += 1\n                 \
    \   }\n                    if (j == bs.length) return true\n                }\n\
    \            }\n        }\n        return false", "        val n = a.length; val\
    \ m = b.length\n        if (m > n) return false\n        val bb = b + b\n    \
    \    for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        val bs = b.toSet\n\
    \        for (i <- 0 until a.length) {\n            val s = a.substring(i, a.length)\
    \ + a.substring(0, i)\n            if (s.toSet.subsetOf(bs)) return true\n   \
    \     }\n        return false"]
stop_tokens:
- "\n    }\n"
