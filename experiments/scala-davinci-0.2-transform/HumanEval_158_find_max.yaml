name: HumanEval_158_find_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings.\n    // The list contains\
  \ different words. Return the word with maximum number\n    // of unique characters.\
  \ If multiple strings have maximum number of unique\n    // characters, return the\
  \ one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
  name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
  name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
  \ : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
  name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
  name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
  abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
  , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
  this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
  b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"\
  play\"))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        def findMax(words : List[String], max : String) : String =\
    \ {\n            if (words.isEmpty) max\n            else {\n                val\
    \ word = words.head\n                val unique = word.toSet.size\n          \
    \      val maxUnique = max.toSet.size\n                if (unique > maxUnique)\
    \ findMax(words.tail, word)\n                else if (unique == maxUnique) {\n\
    \                    if (word < max) findMax(words.tail, word)\n             \
    \       else findMax(words.tail, max)\n                }\n                else\
    \ findMax(words.tail, max)\n            }\n        }\n        findMax(words, \"\
    \")", "        var max = 0\n        var result = \"\"\n        for (word <- words)\
    \ {\n            val set = new HashSet[Char]\n            for (c <- word) {\n\
    \                set += c\n            }\n            if (set.size > max) {\n\
    \                max = set.size\n                result = word\n            }\n\
    \        }\n        result", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val unique = word.toSet.size\n   \
    \         if (unique > max) {\n                max = unique\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        def findMaxHelper(words\
    \ : List[String], max : String) : String = {\n            if (words.isEmpty) max\n\
    \            else {\n                val word = words.head\n                val\
    \ maxLength = max.length\n                val wordLength = word.length\n     \
    \           if (wordLength > maxLength) findMaxHelper(words.tail, word)\n    \
    \            else if (wordLength == maxLength) {\n                    if (word\
    \ < max) findMaxHelper(words.tail, word)\n                    else findMaxHelper(words.tail,\
    \ max)\n                }\n                else findMaxHelper(words.tail, max)\n\
    \            }\n        }\n        findMaxHelper(words, \"\")", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val set = new HashSet[Char]\n            for (c <- word) {\n               \
    \ set += c\n            }\n            if (set.size > max) {\n               \
    \ max = set.size\n                maxWord = word\n            }\n        }\n \
    \       maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val unique = word.toSet.size\n            if\
    \ (unique > max) {\n                max = unique\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val set = new HashSet[Char]\n            for (c <- word) {\n               \
    \ set += c\n            }\n            if (set.size > max) {\n               \
    \ max = set.size\n                maxWord = word\n            }\n        }\n \
    \       maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val set = new HashSet[Char]\n            for\
    \ (c <- word) set += c\n            if (set.size > max) {\n                max\
    \ = set.size\n                maxWord = word\n            }\n        }\n     \
    \   maxWord", "        var max = 0\n        var maxWord = \"\"\n        for (word\
    \ <- words) {\n            val set = new HashSet[Char]\n            for (c <-\
    \ word) {\n                set += c\n            }\n            if (set.size >\
    \ max) {\n                max = set.size\n                maxWord = word\n   \
    \         }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val set = Set[Char]()\n \
    \           for (c <- word) {\n                set += c\n            }\n     \
    \       if (set.size > max) {\n                max = set.size\n              \
    \  maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val uniqueChars = word.toSet\n            if (uniqueChars.size > max) {\n  \
    \              max = uniqueChars.size\n                maxWord = word\n      \
    \      }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val set = word.toSet\n  \
    \          if (set.size > max) {\n                max = set.size\n           \
    \     maxWord = word\n            }\n        }\n        maxWord", "        var\
    \ max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n       \
    \     val unique = word.toSet.size\n            if (unique > max) {\n        \
    \        max = unique\n                maxWord = word\n            }\n       \
    \ }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n    \
    \    for (word <- words) {\n            val set = new HashSet[Char]\n        \
    \    for (c <- word) {\n                set += c\n            }\n            if\
    \ (set.size > max) {\n                max = set.size\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val uniqueChars\
    \ = word.toSet\n            if (uniqueChars.size > max) {\n                max\
    \ = uniqueChars.size\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > max) {\n                max = uniqueChars.size\n       \
    \         maxWord = word\n            }\n        }\n        maxWord", '        words.maxBy(x
    => x.distinct.length)', "        var max = 0\n        var maxWord = \"\"\n   \
    \     for (word <- words) {\n            val set = new HashSet[Char]\n       \
    \     for (c <- word) {\n                set += c\n            }\n           \
    \ if (set.size > max) {\n                max = set.size\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val unique = word.toSet.size\n  \
    \          if (unique > max) {\n                max = unique\n               \
    \ maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val unique = word.toSet.size\n            if\
    \ (unique > max) {\n                max = unique\n                maxWord = word\n\
    \            }\n        }\n        maxWord", '        words.maxBy(word => word.toSet.size)',
  "        var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val uniqueChars = word.toSet\n            if (uniqueChars.size >\
    \ max) {\n                max = uniqueChars.size\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val set = new HashSet[Char]\n\
    \            for (c <- word) set += c\n            if (set.size > max) {\n   \
    \             max = set.size\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var result = \"\"\n\
    \        for (word <- words) {\n            val set = word.toSet\n           \
    \ if (set.size > max) {\n                max = set.size\n                result\
    \ = word\n            }\n        }\n        result", "        var max = 0\n  \
    \      var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var result = \"\"\n        for (word <- words) {\n\
    \            val set = new HashSet[Char]\n            for (c <- word) set += c\n\
    \            if (set.size > max) {\n                max = set.size\n         \
    \       result = word\n            }\n        }\n        result", "        var\
    \ max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n       \
    \     val set = word.toSet\n            if (set.size > max) {\n              \
    \  max = set.size\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val unique = word.toSet.size\n            if\
    \ (unique > max) {\n                max = unique\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val uniqueChars = word.toSet\n            if (uniqueChars.size > max) {\n  \
    \              max = uniqueChars.size\n                maxWord = word\n      \
    \      }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val set = Set[Char]()\n \
    \           for (c <- word) {\n                set += c\n            }\n     \
    \       if (set.size > max) {\n                max = set.size\n              \
    \  maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val set = new HashSet[Char]\n            for (c <- word) {\n               \
    \ set += c\n            }\n            if (set.size > max) {\n               \
    \ max = set.size\n                maxWord = word\n            }\n        }\n \
    \       maxWord", "        var max = words(0)\n        for (word <- words) {\n\
    \            if (word.toSet.size > max.toSet.size) max = word\n            else\
    \ if (word.toSet.size == max.toSet.size && word < max) max = word\n        }\n\
    \        max", "        var max = 0\n        var maxWord = \"\"\n        for (word\
    \ <- words) {\n            val set = new HashSet[Char]\n            for (c <-\
    \ word) {\n                set += c\n            }\n            if (set.size >\
    \ max) {\n                max = set.size\n                maxWord = word\n   \
    \         }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val set = word.toSet\n  \
    \          if (set.size > max) {\n                max = set.size\n           \
    \     maxWord = word\n            }\n        }\n        maxWord", "        var\
    \ max = words(0)\n        for (i <- 1 until words.length) {\n            if (words(i).length\
    \ > max.length) max = words(i)\n            else if (words(i).length == max.length)\
    \ {\n                if (words(i) < max) max = words(i)\n            }\n     \
    \   }\n        max", "        var max = 0\n        var maxWord = \"\"\n      \
    \  for (word <- words) {\n            val unique = word.toSet.size\n         \
    \   if (unique > max) {\n                max = unique\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       val max = words.map(word => (word, word.toSet.size)).maxBy(_._2)\n   \
    \     max._1", "        var max = 0\n        var maxWord = \"\"\n        for (word\
    \ <- words) {\n            val uniqueChars = word.toSet\n            if (uniqueChars.size\
    \ > max) {\n                max = uniqueChars.size\n                maxWord =\
    \ word\n            }\n        }\n        maxWord", "        var max = 0\n   \
    \     var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val set = new HashSet[Char]\n   \
    \         for (c <- word) {\n                set += c\n            }\n       \
    \     if (set.size > max) {\n                max = set.size\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val set = new HashSet[Char]\n            for (c <- word) {\n    \
    \            set += c\n            }\n            if (set.size > max) {\n    \
    \            max = set.size\n                maxWord = word\n            }\n \
    \       }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val unique = word.groupBy(identity).size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > max) {\n                max = uniqueChars.size\n       \
    \         maxWord = word\n            }\n        }\n        maxWord", "      \
    \  var max = 0\n        var result = \"\"\n        for (word <- words) {\n   \
    \         val unique = word.toSet.size\n            if (unique > max) {\n    \
    \            max = unique\n                result = word\n            }\n    \
    \    }\n        result", "        val max = words.map(x => x.toSet.size).max\n\
    \        words.filter(x => x.toSet.size == max).min", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       def findMax(words : List[String], max : String) : String = {\n       \
    \     if (words.isEmpty) max\n            else {\n                val max2 = if\
    \ (words.head.toSet.size > max.toSet.size) words.head else max\n             \
    \   findMax(words.tail, max2)\n            }\n        }\n        findMax(words,\
    \ \"\")", "        var max = 0\n        var maxWord = \"\"\n        for (word\
    \ <- words) {\n            val unique = word.toSet.size\n            if (unique\
    \ > max) {\n                max = unique\n                maxWord = word\n   \
    \         }\n        }\n        maxWord", "        def findMaxHelper(words : List[String],\
    \ max : String) : String = {\n            if (words.isEmpty) max\n           \
    \ else {\n                val word = words.head\n                val maxUnique\
    \ = max.toSet.size\n                val wordUnique = word.toSet.size\n       \
    \         if (wordUnique > maxUnique) findMaxHelper(words.tail, word)\n      \
    \          else if (wordUnique == maxUnique) findMaxHelper(words.tail, if (word\
    \ < max) word else max)\n                else findMaxHelper(words.tail, max)\n\
    \            }\n        }\n        findMaxHelper(words, \"\")", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > max) {\n                max = uniqueChars.size\n       \
    \         maxWord = word\n            }\n        }\n        maxWord", "      \
    \  var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n  \
    \          val set = new HashSet[Char]\n            for (c <- word) {\n      \
    \          set += c\n            }\n            if (set.size > max) {\n      \
    \          max = set.size\n                maxWord = word\n            }\n   \
    \     }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val unique = word.toSet.size\n   \
    \         if (unique > max) {\n                max = unique\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        def findMax(words : List[String], max :\
    \ String) : String = {\n            if (words.isEmpty) max\n            else {\n\
    \                val word = words.head\n                val maxUnique = max.toSet.size\n\
    \                val wordUnique = word.toSet.size\n                if (wordUnique\
    \ > maxUnique) findMax(words.tail, word)\n                else if (wordUnique\
    \ == maxUnique) {\n                    if (word < max) findMax(words.tail, word)\n\
    \                    else findMax(words.tail, max)\n                }\n      \
    \          else findMax(words.tail, max)\n            }\n        }\n        findMax(words,\
    \ \"\")", "        var max = 0\n        var maxWord = \"\"\n        for (word\
    \ <- words) {\n            val unique = word.toSet.size\n            if (unique\
    \ > max) {\n                max = unique\n                maxWord = word\n   \
    \         }\n        }\n        maxWord", "        val max = words.maxBy(word\
    \ => word.toSet.size)\n        val maxSet = max.toSet\n        val maxCount =\
    \ maxSet.size\n        val maxWords = words.filter(word => word.toSet.size ==\
    \ maxCount)\n        maxWords.min", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > max) {\n                max = uniqueChars.size\n       \
    \         maxWord = word\n            }\n        }\n        maxWord", "      \
    \  var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n  \
    \          val set = new HashSet[Char]\n            for (c <- word) {\n      \
    \          set += c\n            }\n            if (set.size > max) {\n      \
    \          max = set.size\n                maxWord = word\n            }\n   \
    \     }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val unique = word.toSet.size\n   \
    \         if (unique > max) {\n                max = unique\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var result = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                result = word\n            }\n \
    \       }\n        result", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val unique = word.toSet.size\n   \
    \         if (unique > max) {\n                max = unique\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val unique = word.toSet.size\n  \
    \          if (unique > max) {\n                max = unique\n               \
    \ maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val set = new HashSet[Char]\n            for (c <- word) {\n               \
    \ set += c\n            }\n            if (set.size > max) {\n               \
    \ max = set.size\n                maxWord = word\n            }\n        }\n \
    \       maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val set = word.toSet\n            if (set.size\
    \ > max) {\n                max = set.size\n                maxWord = word\n \
    \           }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val set = new HashSet[Char]\n\
    \            for (c <- word) {\n                set += c\n            }\n    \
    \        if (set.size > max) {\n                max = set.size\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val uniqueChars = word.toSet\n            if (uniqueChars.size > max) {\n  \
    \              max = uniqueChars.size\n                maxWord = word\n      \
    \      }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        def findMax(words\
    \ : List[String], max : String) : String = {\n            if (words.isEmpty) max\n\
    \            else {\n                val word = words.head\n                val\
    \ maxUnique = max.toSet.size\n                val wordUnique = word.toSet.size\n\
    \                if (wordUnique > maxUnique) findMax(words.tail, word)\n     \
    \           else if (wordUnique == maxUnique) {\n                    if (word\
    \ < max) findMax(words.tail, word)\n                    else findMax(words.tail,\
    \ max)\n                }\n                else findMax(words.tail, max)\n   \
    \         }\n        }\n        findMax(words, \"\")", "        var max = 0\n\
    \        var result = \"\"\n        for (word <- words) {\n            val set\
    \ = new HashSet[Char]\n            for (c <- word) {\n                set += c\n\
    \            }\n            if (set.size > max) {\n                max = set.size\n\
    \                result = word\n            }\n        }\n        result", " \
    \       var max = 0\n        var result = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                result = word\n            }\n \
    \       }\n        result", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val set = new HashSet[Char]\n    \
    \        for (c <- word) {\n                set += c\n            }\n        \
    \    if (set.size > max) {\n                max = set.size\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", '        words.maxBy(word
    => word.toSet.size)', "        var max = 0\n        var maxWord = \"\"\n     \
    \   for (word <- words) {\n            val unique = word.toSet.size\n        \
    \    if (unique > max) {\n                max = unique\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val uniqueChars\
    \ = word.toSet\n            if (uniqueChars.size > max) {\n                max\
    \ = uniqueChars.size\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val set = new HashSet[Char]\n            for\
    \ (c <- word) {\n                set += c\n            }\n            if (set.size\
    \ > max) {\n                max = set.size\n                maxWord = word\n \
    \           }\n        }\n        maxWord", '        words.maxBy(word => word.toSet.size)',
  "        var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val set = new HashSet[Char]\n            for (c <- word) {\n    \
    \            set += c\n            }\n            if (set.size > max) {\n    \
    \            max = set.size\n                maxWord = word\n            }\n \
    \       }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val unique = word.toSet.size\n   \
    \         if (unique > max) {\n                max = unique\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        val max = words.map(x => (x, x.toSet.size)).maxBy(_._2)\n\
    \        max._1", "        val max = words.map(x => x.toSet.size).max\n      \
    \  words.filter(x => x.toSet.size == max).min", "        var max = 0\n       \
    \ var result = \"\"\n        for (word <- words) {\n            val set = new\
    \ HashSet[Char]\n            for (c <- word) {\n                set += c\n   \
    \         }\n            if (set.size > max) {\n                max = set.size\n\
    \                result = word\n            }\n        }\n        result", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val set = new HashSet[Char]\n            for (c <- word) {\n    \
    \            set += c\n            }\n            if (set.size > max) {\n    \
    \            max = set.size\n                maxWord = word\n            }\n \
    \       }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val set = new HashSet[Char]\n    \
    \        for (c <- word) set += c\n            if (set.size > max) {\n       \
    \         max = set.size\n                maxWord = word\n            }\n    \
    \    }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n \
    \       for (word <- words) {\n            val set = new HashSet[Char]\n     \
    \       for (c <- word) {\n                set += c\n            }\n         \
    \   if (set.size > max) {\n                max = set.size\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val set = new HashSet[Char]\n            for (c <- word) {\n    \
    \            set += c\n            }\n            if (set.size > max) {\n    \
    \            max = set.size\n                maxWord = word\n            }\n \
    \       }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val set = new HashSet[Char]\n    \
    \        for (c <- word) set += c\n            if (set.size > max) {\n       \
    \         max = set.size\n                maxWord = word\n            }\n    \
    \    }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n \
    \       for (word <- words) {\n            val set = new HashSet[Char]\n     \
    \       for (c <- word) {\n                set += c\n            }\n         \
    \   if (set.size > max) {\n                max = set.size\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val set\
    \ = word.toSet\n            if (set.size > max) {\n                max = set.size\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val uniqueChars = word.toSet\n  \
    \          if (uniqueChars.size > max) {\n                max = uniqueChars.size\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val set = new HashSet[Char]\n            for (c <- word) {\n    \
    \            set += c\n            }\n            if (set.size > max) {\n    \
    \            max = set.size\n                maxWord = word\n            }\n \
    \       }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val set = new HashSet[Char]\n    \
    \        for (c <- word) {\n                set += c\n            }\n        \
    \    if (set.size > max) {\n                max = set.size\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       def findMax(words : List[String], max : String) : String = {\n       \
    \     if (words.isEmpty) max\n            else {\n                val word = words.head\n\
    \                val maxUnique = max.toSet.size\n                val wordUnique\
    \ = word.toSet.size\n                if (wordUnique > maxUnique) findMax(words.tail,\
    \ word)\n                else if (wordUnique == maxUnique) {\n               \
    \     if (word < max) findMax(words.tail, word)\n                    else findMax(words.tail,\
    \ max)\n                }\n                else findMax(words.tail, max)\n   \
    \         }\n        }\n        findMax(words, \"\")", "        var max = 0\n\
    \        var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val unique = word.toSet.size\n  \
    \          if (unique > max) {\n                max = unique\n               \
    \ maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val uniqueChars = word.toSet\n            if (uniqueChars.size > max) {\n  \
    \              max = uniqueChars.size\n                maxWord = word\n      \
    \      }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > max) {\n                max = uniqueChars.size\n       \
    \         maxWord = word\n            }\n        }\n        maxWord", "      \
    \  var maxWord = words(0)\n        var maxUnique = words(0).toSet.size\n     \
    \   for (word <- words) {\n            val unique = word.toSet.size\n        \
    \    if (unique > maxUnique) {\n                maxUnique = unique\n         \
    \       maxWord = word\n            }\n        }\n        maxWord", "        var\
    \ max = words(0)\n        for (word <- words) {\n            if (word.distinct.length\
    \ > max.distinct.length) max = word\n            else if (word.distinct.length\
    \ == max.distinct.length && word < max) max = word\n        }\n        max", " \
    \       var max = \"\"\n        var maxCount = 0\n        for (word <- words)\
    \ {\n            val count = word.toSet.size\n            if (count > maxCount)\
    \ {\n                max = word\n                maxCount = count\n          \
    \  }\n        }\n        max", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            if (word.distinct.length > max) {\n\
    \                max = word.distinct.length\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val uniqueChars = word.toSet\n            if (uniqueChars.size > max) {\n  \
    \              max = uniqueChars.size\n                maxWord = word\n      \
    \      }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val set = Set[Char]()\n \
    \           for (c <- word) {\n                set += c\n            }\n     \
    \       if (set.size > max) {\n                max = set.size\n              \
    \  maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val set = word.toSet\n            if (set.size > max) {\n                max\
    \ = set.size\n                maxWord = word\n            }\n        }\n     \
    \   maxWord", "        var max = 0\n        var maxWord = \"\"\n        for (word\
    \ <- words) {\n            val unique = word.toSet.size\n            if (unique\
    \ > max) {\n                max = unique\n                maxWord = word\n   \
    \         }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val set = new HashSet[Char]\n            for\
    \ (c <- word) {\n                set += c\n            }\n            if (set.size\
    \ > max) {\n                max = set.size\n                maxWord = word\n \
    \           }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val set = new HashSet[Char]\n\
    \            for (c <- word) {\n                set += c\n            }\n    \
    \        if (set.size > max) {\n                max = set.size\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val set = new HashSet[Char]\n            for (c <- word) {\n               \
    \ set += c\n            }\n            if (set.size > max) {\n               \
    \ max = set.size\n                maxWord = word\n            }\n        }\n \
    \       maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > max) {\n                max = uniqueChars.size\n       \
    \         maxWord = word\n            }\n        }\n        maxWord", "      \
    \  var max = words(0)\n        for (i <- 1 until words.length) {\n           \
    \ if (words(i).distinct.length > max.distinct.length) max = words(i)\n       \
    \     else if (words(i).distinct.length == max.distinct.length) {\n          \
    \      if (words(i) < max) max = words(i)\n            }\n        }\n        max",
  "        var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val uniqueChars = word.toSet\n            if (uniqueChars.size >\
    \ max) {\n                max = uniqueChars.size\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        val max = words.map(x =>\
    \ x.toSet.size).max\n        words.filter(x => x.toSet.size == max).min", "  \
    \      var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val set = new HashSet[Char]\n   \
    \         for (c <- word) {\n                set += c\n            }\n       \
    \     if (set.size > max) {\n                max = set.size\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val unique\
    \ = word.toSet.size\n            if (unique > max) {\n                max = unique\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val unique = word.toSet.size\n  \
    \          if (unique > max) {\n                max = unique\n               \
    \ maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > max) {\n                max = uniqueChars.size\n       \
    \         maxWord = word\n            }\n        }\n        maxWord", "      \
    \  var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n  \
    \          val uniqueChars = word.toSet\n            if (uniqueChars.size > max)\
    \ {\n                max = uniqueChars.size\n                maxWord = word\n\
    \            }\n        }\n        maxWord", '        words.maxBy(word => word.toSet.size)',
  "        var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val uniqueChars = word.toSet\n            if (uniqueChars.size >\
    \ max) {\n                max = uniqueChars.size\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val set = new HashSet[Char]\n\
    \            for (c <- word) {\n                set += c\n            }\n    \
    \        if (set.size > max) {\n                max = set.size\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val unique = word.toSet.size\n            if\
    \ (unique > max) {\n                max = unique\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val unique = word.toSet.size\n            if\
    \ (unique > max) {\n                max = unique\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val wordSet = word.toSet\n\
    \            if (wordSet.size > max) {\n                max = wordSet.size\n \
    \               maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val unique = word.toSet.size\n  \
    \          if (unique > max) {\n                max = unique\n               \
    \ maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val set = Set[Char]()\n            for (c <-\
    \ word) {\n                set += c\n            }\n            if (set.size >\
    \ max) {\n                max = set.size\n                maxWord = word\n   \
    \         }\n        }\n        maxWord", "        var maxWord = \"\"\n      \
    \  var maxCount = 0\n        for (word <- words) {\n            val count = word.toSet.size\n\
    \            if (count > maxCount) {\n                maxCount = count\n     \
    \           maxWord = word\n            }\n        }\n        maxWord", "    \
    \    var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val uniqueChars = word.toSet\n  \
    \          if (uniqueChars.size > max) {\n                max = uniqueChars.size\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val uniqueChars = word.toSet\n  \
    \          if (uniqueChars.size > max) {\n                max = uniqueChars.size\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val set = new HashSet[Char]\n            for (c <- word) {\n    \
    \            set += c\n            }\n            if (set.size > max) {\n    \
    \            max = set.size\n                maxWord = word\n            }\n \
    \       }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val uniqueChars = word.toSet\n   \
    \         if (uniqueChars.size > max) {\n                max = uniqueChars.size\n\
    \                maxWord = word\n            }\n        }\n        maxWord", " \
    \       var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n\
    \            val unique = word.toSet.size\n            if (unique > max) {\n \
    \               max = unique\n                maxWord = word\n            }\n\
    \        }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\
    \n        for (word <- words) {\n            val unique = word.toSet.size\n  \
    \          if (unique > max) {\n                max = unique\n               \
    \ maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val set = new HashSet[Char]\n            for\
    \ (c <- word) {\n                set += c\n            }\n            if (set.size\
    \ > max) {\n                max = set.size\n                maxWord = word\n \
    \           }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val set = word.toSet\n\
    \            if (set.size > max) {\n                max = set.size\n         \
    \       maxWord = word\n            }\n        }\n        maxWord", "        var\
    \ max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n       \
    \     val set = new HashSet[Char]\n            for (c <- word) {\n           \
    \     set += c\n            }\n            if (set.size > max) {\n           \
    \     max = set.size\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = words(0)\n        for (i <- 1 until words.length)\
    \ {\n            if (words(i).toSet.size > max.toSet.size) max = words(i)\n  \
    \          else if (words(i).toSet.size == max.toSet.size && words(i) < max) max\
    \ = words(i)\n        }\n        max", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val set = new HashSet[Char]\n\
    \            for (c <- word) {\n                set += c\n            }\n    \
    \        if (set.size > max) {\n                max = set.size\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val set = word.toSet\n            if (set.size > max) {\n                max\
    \ = set.size\n                maxWord = word\n            }\n        }\n     \
    \   maxWord", "        var max = 0\n        var result = \"\"\n        for (word\
    \ <- words) {\n            val set = new HashSet[Char]\n            for (c <-\
    \ word) {\n                set += c\n            }\n            if (set.size >\
    \ max) {\n                max = set.size\n                result = word\n    \
    \        }\n        }\n        result", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ if (word.toSet.size > max) {\n                max = word.toSet.size\n      \
    \          maxWord = word\n            }\n        }\n        maxWord", "     \
    \   var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n \
    \           val unique = word.toSet.size\n            if (unique > max) {\n  \
    \              max = unique\n                maxWord = word\n            }\n \
    \       }\n        maxWord", "        var max = 0\n        var maxWord = \"\"\n\
    \        for (word <- words) {\n            val unique = word.toSet.size\n   \
    \         if (unique > max) {\n                max = unique\n                maxWord\
    \ = word\n            }\n        }\n        maxWord", "        var max = 0\n \
    \       var maxWord = \"\"\n        for (word <- words) {\n            val uniqueChars\
    \ = word.toSet\n            if (uniqueChars.size > max) {\n                max\
    \ = uniqueChars.size\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val unique = word.toSet.size\n            if\
    \ (unique > max) {\n                max = unique\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = \"\"\n        for (word <- words) {\n  \
    \          if (word.toSet.size > max.toSet.size) max = word\n            else\
    \ if (word.toSet.size == max.toSet.size && word < max) max = word\n        }\n\
    \        max", "        var max = 0\n        var maxWord = \"\"\n        for (word\
    \ <- words) {\n            val unique = word.toSet.size\n            if (unique\
    \ > max) {\n                max = unique\n                maxWord = word\n   \
    \         }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val set = new HashSet[Char]\n\
    \            for (c <- word) {\n                set += c\n            }\n    \
    \        if (set.size > max) {\n                max = set.size\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val set = new HashSet[Char]\n            for (c <- word) {\n               \
    \ set += c\n            }\n            if (set.size > max) {\n               \
    \ max = set.size\n                maxWord = word\n            }\n        }\n \
    \       maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > max) {\n                max = uniqueChars.size\n       \
    \         maxWord = word\n            }\n        }\n        maxWord", "      \
    \  var max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n  \
    \          val uniqueChars = word.toSet\n            if (uniqueChars.size > max)\
    \ {\n                max = uniqueChars.size\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ result = \"\"\n        for (word <- words) {\n            val set = word.toSet\n\
    \            if (set.size > max) {\n                max = set.size\n         \
    \       result = word\n            }\n        }\n        result", "        var\
    \ max = 0\n        var maxWord = \"\"\n        for (word <- words) {\n       \
    \     val uniqueChars = word.toSet\n            if (uniqueChars.size > max) {\n\
    \                max = uniqueChars.size\n                maxWord = word\n    \
    \        }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val uniqueChars = word.toSet\n            if (uniqueChars.size > max) {\n  \
    \              max = uniqueChars.size\n                maxWord = word\n      \
    \      }\n        }\n        maxWord", "        var max = 0\n        var maxWord\
    \ = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val chars = word.toSet\n            if (chars.size\
    \ > max) {\n                max = chars.size\n                maxWord = word\n\
    \            }\n        }\n        maxWord", "        var max = 0\n        var\
    \ maxWord = \"\"\n        for (word <- words) {\n            val unique = word.toSet.size\n\
    \            if (unique > max) {\n                max = unique\n             \
    \   maxWord = word\n            }\n        }\n        maxWord", "        var max\
    \ = 0\n        var maxWord = \"\"\n        for (word <- words) {\n           \
    \ val unique = word.toSet.size\n            if (unique > max) {\n            \
    \    max = unique\n                maxWord = word\n            }\n        }\n\
    \        maxWord", "        var max = 0\n        var result = \"\"\n        for\
    \ (word <- words) {\n            val set = new HashSet[Char]\n            for\
    \ (c <- word) {\n                set += c\n            }\n            if (set.size\
    \ > max) {\n                max = set.size\n                result = word\n  \
    \          }\n        }\n        result"]
stop_tokens:
- "\n    }\n"
