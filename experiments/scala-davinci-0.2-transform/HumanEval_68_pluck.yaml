name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given an array representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given array is empty,\
  \ return [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong,\
  \ 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2\
  \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
  \    // >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
  \ 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 3:\n    // >>> pluck((List[Long]()))\n    // (List[Long]())\n\
  \    // Example 4:\n    // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong,\
  \ 0l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n\
  \    // Explanation: 0 is the smallest value, but  there are two zeros,\n    //\
  \ so we will choose the first zero, which has the smallest index.\n    // Constraints:\n\
  \    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List()\n        else\
    \ List(min, index.toLong)", "        if (arr.isEmpty) return List[Long]()\n  \
    \      var min = Long.MaxValue\n        var minIndex = Long.MaxValue\n       \
    \ for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) <\
    \ min) {\n                min = arr(i)\n                minIndex = i\n       \
    \     }\n        }\n        if (min == Long.MaxValue) return List[Long]()\n  \
    \      return List[Long](min, minIndex)", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) List()\n        else List(min, minIndex)", "    \
    \    // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List()\n        else List(min,\
    \ minIndex)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = 10001\n        var index =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i).toInt\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List[Long]()\n     \
    \   else List[Long](min.toLong, index.toLong)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n    \
    \    else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)", "        var result = List[Long]()\n\
    \        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                index = i\n            }\n      \
    \  }\n        if (index != -1) {\n            result = List(min, index.toLong)\n\
    \        }\n        result", "        val evens = arr.filter(_ % 2 == 0)\n   \
    \     if (evens.isEmpty) List()\n        else {\n            val min = evens.min\n\
    \            val index = arr.indexOf(min)\n            List(min, index)\n    \
    \    }", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.length\
    \ == 0) return List[Long]()\n        val min = evens.min\n        val index =\
    \ arr.indexOf(min)\n        List[Long](min, index.toLong)", "        // Fill up\
    \ this function body\n        // You can add another function as well, if required\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List()\n        else List(min, minIndex)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) List()\n\
    \        else List(min, minIndex)", "        var min : Long = Long.MaxValue\n\
    \        var minIndex : Long = -1\n        for (i <- 0 until arr.length) {\n \
    \           if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n\
    \                minIndex = i\n            }\n        }\n        if (min == Long.MaxValue)\
    \ List()\n        else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var index = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List() else List(min, index)"]
stop_tokens:
- "\n    }\n"
