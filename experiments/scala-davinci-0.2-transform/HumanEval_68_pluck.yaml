name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given an array representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given array is empty,\
  \ return [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong,\
  \ 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2\
  \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
  \    // >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
  \ 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 3:\n    // >>> pluck((List[Long]()))\n    // (List[Long]())\n\
  \    // Example 4:\n    // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong,\
  \ 0l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n\
  \    // Explanation: 0 is the smallest value, but  there are two zeros,\n    //\
  \ so we will choose the first zero, which has the smallest index.\n    // Constraints:\n\
  \    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List()\n        else\
    \ List(min, index.toLong)", "        if (arr.isEmpty) return List[Long]()\n  \
    \      var min = Long.MaxValue\n        var minIndex = Long.MaxValue\n       \
    \ for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) <\
    \ min) {\n                min = arr(i)\n                minIndex = i\n       \
    \     }\n        }\n        if (min == Long.MaxValue) return List[Long]()\n  \
    \      return List[Long](min, minIndex)", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) List()\n        else List(min, minIndex)", "    \
    \    // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List()\n        else List(min,\
    \ minIndex)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = 10001\n        var index =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i).toInt\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List[Long]()\n     \
    \   else List[Long](min.toLong, index.toLong)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n    \
    \    else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)", "        var result = List[Long]()\n\
    \        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                index = i\n            }\n      \
    \  }\n        if (index != -1) {\n            result = List(min, index.toLong)\n\
    \        }\n        result", "        val evens = arr.filter(_ % 2 == 0)\n   \
    \     if (evens.isEmpty) List()\n        else {\n            val min = evens.min\n\
    \            val index = arr.indexOf(min)\n            List(min, index)\n    \
    \    }", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.length\
    \ == 0) return List[Long]()\n        val min = evens.min\n        val index =\
    \ arr.indexOf(min)\n        List[Long](min, index.toLong)", "        // Fill up\
    \ this function body\n        // You can add another function as well, if required\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List()\n        else List(min, minIndex)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) List()\n\
    \        else List(min, minIndex)", "        var min : Long = Long.MaxValue\n\
    \        var minIndex : Long = -1\n        for (i <- 0 until arr.length) {\n \
    \           if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n\
    \                minIndex = i\n            }\n        }\n        if (min == Long.MaxValue)\
    \ List()\n        else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var index = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List() else List(min, index)", " \
    \       // Fill up this function body\n        // You have to return a list of\
    \ Long\n        // You can add helper functions as needed\n        var minEven\
    \ = Long.MaxValue\n        var minEvenIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < minEven) {\n                minEven\
    \ = arr(i)\n                minEvenIndex = i\n            }\n        }\n     \
    \   if (minEvenIndex == -1) return List()\n        return List(minEven, minEvenIndex)",
  "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n     \
    \   var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (min == Long.MaxValue)\
    \ return List()\n        return List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ minEven = Long.MaxValue\n        var minEvenIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < minEven) {\n\
    \                minEven = arr(i)\n                minEvenIndex = i\n        \
    \    }\n        }\n        if (minEvenIndex == -1) return List[Long]()\n     \
    \   return List[Long](minEven, minEvenIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) List()\n\
    \        else List(min, index)", "        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index.toLong)", "        val evens = arr.filter(_ % 2 == 0)\n\
    \        if (evens.isEmpty) return List()\n        val min = evens.min\n     \
    \   val index = arr.indexOf(min)\n        List(min, index)", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        var minEven = Long.MaxValue\n        var minEvenIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < minEven) {\n                minEven = arr(i)\n                minEvenIndex\
    \ = i\n            }\n        }\n        if (minEven == Long.MaxValue) return\
    \ List()\n        return List(minEven, minEvenIndex)", "        if (arr.length\
    \ == 0) {\n            return List[Long]()\n        }\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) {\n            return List[Long]()\n        }\n        return List[Long](min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n     \
    \   var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var minEven = Long.MaxValue\n        var minEvenIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < minEven)\
    \ {\n                minEven = arr(i)\n                minEvenIndex = i\n    \
    \        }\n        }\n        if (minEvenIndex == -1) return List()\n       \
    \ return List(minEven, minEvenIndex)", "        val evens = arr.filter(_ % 2 ==\
    \ 0)\n        if (evens.isEmpty) List()\n        else {\n            val min =\
    \ evens.min\n            val index = arr.indexOf(min)\n            List(min, index)\n\
    \        }", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = 10001\n        var minIndex\
    \ = 10001\n        var flag = false\n        for (i <- 0 until arr.length) {\n\
    \            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i).toInt\n\
    \                minIndex = i\n                flag = true\n            }\n  \
    \      }\n        if (flag) {\n            List(min, minIndex)\n        } else\
    \ {\n            List()\n        }", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) List()\
    \ else List(min, minIndex)", "        if (arr.length == 0) return List()\n   \
    \     var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List()\n        else\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List()\n        else\
    \ List(min, index)", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) List()\n\
    \        else List(min, index)", "        // Fill up this function body\n    \
    \    // 'arr' is an array of non-negative integers\n        // 'arr' is a tree\
    \ branch\n        // Return a list of two elements, the first element is the smallest\
    \ even value,\n        // the second element is the index of the smallest even\
    \ value\n        // If there are no even values or the given array is empty, return\
    \ [].\n        // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n        var evens = List[Long]()\n\
    \        var index = 0\n        for (i <- arr) {\n            if (i % 2 == 0)\
    \ {\n                evens = evens :+ i\n            }\n            index += 1\n\
    \        }\n        if (evens.isEmpty) {\n            return List[Long]()\n  \
    \      }\n        var min = evens.min\n        var minIndex = arr.indexOf(min)\n\
    \        return List[Long](min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    val value = arr(i)\n            if (value % 2 == 0 && value < min) {\n  \
    \              min = value\n                minIndex = i\n            }\n    \
    \    }\n        if (minIndex == -1) List() else List(min, minIndex)", "      \
    \  val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = 10001\n        var index = -1\n        for (i <- 0 until arr.length) {\n \
    \           if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i).toInt\n\
    \                index = i\n            }\n        }\n        if (index == -1)\
    \ List()\n        else List(min, index)", "        var min = Long.MaxValue\n \
    \       var minIndex = -1\n        for (i <- 0 until arr.length) {\n         \
    \   if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n   \
    \             minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ return List[Long]()\n        return List[Long](min, minIndex.toLong)", "   \
    \     if (arr.length == 0) return List[Long]()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.length == 0) return List[Long]()\n        val min\
    \ = evens.min\n        val index = arr.indexOf(min)\n        List[Long](min, index.toLong)",
  "        // Fill up this function body\n        // 'pluck' has one parameter:\n\
    \        // arr: List[Long]\n        // 'pluck' must return a List[Long]\n   \
    \     var result : List[Long] = List()\n        var min : Long = Long.MaxValue\n\
    \        var index : Long = -1\n        for (i <- 0 until arr.length) {\n    \
    \        if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n\
    \                index = i\n            }\n        }\n        if (index != -1)\
    \ {\n            result = List(min, index)\n        }\n        return result",
  "        if (arr.isEmpty) return List[Long]()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List[Long]()\n        return List[Long](min, minIndex.toLong)", " \
    \       var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) List() else List(min, index)", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List()\n        else List(min, minIndex)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List[Long]()\n        else List[Long](min,\
    \ index)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List()\n        else\
    \ List(min, index)", "        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) List()\n        else\
    \ List(min, minIndex)", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            val x = arr(i)\n  \
    \          if (x % 2 == 0 && x < min) {\n                min = x\n           \
    \     minIndex = i\n            }\n        }\n        if (minIndex == -1) List()\
    \ else List(min, minIndex)", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) List()\n\
    \        else List(min, index)", "        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List[Long]()\n  \
    \      else List[Long](min, minIndex)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.isEmpty) {\n            List()\n        } else {\n\
    \            val min = evens.min\n            val index = arr.indexOf(min)\n \
    \           List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var min = 10001\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i).toInt\n                index = i\n            }\n        }\n        if\
    \ (index == -1) List[Long]()\n        else List[Long](min.toLong, index.toLong)",
  "        // Write your code here\n        return List[Long]()", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List()\n        else List(min, minIndex)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n    \
    \    else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List[Long]()\n     \
    \   else List[Long](min, index.toLong)", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        if (arr.isEmpty)\
    \ return List[Long]()\n        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) return List[Long]()\n\
    \        return List[Long](min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List[Long]()\n        else List[Long](min, index)", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List()\n        else List(min, minIndex)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = 10001\n        var index = -1\n    \
    \    for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i).toInt\n                index = i\n  \
    \          }\n        }\n        if (index == -1) List()\n        else List(min,\
    \ index)", "        var min = Long.MaxValue\n        var index = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min)\
    \ {\n                min = arr(i)\n                index = i\n            }\n\
    \        }\n        if (index == -1) List() else List(min, index.toLong)", " \
    \       // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List()\n        else List(min, index.toLong)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List()\n        else\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List()\n        else\
    \ List(min, minIndex)", "        val evens = arr.filter(x => x % 2 == 0)\n   \
    \     if (evens.isEmpty) return List()\n        val min = evens.min\n        val\
    \ index = arr.indexOf(min)\n        return List(min, index.toLong)", "       \
    \ var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) List[Long]()\n        else List[Long](min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List()\n        else List(min, minIndex)",
  "        if (arr.isEmpty) return List[Long]()\n        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.isEmpty) return List[Long]()\n        val\
    \ min = evens.min\n        val index = arr.indexOf(min)\n        return List[Long](min,\
    \ index.toLong)", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        if (arr.isEmpty) return List[Long]()\n\
    \        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List[Long]()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List[Long](min, index.toLong)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.isEmpty) List()\n        else {\n            val min\
    \ = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var min = Long.MaxValue\n        var minIndex = 0\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (min == Long.MaxValue) List()\n        else List(min, minIndex)",
  "        var minEven = Long.MaxValue\n        var minEvenIndex = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < minEven)\
    \ {\n                minEven = arr(i)\n                minEvenIndex = i\n    \
    \        }\n        }\n        if (minEvenIndex == -1) List()\n        else List(minEven,\
    \ minEvenIndex)", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        var min = 10001\n        var\
    \ index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i).toInt\n          \
    \      index = i\n            }\n        }\n        if (index == -1) List()\n\
    \        else List(min, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        if (evens.length == 0) return List[Long]()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List[Long](min, index.toLong)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) List[Long]()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var evens = ListBuffer[Long]()\n        var evensIndex = ListBuffer[Long]()\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0) {\n\
    \                evens += arr(i)\n                evensIndex += i\n          \
    \  }\n        }\n        if (evens.length == 0) {\n            return List[Long]()\n\
    \        }\n        var min = evens(0)\n        var minIndex = evensIndex(0)\n\
    \        for (i <- 1 until evens.length) {\n            if (evens(i) < min) {\n\
    \                min = evens(i)\n                minIndex = evensIndex(i)\n  \
    \          }\n        }\n        return List[Long](min, minIndex)", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var min = Long.MaxValue\n        var index = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List()\n        else List(min, index)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List()\n        else\
    \ List(min, minIndex)", "        if (arr.isEmpty) return List[Long]()\n      \
    \  val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List[Long]()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        return\
    \ List(min, index)", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var min = 10001l\n      \
    \  var min_index = 10001\n        for (i <- 0 until arr.length) {\n          \
    \  if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n    \
    \            min_index = i\n            }\n        }\n        if (min == 10001)\
    \ {\n            List[Long]()\n        } else {\n            List[Long](min, min_index)\n\
    \        }", "        if (arr.isEmpty) return List[Long]()\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List[Long]()\n \
    \       val min = evens.min\n        val index = arr.indexOf(min)\n        List[Long](min,\
    \ index.toLong)", "        if (arr.isEmpty) return List[Long]()\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List[Long]()\n        return List[Long](min, minIndex.toLong)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List()\n        else List(min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List()\n        else List(min, minIndex.toLong)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.isEmpty) return List[Long]()\n  \
    \      var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) return List[Long]()\n        return List[Long](min,\
    \ minIndex.toLong)", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var result = List[Long]()\n\
    \        var min = Long.MaxValue\n        var index = 0\n        var i = 0\n \
    \       for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (min != Long.MaxValue) {\n            result = List(min,\
    \ index)\n        }\n        return result", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ if (arr.isEmpty) return List[Long]()\n        val evens = arr.filter(_ % 2 ==\
    \ 0)\n        if (evens.isEmpty) return List[Long]()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List[Long](min, index.toLong)",
  "        var min = 10001l.toLong\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) List()\n        else List(min, index.toLong)", "    \
    \    // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List()\n        else List(min, index)",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        // Fill up this function body\n\
    \        // `0` is the place holder for the smallest even value\n        // `1`\
    \ is the place holder for the index of the smallest even value\n        List[Long](0l.toLong,\
    \ 1l.toLong)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List[Long]()\n  \
    \      else List[Long](min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ List()\n        else List(min, minIndex)", "        // Write your code here\n\
    \        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                index = i\n            }\n      \
    \  }\n        if (index == -1) List()\n        else List(min, index)", "     \
    \   if (arr.isEmpty) return List[Long]()\n        var min : Long = Long.MaxValue\n\
    \        var minIndex : Long = -1\n        for (i <- 0 until arr.length) {\n \
    \           if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n\
    \                minIndex = i\n            }\n        }\n        if (min == Long.MaxValue)\
    \ return List[Long]()\n        return List[Long](min, minIndex)", "        if\
    \ (arr.isEmpty) return List[Long]()\n        var minEven = Long.MaxValue\n   \
    \     var minEvenIndex = -1\n        for (i <- 0 until arr.length) {\n       \
    \     if (arr(i) % 2 == 0 && arr(i) < minEven) {\n                minEven = arr(i)\n\
    \                minEvenIndex = i\n            }\n        }\n        if (minEvenIndex\
    \ == -1) return List[Long]()\n        return List[Long](minEven, minEvenIndex)",
  "        // Fill up this function body\n        // 'pluck' has one parameter:\n\
    \        // arr: List[Long]\n        // 'pluck' must return a List[Long]\n   \
    \     var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) List()\n        else List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List()\n        else List(min, minIndex)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var minEven = -1\n        var minEvenIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0) {\n                if (minEven == -1 ||\
    \ arr(i) < minEven) {\n                    minEven = arr(i).toInt\n          \
    \          minEvenIndex = i\n                }\n            }\n        }\n   \
    \     if (minEven == -1) List()\n        else List(minEven, minEvenIndex)", " \
    \       var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List()\n        else List(min, minIndex)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        arr.zipWithIndex.filter(x => x._1 % 2 == 0).sortBy(x\
    \ => (x._1, x._2)).headOption.map(x => List(x._1, x._2)).getOrElse(List())", " \
    \       var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List()\n        else List(min, minIndex)",
  "        // Fill up this function body\n        // `0` is the place holder for the\
    \ smallest even value\n        // `1` is the place holder for the index of the\
    \ smallest even value\n        var result = List[Long](0l.toLong, 1l.toLong)\n\
    \        var smallestEvenValue = Long.MaxValue\n        var smallestEvenValueIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < smallestEvenValue) {\n                smallestEvenValue = arr(i)\n\
    \                smallestEvenValueIndex = i\n            }\n        }\n      \
    \  if (smallestEvenValueIndex != -1) {\n            result = List[Long](smallestEvenValue,\
    \ smallestEvenValueIndex.toLong)\n        }\n        result", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                index = i\n            }\n      \
    \  }\n        if (index == -1) List()\n        else List(min, index)", "     \
    \   var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) List()\n        else List(min, minIndex)", "    \
    \    // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var min = 1000000000000l\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) List()\n        else\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List()\n        else\
    \ List(min, minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if\
    \ (evens.isEmpty) List()\n        else {\n            val min = evens.min\n  \
    \          val idx = arr.indexOf(min)\n            List(min, idx)\n        }",
  "        // Write your code here\n        return List[Long]()", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n\
    \            val min = evens.min\n            val idx = arr.indexOf(min)\n   \
    \         List(min, idx)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            val x = arr(i)\n            if (x % 2 == 0 && x < min) {\n  \
    \              min = x\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) List() else List(min, minIndex)", "        // Write\
    \ your code here\n        var min = Long.MaxValue\n        var index = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) return List()\n        return List(min,\
    \ index)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List[Long]()\n  \
    \      else List[Long](min, minIndex)", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.isEmpty) List[Long]()\n        else {\n           \
    \ val min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List() else List(min, index)", " \
    \       val even = arr.filter(_ % 2 == 0)\n        if (even.isEmpty) List()\n\
    \        else {\n            val min = even.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        val evens = arr.filter(x =>\
    \ x % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        return List(min, index.toLong)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List()\n        else List(min, index)",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var index = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min)\
    \ {\n                min = arr(i)\n                index = i\n            }\n\
    \        }\n        if (index == -1) return List()\n        else return List(min,\
    \ index)", "        // Write your code here\n        return List[Long]()", " \
    \       // Fill up this function body\n        // You have to return a list of\
    \ Long\n        // The first element should be the smallest even value\n     \
    \   // The second element should be the index of the smallest even value\n   \
    \     // If there are no even values or the given array is empty, return List[Long]()\n\
    \        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                index = i\n            }\n      \
    \  }\n        if (index == -1) List[Long]()\n        else List[Long](min, index)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List()\n        else List(min, minIndex)",
  "        if (arr.length == 0) return List[Long]()\n        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) return\
    \ List[Long]()\n        List[Long](min, index.toLong)", "        var min = -1l\n\
    \        var minIndex = -1\n        var index = 0\n        for (i <- arr) {\n\
    \            if (i % 2 == 0) {\n                if (min == -1 || i < min) {\n\
    \                    min = i\n                    minIndex = index\n         \
    \       }\n            }\n            index += 1\n        }\n        if (min ==\
    \ -1) List()\n        else List(min, minIndex)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        // Fill up this function body\n\
    \        // 'pluck' has one parameter:\n        // arr: List[Long]\n        //\
    \ 'pluck' must return a List[Long]\n        if (arr.isEmpty) {\n            return\
    \ List[Long]()\n        }\n        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ List[Long]()\n        }\n        return List[Long](min, minIndex)", "      \
    \  // Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var min = Long.MaxValue\n        var index = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List()\n        else List(min, index)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        return List[Long]()", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.isEmpty) {\n            List[Long]()\n   \
    \     } else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List[Long](min, index.toLong)\n        }", "        // Write your\
    \ code here\n        return List[Long]()", "        var minEven = Long.MaxValue\n\
    \        var minEvenIndex = -1\n        for (i <- 0 until arr.length) {\n    \
    \        if (arr(i) % 2 == 0 && arr(i) < minEven) {\n                minEven =\
    \ arr(i)\n                minEvenIndex = i\n            }\n        }\n       \
    \ if (minEvenIndex == -1) return List()\n        return List(minEven, minEvenIndex)",
  "        var minEven = Long.MaxValue\n        var minEvenIndex = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < minEven)\
    \ {\n                minEven = arr(i)\n                minEvenIndex = i\n    \
    \        }\n        }\n        if (minEvenIndex == -1) List()\n        else List(minEven,\
    \ minEvenIndex)", "        if (arr.isEmpty) return List()\n        val evens =\
    \ arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val\
    \ min = evens.min\n        val index = arr.indexOf(min)\n        List(min, index)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var result = List[Long]()\n        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index != -1) {\n\
    \            result = List(min, index)\n        }\n        result", "        //\
    \ Write your code here\n        return List[Long]()", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = arr.filter(x => x % 2 == 0).min\n        if (min == Long.MaxValue) return\
    \ List()\n        var idx = arr.indexOf(min)\n        List(min, idx)", "     \
    \   var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) List()\n        else List(min, minIndex)", "    \
    \    var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) List() else List(min, minIndex)", "        var result\
    \ : List[Long] = List()\n        var minEven : Long = Long.MaxValue\n        var\
    \ minEvenIndex : Long = Long.MaxValue\n        for (i <- 0 until arr.length) {\n\
    \            if (arr(i) % 2 == 0 && arr(i) < minEven) {\n                minEven\
    \ = arr(i)\n                minEvenIndex = i\n            }\n        }\n     \
    \   if (minEven != Long.MaxValue) {\n            result = List(minEven, minEvenIndex)\n\
    \        }\n        return result", "        var min = Long.MaxValue\n       \
    \ var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List()\n        else\
    \ List(min, minIndex)", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var min = 10001\n   \
    \     var index = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i).toInt\n  \
    \              index = i\n            }\n        }\n        if (index == -1) List[Long]()\n\
    \        else List[Long](min.toLong, index.toLong)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List()\n        else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) List()\
    \ else List(min, index.toLong)", "        // Fill up this function body\n    \
    \    // You can add another function as well, if required\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.isEmpty) List[Long]()\n        else {\n  \
    \          val min = evens.min\n            val index = arr.indexOf(min)\n   \
    \         List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List()\n        else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List[Long]()\n        return List[Long](min, minIndex)", "      \
    \  // Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var result = List[Long]()\n        var min = 10001\n  \
    \      var index = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i).toInt\n  \
    \              index = i\n            }\n        }\n        if (index != -1) {\n\
    \            result = List(min, index)\n        }\n        return result", " \
    \       var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List() else List(min, minIndex)", "   \
    \     var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            val v = arr(i)\n            if (v % 2 == 0\
    \ && v < min) {\n                min = v\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List()\n        else List(min, minIndex.toLong)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        if (arr.isEmpty) {\n            return List()\n\
    \        }\n        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) {\n            return List()\n\
    \        }\n        return List(min, minIndex)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n        \
    \    val min = evens.min\n            val index = arr.indexOf(min)\n         \
    \   List(min, index)\n        }", "        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ {\n            List[Long]()\n        } else {\n            val min = evens.min\n\
    \            val index = arr.indexOf(min)\n            List[Long](min, index.toLong)\n\
    \        }", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var evens = List[Long]()\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0) {\n          \
    \      evens = evens :+ arr(i)\n            }\n        }\n        if (evens.length\
    \ == 0) {\n            return List[Long]()\n        }\n        var min = evens(0)\n\
    \        var minIndex = 0\n        for (i <- 0 until evens.length) {\n       \
    \     if (evens(i) < min) {\n                min = evens(i)\n                minIndex\
    \ = i\n            }\n        }\n        return List[Long](min, minIndex.toLong)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List[Long]()\n        else List[Long](min,\
    \ index.toLong)", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        var result = List[Long]()\n \
    \       var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index != -1) {\n            result = List(min, index.toLong)\n   \
    \     }\n        result", "        var min = Long.MaxValue\n        var index\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                index =\
    \ i\n            }\n        }\n        if (index == -1) List() else List(min,\
    \ index)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List()\n        else\
    \ List(min, index)", "        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) return List()\n   \
    \     return List(min, minIndex)", "        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List()\n        else\
    \ List(min, minIndex)", "        if (arr.isEmpty) {\n            return List[Long]()\n\
    \        }\n        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) {\n            return List[Long]()\n\
    \        }\n        return List[Long](min, minIndex.toLong)", "        var min\
    \ = 10001l.toLong\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index.toLong)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List()\n        else List(min, index)"]
stop_tokens:
- "\n    }\n"
