name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    //\
  \ (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    //\
  \ (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        var l = List[Long]()\n        for (i <- l1) {\n           \
    \ if (l2.contains(i)) {\n                l = l :+ i\n            }\n        }\n\
    \        l.sorted", "        val l1s = l1.sorted\n        val l2s = l2.sorted\n\
    \        val l1l = l1s.length\n        val l2l = l2s.length\n        var i = 0\n\
    \        var j = 0\n        var result = List[Long]()\n        while (i < l1l\
    \ && j < l2l) {\n            if (l1s(i) == l2s(j)) {\n                result =\
    \ result :+ l1s(i)\n                i += 1\n                j += 1\n         \
    \   } else if (l1s(i) < l2s(j)) {\n                i += 1\n            } else\
    \ {\n                j += 1\n            }\n        }\n        result", "    \
    \    // Fill in the code here.\n        var l3 = List[Long]()\n        for (i\
    \ <- l1) {\n            if (l2.contains(i)) {\n                l3 = l3 :+ i\n\
    \            }\n        }\n        return l3.distinct.sorted", "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val set3 = set1.intersect(set2)\n        set3.toList.sorted", "     \
    \   val l1s = l1.sorted\n        val l2s = l2.sorted\n        val l1l = l1s.length\n\
    \        val l2l = l2s.length\n        var i = 0\n        var j = 0\n        var\
    \ result = List[Long]()\n        while (i < l1l && j < l2l) {\n            if\
    \ (l1s(i) == l2s(j)) {\n                result = result :+ l1s(i)\n          \
    \      i += 1\n                j += 1\n            } else if (l1s(i) < l2s(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        result", "        val h = new HashMap[Long, Int]\n\
    \        for (i <- l1) {\n            if (h.contains(i)) h(i) += 1\n         \
    \   else h(i) = 1\n        }\n        for (i <- l2) {\n            if (h.contains(i))\
    \ h(i) += 1\n            else h(i) = 1\n        }\n        val result = new ListBuffer[Long]\n\
    \        for ((k, v) <- h) {\n            if (v == 2) result += k\n        }\n\
    \        result.toList.sorted", "        val m1 = l1.groupBy(identity).mapValues(_.size)\n\
    \        val m2 = l2.groupBy(identity).mapValues(_.size)\n        val m = m1.keySet.intersect(m2.keySet).map(x\
    \ => (x, min(m1(x), m2(x)))).toMap\n        m.flatMap(x => List.fill(x._2)(x._1)).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        val s3 = s1.intersect(s2)\n        s3.toList.sorted", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        (set1 & set2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val l3 = l1.intersect(l2)\n        l3.sorted",
  "        val l1s = l1.sorted\n        val l2s = l2.sorted\n        var i = 0\n \
    \       var j = 0\n        var result = List[Long]()\n        while (i < l1s.length\
    \ && j < l2s.length) {\n            if (l1s(i) == l2s(j)) {\n                result\
    \ = l1s(i) :: result\n                i += 1\n                j += 1\n       \
    \     } else if (l1s(i) < l2s(j)) {\n                i += 1\n            } else\
    \ {\n                j += 1\n            }\n        }\n        result.reverse",
  "        var result = List[Long]()\n        var l1s = l1.sorted\n        var l2s\
    \ = l2.sorted\n        while (!l1s.isEmpty && !l2s.isEmpty) {\n            if\
    \ (l1s.head == l2s.head) {\n                result = l1s.head :: result\n    \
    \            l1s = l1s.tail\n                l2s = l2s.tail\n            } else\
    \ if (l1s.head < l2s.head) {\n                l1s = l1s.tail\n            } else\
    \ {\n                l2s = l2s.tail\n            }\n        }\n        result.reverse",
  "        val l = l1.intersect(l2)\n        l.sorted", "        val l3 = l1.intersect(l2)\n\
    \        l3.sorted", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        (set1 & set2).toList.sorted", "        val s1 = l1.toSet\n        val\
    \ s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n        s3.toList.sorted",
  "        val l1s = l1.sorted\n        val l2s = l2.sorted\n        var common =\
    \ List[Long]()\n        var i = 0\n        var j = 0\n        while (i < l1s.length\
    \ && j < l2s.length) {\n            if (l1s(i) == l2s(j)) {\n                common\
    \ = common :+ l1s(i)\n                i += 1\n                j += 1\n       \
    \     } else if (l1s(i) < l2s(j)) {\n                i += 1\n            } else\
    \ {\n                j += 1\n            }\n        }\n        common", "    \
    \    val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val l1s = l1.sorted\n        val l2s = l2.sorted\n\
    \        var i = 0\n        var j = 0\n        var result = List[Long]()\n   \
    \     while (i < l1s.length && j < l2s.length) {\n            if (l1s(i) == l2s(j))\
    \ {\n                result = result :+ l1s(i)\n                i += 1\n     \
    \           j += 1\n            } else if (l1s(i) < l2s(j)) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        result", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        val s3 = s1 & s2\n        s3.toList.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        (set1 & set2).toList.sorted", "        val\
    \ l3 = l1.intersect(l2)\n        l3.sorted", '        l1.intersect(l2).sorted',
  "        val l = l1.intersect(l2)\n        l.sorted", "        var result = List[Long]()\n\
    \        var l1_set = Set[Long]()\n        var l2_set = Set[Long]()\n        for\
    \ (i <- l1) l1_set += i\n        for (i <- l2) l2_set += i\n        for (i <-\
    \ l1_set) if (l2_set.contains(i)) result = result :+ i\n        result.sorted",
  "        val l1s = l1.sorted\n        val l2s = l2.sorted\n        var result =\
    \ List[Long]()\n        var i = 0\n        var j = 0\n        while (i < l1s.length\
    \ && j < l2s.length) {\n            if (l1s(i) == l2s(j)) {\n                result\
    \ = l1s(i) :: result\n                i += 1\n                j += 1\n       \
    \     } else if (l1s(i) < l2s(j)) {\n                i += 1\n            } else\
    \ {\n                j += 1\n            }\n        }\n        result.reverse",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val l1s = l1.sorted\n        val l2s\
    \ = l2.sorted\n        val l1m = l1s.toSet\n        val l2m = l2s.toSet\n    \
    \    val l1l = l1s.length\n        val l2l = l2s.length\n        var i = 0\n \
    \       var j = 0\n        var result = List[Long]()\n        while (i < l1l &&\
    \ j < l2l) {\n            if (l1s(i) == l2s(j)) {\n                result = l1s(i)\
    \ :: result\n                i += 1\n                j += 1\n            } else\
    \ if (l1s(i) < l2s(j)) {\n                i += 1\n            } else {\n     \
    \           j += 1\n            }\n        }\n        result.reverse", "     \
    \   val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", "        var l3 = List[Long]()\n        var l4 =\
    \ List[Long]()\n        for (i <- l1) {\n            if (l2.contains(i)) {\n \
    \               l3 = i :: l3\n            }\n        }\n        for (i <- l3)\
    \ {\n            if (!l4.contains(i)) {\n                l4 = i :: l4\n      \
    \      }\n        }\n        l4.sorted", "        val s1 = l1.toSet\n        val\
    \ s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        (set1 & set2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val l1s = l1.sorted\n        val l2s = l2.sorted\n        val l1m = l1s.toSet\n\
    \        val l2m = l2s.toSet\n        val l1l = l1s.length\n        val l2l =\
    \ l2s.length\n        val l1i = l1s.iterator\n        val l2i = l2s.iterator\n\
    \        var l1c = l1i.next\n        var l2c = l2i.next\n        var l1n = if\
    \ (l1i.hasNext) l1i.next else -1\n        var l2n = if (l2i.hasNext) l2i.next\
    \ else -1\n        var result = List[Long]()\n        while (l1c != -1 && l2c\
    \ != -1) {\n            if (l1c == l2c) {\n                result = l1c :: result\n\
    \                l1c = l1n\n                l2c = l2n\n                l1n = if\
    \ (l1i.hasNext) l1i.next else -1\n                l2n = if (l2i.hasNext) l2i.next\
    \ else -1\n            } else if (l1c < l2c) {\n                l1c = l1n\n  \
    \              l1n = if (l1i.hasNext) l1i.next else -1\n            } else {\n\
    \                l2c = l2n\n                l2n = if (l2i.hasNext) l2i.next else\
    \ -1\n            }\n        }\n        result.reverse", '        l1.intersect(l2).sorted',
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", '        return l1.intersect(l2).sorted', '        l1.intersect(l2).sorted',
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", '        l1.intersect(l2).sorted', "        val\
    \ s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        var result = new ListBuffer[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1(i) ==\
    \ l2(j)) {\n                result += l1(i)\n                i += 1\n        \
    \        j += 1\n            } else if (l1(i) < l2(j)) {\n                i +=\
    \ 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return result.toList", "        val l1s = l1.sorted\n        val l2s\
    \ = l2.sorted\n        var i = 0\n        var j = 0\n        var result = List[Long]()\n\
    \        while (i < l1s.length && j < l2s.length) {\n            if (l1s(i) ==\
    \ l2s(j)) {\n                result = l1s(i) :: result\n                i += 1\n\
    \                j += 1\n            } else if (l1s(i) < l2s(j)) {\n         \
    \       i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        result.reverse", "        val m1 = l1.groupBy(identity).mapValues(_.size)\n\
    \        val m2 = l2.groupBy(identity).mapValues(_.size)\n        val m = m1.keySet.intersect(m2.keySet).map(k\
    \ => (k, min(m1(k), m2(k)))).toMap\n        m.flatMap(p => List.fill(p._2)(p._1)).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", '        l1.intersect(l2).sorted', "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n \
    \       s3.toList.sorted", "        val l = l1.intersect(l2)\n        l.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", "        val set1 = l1.toSet\n        val set2 =\
    \ l2.toSet\n        val set3 = set1.intersect(set2)\n        set3.toList.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", '        l1.intersect(l2).sorted', "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        (set1 & set2).toList.sorted",
  "        val l1s = l1.sorted\n        val l2s = l2.sorted\n        var l1i = 0\n\
    \        var l2i = 0\n        var result = List[Long]()\n        while (l1i <\
    \ l1s.length && l2i < l2s.length) {\n            if (l1s(l1i) == l2s(l2i)) {\n\
    \                result = result :+ l1s(l1i)\n                l1i += 1\n     \
    \           l2i += 1\n            } else if (l1s(l1i) < l2s(l2i)) {\n        \
    \        l1i += 1\n            } else {\n                l2i += 1\n          \
    \  }\n        }\n        result", "        val l1Set = l1.toSet\n        val l2Set\
    \ = l2.toSet\n        val l3Set = l1Set.intersect(l2Set)\n        l3Set.toList.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", "        val l1Set = l1.toSet\n        val l2Set\
    \ = l2.toSet\n        val commonSet = l1Set.intersect(l2Set)\n        commonSet.toList.sorted",
  '        l1.intersect(l2).sorted', '        l1.intersect(l2).sorted', "        val\
    \ l = l1.intersect(l2)\n        l.sorted", "        val m1 = l1.groupBy(identity).mapValues(_.size)\n\
    \        val m2 = l2.groupBy(identity).mapValues(_.size)\n        val m = m1.keySet.intersect(m2.keySet).map(k\
    \ => (k, min(m1(k), m2(k)))).toMap\n        m.flatMap(p => List.fill(p._2)(p._1)).toList.sorted",
  "        val m = new HashMap[Long, Int]\n        for (i <- l1) {\n            if\
    \ (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        for\
    \ (i <- l2) {\n            if (m.contains(i)) m(i) += 1\n            else m(i)\
    \ = 1\n        }\n        val l = new ListBuffer[Long]\n        for ((k, v) <-\
    \ m) {\n            if (v == 2) l += k\n        }\n        l.toList.sorted", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", '        l1.intersect(l2).sorted', "      \
    \  val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1 &\
    \ set2\n        set3.toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        (set1 & set2).toList.sorted",
  "        val l = l1.intersect(l2)\n        l.sorted", "        val l1s = l1.sorted\n\
    \        val l2s = l2.sorted\n        var l1i = 0\n        var l2i = 0\n     \
    \   var result = List[Long]()\n        while (l1i < l1s.length && l2i < l2s.length)\
    \ {\n            if (l1s(l1i) == l2s(l2i)) {\n                result = l1s(l1i)\
    \ :: result\n                l1i += 1\n                l2i += 1\n            }\
    \ else if (l1s(l1i) < l2s(l2i)) {\n                l1i += 1\n            } else\
    \ {\n                l2i += 1\n            }\n        }\n        result.reverse",
  '        l1.intersect(l2).sorted', "        val s1 = l1.toSet\n        val s2 =\
    \ l2.toSet\n        val s3 = s1 & s2\n        s3.toList.sorted", "        val\
    \ s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1 & s2\n       \
    \ s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n \
    \       val s3 = s1.intersect(s2)\n        s3.toList.sorted", "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        var result = List[Long]()\n        var map = Map[Long, Long]()\n      \
    \  for (i <- l1) {\n            if (map.contains(i)) map(i) += 1\n           \
    \ else map(i) = 1\n        }\n        for (i <- l2) {\n            if (map.contains(i))\
    \ {\n                if (map(i) == 1) {\n                    result = result :+\
    \ i\n                    map -= i\n                }\n                else map(i)\
    \ -= 1\n            }\n        }\n        result.sorted", "        val set1 =\
    \ l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", "        val set1 = l1.toSet\n        val set2 =\
    \ l2.toSet\n        val set3 = set1.intersect(set2)\n        set3.toList.sorted",
  "        var result = List[Long]()\n        var map = Map[Long, Int]()\n       \
    \ for (i <- l1) {\n            if (map.contains(i)) map(i) += 1\n            else\
    \ map(i) = 1\n        }\n        for (i <- l2) {\n            if (map.contains(i))\
    \ {\n                map(i) -= 1\n                if (map(i) == 0) {\n       \
    \             result = i :: result\n                    map -= i\n           \
    \     }\n            }\n        }\n        result.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n        s3.toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val m1 = l1.groupBy(identity).mapValues(_.size)\n\
    \        val m2 = l2.groupBy(identity).mapValues(_.size)\n        val m = m1.keySet.intersect(m2.keySet).map(x\
    \ => (x, min(m1(x), m2(x)))).toMap\n        m.toList.flatMap(x => List.fill(x._2)(x._1)).sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        return s3.toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        val s3 = s1.intersect(s2)\n        s3.toList.sorted", " \
    \       val l1s = l1.sorted\n        val l2s = l2.sorted\n        var l1i = 0\n\
    \        var l2i = 0\n        var result = List[Long]()\n        while (l1i <\
    \ l1s.length && l2i < l2s.length) {\n            if (l1s(l1i) == l2s(l2i)) {\n\
    \                result = l1s(l1i) :: result\n                l1i += 1\n     \
    \           l2i += 1\n            } else if (l1s(l1i) < l2s(l2i)) {\n        \
    \        l1i += 1\n            } else {\n                l2i += 1\n          \
    \  }\n        }\n        result.reverse", "        val s1 = l1.toSet\n       \
    \ val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n        s3.toList.sorted",
  '        return (l1.toSet & l2.toSet).toList.sorted', '        l1.intersect(l2).sorted',
  "        val l = l1.intersect(l2)\n        l.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", '        l1.intersect(l2).sorted',
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s = s1.intersect(s2)\n\
    \        s.toList.sorted", "        val l3 = l1.intersect(l2)\n        l3.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        var l = List[Long]()\n        var s = Set[Long]()\n        for (i <- l1)\
    \ {\n            if (l2.contains(i)) {\n                if (!s.contains(i)) {\n\
    \                    s += i\n                    l = i :: l\n                }\n\
    \            }\n        }\n        l.sortWith(_ < _)", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n        s3.toList.sorted",
  "        val map = new HashMap[Long, Int]\n        for (i <- l1) {\n           \
    \ if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n \
    \       val result = new ListBuffer[Long]\n        for (i <- l2) {\n         \
    \   if (map.contains(i) && map(i) > 0) {\n                result += i\n      \
    \          map(i) -= 1\n            }\n        }\n        result.toList.sorted",
  "        val m1 = l1.groupBy(identity).mapValues(_.size)\n        val m2 = l2.groupBy(identity).mapValues(_.size)\n\
    \        val m3 = m1.filter(x => m2.contains(x._1))\n        val m4 = m3.map(x\
    \ => (x._1, min(x._2, m2(x._1))))\n        m4.flatMap(x => List.fill(x._2)(x._1)).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        (set1 & set2).toList.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        var l =\
    \ List[Long]()\n        for (i <- l1) {\n            if (l2.contains(i)) {\n \
    \               l = l :+ i\n            }\n        }\n        return l.sorted.distinct",
  "        val l = l1.intersect(l2)\n        l.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n      \
    \  set3.toList.sorted", "        var l3 = List[Long]()\n        for (i <- l1)\
    \ {\n            if (l2.contains(i)) {\n                l3 = l3 :+ i\n       \
    \     }\n        }\n        return l3.sorted.distinct", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        (set1 & set2).toList.sorted", "        val\
    \ s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1\
    \ & set2\n        set3.toList.sorted", "        val s1 = l1.toSet\n        val\
    \ s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val set1\
    \ = new HashSet[Long]\n        for (i <- l1) set1 += i\n        val set2 = new\
    \ HashSet[Long]\n        for (i <- l2) set2 += i\n        val set3 = set1 & set2\n\
    \        set3.toList.sorted", "        var l3 = List[Long]()\n        var l1s\
    \ = l1.sorted\n        var l2s = l2.sorted\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1s.length && j < l2s.length) {\n            if (l1s(i)\
    \ == l2s(j)) {\n                l3 = l3 :+ l1s(i)\n                i += 1\n  \
    \              j += 1\n            } else if (l1s(i) < l2s(j)) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return l3", "        var l = List[Long]()\n        for (i <-\
    \ l1) {\n            if (l2.contains(i)) {\n                l = l :+ i\n     \
    \       }\n        }\n        l.sorted", "        val s1 = l1.toSet\n        val\
    \ s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n      \
    \  set3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n \
    \       val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1 =\
    \ l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "   \
    \     val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val set3 = set1.intersect(set2)\n        set3.toList.sorted",
  '        l1.intersect(l2).sorted', "        val h1 = l1.toSet\n        val h2 =\
    \ l2.toSet\n        val h3 = h1.intersect(h2)\n        h3.toList.sorted", "  \
    \      val l3 = l1.intersect(l2)\n        l3.sorted", "        val l = l1.intersect(l2)\n\
    \        l.sorted", "        val l = l1.intersect(l2)\n        l.sorted", "  \
    \      val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", '        l1.intersect(l2).sorted', "        val\
    \ l = l1.toSet.intersect(l2.toSet).toList\n        l.sorted", "        val l =\
    \ l1.intersect(l2)\n        l.sorted", "        val l1s = l1.sorted\n        val\
    \ l2s = l2.sorted\n        var i = 0\n        var j = 0\n        var result =\
    \ List[Long]()\n        while (i < l1s.length && j < l2s.length) {\n         \
    \   if (l1s(i) < l2s(j)) i += 1\n            else if (l1s(i) > l2s(j)) j += 1\n\
    \            else {\n                result = result :+ l1s(i)\n             \
    \   i += 1\n                j += 1\n            }\n        }\n        result",
  '        l1.intersect(l2).distinct.sorted', "        val l = l1.intersect(l2)\n\
    \        l.sorted", '        l1.filter(x => l2.contains(x)).distinct.sorted',
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", '        l1.intersect(l2).sorted', "        val\
    \ s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val l1s = l1.sorted\n\
    \        val l2s = l2.sorted\n        var i = 0\n        var j = 0\n        var\
    \ result = List[Long]()\n        while (i < l1s.length && j < l2s.length) {\n\
    \            if (l1s(i) == l2s(j)) {\n                result = l1s(i) :: result\n\
    \                i += 1\n                j += 1\n            } else if (l1s(i)\
    \ < l2s(j)) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        result.reverse", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", "        val s1\
    \ = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", " \
    \       val l1s = l1.sorted\n        val l2s = l2.sorted\n        var l1i = 0\n\
    \        var l2i = 0\n        var common = List[Long]()\n        while (l1i <\
    \ l1s.length && l2i < l2s.length) {\n            if (l1s(l1i) == l2s(l2i)) {\n\
    \                common = common :+ l1s(l1i)\n                l1i += 1\n     \
    \           l2i += 1\n            } else if (l1s(l1i) < l2s(l2i)) {\n        \
    \        l1i += 1\n            } else {\n                l2i += 1\n          \
    \  }\n        }\n        common", "        val s1 = l1.toSet\n        val s2 =\
    \ l2.toSet\n        (s1 & s2).toList.sorted", "        val set1 = l1.toSet\n \
    \       val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n       \
    \ set3.toList.sorted", '        l1.intersect(l2).sorted', "        val m1 = l1.toSet\n\
    \        val m2 = l2.toSet\n        val m3 = m1 & m2\n        m3.toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        var l3 = List[Long]()\n\
    \        for (i <- l1) {\n            if (l2.contains(i)) {\n                l3\
    \ = l3 :+ i\n            }\n        }\n        return l3.sorted.distinct", " \
    \       val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  '        l1.intersect(l2).sorted', "        val l = new ListBuffer[Long]\n     \
    \   for (i <- l1) {\n            if (l2.contains(i)) {\n                l += i\n\
    \            }\n        }\n        l.toList.sorted", "        var l = List[Long]()\n\
    \        for (i <- l1) {\n            if (l2.contains(i)) {\n                l\
    \ = l :+ i\n            }\n        }\n        return l.sorted.distinct", "   \
    \     val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1 & s2\n\
    \        s3.toList.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n\
    \        (s1 & s2).toList.sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        (set1 & set2).toList.sorted", "        val l1s = l1.sorted\n\
    \        val l2s = l2.sorted\n        var i = 0\n        var j = 0\n        var\
    \ result = List[Long]()\n        while (i < l1s.length && j < l2s.length) {\n\
    \            if (l1s(i) == l2s(j)) {\n                result = result :+ l1s(i)\n\
    \                i += 1\n                j += 1\n            } else if (l1s(i)\
    \ < l2s(j)) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        result", "        val l = l1.intersect(l2)\n\
    \        l.sorted", "        val s1 = l1.toSet\n        val s2 = l2.toSet\n  \
    \      (s1 & s2).toList.sorted", "        val l3 = l1.intersect(l2)\n        l3.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", "        val l = l1.intersect(l2)\n        l.sorted",
  '        l1.intersect(l2).sorted', "        val l1s = l1.sorted\n        val l2s\
    \ = l2.sorted\n        var i = 0\n        var j = 0\n        var result = List[Long]()\n\
    \        while (i < l1s.length && j < l2s.length) {\n            if (l1s(i) ==\
    \ l2s(j)) {\n                result = l1s(i) :: result\n                i += 1\n\
    \                j += 1\n            } else if (l1s(i) < l2s(j)) {\n         \
    \       i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        result.reverse", "        val s1 = l1.toSet\n        val s2\
    \ = l2.toSet\n        (s1 & s2).toList.sorted", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n      \
    \  set3.toList.sorted", "        var result = List[Long]()\n        var l1_set\
    \ = l1.toSet\n        var l2_set = l2.toSet\n        for (i <- l1_set) {\n   \
    \         if (l2_set.contains(i)) result = result :+ i\n        }\n        result.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        var l3 = List[Long]()\n        var l4 = List[Long]()\n        var l5 =\
    \ List[Long]()\n        var l6 = List[Long]()\n        var l7 = List[Long]()\n\
    \        var l8 = List[Long]()\n        var l9 = List[Long]()\n        var l10\
    \ = List[Long]()\n        var l11 = List[Long]()\n        var l12 = List[Long]()\n\
    \        var l13 = List[Long]()\n        var l14 = List[Long]()\n        var l15\
    \ = List[Long]()\n        var l16 = List[Long]()\n        var l17 = List[Long]()\n\
    \        var l18 = List[Long]()\n        var l19 = List[Long]()\n        var l20\
    \ = List[Long]()\n        var l21 = List[Long]()\n        var l22 = List[Long]()\n\
    \        var l23 = List[Long]()\n        var l24 = List[Long]()\n        var l25\
    \ = List[Long]()\n        var l26 = List[Long]()\n        var l27 = List[Long]()\n\
    \        var l28 = List[Long]()\n        var l29 = List[Long]()\n        var l30\
    \ = List[Long]()\n        var l31 = List[Long]()\n        var l32 = List[Long]()\n\
    \        var l33 = List[Long]()\n        var l34 = List[Long]()\n        var l35\
    \ = List[Long]()\n        var l36 = List[Long]()\n        var l37 = List[Long]()\n\
    \        var l38 = List[Long]()\n        var l39 = List[Long]()\n        var l40\
    \ = List[Long]()\n        var l41 = List[Long]()\n        var l42 = List[Long]()\n\
    \        var l43 = List[Long]()\n        var l44 = List[Long]()\n        var l45\
    \ = List[Long]()\n        var l46 = List[Long]()\n        var l47 = List[Long]()\n\
    \        var l48 = List[Long]()\n        var l49 =", "        val l = l1.intersect(l2)\n\
    \        l.sorted", "        val l1s = l1.sorted\n        val l2s = l2.sorted\n\
    \        var l1i = 0\n        var l2i = 0\n        var result = List[Long]()\n\
    \        while (l1i < l1s.length && l2i < l2s.length) {\n            if (l1s(l1i)\
    \ == l2s(l2i)) {\n                result = result :+ l1s(l1i)\n              \
    \  l1i += 1\n                l2i += 1\n            } else if (l1s(l1i) < l2s(l2i))\
    \ {\n                l1i += 1\n            } else {\n                l2i += 1\n\
    \            }\n        }\n        result", "        val s1 = l1.toSet\n     \
    \   val s2 = l2.toSet\n        (s1.intersect(s2)).toList.sorted", "        val\
    \ l3 = l1.intersect(l2)\n        l3.sorted", '        l1.intersect(l2).sorted',
  "        val l1s = l1.sortWith(_ < _)\n        val l2s = l2.sortWith(_ < _)\n  \
    \      var i = 0\n        var j = 0\n        var result = List[Long]()\n     \
    \   while (i < l1s.length && j < l2s.length) {\n            if (l1s(i) == l2s(j))\
    \ {\n                result = l1s(i) :: result\n                i += 1\n     \
    \           j += 1\n            } else if (l1s(i) < l2s(j)) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        result.reverse"]
stop_tokens:
- "\n    }\n"
