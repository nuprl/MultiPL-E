name: HumanEval_123_get_odd_collatz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a sorted list that has the odd numbers\
  \ in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n    // as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n    // previous term as follows: if the\
  \ previous term is even, the next term is one half of \n    // the previous term.\
  \ If the previous term is odd, the next term is 3 times the previous\n    // term\
  \ plus 1. The conjecture is that no matter what value of n, the sequence will always\
  \ reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list\
  \ sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns\
  \ [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers\
  \ are only 1, and 5.\n    // >>> getOddCollatz((5l))\n    // (List[Long](1l.toLong,\
  \ 5l.toLong))\n    def getOddCollatz(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var list = List[Long]()\n        var m = n\n        while (m\
    \ != 1) {\n            if (m % 2 == 1) list = list :+ m\n            m = if (m\
    \ % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list :+ 1\n      \
    \  list", "        var collatz = new ListBuffer[Long]()\n        collatz += n\n\
    \        while (n != 1) {\n            if (n % 2 == 0) n /= 2\n            else\
    \ n = 3 * n + 1\n            collatz += n\n        }\n        collatz.toList.filter(_\
    \ % 2 == 1).sorted", "        var list = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) list = list\
    \ :+ current\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        list = list :+ 1\n        list", "        var collatz\
    \ = new ListBuffer[Long]()\n        var m = n\n        while (m != 1) {\n    \
    \        collatz += m\n            if (m % 2 == 0) m /= 2\n            else m\
    \ = 3 * m + 1\n        }\n        collatz += 1\n        collatz.filter(_ % 2 ==\
    \ 1).toList", "        var result = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n            m\
    \ = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result = result :+\
    \ 1\n        result", "        var result = List[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n\
    \            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result\
    \ = 1 :: result\n        result", "        var result = List[Long]()\n       \
    \ var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result = result\
    \ :+ m\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n    \
    \    result = result :+ 1\n        result", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result = 1 :: result\n        result", "        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) {\n\
    \                result = result :+ m\n            }\n            m = if (m %\
    \ 2 == 0) m / 2 else m * 3 + 1\n        }\n        result = result :+ 1\n    \
    \    result", "        var result = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            if (m % 2 == 1) result = m :: result\n            m\
    \ = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n\
    \        result", "        var list = List[Long]()\n        var x = n\n      \
    \  while (x != 1) {\n            if (x % 2 == 1) {\n                list = list\
    \ :+ x\n            }\n            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n\
    \        }\n        list = list :+ 1\n        list", "        var result = List[Long]()\n\
    \        var x = n\n        while (x != 1) {\n            if (x % 2 == 1) result\
    \ = result :+ x\n            x = if (x % 2 == 0) x / 2 else 3 * x + 1\n      \
    \  }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ = current :: result\n            current = if (current % 2 == 0) current / 2\
    \ else current * 3 + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else m * 3 + 1\n        }\n        result = 1 :: result\n        result",
  "        var result = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) result = m :: result\n            m = if (m % 2 ==\
    \ 0) m / 2 else 3 * m + 1\n        }\n        result = 1 :: result\n        result",
  "        var list = List[Long]()\n        var m = n\n        while (m != 1) {\n\
    \            if (m % 2 == 1) {\n                list = list :+ m\n           \
    \ }\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n       \
    \ list = list :+ 1\n        list", "        var l = List[Long]()\n        var\
    \ m = n\n        while (m != 1) {\n            if (m % 2 == 1) l = l :+ m\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        l = l\
    \ :+ 1\n        l", "        var result = List[Long]()\n        var m = n\n  \
    \      while (m != 1) {\n            if (m % 2 == 1) {\n                result\
    \ = m :: result\n            }\n            m = if (m % 2 == 0) m / 2 else 3 *\
    \ m + 1\n        }\n        result = 1 :: result\n        result", "        var\
    \ collatz = new ListBuffer[Long]()\n        var num = n\n        while (num !=\
    \ 1) {\n            if (num % 2 == 1) collatz += num\n            num = if (num\
    \ % 2 == 0) num / 2 else num * 3 + 1\n        }\n        collatz += 1\n      \
    \  collatz.toList"]
stop_tokens:
- "\n    }\n"
