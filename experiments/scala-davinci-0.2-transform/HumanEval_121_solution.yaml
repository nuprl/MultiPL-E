name: HumanEval_121_solution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
  \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
  \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst : List[Long])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
  \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
  \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
  \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
  \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
  \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
  \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
completions: ["        // Your code here\n        var sum = 0l\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum", "      \
    \  // Your code here\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your solution goes here\n        var sum = 0l\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n          \
    \      sum += lst(i)\n            }\n        }\n        sum", "        // Your\
    \ code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 ==\
    \ 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Type your solution\
    \ here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x\
    \ => x._1).sum", "        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum", "        var sum = 0l\n\
    \        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i)\
    \ % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n     \
    \   return sum", "        // Type your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum", "        // Write your\
    \ code here\n        // Return the sum of all of the odd elements that are in\
    \ even positions\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) sum += lst(i)\n        }\n\
    \        sum", "        // Your code here\n        lst.zipWithIndex.filter(x =>\
    \ x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your solution goes here\n       \
    \ // Good luck!\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 %\
    \ 2 == 1).map(x => x._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your Code Here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x =>\
    \ x._1).sum", "        // Type your solution here\n        var sum = 0l\n    \
    \    for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) % 2\
    \ == 1) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        // Your code here\n        return 0l", "        // Your code here\n   \
    \     lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Type your solution here\n       \
    \ var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2\
    \ == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n \
    \       }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your solution goes here\n       \
    \ var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2\
    \ == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n \
    \       }\n        sum", "        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum", "        // Your solution\
    \ goes here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 ==\
    \ 1).map(x => x._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        return 0l.toLong",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", '        lst.zipWithIndex.filter(x => x._2 %
    2 == 0 && x._1 % 2 == 1).map(x => x._1).sum', "        // Your code here\n   \
    \     lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        0", "        // Your solution goes here\n  \
    \      var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i\
    \ % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Write your solution here\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if\
    \ (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n         \
    \   }\n        }\n        sum", "        // Write your solution here\n       \
    \ lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        return 0", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if\
    \ (i % 2 == 0 && lst(i) % 2 == 1) sum += lst(i)\n        }\n        sum", "  \
    \      // Your Code Here\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Type your solution here\n        0", "        // Your code here\n  \
    \      var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i\
    \ % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        // Your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum", "        // Your solution\
    \ goes here\n        val odd = lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1\
    \ % 2 == 1)\n        odd.map(x => x._1).sum", "        // Your code here\n   \
    \     lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  '        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum',
  "        var sum : Long = 0\n        for (i <- 0 until lst.length) {\n         \
    \   if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n    \
    \        }\n        }\n        return sum", "        // Your code here\n     \
    \   lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Write your solution here\n      \
    \  lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        var sum =\
    \ 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i)\
    \ % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        // Your code here\n        0", "        // Your code here\n\
    \        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if\
    \ (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n         \
    \   }\n        }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if\
    \ (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n         \
    \   }\n        }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Write your solution\
    \ here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x\
    \ => x._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Write your solution\
    \ here\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n      \
    \      if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n \
    \           }\n        }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        val lst2 = lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 0 && x._1 % 2 == 1)\n        lst2.map(x => x._1).sum", "        // Your\
    \ code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 ==\
    \ 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your solution\
    \ goes here\n        var sum = 0l\n        for (i <- lst.indices) {\n        \
    \    if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n   \
    \         }\n        }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        return 0", "        // Your code here\n        0", "        // Your code\
    \ here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        var sum =\
    \ 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i)\
    \ % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        // Your code here\n        var sum = 0l\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n  \
    \              sum += lst(i)\n            }\n        }\n        sum", "      \
    \  // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1\
    \ % 2 == 1).map(_._1).sum", "        // Your solution goes here\n        var sum\
    \ = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 &&\
    \ lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        sum", "        // Your code here\n        return 0l.toLong", "      \
    \  // Your code here\n        return lst.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0 && x._1 % 2 == 1).map(x => x._1).sum", "        // Your solution goes here\n\
    \        var sum = 0l\n        for (i <- lst.indices) {\n            if (i % 2\
    \ == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n \
    \       }\n        sum", "        // Given a non-empty list of integers, return\
    \ the sum of all of the odd elements that are in even positions.\n        // Your\
    \ solution must be recursive.\n        // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n        // (12l)\n        // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n        // (9l)\n        // >>>\
    \ solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong)))\n  \
    \      // (0l)\n        def solution(lst : List[Long]) : Long = {\n          \
    \  lst match {\n                case Nil => 0\n                case x :: Nil =>\
    \ 0\n                case x :: y :: Nil => if (x % 2 == 0) y else 0\n        \
    \        case x :: y :: xs => if (x % 2 == 0) y + solution(xs) else solution(xs)\n\
    \            }\n        }\n        // Given a non-empty list of integers, return\
    \ the sum of all of the odd elements that are in even positions.\n        // Your\
    \ solution must be tail recursive.\n        // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n        // (12l)\n        // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n        // (9l)\n        // >>>\
    \ solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong)))\n  \
    \      // (0l)\n        def solution(lst : List[Long]) : Long = {\n          \
    \  def helper(lst : List[Long], acc : Long) : Long = {\n                lst match\
    \ {\n                    case Nil => acc\n                    case x :: Nil =>\
    \ acc\n                    case x :: y :: Nil => if (x % 2 == 0) acc + y else\
    \ acc\n                    case x :: y :: xs => if (", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your solution goes here\n       \
    \ var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2\
    \ == 0 && lst(i) % 2 == 1) sum += lst(i)\n        }\n        sum", "        //\
    \ Your code here\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        var sum = 0l\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 2 == 0 && lst(i) % 2 == 1) sum += lst(i)\n\
    \        }\n        return sum", "        // Your solution goes here\n       \
    \ var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2\
    \ == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n \
    \       }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        return 0l.toLong",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your solution\
    \ goes here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 ==\
    \ 1).map(x => x._1).sum", "        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum", "        // Your code\
    \ here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        var sum = 0l\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n          \
    \      sum += lst(i)\n            }\n        }\n        return sum", "       \
    \ // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1\
    \ % 2 == 1).map(_._1).sum", "        // Your code here\n        val lst2 = lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).filter(x => x._1 % 2 == 1)\n        lst2.map(x => x._1).sum",
  "        // Your code here\n        return 0", "        // Your solution goes here\n\
    \        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if\
    \ (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n         \
    \   }\n        }\n        sum", "        // Your code here\n        var sum =\
    \ 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i)\
    \ % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        // Your code here\n        val lst2 = lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1)\n        lst2.map(x => x._1).sum", "    \
    \    // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your solution\
    \ goes here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 ==\
    \ 1).map(x => x._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        var sum = 0l\n \
    \       for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i)\
    \ % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n     \
    \   return sum", "        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum", "        // Type your\
    \ solution here\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n\
    \            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        // Your code here\n        var\
    \ sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 ==\
    \ 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n    \
    \    }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        var sum = 0L\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Write your solution here\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum", "        // Type your solution\
    \ here\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n      \
    \      if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n \
    \           }\n        }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i\
    \ % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        var sum = 0l\n    \
    \    for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) % 2\
    \ == 1) {\n                sum += lst(i)\n            }\n        }\n        return\
    \ sum", "        // Your code here\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n    \
    \    lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        return 0l.toLong",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        0", "   \
    \     // Your code here\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        return 0",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", '        lst.zipWithIndex.filter(x
    => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum', "        // Your code\
    \ here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        var sum = 0l\n        for (i <- 1 until lst.length\
    \ by 2) {\n            if (lst(i) % 2 == 1) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if\
    \ (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n         \
    \   }\n        }\n        sum", "        // Write your solution here\n       \
    \ lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        var sum = 0l\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n          \
    \      sum += lst(i)\n            }\n        }\n        return sum", "       \
    \ // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1\
    \ % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your Code Here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x =>\
    \ x._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x =>\
    \ x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        return 0", "        // Write your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum", "        // Type your\
    \ solution here\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n\
    \            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        // Your solution here\n    \
    \    lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        var sum =\
    \ 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i)\
    \ % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n     \
    \   sum", "        // Your code here\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 0 && x._1 % 2 == 1).map(_._1).sum"]
stop_tokens:
- "\n    }\n"
