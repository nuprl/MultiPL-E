name: HumanEval_97_multiply
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Complete the function that takes two integers and returns \n    // the product\
  \ of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n\
  \    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n\
  \    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l),\
  \ (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
  \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
  \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
  \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
  \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
completions: ["        val a1 = a % 10\n        val b1 = b % 10\n        a1 * b1",
  "        val aUnit = a % 10\n        val bUnit = b % 10\n        aUnit * bUnit",
  "        val a_unit = a % 10\n        val b_unit = b % 10\n        return a_unit\
    \ * b_unit", "        val unitA = a % 10\n        val unitB = b % 10\n       \
    \ unitA * unitB", '        return (a % 10) * (b % 10)', '        (a % 10) * (b
    % 10)', "        val a1 = a % 10\n        val b1 = b % 10\n        a1 * b1", " \
    \       val aa = a % 10\n        val bb = b % 10\n        aa * bb", "        val\
    \ a1 = a % 10\n        val b1 = b % 10\n        a1 * b1", "        val aa = a\
    \ % 10\n        val bb = b % 10\n        aa * bb", "        val a1 = a % 10\n\
    \        val b1 = b % 10\n        a1 * b1", '        (a % 10) * (b % 10)', " \
    \       val aa = a % 10\n        val bb = b % 10\n        aa * bb", "        val\
    \ unitA = a % 10\n        val unitB = b % 10\n        unitA * unitB", "      \
    \  val a1 = a % 10\n        val b1 = b % 10\n        a1 * b1", "        val unitA\
    \ = a % 10\n        val unitB = b % 10\n        unitA * unitB", "        val a1\
    \ = a % 10\n        val b1 = b % 10\n        return a1 * b1", '        return
    (a % 10) * (b % 10)', "        val c = a * b\n        val d = c % 10\n       \
    \ d", "        val aa = a % 10\n        val bb = b % 10\n        aa * bb"]
stop_tokens:
- "\n    }\n"
