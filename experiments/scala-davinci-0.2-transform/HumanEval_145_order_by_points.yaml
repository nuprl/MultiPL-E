name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    // >>> orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    // (List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    // >>> orderByPoints((List[Long]()))\n\
  \    // (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x\
    \ => x.asDigit).sum\n            val bSum = b.toString.map(x => x.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        nums.sortWith((x, y) => {\n            val xsum = x.toString.map(_.asDigit).sum\n\
    \            val ysum = y.toString.map(_.asDigit).sum\n            if (xsum ==\
    \ ysum) {\n                nums.indexOf(x) < nums.indexOf(y)\n            } else\
    \ {\n                xsum < ysum\n            }\n        })", "        // Fill\
    \ in the code here\n        return nums", "        def sumDigits(num : Long) :\
    \ Long = {\n            var sum = 0l\n            var n = num\n            while\
    \ (n != 0) {\n                sum += n % 10\n                n /= 10\n       \
    \     }\n            sum\n        }\n        nums.zipWithIndex.sortBy(x => (sumDigits(x._1),\
    \ x._2)).map(_._1)", "        nums.sortWith((x, y) => {\n            val xs =\
    \ x.toString.map(_.asDigit).sum\n            val ys = y.toString.map(_.asDigit).sum\n\
    \            if (xs == ys) {\n                nums.indexOf(x) < nums.indexOf(y)\n\
    \            } else {\n                xs < ys\n            }\n        })", " \
    \       nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        // Fill in the code here\n\
    \        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n    \
    \            nums.indexOf(a) < nums.indexOf(b)\n            } else {\n       \
    \         aSum < bSum\n            }\n        })", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((x, y) =>
    sumDigits(x) < sumDigits(y))', "        nums.sortWith((a, b) => {\n          \
    \  val aSum = a.toString.map(c => c.asDigit).sum\n            val bSum = b.toString.map(c\
    \ => c.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        nums.sortWith((x, y)\
    \ => {\n            val xSum = x.toString.map(_.asDigit).sum\n            val\
    \ ySum = y.toString.map(_.asDigit).sum\n            if (xSum == ySum) {\n    \
    \            nums.indexOf(x) < nums.indexOf(y)\n            } else {\n       \
    \         xSum < ySum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val sumA = a.toString.map(x => x.asDigit).sum\n            val\
    \ sumB = b.toString.map(x => x.asDigit).sum\n            if (sumA == sumB) a <\
    \ b else sumA < sumB\n        })", "        nums.sortWith((a, b) => {\n      \
    \      val sumA = a.toString.map(x => x.asDigit).sum\n            val sumB = b.toString.map(x\
    \ => x.asDigit).sum\n            if (sumA == sumB) a < b else sumA < sumB\n  \
    \      })", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        nums.sortWith((a, b) => sumDigits(a)\
    \ < sumDigits(b))", "        nums.sortWith((a, b) => {\n            val aSum =\
    \ a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        if\
    \ (nums.isEmpty) return nums\n        val sums = nums.map(x => x.toString.map(y\
    \ => y.asDigit).sum)\n        val sorted = sums.sorted\n        val indices =\
    \ sorted.map(x => sums.indexOf(x))\n        indices.map(x => nums(x))", "    \
    \    nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else\
    \ {\n                aSum < bSum\n            }\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', "        nums.sortWith((a, b) => {\n    \
    \        val aSum = a.toString.map(x => x.asDigit).sum\n            val bSum =\
    \ b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum) {\n      \
    \          nums.indexOf(a) < nums.indexOf(b)\n            } else {\n         \
    \       aSum < bSum\n            }\n        })", '        nums.sortWith((a, b)
    => a.toString.map(_.asDigit).sum < b.toString.map(_.asDigit).sum)', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))',
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n\
    \            val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum\
    \ == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            }\
    \ else {\n                aSum < bSum\n            }\n        })", "        //\
    \ Fill in the code here\n        nums.sortWith((x, y) => sumDigits(x) < sumDigits(y))",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n\
    \            val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum\
    \ == bSum) a < b else aSum < bSum\n        })", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n\
    \            val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum\
    \ == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            }\
    \ else {\n                aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", "        // Fill up\
    \ this function body\n        // You can add another function as well, if required\n\
    \        def sumDigits(n : Long) : Long = {\n            var sum = 0l.toLong\n\
    \            var m = n\n            while (m != 0) {\n                sum += m\
    \ % 10\n                m /= 10\n            }\n            sum\n        }\n \
    \       nums.zipWithIndex.sortBy(x => (sumDigits(x._1), x._2)).map(_._1)", " \
    \       val numsWithPoints = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum,\
    \ x._2))\n        numsWithPoints.sortBy(x => (x._2, x._3)).map(_._1)", '        nums.sortWith((a,
    b) => (a.toString.map(_.asDigit).sum, a) < (b.toString.map(_.asDigit).sum, b))',
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n\
    \            val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum\
    \ == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            }\
    \ else {\n                aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", "        nums.sortWith((x,\
    \ y) => {\n            val xSum = x.toString.map(x => x.asDigit).sum\n       \
    \     val ySum = y.toString.map(x => x.asDigit).sum\n            if (xSum == ySum)\
    \ {\n                nums.indexOf(x) < nums.indexOf(y)\n            } else {\n\
    \                xSum < ySum\n            }\n        })", "        var map = Map[Long,\
    \ Long]()\n        for (i <- 0 until nums.length) {\n            var sum = 0l.toLong\n\
    \            var num = nums(i)\n            while (num != 0) {\n             \
    \   sum += num % 10\n                num /= 10\n            }\n            map\
    \ += (sum -> i)\n        }\n        var list = map.toList.sortWith((a, b) => a._1\
    \ < b._1)\n        var result = List[Long]()\n        for (i <- 0 until list.length)\
    \ {\n            result = nums(list(i)._2.toInt) :: result\n        }\n      \
    \  result.reverse", "        nums.sortWith((a, b) => {\n            val aSum =\
    \ a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", '        nums.sortWith((a, b) => (a.toString.map(_.asDigit).sum,
    a) < (b.toString.map(_.asDigit).sum, b))', "        def sumDigits(n : Long) :\
    \ Long = {\n            var sum = 0l\n            var nn = n\n            while\
    \ (nn != 0) {\n                sum += nn % 10\n                nn /= 10\n    \
    \        }\n            sum\n        }\n        nums.zipWithIndex.sortWith((x,\
    \ y) => {\n            if (sumDigits(x._1) == sumDigits(y._1)) x._2 < y._2\n \
    \           else sumDigits(x._1) < sumDigits(y._1)\n        }).map(_._1)", " \
    \       def sumDigits(n : Long) : Long = {\n            var m = n\n          \
    \  var sum = 0l\n            while (m != 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        nums.zipWithIndex.sortBy(x\
    \ => (sumDigits(x._1), x._2)).map(_._1)", "        nums.sortWith((a, b) => {\n\
    \            val aSum = a.toString.map(_.asDigit).sum\n            val bSum =\
    \ b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", "        // Fill in the code here\n        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n    \
    \            nums.indexOf(a) < nums.indexOf(b)\n            } else {\n       \
    \         aSum < bSum\n            }\n        })", "        nums.sortWith((x,\
    \ y) => {\n            val xSum = x.toString.map(x => x.asDigit).sum\n       \
    \     val ySum = y.toString.map(x => x.asDigit).sum\n            if (xSum == ySum)\
    \ {\n                nums.indexOf(x) < nums.indexOf(y)\n            } else {\n\
    \                xSum < ySum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", '        nums.sortWith((a,
    b) => a.toString.map(_.asDigit).sum < b.toString.map(_.asDigit).sum)', "     \
    \   // Fill in the code here\n        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", "        // Fill in the code here\n        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n         \
    \       nums.indexOf(a) < nums.indexOf(b)\n            } else {\n            \
    \    aSum < bSum\n            }\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(x => x.asDigit).sum\n            val\
    \ bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum) {\n\
    \                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n   \
    \             aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val sumA = a.toString.map(c => c.asDigit).sum\n       \
    \     val sumB = b.toString.map(c => c.asDigit).sum\n            if (sumA == sumB)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                sumA < sumB\n            }\n        })", "        // TODO: Implement\
    \ me\n        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(c\
    \ => c.asDigit).sum\n            val bSum = b.toString.map(c => c.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        val numsWithPoints = nums.map(x => (x, x.toString.map(y => y.asDigit).sum))\n\
    \        numsWithPoints.sortBy(x => (x._2, nums.indexOf(x._1))).map(x => x._1)",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n\
    \            val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum\
    \ == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            }\
    \ else {\n                aSum < bSum\n            }\n        })", '        nums.sortWith((x,
    y) => sumDigits(x) < sumDigits(y))', "        def sumDigits(n : Long) : Long =\
    \ {\n            if (n == 0) 0\n            else n % 10 + sumDigits(n / 10)\n\
    \        }\n        nums.zipWithIndex.sortBy(x => (sumDigits(x._1), x._2)).map(_._1)",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(c => c.asDigit).sum\n\
    \            val bSum = b.toString.map(c => c.asDigit).sum\n            if (aSum\
    \ == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            }\
    \ else {\n                aSum < bSum\n            }\n        })", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = sumDigits(a)\n            val bSum = sumDigits(b)\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", '        nums.zipWithIndex.sortBy(x => (x._1.toString.map(_.asDigit).sum,
    x._2)).map(_._1)', "        nums.sortWith((a, b) => {\n            val aSum =\
    \ a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", "        val sumOfDigits = (nums.map(x => x.toString.map(_.asDigit).sum)).zipWithIndex\n\
    \        val sorted = sumOfDigits.sortBy(x => (x._1, x._2))\n        sorted.map(x\
    \ => nums(x._2))", "        nums.sortWith((a, b) => {\n            val aSum =\
    \ a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ a < b else aSum < bSum\n        })", "        // Fill in the code here\n   \
    \     nums.sortWith((x, y) => sumDigits(x) < sumDigits(y))", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        nums.sortWith((a,\
    \ b) => sumDigits(a) < sumDigits(b))", "        // Fill in the code here\n   \
    \     nums.sortWith((x, y) => {\n            val xs = x.toString.map(_.asDigit).sum\n\
    \            val ys = y.toString.map(_.asDigit).sum\n            if (xs == ys)\
    \ x < y else xs < ys\n        })", "        // Fill up this function body\n  \
    \      // You can add another function as well, if required\n        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n    \
    \            nums.indexOf(a) < nums.indexOf(b)\n            } else {\n       \
    \         aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ a < b else aSum < bSum\n        })", '        nums.sortWith((a, b) => sumDigits(a)
    < sumDigits(b))', "        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(x\
    \ => x.asDigit).sum\n            val sumB = b.toString.map(x => x.asDigit).sum\n\
    \            if (sumA == sumB) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                sumA < sumB\n            }\n        })",
  "        nums.sortWith((x, y) => {\n            val xsum = x.toString.map(c => c.asDigit).sum\n\
    \            val ysum = y.toString.map(c => c.asDigit).sum\n            if (xsum\
    \ == ysum) {\n                nums.indexOf(x) < nums.indexOf(y)\n            }\
    \ else {\n                xsum < ysum\n            }\n        })", "        def\
    \ sumDigits(n : Long) : Long = {\n            var sum = 0l\n            var nn\
    \ = n\n            while (nn != 0) {\n                sum += nn % 10\n       \
    \         nn /= 10\n            }\n            sum\n        }\n        nums.zipWithIndex.sortWith((a,\
    \ b) => {\n            val (x, i) = a\n            val (y, j) = b\n          \
    \  val sx = sumDigits(x)\n            val sy = sumDigits(y)\n            if (sx\
    \ == sy) i < j else sx < sy\n        }).map(_._1)", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", "        var map = new HashMap[Long, List[Long]]\n   \
    \     for (i <- 0 until nums.length) {\n            var sum = 0l\n           \
    \ var num = nums(i)\n            while (num != 0) {\n                sum += num\
    \ % 10\n                num /= 10\n            }\n            if (!map.contains(sum))\
    \ map(sum) = List[Long]()\n            map(sum) = map(sum) :+ nums(i)\n      \
    \  }\n        var result = List[Long]()\n        for (i <- map.keys.toList.sorted)\
    \ result = result ::: map(i)\n        result", "        nums.sortWith((a, b) =>\
    \ {\n            val aSum = a.toString.map(_.asDigit).sum\n            val bSum\
    \ = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        nums.sortWith((a, b)\
    \ => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n    \
    \            nums.indexOf(a) < nums.indexOf(b)\n            } else {\n       \
    \         aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', "        // Fill in the code here\n     \
    \   nums.sortWith((a, b) => a.toString.map(_.asDigit).sum < b.toString.map(_.asDigit).sum)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((x, y) =>\
    \ {\n            val xs = x.toString.map(_.asDigit).sum\n            val ys =\
    \ y.toString.map(_.asDigit).sum\n            if (xs == ys) x < y else xs < ys\n\
    \        })", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(c\
    \ => c.asDigit).sum\n            val bSum = b.toString.map(c => c.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        def\
    \ sumDigits(n : Long) : Long = {\n            if (n == 0) 0\n            else\
    \ n % 10 + sumDigits(n / 10)\n        }\n        nums.zipWithIndex.sortBy(x =>\
    \ (sumDigits(x._1), x._2)).map(_._1)", "        nums.sortWith((a, b) => {\n  \
    \          val sumA = a.toString.map(_.asDigit).sum\n            val sumB = b.toString.map(_.asDigit).sum\n\
    \            if (sumA == sumB) a < b else sumA < sumB\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((x, y) => {\n            val\
    \ xsum = x.toString.map(_.asDigit).sum\n            val ysum = y.toString.map(_.asDigit).sum\n\
    \            if (xsum == ysum) nums.indexOf(x) < nums.indexOf(y)\n           \
    \ else xsum < ysum\n        })", '        nums.sortWith((a, b) => sumDigits(a)
    < sumDigits(b) || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))',
  '        nums.zipWithIndex.sortBy(x => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)',
  '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))',
  '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))', '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', "        // Fill in the code here\n     \
    \   nums.sortWith((x, y) => {\n            val xsum = x.toString.map(x => x.asDigit).sum\n\
    \            val ysum = y.toString.map(x => x.asDigit).sum\n            if (xsum\
    \ == ysum) {\n                nums.indexOf(x) < nums.indexOf(y)\n            }\
    \ else {\n                xsum < ysum\n            }\n        })", '        nums.sortWith((a,
    b) => a.toString.map(x => x.asDigit).sum < b.toString.map(x => x.asDigit).sum)',
  "        // Fill in the code here\n        nums.sortWith((a, b) => {\n         \
    \   val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else\
    \ {\n                aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n    \
    \            nums.indexOf(a) < nums.indexOf(b)\n            } else {\n       \
    \         aSum < bSum\n            }\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', '        nums.sortWith((a, b) => sumDigits(a)
    < sumDigits(b))', "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(c\
    \ => c.asDigit).sum\n            val bSum = b.toString.map(c => c.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum !=\
    \ bSum) aSum < bSum else nums.indexOf(a) < nums.indexOf(b)\n        })", "   \
    \     nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n  \
    \          val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        def\
    \ sumDigits(num : Long) : Long = {\n            if (num == 0) 0\n            else\
    \ num % 10 + sumDigits(num / 10)\n        }\n        nums.zipWithIndex.sortBy(x\
    \ => (sumDigits(x._1), x._2)).map(_._1)", "        def sumDigits(n : Long) : Long\
    \ = {\n            if (n == 0) 0\n            else n % 10 + sumDigits(n / 10)\n\
    \        }\n        nums.zipWithIndex.sortBy(x => (sumDigits(x._1), x._2)).map(_._1)",
  "        nums.sortWith((x, y) => {\n            val xs = x.toString.map(_.asDigit).sum\n\
    \            val ys = y.toString.map(_.asDigit).sum\n            if (xs == ys)\
    \ {\n                nums.indexOf(x) < nums.indexOf(y)\n            } else {\n\
    \                xs < ys\n            }\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', '        nums.sortWith((x, y) => (x.toString.map(x
    => x.asDigit).sum, x) < (y.toString.map(x => x.asDigit).sum, y))', "        nums.sortWith((a,\
    \ b) => {\n            val sumA = a.toString.map(x => x.asDigit).sum\n       \
    \     val sumB = b.toString.map(x => x.asDigit).sum\n            if (sumA == sumB)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                sumA < sumB\n            }\n        })", "        // Fill up\
    \ this function body\n        // You can add another function as well, if required\n\
    \        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", "        // TODO: implement\
    \ this\n        nums.sortWith((a, b) => (a.toString.map(_.asDigit).sum < b.toString.map(_.asDigit).sum)\
    \ || (a.toString.map(_.asDigit).sum == b.toString.map(_.asDigit).sum && nums.indexOf(a)\
    \ < nums.indexOf(b)))", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        def sumOfDigits(n : Long)\
    \ : Long = {\n            var sum = 0l\n            var x = n\n            while\
    \ (x != 0) {\n                sum += x % 10\n                x /= 10\n       \
    \     }\n            sum\n        }\n        nums.zipWithIndex.sortWith((x, y)\
    \ => {\n            if (sumOfDigits(x._1) == sumOfDigits(y._1)) x._2 < y._2\n\
    \            else sumOfDigits(x._1) < sumOfDigits(y._1)\n        }).map(_._1)",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n\
    \            val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum\
    \ == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            }\
    \ else {\n                aSum < bSum\n            }\n        })", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        nums.sortWith((x,\
    \ y) => {\n            val xsum = x.toString.map(_.asDigit).sum\n            val\
    \ ysum = y.toString.map(_.asDigit).sum\n            if (xsum == ysum) {\n    \
    \            nums.indexOf(x) < nums.indexOf(y)\n            } else {\n       \
    \         xsum < ysum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", "        nums.sortWith((x,\
    \ y) => {\n            val xs = x.toString.map(x => x.asDigit).sum\n         \
    \   val ys = y.toString.map(x => x.asDigit).sum\n            if (xs == ys) {\n\
    \                nums.indexOf(x) < nums.indexOf(y)\n            } else {\n   \
    \             xs < ys\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", '        nums.sortWith((a,
    b) => sumDigits(a) < sumDigits(b))', "        nums.sortWith((a, b) => {\n    \
    \        val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        nums.sortWith((x,\
    \ y) => sumDigits(x) < sumDigits(y))", "        nums.sortWith((a, b) => {\n  \
    \          val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(c => c.asDigit).sum\n\
    \            val bSum = b.toString.map(c => c.asDigit).sum\n            if (aSum\
    \ == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            }\
    \ else {\n                aSum < bSum\n            }\n        })", "        //\
    \ Fill in the code here\n        nums.sortWith((x, y) => sumDigits(x) < sumDigits(y))",
  "        // your code here\n        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  '        nums.sortWith((a, b) => a.toString.map(_.asDigit).sum < b.toString.map(_.asDigit).sum)',
  "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums.length)\
    \ {\n            var sum = 0l\n            var n = nums(i)\n            while\
    \ (n != 0) {\n                sum += n % 10\n                n /= 10\n       \
    \     }\n            map(sum) = i\n        }\n        nums.sortWith((a, b) =>\
    \ {\n            var suma = 0l\n            var na = a\n            while (na\
    \ != 0) {\n                suma += na % 10\n                na /= 10\n       \
    \     }\n            var sumb = 0l\n            var nb = b\n            while\
    \ (nb != 0) {\n                sumb += nb % 10\n                nb /= 10\n   \
    \         }\n            if (suma == sumb) {\n                map(suma) < map(sumb)\n\
    \            } else {\n                suma < sumb\n            }\n        })",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            aSum < bSum\
    \ || (aSum == bSum && nums.indexOf(a) < nums.indexOf(b))\n        })", "     \
    \   // Fill in the code here\n        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        nums.sortWith((x, y) => x.toString.map(_.asDigit).sum\
    \ < y.toString.map(_.asDigit).sum)", '        nums.sortWith((a, b) => sumDigits(a)
    < sumDigits(b))', '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))',
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        def sumDigits(n : Long) : Long = {\n         \
    \   var sum = 0l\n            var nn = n\n            while (nn != 0) {\n    \
    \            sum += nn % 10\n                nn /= 10\n            }\n       \
    \     sum\n        }\n        nums.zipWithIndex.sortWith((a, b) => {\n       \
    \     if (sumDigits(a._1) == sumDigits(b._1)) {\n                a._2 < b._2\n\
    \            } else {\n                sumDigits(a._1) < sumDigits(b._1)\n   \
    \         }\n        }).map(_._1)", "        // Fill up this function body\n \
    \       // You can add another function as well, if required\n        nums.sortWith((a,\
    \ b) => sumDigits(a) < sumDigits(b))", "        nums.sortWith((a, b) => {\n  \
    \          val aSum = a.toString.map(x => x.asDigit).sum\n            val bSum\
    \ = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum) nums.indexOf(a)\
    \ < nums.indexOf(b)\n            else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n    \
    \            nums.indexOf(a) < nums.indexOf(b)\n            } else {\n       \
    \         aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", '        nums.sortWith((x,
    y) => (x.toString.map(_.asDigit).sum, x) < (y.toString.map(_.asDigit).sum, y))',
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n\
    \            val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum\
    \ == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            }\
    \ else {\n                aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", "        // your code\
    \ here\n        return nums", "        nums.sortWith((a, b) => {\n           \
    \ val aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        nums.sortWith((a, b) => a.toString.map(_.asDigit).sum <\
    \ b.toString.map(_.asDigit).sum)", "        def sumDigits(num : Long) : Long =\
    \ {\n            var sum = 0l\n            var n = num\n            while (n !=\
    \ 0) {\n                sum += n % 10\n                n /= 10\n            }\n\
    \            sum\n        }\n        nums.zipWithIndex.sortBy(x => (sumDigits(x._1),\
    \ x._2)).map(_._1)", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(c => c.asDigit).sum\n            val bSum = b.toString.map(c\
    \ => c.asDigit).sum\n            if (aSum == bSum) a < b else aSum < bSum\n  \
    \      })", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))', " \
    \       nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x =>\
    \ x.asDigit).sum\n            val bSum = b.toString.map(x => x.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n\
    \            val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum\
    \ == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            }\
    \ else {\n                aSum < bSum\n            }\n        })", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        nums.sortWith((a, b) => (sumDigits(a) < sumDigits(b)) ||\
    \ (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))", "   \
    \     nums.sortWith((x, y) => {\n            val xs = x.toString.map(x => x.asDigit).sum\n\
    \            val ys = y.toString.map(x => x.asDigit).sum\n            if (xs ==\
    \ ys) {\n                nums.indexOf(x) < nums.indexOf(y)\n            } else\
    \ {\n                xs < ys\n            }\n        })", "        val map = new\
    \ HashMap[Long, Long]\n        for (i <- 0 until nums.length) {\n            var\
    \ sum = 0l\n            var n = nums(i)\n            while (n != 0) {\n      \
    \          sum += n % 10\n                n /= 10\n            }\n           \
    \ map += (i -> sum)\n        }\n        val sorted = map.toList.sortBy(x => (x._2,\
    \ x._1))\n        sorted.map(x => nums(x._1.toInt))", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        nums.sortWith((a, b) => {\n            val sumA = a.toString.map(_.asDigit).sum\n\
    \            val sumB = b.toString.map(_.asDigit).sum\n            if (sumA ==\
    \ sumB) {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else\
    \ {\n                sumA < sumB\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val sumA = a.toString.map(x => x.asDigit).sum\n       \
    \     val sumB = b.toString.map(x => x.asDigit).sum\n            if (sumA == sumB)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                sumA < sumB\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", '        nums.zipWithIndex.sortBy(x => (x._1.toString.map(_.asDigit).sum,
    x._2)).map(_._1)', "        nums.sortWith((a, b) => {\n            val aSum =\
    \ a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", "        val numsWithPoints = nums.map(x => (x, x.toString.map(x\
    \ => x.asDigit).sum))\n        numsWithPoints.sortBy(x => (x._2, nums.indexOf(x._1))).map(x\
    \ => x._1)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        def sumDigits(n : Long) : Long = {\n\
    \            var sum = 0l\n            var nn = n\n            while (nn != 0)\
    \ {\n                sum += nn % 10\n                nn /= 10\n            }\n\
    \            sum\n        }\n        nums.zipWithIndex.sortWith((a, b) => {\n\
    \            val (x, i) = a\n            val (y, j) = b\n            val sx =\
    \ sumDigits(x)\n            val sy = sumDigits(y)\n            if (sx == sy) i\
    \ < j else sx < sy\n        }).map(_._1)", "        nums.sortWith((a, b) => {\n\
    \            val aSum = a.toString.map(x => x.asDigit).sum\n            val bSum\
    \ = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum) {\n    \
    \            nums.indexOf(a) < nums.indexOf(b)\n            } else {\n       \
    \         aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n  \
    \          val sumA = a.toString.map(x => x.asDigit).sum\n            val sumB\
    \ = b.toString.map(x => x.asDigit).sum\n            if (sumA == sumB) a < b else\
    \ sumA < sumB\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ sumA = a.toString.map(x => x.asDigit).sum\n            val sumB = b.toString.map(x\
    \ => x.asDigit).sum\n            if (sumA == sumB) a < b else sumA < sumB\n  \
    \      })", "        var map = new HashMap[Long, Long]()\n        for (i <- 0\
    \ until nums.length) {\n            var sum = 0l\n            var num = nums(i)\n\
    \            while (num != 0) {\n                sum += num % 10\n           \
    \     num /= 10\n            }\n            map += (sum -> nums(i))\n        }\n\
    \        var list = map.toList.sortWith((a, b) => a._1 < b._1)\n        list.map(x\
    \ => x._2)", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x\
    \ => x.asDigit).sum\n            val bSum = b.toString.map(x => x.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n    \
    \            nums.indexOf(a) < nums.indexOf(b)\n            } else {\n       \
    \         aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", '        nums.zipWithIndex.sortBy(x => (x._1.toString.map(_.asDigit).sum,
    x._2)).map(_._1)', "        nums.sortWith((x, y) => {\n            val xs = x.toString.map(_.asDigit).sum\n\
    \            val ys = y.toString.map(_.asDigit).sum\n            if (xs == ys)\
    \ {\n                nums.indexOf(x) < nums.indexOf(y)\n            } else {\n\
    \                xs < ys\n            }\n        })", "        nums.sortWith((x,\
    \ y) => {\n            val xs = x.toString.map(_.asDigit).sum\n            val\
    \ ys = y.toString.map(_.asDigit).sum\n            if (xs == ys) {\n          \
    \      nums.indexOf(x) < nums.indexOf(y)\n            } else {\n             \
    \   xs < ys\n            }\n        })", "        nums.sortWith((a, b) => {\n\
    \            val aSum = a.toString.map(_.asDigit).sum\n            val bSum =\
    \ b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else aSum\
    \ < bSum\n        })", "        var map = new HashMap[Long, Long]()\n        for\
    \ (i <- 0 until nums.length) {\n            var sum = 0l\n            var num\
    \ = nums(i)\n            while (num != 0) {\n                sum += num % 10\n\
    \                num /= 10\n            }\n            map += (i -> sum)\n   \
    \     }\n        var sorted = map.toList.sortBy(_._2)\n        var result = new\
    \ Array[Long](nums.length)\n        for (i <- 0 until sorted.length) {\n     \
    \       result(i) = nums(sorted(i)._1.toInt)\n        }\n        result.toList",
  "        val numsWithPoints = nums.zipWithIndex.map(x => (x._1, x._1.toString.map(_.asDigit).sum,\
    \ x._2))\n        numsWithPoints.sortBy(x => (x._2, x._3)).map(_._1)", "     \
    \   nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        // Fill in the code here\n\
    \        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var map = Map[Long, Long]()\n        for (i <- 0 until nums.length) {\n\
    \            var sum = 0l\n            var num = nums(i)\n            while (num\
    \ != 0) {\n                sum += num % 10\n                num /= 10\n      \
    \      }\n            map += (i -> sum)\n        }\n        var list = List[Long]()\n\
    \        for (i <- 0 until nums.length) {\n            var min = Long.MaxValue\n\
    \            var minIndex = -1\n            for (j <- 0 until nums.length) {\n\
    \                if (map(j) < min) {\n                    min = map(j)\n     \
    \               minIndex = j\n                }\n            }\n            list\
    \ = list :+ nums(minIndex)\n            map -= minIndex\n        }\n        list",
  "        nums.sortWith((x, y) => {\n            val xSum = x.toString.map(x => x.asDigit).sum\n\
    \            val ySum = y.toString.map(x => x.asDigit).sum\n            if (xSum\
    \ == ySum) {\n                nums.indexOf(x) < nums.indexOf(y)\n            }\
    \ else {\n                xSum < ySum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })"]
stop_tokens:
- "\n    }\n"
