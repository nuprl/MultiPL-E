name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    // >>> orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    // (List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    // >>> orderByPoints((List[Long]()))\n\
  \    // (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x\
    \ => x.asDigit).sum\n            val bSum = b.toString.map(x => x.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        nums.sortWith((x, y) => {\n            val xsum = x.toString.map(_.asDigit).sum\n\
    \            val ysum = y.toString.map(_.asDigit).sum\n            if (xsum ==\
    \ ysum) {\n                nums.indexOf(x) < nums.indexOf(y)\n            } else\
    \ {\n                xsum < ysum\n            }\n        })", "        // Fill\
    \ in the code here\n        return nums", "        def sumDigits(num : Long) :\
    \ Long = {\n            var sum = 0l\n            var n = num\n            while\
    \ (n != 0) {\n                sum += n % 10\n                n /= 10\n       \
    \     }\n            sum\n        }\n        nums.zipWithIndex.sortBy(x => (sumDigits(x._1),\
    \ x._2)).map(_._1)", "        nums.sortWith((x, y) => {\n            val xs =\
    \ x.toString.map(_.asDigit).sum\n            val ys = y.toString.map(_.asDigit).sum\n\
    \            if (xs == ys) {\n                nums.indexOf(x) < nums.indexOf(y)\n\
    \            } else {\n                xs < ys\n            }\n        })", " \
    \       nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        // Fill in the code here\n\
    \        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) {\n    \
    \            nums.indexOf(a) < nums.indexOf(b)\n            } else {\n       \
    \         aSum < bSum\n            }\n        })", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", '        nums.sortWith((x, y) =>
    sumDigits(x) < sumDigits(y))', "        nums.sortWith((a, b) => {\n          \
    \  val aSum = a.toString.map(c => c.asDigit).sum\n            val bSum = b.toString.map(c\
    \ => c.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        nums.sortWith((x, y)\
    \ => {\n            val xSum = x.toString.map(_.asDigit).sum\n            val\
    \ ySum = y.toString.map(_.asDigit).sum\n            if (xSum == ySum) {\n    \
    \            nums.indexOf(x) < nums.indexOf(y)\n            } else {\n       \
    \         xSum < ySum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) a < b else aSum < bSum\n        })", "        nums.sortWith((a, b) =>\
    \ {\n            val sumA = a.toString.map(x => x.asDigit).sum\n            val\
    \ sumB = b.toString.map(x => x.asDigit).sum\n            if (sumA == sumB) a <\
    \ b else sumA < sumB\n        })", "        nums.sortWith((a, b) => {\n      \
    \      val sumA = a.toString.map(x => x.asDigit).sum\n            val sumB = b.toString.map(x\
    \ => x.asDigit).sum\n            if (sumA == sumB) a < b else sumA < sumB\n  \
    \      })", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        nums.sortWith((a, b) => sumDigits(a)\
    \ < sumDigits(b))", "        nums.sortWith((a, b) => {\n            val aSum =\
    \ a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        if\
    \ (nums.isEmpty) return nums\n        val sums = nums.map(x => x.toString.map(y\
    \ => y.asDigit).sum)\n        val sorted = sums.sorted\n        val indices =\
    \ sorted.map(x => sums.indexOf(x))\n        indices.map(x => nums(x))"]
stop_tokens:
- "\n    }\n"
