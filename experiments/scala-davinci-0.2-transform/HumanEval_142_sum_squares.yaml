name: HumanEval_142_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"\n    // This function will take a list of integers. For all entries in\
  \ the list, the function shall square the integer entry if its index is a \n   \
  \ // multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    // change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n \
  \   // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n \
  \   def sumSquares(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n\
  \    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
  \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong,\
  \ -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong,\
  \ 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong)))\
  \ == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong,\
  \ 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong,\
  \ -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong,\
  \ -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong,\
  \ 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong,\
  \ 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
completions: ["        var sum : Long = 0\n        for (i <- 0 until lst.length) {\n\
    \            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n     \
    \       } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) * lst(i)\n\
    \            } else {\n                sum += lst(i)\n            }\n        }\n\
    \        return sum", "        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        return sum", "        var sum : Long = 0\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst(i) * lst(i)\n            } else if (i % 4 == 0) {\n                sum +=\
    \ lst(i) * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        var sum : Long = 0\n\
    \        for (i <- 0 until lst.length) {\n            if (i % 3 == 0) {\n    \
    \            sum += lst(i) * lst(i)\n            } else if (i % 4 == 0) {\n  \
    \              sum += lst(i) * lst(i) * lst(i)\n            } else {\n       \
    \         sum += lst(i)\n            }\n        }\n        return sum", "    \
    \    var sum : Long = 0\n        for (i <- 0 until lst.length) {\n           \
    \ if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n            } else\
    \ if (i % 4 == 0) {\n                sum += lst(i) * lst(i) * lst(i)\n       \
    \     } else {\n                sum += lst(i)\n            }\n        }\n    \
    \    return sum", "        var sum : Long = 0\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        return sum", "        var sum = 0l\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n        \
    \    else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum\
    \ += lst(i)\n        }\n        return sum", "        var sum = 0l\n        for\
    \ (i <- 0 until lst.length) {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n\
    \            else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n          \
    \  else sum += lst(i)\n        }\n        return sum", "        var sum : Long\
    \ = 0\n        for (i <- 0 until lst.length) {\n            if (i % 3 == 0) sum\
    \ += lst(i) * lst(i)\n            else if (i % 4 == 0) sum += lst(i) * lst(i)\
    \ * lst(i)\n            else sum += lst(i)\n        }\n        return sum", " \
    \       var sum : Long = 0\n        for (i <- 0 until lst.length) {\n        \
    \    if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i % 4 == 0)\
    \ sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n        }\n\
    \        return sum", "        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n \
    \           } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i) *\
    \ lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        return sum", "        var sum : Long = 0\n        for (i <-\
    \ 0 until lst.length) {\n            if (i % 3 == 0) {\n                sum +=\
    \ lst(i) * lst(i)\n            } else if (i % 4 == 0) {\n                sum +=\
    \ lst(i) * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        var sum : Long = 0\n\
    \        for (i <- 0 until lst.length) {\n            if (i % 3 == 0) sum += lst(i)\
    \ * lst(i)\n            else if (i % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n\
    \            else sum += lst(i)\n        }\n        return sum", "        var\
    \ sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 3 ==\
    \ 0) sum += lst(i) * lst(i)\n            else if (i % 4 == 0) sum += lst(i) *\
    \ lst(i) * lst(i)\n            else sum += lst(i)\n        }\n        return sum",
  "        var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i\
    \ % 3 == 0) sum += lst(i) * lst(i)\n            else if (i % 4 == 0) sum += lst(i)\
    \ * lst(i) * lst(i)\n            else sum += lst(i)\n        }\n        return\
    \ sum", "        var sum = 0l\n        for (i <- 0 until lst.length) {\n     \
    \       if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i % 4 ==\
    \ 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n       \
    \ }\n        return sum", "        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 3 == 0) sum += lst(i) * lst(i)\n            else if (i\
    \ % 4 == 0) sum += lst(i) * lst(i) * lst(i)\n            else sum += lst(i)\n\
    \        }\n        return sum", "        var sum = 0l\n        for (i <- 0 until\
    \ lst.length) {\n            if (i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            } else if (i % 4 == 0) {\n                sum += lst(i)\
    \ * lst(i) * lst(i)\n            } else {\n                sum += lst(i)\n   \
    \         }\n        }\n        return sum", "        var sum : Long = 0\n   \
    \     for (i <- 0 until lst.length) {\n            if (i % 3 == 0) {\n       \
    \         sum += lst(i) * lst(i)\n            } else if (i % 4 == 0) {\n     \
    \           sum += lst(i) * lst(i) * lst(i)\n            } else {\n          \
    \      sum += lst(i)\n            }\n        }\n        return sum", "       \
    \ var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 3\
    \ == 0) sum += lst(i) * lst(i)\n            else if (i % 4 == 0) sum += lst(i)\
    \ * lst(i) * lst(i)\n            else sum += lst(i)\n        }\n        return\
    \ sum"]
stop_tokens:
- "\n    }\n"
