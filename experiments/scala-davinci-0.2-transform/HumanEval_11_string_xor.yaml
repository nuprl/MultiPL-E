name: HumanEval_11_string_xor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform\
  \ binary XOR on these inputs and return result also as a string.\n    // >>> stringXor((\"\
  010\"), (\"110\"))\n    // (\"100\")\n    def stringXor(a : String, b : String)\
  \ : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"\
  ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"\
  0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n   \
  \ }\n\n}\n"
completions: ["        val aBits = a.map(c => c.toString.toInt)\n        val bBits\
    \ = b.map(c => c.toString.toInt)\n        val result = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        result.map(i => i.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            result += (if (a(i) == b(i))\
    \ '0' else '1')\n        }\n        result.toString", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val c = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         c.append((if (a(i) == '1') 1 else 0) ^ (if (b(i) == '1') 1 else 0))\n\
    \        }\n        c.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        cBits.map(c => c.toString).reduceLeft(_ + _)", "  \
    \      val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val aBits =\
    \ a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        val a_bytes = a.getBytes\n        val b_bytes = b.getBytes\n\
    \        val xor_bytes = a_bytes.zip(b_bytes).map(x => (x._1 ^ x._2).toByte)\n\
    \        new String(xor_bytes)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        (aBits zip bBits).map(p\
    \ => (p._1 ^ p._2).toString).mkString", "        val c = new StringBuilder\n \
    \       for (i <- 0 until a.length) {\n            c.append((a(i) - '0') ^ (b(i)\
    \ - '0'))\n        }\n        c.toString", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = (aBits zip bBits).map(p => p._1\
    \ ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.map(c => if (c == '1') 1 else 0)\n        val bBits = b.map(c => if\
    \ (c == '1') 1 else 0)\n        val xorBits = (aBits zip bBits).map(t => t._1\
    \ ^ t._2)\n        xorBits.map(b => if (b == 1) '1' else '0').mkString", "   \
    \     if (a.length != b.length) throw new IllegalArgumentException(\"Inputs must\
    \ be of equal length\")\n        val result = new StringBuilder\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\")\n\
    \            else result.append(\"1\")\n        }\n        result.toString", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val a_array\
    \ = a.toCharArray\n        val b_array = b.toCharArray\n        val result = new\
    \ StringBuilder\n        for (i <- 0 until a_array.length) {\n            if (a_array(i)\
    \ == b_array(i)) result.append(\"0\")\n            else result.append(\"1\")\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val xor = a.zip(b).map(x =>\
    \ (x._1.toInt ^ x._2.toInt).toString)\n        xor.mkString", "        val aBits\
    \ = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result += '0'\n            else result += '1'\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val aBits =\
    \ a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(c => c._1 ^ c._2)\n        xorBits.map(c\
    \ => c.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val a_arr = a.toCharArray\n\
    \        val b_arr = b.toCharArray\n        val result = new StringBuilder\n \
    \       for (i <- 0 until a_arr.length) {\n            if (a_arr(i) == b_arr(i))\
    \ result.append(\"0\")\n            else result.append(\"1\")\n        }\n   \
    \     result.toString", "        val aBits = a.map(c => c.toString.toInt)\n  \
    \      val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val a_arr = a.toCharArray\n\
    \        val b_arr = b.toCharArray\n        val c_arr = new Array[Char](a_arr.length)\n\
    \        for (i <- 0 until a_arr.length) {\n            if (a_arr(i) == b_arr(i))\
    \ c_arr(i) = '0'\n            else c_arr(i) = '1'\n        }\n        return c_arr.mkString",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            result\
    \ += (if (a(i) == b(i)) \"0\" else \"1\")\n        }\n        return result",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val c = new StringBuilder\n        for (i <- 0 until a.length) {\n    \
    \        if (a(i) == b(i)) c.append(\"0\")\n            else c.append(\"1\")\n\
    \        }\n        c.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            result.append(if (a(i) == b(i)) '0' else '1')\n        }\n      \
    \  result.toString", "        val aBits = a.map(c => c.toString.toInt)\n     \
    \   val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val c = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         c.append((if (a(i) == '1') 1 else 0) ^ (if (b(i) == '1') 1 else 0))\n\
    \        }\n        c.toString", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = (aBits zip bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        val a_bytes = a.getBytes\n        val b_bytes = b.getBytes\n\
    \        val c_bytes = new Array[Byte](a_bytes.length)\n        for (i <- 0 until\
    \ a_bytes.length) {\n            c_bytes(i) = (a_bytes(i) ^ b_bytes(i)).toByte\n\
    \        }\n        new String(c_bytes)", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val a_bits = a.toList.map(x => x.toString.toInt)\n        val b_bits =\
    \ b.toList.map(x => x.toString.toInt)\n        val c_bits = a_bits.zip(b_bits).map(x\
    \ => x._1 ^ x._2)\n        c_bits.map(x => x.toString).mkString", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until a.length) {\n            sb.append((a(i)\
    \ - '0') ^ (b(i) - '0'))\n        }\n        sb.toString", "        val c = new\
    \ StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) c.append(\"0\")\n            else c.append(\"1\")\n        }\n       \
    \ c.toString", "        val sb = new StringBuilder\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) sb.append(\"0\")\n            else\
    \ sb.append(\"1\")\n        }\n        sb.toString", "        var result = \"\"\
    \n        for (i <- 0 until a.length) {\n            result += (if (a(i) == b(i))\
    \ \"0\" else \"1\")\n        }\n        return result", "        val aBits = a.toList.map(x\
    \ => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        var result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            result += (if (a(i) == b(i))\
    \ '0' else '1')\n        }\n        return result.toString", "        val aBits\
    \ = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append(\"0\")\n            else result.append(\"1\")\n     \
    \   }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduce(_ + _)", "        val aBits\
    \ = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val a_bits\
    \ = a.map(c => c.toString.toInt)\n        val b_bits = b.map(c => c.toString.toInt)\n\
    \        val c_bits = a_bits.zip(b_bits).map(t => t._1 ^ t._2)\n        c_bits.map(c\
    \ => c.toString).reduce(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => if (c == '1') 1 else 0)\n        val bBits = b.map(c\
    \ => if (c == '1') 1 else 0)\n        val cBits = aBits.zip(bBits).map(p => if\
    \ (p._1 == p._2) 0 else 1)\n        cBits.map(c => if (c == 1) '1' else '0').mkString",
  "        val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aa = a.toCharArray\n       \
    \ val bb = b.toCharArray\n        val cc = new Array[Char](aa.length)\n      \
    \  for (i <- 0 until aa.length) {\n            cc(i) = if (aa(i) == bb(i)) '0'\
    \ else '1'\n        }\n        return cc.mkString", "        val n = a.length\n\
    \        val c = new Array[Char](n)\n        for (i <- 0 until n) {\n        \
    \    if (a(i) == b(i)) c(i) = '0'\n            else c(i) = '1'\n        }\n  \
    \      c.mkString", "        val aBits = a.map(c => c.toString.toInt)\n      \
    \  val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ c = new StringBuilder\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) c.append(\"0\")\n            else c.append(\"1\")\n        }\n\
    \        c.toString", "        var result = \"\"\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result += \"0\"\n            else result +=\
    \ \"1\"\n        }\n        return result", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        val n = a.length\n        val c = new Array[Char](n)\n\
    \        for (i <- 0 until n) {\n            if (a(i) == b(i)) c(i) = '0'\n  \
    \          else c(i) = '1'\n        }\n        return new String(c)", "      \
    \  val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xor = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xor.map(b =>\
    \ b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val aBits =\
    \ a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val a_arr = a.toCharArray\n        val b_arr = b.toCharArray\n       \
    \ val result = new Array[Char](a_arr.length)\n        for (i <- 0 until a_arr.length)\
    \ {\n            result(i) = if (a_arr(i) == b_arr(i)) '0' else '1'\n        }\n\
    \        result.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\"\
    )\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).mkString", "        val c = new\
    \ Array[Char](a.length)\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) c(i) = '0'\n            else c(i) = '1'\n        }\n        return\
    \ new String(c)", "        val aBits = a.map(c => c.toString.toInt)\n        val\
    \ bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(c\
    \ => c._1 ^ c._2)\n        xorBits.map(c => c.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^\
    \ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^\
    \ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ xor = a.zip(b).map(x => x._1 ^ x._2)\n        xor.map(x => x.toString).reduceLeft(_\
    \ + _)", "        val a_int = a.toInt(2)\n        val b_int = b.toInt(2)\n   \
    \     val c_int = a_int ^ b_int\n        val c = c_int.toBinaryString\n      \
    \  return c", "        val sb = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"\
    1\")\n        }\n        sb.toString", "        val c = new StringBuilder\n  \
    \      for (i <- 0 until a.length) {\n            if (a(i) == b(i)) c.append(\"\
    0\")\n            else c.append(\"1\")\n        }\n        c.toString", "    \
    \    val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val aBits =\
    \ a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result += '0'\n            else result += '1'\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            result.append(if (a(i) ==\
    \ b(i)) '0' else '1')\n        }\n        result.toString", "        val aBits\
    \ = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c =>\
    \ c.toString.toInt)\n        val cBits = (aBits zip bBits).map(t => t._1 ^ t._2)\n\
    \        cBits.map(c => c.toString).reduceLeft(_ + _)", "        val aBits = a.toList.map(x\
    \ => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val cBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        cBits.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        val aBinary = a.toList.map(x =>\
    \ x.toString.toInt)\n        val bBinary = b.toList.map(x => x.toString.toInt)\n\
    \        val cBinary = aBinary.zip(bBinary).map(x => x._1 ^ x._2)\n        cBinary.map(x\
    \ => x.toString).mkString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xor = (aBits zip\
    \ bBits).map(t => t._1 ^ t._2)\n        xor.map(i => i.toString).mkString", " \
    \       val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = (aBits zip bBits).map(p => p._1\
    \ ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val c = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) c.append(\"\
    0\")\n            else c.append(\"1\")\n        }\n        c.toString", "    \
    \    val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n     \
    \       if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\")\n\
    \        }\n        sb.toString", "        val sb = new StringBuilder\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"0\"\
    )\n            else sb.append(\"1\")\n        }\n        sb.toString", "     \
    \   val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).mkString", "        val aBits =\
    \ a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xor = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xor.map(i =>\
    \ i.toString).reduceLeft(_ + _)", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).mkString",
  "        val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(c\
    \ => c._1 ^ c._2)\n        xorBits.map(c => c.toString).reduceLeft(_ + _)", " \
    \       if (a.length != b.length) throw new IllegalArgumentException(\"Input strings\
    \ must have the same length.\")\n        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val result = aBits.zip(bBits).map(p\
    \ => (p._1 ^ p._2).toString)\n        result.mkString", "        require(a.length\
    \ == b.length)\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ a.length) {\n            result.append((a(i) - '0') ^ (b(i) - '0'))\n      \
    \  }\n        result.toString", "        val aa = a.toList.map(_.toString.toInt)\n\
    \        val bb = b.toList.map(_.toString.toInt)\n        val cc = aa.zip(bb).map(x\
    \ => x._1 ^ x._2)\n        cc.map(_.toString).reduceLeft(_ + _)", "        var\
    \ result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result += \"0\"\n            else result += \"1\"\n        }\n       \
    \ return result", "        val result = new StringBuilder\n        for (i <- 0\
    \ until a.length) {\n            if (a(i) == b(i)) result.append(\"0\")\n    \
    \        else result.append(\"1\")\n        }\n        result.toString", "   \
    \     var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        var result = \"\"\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result += \"0\"\n            else\
    \ result += \"1\"\n        }\n        return result", "        var result = \"\
    \"\n        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result\
    \ += \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = (aBits\
    \ zip bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        val aBits = a.map(c => c.toString.toInt)\n        val bBits\
    \ = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        cBits.map(b => b.toString).reduceLeft(_ + _)", "        val result =\
    \ new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append(\"0\")\n            else result.append(\"1\")\n     \
    \   }\n        result.toString", "        val result = new StringBuilder\n   \
    \     for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val xorBits = (aBits zip bBits).map(x => x._1\
    \ ^ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_ + _)", "        val\
    \ c = new StringBuilder\n        for (i <- 0 until a.length) {\n            c.append((a(i)\
    \ - '0') ^ (b(i) - '0'))\n        }\n        c.toString", "        val aBits =\
    \ a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val cBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        cBits.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        var result = \"\"\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\
    \n            else result += \"1\"\n        }\n        return result", "     \
    \   val result = new StringBuilder\n        for (i <- 0 until a.length) {\n  \
    \          if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val a_int =\
    \ Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b, 2)\n       \
    \ val c_int = a_int ^ b_int\n        val c = Integer.toBinaryString(c_int)\n \
    \       return c", "        val a_int = Integer.parseInt(a, 2)\n        val b_int\
    \ = Integer.parseInt(b, 2)\n        val c_int = a_int ^ b_int\n        val c =\
    \ Integer.toBinaryString(c_int)\n        return c", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result.append(\"0\")\n            else result.append(\"1\")\n        }\n\
    \        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val a_int = Integer.parseInt(a,\
    \ 2)\n        val b_int = Integer.parseInt(b, 2)\n        val c_int = a_int ^\
    \ b_int\n        val c = Integer.toBinaryString(c_int)\n        return c", " \
    \       var result = \"\"\n        for (i <- 0 until a.length) {\n           \
    \ if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n      \
    \  }\n        return result", "        val a_ = a.toList.map(_.toString.toInt)\n\
    \        val b_ = b.toList.map(_.toString.toInt)\n        val c = a_.zip(b_).map(x\
    \ => x._1 ^ x._2)\n        c.map(_.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.map(c => if (c == '1') 1 else 0)\n        val bBits = b.map(c => if\
    \ (c == '1') 1 else 0)\n        val xorBits = aBits.zip(bBits).map(t => if (t._1\
    \ == t._2) 0 else 1)\n        xorBits.map(b => if (b == 1) '1' else '0').mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val a_int = a.toInt(2)\n       \
    \ val b_int = b.toInt(2)\n        val c_int = a_int ^ b_int\n        val c = c_int.toBinaryString\n\
    \        return c", "        var result = \"\"\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result += \"0\"\n            else result +=\
    \ \"1\"\n        }\n        return result", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(pair\
    \ => pair._1 ^ pair._2)\n        xorBits.map(bit => bit.toString).reduceLeft(_\
    \ + _)", "        val aBits = a.map(c => if (c == '1') 1 else 0)\n        val\
    \ bBits = b.map(c => if (c == '1') 1 else 0)\n        val cBits = aBits.zip(bBits).map(p\
    \ => if (p._1 == p._2) 0 else 1)\n        cBits.map(c => if (c == 1) '1' else\
    \ '0').mkString", "        val aBits = a.map(c => c.toString.toInt)\n        val\
    \ bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       if (a.length != b.length) throw new IllegalArgumentException(\"Inputs\
    \ must be of equal length.\")\n        val result = new StringBuilder\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val a_array = a.toCharArray\n        val b_array = b.toCharArray\n    \
    \    val result = new Array[Char](a_array.length)\n        for (i <- 0 until a_array.length)\
    \ {\n            if (a_array(i) == b_array(i)) result(i) = '0'\n            else\
    \ result(i) = '1'\n        }\n        result.mkString", "        val a_arr = a.toCharArray\n\
    \        val b_arr = b.toCharArray\n        val c_arr = new Array[Char](a_arr.length)\n\
    \        for (i <- 0 until a_arr.length) {\n            if (a_arr(i) == b_arr(i))\
    \ c_arr(i) = '0'\n            else c_arr(i) = '1'\n        }\n        return c_arr.mkString",
  "        val aBin = a.toInt(2)\n        val bBin = b.toInt(2)\n        val cBin\
    \ = aBin ^ bBin\n        cBin.toBinaryString", "        val aBits = a.map(c =>\
    \ c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n      \
    \  val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        val a_array = a.toCharArray\n        val b_array = b.toCharArray\n\
    \        val result = new StringBuilder\n        for (i <- 0 until a_array.length)\
    \ {\n            if (a_array(i) == b_array(i)) result.append(\"0\")\n        \
    \    else result.append(\"1\")\n        }\n        result.toString", "       \
    \ val result = new StringBuilder\n        for (i <- 0 until a.length) {\n    \
    \        if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val c = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            c.append((a(i) - '0') ^ (b(i)\
    \ - '0'))\n        }\n        c.toString", "        val a_int = Integer.parseInt(a,\
    \ 2)\n        val b_int = Integer.parseInt(b, 2)\n        val c_int = a_int ^\
    \ b_int\n        val c = Integer.toBinaryString(c_int)\n        return c", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val c = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            c.append((if (a(i) == '1')\
    \ 1 else 0) ^ (if (b(i) == '1') 1 else 0))\n        }\n        c.toString", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val zipped = aBits.zip(bBits)\n        val xor =\
    \ zipped.map(pair => pair._1 ^ pair._2)\n        xor.map(bit => bit.toString).reduceLeft(_\
    \ + _)", "        val n = a.length\n        val m = b.length\n        if (n !=\
    \ m) throw new IllegalArgumentException(\"Input strings must have the same length\"\
    )\n        val sb = new StringBuilder\n        for (i <- 0 until n) {\n      \
    \      val ai = a(i)\n            val bi = b(i)\n            if (ai == bi) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val a_array = a.toCharArray\n        val b_array = b.toCharArray\n    \
    \    val result = new Array[Char](a_array.length)\n        for (i <- 0 until a_array.length)\
    \ {\n            if (a_array(i) == b_array(i)) result(i) = '0'\n            else\
    \ result(i) = '1'\n        }\n        result.mkString", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val cBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        cBits.map(c\
    \ => c.toString).reduceLeft(_ + _)", "        val aBits = a.toList.map(x => x.toString.toInt)\n\
    \        val bBits = b.toList.map(x => x.toString.toInt)\n        val xorBits\
    \ = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_\
    \ + _)", "        val aBits = a.toList.map(c => c.toString.toInt)\n        val\
    \ bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).mkString", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        require(a.length == b.length)\n\
    \        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val c = new StringBuilder\n    \
    \    for (i <- 0 until a.length) {\n            c.append((if (a(i) == '1') 1 else\
    \ 0) ^ (if (b(i) == '1') 1 else 0))\n        }\n        c.toString", "       \
    \ val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = (aBits zip bBits).map(p => p._1\
    \ ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ a_array = a.toCharArray\n        val b_array = b.toCharArray\n        val result\
    \ = new Array[Char](a_array.length)\n        for (i <- 0 until a_array.length)\
    \ {\n            if (a_array(i) == b_array(i)) result(i) = '0'\n            else\
    \ result(i) = '1'\n        }\n        result.mkString", "        val aBits = a.toList.map(x\
    \ => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val result = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        result.map(i\
    \ => i.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            result += (if (a(i) == b(i))\
    \ '0' else '1')\n        }\n        result.toString", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)"]
stop_tokens:
- "\n    }\n"
