name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
  \    def median(l : List[Long]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val sorted = l.sorted\n        val n = sorted.length\n    \
    \    if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            val a = sorted(n / 2 - 1)\n            val b = sorted(n /\
    \ 2)\n            (a + b).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n       \
    \     (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n    \
    \        sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n \
    \       val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            val m1 = sorted(n / 2 - 1)\n         \
    \   val m2 = sorted(n / 2)\n            (m1 + m2).toFloat / 2\n        } else\
    \ {\n            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            val a = sorted(n / 2 - 1)\n          \
    \  val b = sorted(n / 2)\n            (a + b).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        if (sorted.length\
    \ % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length /\
    \ 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        if (sorted.length % 2 ==\
    \ 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n     \
    \   }", "        val sorted = l.sorted\n        val n = sorted.length\n      \
    \  if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val n = l.length\n        val sorted = l.sorted\n        if (n % 2 == 0)\
    \ (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        else sorted(n / 2).toFloat",
  "        val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) {\n            (sorted(length / 2 - 1) + sorted(length / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        val n = sorted.length\n        if (n %\
    \ 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n   \
    \     } else {\n            sorted(n / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n     \
    \       (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n  \
    \          sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2 - 1) + sorted(len / 2)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n       \
    \     val a = sorted(n / 2 - 1)\n            val b = sorted(n / 2)\n         \
    \   (a + b).toFloat / 2\n        } else {\n            sorted(n / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n /\
    \ 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n     \
    \       (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n  \
    \          sorted(n / 2).toFloat\n        }", "        var sorted = l.sorted\n\
    \        var n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            val a = sorted(n / 2 - 1)\n          \
    \  val b = sorted(n / 2)\n            (a + b).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            val a =\
    \ sorted(n / 2 - 1)\n            val b = sorted(n / 2)\n            (a + b).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n       \
    \     (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n    \
    \        sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n \
    \       val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) {\n            val a = sorted(length / 2 - 1)\n            val b =\
    \ sorted(length / 2)\n            (a + b).toFloat / 2\n        } else {\n    \
    \        sorted(length / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2 - 1) + sorted(len / 2)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n       \
    \     (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n    \
    \        sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n \
    \       val length = sorted.length\n        if (length % 2 == 0) {\n         \
    \   (sorted(length / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(length / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n       \
    \     (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n    \
    \        sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n \
    \       val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2 - 1) + sorted(len / 2)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) {\n            val a = sorted(length / 2 - 1)\n            val b =\
    \ sorted(length / 2)\n            (a + b).toFloat / 2\n        } else {\n    \
    \        sorted(length / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sortedList = l.sorted\n        val length\
    \ = sortedList.length\n        if (length % 2 == 0) {\n            val mid = length\
    \ / 2\n            (sortedList(mid - 1) + sortedList(mid)).toFloat / 2\n     \
    \   } else {\n            sortedList(length / 2).toFloat\n        }", "      \
    \  val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) {\n            val left = sorted(length / 2 - 1)\n            val\
    \ right = sorted(length / 2)\n            (left + right).toFloat / 2\n       \
    \ } else {\n            sorted(length / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) {\n \
    \           (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(len / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val length = sorted.length\n        if (length % 2 == 0) {\n        \
    \    val a = sorted(length / 2 - 1)\n            val b = sorted(length / 2)\n\
    \            (a + b).toFloat / 2\n        } else {\n            sorted(length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val n = sorted.length\n    \
    \    if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n /\
    \ 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)", "        val n\
    \ = l.length\n        if (n == 0) return 0.0f\n        val sorted = l.sorted\n\
    \        if (n % 2 == 1) return sorted(n / 2).toFloat\n        else return (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2", "        val s = l.sorted\n        val\
    \ n = s.length\n        if (n % 2 == 0) {\n            (s(n / 2) + s(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            s(n / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            val m1\
    \ = sorted(n / 2 - 1)\n            val m2 = sorted(n / 2)\n            (m1 + m2).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val len = sorted.length\n        if (len %\
    \ 2 == 0) {\n            val a = sorted(len / 2 - 1)\n            val b = sorted(len\
    \ / 2)\n            (a + b).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) {\n            val left = sorted(length\
    \ / 2 - 1)\n            val right = sorted(length / 2)\n            (left + right).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n            val a\
    \ = sorted(sorted.length / 2 - 1)\n            val b = sorted(sorted.length /\
    \ 2)\n            (a + b).toFloat / 2\n        } else {\n            sorted(sorted.length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val length = sorted.length\n        if (length % 2 == 0) {\n        \
    \    (sorted(length / 2 - 1) + sorted(length / 2)).toFloat / 2\n        } else\
    \ {\n            sorted(length / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n /\
    \ 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)", "        val sorted\
    \ = l.sorted\n        val length = sorted.length\n        if (length % 2 == 0)\
    \ {\n            val middle = length / 2\n            (sorted(middle - 1) + sorted(middle)).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        val n = sorted.length\n        if (n %\
    \ 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n /\
    \ 2)", "        val sorted = l.sorted\n        val n = sorted.length\n       \
    \ if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat /\
    \ 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "      \
    \  val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n       \
    \     (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n    \
    \        sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n \
    \       if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2 -\
    \ 1) + sorted(sorted.length / 2)).toFloat / 2\n        } else {\n            sorted(sorted.length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        if (sorted.length % 2 ==\
    \ 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n     \
    \   }", "        val sorted = l.sorted\n        val n = sorted.length\n      \
    \  if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val len = sorted.length\n        if (len %\
    \ 2 == 0) {\n            (sorted(len / 2 - 1) + sorted(len / 2)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n            val mid\
    \ = sorted.length / 2\n            (sorted(mid - 1) + sorted(mid)) / 2.0f\n  \
    \      } else {\n            sorted(sorted.length / 2)\n        }", "        val\
    \ sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n            val mid\
    \ = sorted.length / 2\n            ((sorted(mid - 1) + sorted(mid)) / 2.0f)\n\
    \        } else {\n            sorted(sorted.length / 2)\n        }", "      \
    \  val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length\
    \ / 2 - 1) + sorted(sorted.length / 2)).toFloat / 2\n        } else {\n      \
    \      sorted(sorted.length / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2 - 1) + sorted(len / 2)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0)\n            (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\n \
    \           sorted(n / 2)", "        val sorted = l.sorted\n        if (sorted.length\
    \ % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length /\
    \ 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        if (sorted.length % 2 == 0) {\n            val mid = sorted.length\
    \ / 2\n            (sorted(mid - 1) + sorted(mid)) / 2.0f\n        } else {\n\
    \            sorted(sorted.length / 2)\n        }", "        val sorted = l.sorted\n\
    \        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2)\
    \ + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n           \
    \ sorted(sorted.length / 2).toFloat\n        }", "        val n = l.length\n \
    \       val sorted = l.sorted\n        if (n % 2 == 0) (sorted(n / 2) + sorted(n\
    \ / 2 - 1)).toFloat / 2\n        else sorted(n / 2).toFloat", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n\
    \ / 2)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            val m = n / 2\n            (sorted(m -\
    \ 1) + sorted(m)).toFloat / 2\n        } else {\n            sorted(n / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 -\
    \ 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val n = sorted.length\n    \
    \    if (n % 2 == 0) {\n            ((sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2)\n        } else {\n            sorted(n / 2).toFloat\n        }", "   \
    \     val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n     \
    \   } else {\n            sorted(n / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val size = sorted.size\n        if (size % 2 == 0) {\n \
    \           val a = sorted(size / 2 - 1)\n            val b = sorted(size / 2)\n\
    \            (a + b).toFloat / 2\n        } else {\n            sorted(size /\
    \ 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n       \
    \     (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n    \
    \        sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n \
    \       val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n /\
    \ 2 - 1) + sorted(n / 2)) / 2f\n        else sorted(n / 2)", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n     \
    \       (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n  \
    \          sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val length = sorted.length\n        if (length % 2 == 0) {\n        \
    \    (sorted(length / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(length / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n       \
    \     (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n    \
    \        sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n \
    \       val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            val a = sorted(n / 2 - 1)\n          \
    \  val b = sorted(n / 2)\n            (a + b).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n\
    \ / 2)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) {\n\
    \            (sorted(mid - 1) + sorted(mid)).toFloat / 2\n        } else {\n \
    \           sorted(mid).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            val a = sorted(n / 2 - 1)\n            val b = sorted(n /\
    \ 2)\n            (a + b).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n     \
    \   } else {\n            sorted(n / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2 - 1) + sorted(n / 2)) / 2f\n        else sorted(n / 2)", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        else sorted(len / 2).toFloat",
  "        val sorted = l.sorted\n        val len = sorted.length\n        if (len\
    \ % 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            val mid = length / 2\n          \
    \  (sorted(mid - 1) + sorted(mid)).toFloat / 2\n        } else {\n           \
    \ sorted(length / 2).toFloat\n        }", "        val sorted = l.sorted\n   \
    \     val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            val a = sorted(n / 2 - 1)\n          \
    \  val b = sorted(n / 2)\n            (a + b).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) {\n            (sorted(length\
    \ / 2) + sorted(length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        if (sorted.length\
    \ % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length /\
    \ 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val len = sorted.length\n        if (len %\
    \ 2 == 0) {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val size = sorted.size\n        if (size % 2 == 0)\
    \ {\n            (sorted(size / 2 - 1) + sorted(size / 2)).toFloat / 2\n     \
    \   } else {\n            sorted(size / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) {\n \
    \           (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(len / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val size = sorted.size\n        if (size % 2 == 0) {\n            (sorted(size\
    \ / 2) + sorted(size / 2 - 1)).toFloat / 2\n        } else {\n            sorted(size\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) {\n            ((sorted(length\
    \ / 2) + sorted(length / 2 - 1)).toFloat / 2)\n        } else {\n            sorted(length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val length = sorted.length\n\
    \        if (length % 2 == 0) {\n            (sorted(length / 2 - 1) + sorted(length\
    \ / 2)).toFloat / 2\n        } else {\n            sorted(length / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n          \
    \  val x = sorted.length / 2\n            val y = x - 1\n            (sorted(x)\
    \ + sorted(y)).toFloat / 2\n        } else {\n            sorted(sorted.length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        if (length % 2 == 0) {\n            val a = sorted(length\
    \ / 2 - 1)\n            val b = sorted(length / 2)\n            (a + b).toFloat\
    \ / 2\n        } else {\n            sorted(length / 2).toFloat\n        }", " \
    \       val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n       \
    \     (sorted(sorted.length / 2 - 1) + sorted(sorted.length / 2)).toFloat / 2\n\
    \        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n     \
    \   } else {\n            sorted(n / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n     \
    \       (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n  \
    \          sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            val mid = len / 2\n            (sorted(mid\
    \ - 1) + sorted(mid)).toFloat / 2\n        } else {\n            sorted(len /\
    \ 2).toFloat\n        }", "        val sorted = l.sorted\n        val length =\
    \ sorted.length\n        if (length % 2 == 0) {\n            (sorted(length /\
    \ 2 - 1) + sorted(length / 2)).toFloat / 2\n        } else {\n            sorted(length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val size = sorted.size\n        if (size % 2 == 0) {\n   \
    \         (sorted(size / 2 - 1) + sorted(size / 2)).toFloat / 2\n        } else\
    \ {\n            sorted(size / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            (sorted(len / 2 - 1)\
    \ + sorted(len / 2)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        if (len % 2 == 0) {\n            (sorted(len / 2 - 1) + sorted(len /\
    \ 2)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n   \
    \     }", "        val sorted = l.sorted\n        val n = sorted.length\n    \
    \    if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val size = sorted.size\n        if (size % 2 == 0) {\n   \
    \         (sorted(size / 2 - 1) + sorted(size / 2)).toFloat / 2\n        } else\
    \ {\n            sorted(size / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            val a = sorted(len /\
    \ 2 - 1)\n            val b = sorted(len / 2)\n            (a + b).toFloat / 2\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0)\
    \ {\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n       \
    \ } else {\n            sorted(len / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n     \
    \       (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n  \
    \          sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            (sorted(len / 2) + sorted(len\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(len / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            val a = sorted(n / 2 - 1)\n            val b = sorted(n /\
    \ 2)\n            (a + b).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2f\n        else sorted(n / 2)", " \
    \       val sorted = l.sorted\n        val n = sorted.length\n        if (n %\
    \ 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n   \
    \     } else {\n            sorted(n / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val len = sorted.length\n        if (len % 2 == 0) {\n \
    \           (sorted(len / 2) + sorted(len / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(len / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n\
    \ / 2)) / 2.0f\n        else sorted(n / 2)", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            val m =\
    \ n / 2\n            (sorted(m - 1) + sorted(m)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val n = l.length\n  \
    \      val m = n / 2\n        val sorted = l.sorted\n        if (n % 2 == 0) {\n\
    \            (sorted(m - 1) + sorted(m)).toFloat / 2\n        } else {\n     \
    \       sorted(m).toFloat\n        }", "        val n = l.length\n        if (n\
    \ == 0) return 0\n        val m = n / 2\n        if (n % 2 == 0) {\n         \
    \   (l(m - 1) + l(m)).toFloat / 2\n        } else {\n            l(m).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val n = l.length\n        val sorted = l.sorted\n        if (n % 2 == 0)\
    \ (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        else sorted(n / 2).toFloat",
  "        val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2\
    \ == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n     \
    \   } else {\n            sorted(n / 2).toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) (sorted(n\
    \ / 2 - 1) + sorted(n / 2)) / 2.0f\n        else sorted(n / 2)", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val n = l.length\n  \
    \      val m = n / 2\n        if (n % 2 == 0) {\n            val a = l(m - 1)\n\
    \            val b = l(m)\n            (a + b).toFloat / 2\n        } else {\n\
    \            l(m).toFloat\n        }", "        val n = l.length\n        val\
    \ sorted = l.sorted\n        if (n % 2 == 0) {\n            val a = sorted(n /\
    \ 2 - 1)\n            val b = sorted(n / 2)\n            (a + b).toFloat / 2\n\
    \        } else {\n            sorted(n / 2).toFloat\n        }", "        val\
    \ sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 == 0) {\n\
    \            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat / 2\n        } else {\n\
    \            sorted(n / 2).toFloat\n        }", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        if (n % 2 == 0) {\n            (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            sorted(n\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val size =\
    \ sorted.size\n        if (size % 2 == 0) {\n            (sorted(size / 2) + sorted(size\
    \ / 2 - 1)).toFloat / 2\n        } else {\n            sorted(size / 2).toFloat\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            (sorted(n / 2 - 1) + sorted(n / 2)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    val sorted = l.sorted\n        val n = sorted.length\n        if (n % 2 ==\
    \ 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2\n        }\
    \ else {\n            sorted(n / 2).toFloat\n        }", "        val sorted =\
    \ l.sorted\n        val size = sorted.size\n        if (size % 2 == 0) {\n   \
    \         (sorted(size / 2) + sorted(size / 2 - 1)).toFloat / 2\n        } else\
    \ {\n            sorted(size / 2).toFloat\n        }"]
stop_tokens:
- "\n    }\n"
