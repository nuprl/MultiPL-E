name: HumanEval_1_separate_paren_groups
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n    // separate those group into separate strings\
  \ and return the list of those.\n    // Separate groups are balanced (each open\
  \ brace is properly closed) and not nested within each other\n    // Ignore any\
  \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )(\
  \ ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
  \ : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
  (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
  ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
  )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
  (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
  ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
  \    }\n\n}\n"
completions: ["        // TODO: Implement this function\n        return List[String]()",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     var paren_groups = List[String]()\n        var current_group = \"\"\n  \
    \      var open_parens = 0\n        for (c <- paren_string_no_spaces) {\n    \
    \        if (c == '(') {\n                open_parens += 1\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n            }\n         \
    \   current_group += c\n            if (open_parens == 0) {\n                paren_groups\
    \ ::= current_group\n                current_group = \"\"\n            }\n   \
    \     }\n        paren_groups.reverse", "        val paren_string_no_spaces =\
    \ paren_string.replaceAll(\" \", \"\")\n        val paren_groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        var open_parens = 0\n\
    \        for (c <- paren_string_no_spaces) {\n            if (c == '(') {\n  \
    \              open_parens += 1\n                current_group.append(c)\n   \
    \         } else if (c == ')') {\n                open_parens -= 1\n         \
    \       current_group.append(c)\n                if (open_parens == 0) {\n   \
    \                 paren_groups += current_group.toString\n                   \
    \ current_group = new StringBuilder\n                }\n            }\n      \
    \  }\n        paren_groups.toList", "        val paren_string_trimmed = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups : List[String] = List()\n        var paren_group\
    \ : String = \"\"\n        var open_paren_count : Int = 0\n        for (paren\
    \ <- paren_string_trimmed) {\n            if (paren == '(') {\n              \
    \  open_paren_count += 1\n            } else if (paren == ')') {\n           \
    \     open_paren_count -= 1\n            }\n            paren_group += paren\n\
    \            if (open_paren_count == 0) {\n                paren_groups = paren_groups\
    \ :+ paren_group\n                paren_group = \"\"\n            }\n        }\n\
    \        return paren_groups", "        var res = List[String]()\n        var\
    \ cur = \"\"\n        var open = 0\n        for (c <- paren_string) {\n      \
    \      if (c == '(') {\n                open += 1\n                cur += c\n\
    \            } else if (c == ')') {\n                open -= 1\n             \
    \   cur += c\n                if (open == 0) {\n                    res = cur\
    \ :: res\n                    cur = \"\"\n                }\n            }\n \
    \       }\n        res.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var paren_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \   } else if (c == ')') {\n                open_parens -= 1\n            }\n\
    \            paren_group += c\n            if (open_parens == 0) {\n         \
    \       paren_groups = paren_group :: paren_groups\n                paren_group\
    \ = \"\"\n            }\n        }\n        paren_groups.reverse", "        var\
    \ result = List[String]()\n        var current_string = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_string += c\n           \
    \ } else if (c == ')') {\n                open_parens -= 1\n                current_string\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_string :: result\n                    current_string = \"\"\n      \
    \          }\n            } else if (c != ' ') {\n                throw new Exception(\"\
    Invalid character in paren string\")\n            }\n        }\n        return\
    \ result", "        val paren_string_no_spaces = paren_string.replaceAll(\" \"\
    , \"\")\n        val paren_string_no_spaces_list = paren_string_no_spaces.toList\n\
    \        val paren_string_no_spaces_list_length = paren_string_no_spaces_list.length\n\
    \        var paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_index_start\
    \ = 0\n        var paren_string_no_spaces_list_index_end = 0\n        var paren_string_no_spaces_list_index_end_found\
    \ = false\n        var paren_string_no_spaces_list_index_end_found_count = 0\n\
    \        var paren_string_no_spaces_list_index_end_found_count_max = 0\n     \
    \   var paren_string_no_spaces_list_index_end_found_count_max_index = 0\n    \
    \    var paren_string_no_spaces_list_index_end_found_count_max_index_start = 0\n\
    \        var paren_string_no_spaces_list_index_end_found_count_max_index_end =\
    \ 0\n        var paren_string_no_spaces_list_index_end_found_count_max_index_end_found\
    \ = false\n        var paren_string_no_spaces_list_index_end_found_count_max_index_end_found_count\
    \ = 0\n        var paren_string_no_spaces_list_index_end_found_count_max_index_end_found_count_max\
    \ = 0\n        var paren_string_no_spaces_list_index_end_found_count_max_index_end_found_count_max_index\
    \ = 0\n        var paren_string_no_spaces_list_index_end_found_count_max_index_end_found_count_max_index_start\
    \ = 0\n        var paren_string_no_spaces_list_index_end_found_count_max_index_end_found_count_",
  "        var paren_groups = List[String]()\n        var current_group = \"\"\n \
    \       var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    paren_groups = current_group :: paren_groups\n          \
    \          current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character in input string\"\
    )\n            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Invalid input string\")\n        }\n        return paren_groups.reverse",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     var groups = List[String]()\n        var current_group = \"\"\n        var\
    \ open_parens = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        groups", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        var paren_groups\
    \ = List[String]()\n        var current_paren_group = \"\"\n        var open_paren_count\
    \ = 0\n        for (c <- paren_string_no_spaces) {\n            if (c == '(')\
    \ {\n                open_paren_count += 1\n            } else if (c == ')') {\n\
    \                open_paren_count -= 1\n            }\n            current_paren_group\
    \ += c\n            if (open_paren_count == 0) {\n                paren_groups\
    \ = current_paren_group :: paren_groups\n                current_paren_group =\
    \ \"\"\n            }\n        }\n        paren_groups.reverse", "        var\
    \ result = List[String]()\n        var current_group = new StringBuilder()\n \
    \       var open_paren_count = 0\n        for (c <- paren_string) {\n        \
    \    if (c == '(') {\n                open_paren_count += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_paren_count -= 1\n \
    \               current_group.append(c)\n                if (open_paren_count\
    \ == 0) {\n                    result = result :+ current_group.toString()\n \
    \                   current_group = new StringBuilder()\n                }\n \
    \           }\n        }\n        result", "        // Your code here\n      \
    \  return List[String]()", "        var result = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in input string\")\n            }\n\
    \        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Unbalanced parentheses\")\n        }\n        result.reverse", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                throw\
    \ new Exception(\"Invalid character in paren string\")\n            }\n      \
    \  }\n        if (open_parens != 0) {\n            throw new Exception(\"Unbalanced\
    \ parens\")\n        }\n        return paren_groups.reverse", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_groups = ListBuffer[String]()\n\
    \        var paren_group = \"\"\n        var open_paren_count = 0\n        for\
    \ (c <- paren_string_no_spaces) {\n            if (c == '(') {\n             \
    \   open_paren_count += 1\n            } else if (c == ')') {\n              \
    \  open_paren_count -= 1\n            }\n            paren_group += c\n      \
    \      if (open_paren_count == 0) {\n                paren_groups += paren_group\n\
    \                paren_group = \"\"\n            }\n        }\n        return\
    \ paren_groups.toList", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \   } else if (c == ')') {\n                open_parens -= 1\n            }\n\
    \            current_group += c\n            if (open_parens == 0) {\n       \
    \         paren_groups = current_group :: paren_groups\n                current_group\
    \ = \"\"\n            }\n        }\n        paren_groups.reverse", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        var paren_groups\
    \ = List[String]()\n        var paren_group = \"\"\n        var paren_count =\
    \ 0\n        for (c <- paren_string_no_spaces) {\n            if (c == '(') {\n\
    \                paren_count += 1\n            } else if (c == ')') {\n      \
    \          paren_count -= 1\n            }\n            paren_group += c\n   \
    \         if (paren_count == 0) {\n                paren_groups = paren_groups\
    \ :+ paren_group\n                paren_group = \"\"\n            }\n        }\n\
    \        return paren_groups", "        var result = List[String]()\n        var\
    \ paren_stack = Stack[Char]()\n        var current_group = \"\"\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                paren_stack.push(c)\n\
    \            } else if (c == ')') {\n                paren_stack.pop()\n     \
    \           if (paren_stack.isEmpty) {\n                    result = result :+\
    \ current_group\n                    current_group = \"\"\n                }\n\
    \            } else if (c != ' ') {\n                current_group += c\n    \
    \        }\n        }\n        result", "        val paren_string_no_spaces =\
    \ paren_string.replaceAll(\" \", \"\")\n        val paren_string_list = paren_string_no_spaces.toList\n\
    \        val paren_string_list_length = paren_string_list.length\n        var\
    \ paren_string_list_index = 0\n        var paren_string_list_index_start = 0\n\
    \        var paren_string_list_index_end = 0\n        var paren_string_list_index_start_temp\
    \ = 0\n        var paren_string_list_index_end_temp = 0\n        var paren_string_list_index_start_temp_2\
    \ = 0\n        var paren_string_list_index_end_temp_2 = 0\n        var paren_string_list_index_start_temp_3\
    \ = 0\n        var paren_string_list_index_end_temp_3 = 0\n        var paren_string_list_index_start_temp_4\
    \ = 0\n        var paren_string_list_index_end_temp_4 = 0\n        var paren_string_list_index_start_temp_5\
    \ = 0\n        var paren_string_list_index_end_temp_5 = 0\n        var paren_string_list_index_start_temp_6\
    \ = 0\n        var paren_string_list_index_end_temp_6 = 0\n        var paren_string_list_index_start_temp_7\
    \ = 0\n        var paren_string_list_index_end_temp_7 = 0\n        var paren_string_list_index_start_temp_8\
    \ = 0\n        var paren_string_list_index_end_temp_8 = 0\n        var paren_string_list_index_start_temp_9\
    \ = 0\n        var paren_string_list_index_end_temp_9 = 0\n        var paren_string_list_index_start_temp_10\
    \ = 0\n        var paren_string_list_index_end_temp_10 = 0\n        var paren_string_list_index_start_temp_11\
    \ = 0\n        var paren_string_", "        var result = List[String]()\n    \
    \    var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in paren string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced paren string\")\n    \
    \    }\n        result.reverse", "        val paren_string_no_space = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_space_length = paren_string_no_space.length\n\
    \        val result = new ListBuffer[String]\n        var i = 0\n        while\
    \ (i < paren_string_no_space_length) {\n            var j = i\n            var\
    \ count = 0\n            while (j < paren_string_no_space_length) {\n        \
    \        if (paren_string_no_space(j) == '(') count += 1\n                else\
    \ if (paren_string_no_space(j) == ')') count -= 1\n                if (count ==\
    \ 0) {\n                    result += paren_string_no_space.substring(i, j + 1)\n\
    \                    i = j + 1\n                    j = paren_string_no_space_length\n\
    \                }\n                j += 1\n            }\n        }\n       \
    \ result.toList", "        var result = List[String]()\n        var curr = \"\"\
    \n        var stack = Stack[Char]()\n        for (c <- paren_string) {\n     \
    \       if (c == '(') {\n                stack.push(c)\n            } else if\
    \ (c == ')') {\n                stack.pop\n                if (stack.isEmpty)\
    \ {\n                    result = result :+ curr\n                    curr = \"\
    \"\n                }\n            } else if (c != ' ') {\n                curr\
    \ += c\n            }\n        }\n        result", "        // TODO: Implement\
    \ this function\n        var result = List[String]()\n        var count = 0\n\
    \        var start = 0\n        for (i <- 0 until paren_string.length) {\n   \
    \         if (paren_string(i) == '(') {\n                count += 1\n        \
    \    } else if (paren_string(i) == ')') {\n                count -= 1\n      \
    \      }\n            if (count == 0) {\n                result = result :+ paren_string.substring(start,\
    \ i + 1)\n                start = i + 1\n            }\n        }\n        result",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     var groups = List[String]()\n        var current_group = \"\"\n        var\
    \ open_parens = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        groups", "        val\
    \ paren_string_no_space = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_space_list\
    \ = paren_string_no_space.toList\n        var paren_string_no_space_list_index\
    \ = 0\n        var paren_string_no_space_list_length = paren_string_no_space_list.length\n\
    \        var paren_string_no_space_list_buffer = new ListBuffer[Char]\n      \
    \  var paren_string_no_space_list_buffer_list = new ListBuffer[ListBuffer[Char]]\n\
    \        while (paren_string_no_space_list_index < paren_string_no_space_list_length)\
    \ {\n            if (paren_string_no_space_list(paren_string_no_space_list_index)\
    \ == '(') {\n                paren_string_no_space_list_buffer += paren_string_no_space_list(paren_string_no_space_list_index)\n\
    \                paren_string_no_space_list_index += 1\n                while\
    \ (paren_string_no_space_list(paren_string_no_space_list_index) != ')') {\n  \
    \                  paren_string_no_space_list_buffer += paren_string_no_space_list(paren_string_no_space_list_index)\n\
    \                    paren_string_no_space_list_index += 1\n                }\n\
    \                paren_string_no_space_list_buffer += paren_string_no_space_list(paren_string_no_space_list_index)\n\
    \                paren_string_no_space_list_buffer_list += paren_string_no_space_list_buffer\n\
    \                paren_string_no_space_list_buffer = new ListBuffer[Char]\n  \
    \          }\n            paren_string_no_space_list_index += 1\n        }\n \
    \       paren_string_no_space_list_buffer_list.map(x => x.mkString).toList", " \
    \       val paren_string_no_space = paren_string.replaceAll(\" \", \"\")\n   \
    \     var paren_groups = List[String]()\n        var start_index = 0\n       \
    \ var end_index = 0\n        var open_paren_count = 0\n        var close_paren_count\
    \ = 0\n        for (i <- 0 until paren_string_no_space.length) {\n           \
    \ if (paren_string_no_space(i) == '(') {\n                open_paren_count +=\
    \ 1\n            } else if (paren_string_no_space(i) == ')') {\n             \
    \   close_paren_count += 1\n            }\n            if (open_paren_count ==\
    \ close_paren_count) {\n                end_index = i\n                paren_groups\
    \ = paren_groups :+ paren_string_no_space.substring(start_index, end_index + 1)\n\
    \                start_index = end_index + 1\n                open_paren_count\
    \ = 0\n                close_paren_count = 0\n            }\n        }\n     \
    \   paren_groups", "        val paren_list = paren_string.filter(_ != ' ').toList\n\
    \        def helper(paren_list : List[Char], acc : List[Char]) : List[String]\
    \ = {\n            if (paren_list.isEmpty) {\n                List(acc.mkString)\n\
    \            } else {\n                val head = paren_list.head\n          \
    \      if (head == '(') {\n                    val (group, rest) = extractGroup(paren_list)\n\
    \                    helper(rest, acc) :+ group.mkString\n                } else\
    \ {\n                    helper(paren_list.tail, acc :+ head)\n              \
    \  }\n            }\n        }\n        def extractGroup(paren_list : List[Char])\
    \ : (List[Char], List[Char]) = {\n            def helper(paren_list : List[Char],\
    \ acc : List[Char], count : Int) : (List[Char], List[Char]) = {\n            \
    \    if (count == 0) {\n                    (acc, paren_list)\n              \
    \  } else {\n                    val head = paren_list.head\n                \
    \    if (head == '(') {\n                        helper(paren_list.tail, acc :+\
    \ head, count + 1)\n                    } else if (head == ')') {\n          \
    \              helper(paren_list.tail, acc :+ head, count - 1)\n             \
    \       } else {\n                        helper(paren_list.tail, acc :+ head,\
    \ count)\n                    }\n                }\n            }\n          \
    \  helper(paren_list.tail, List(paren_list.head), 1)\n        }\n        helper(paren_list,\
    \ List())", "        var groups = List[String]()\n        var current_group =\
    \ \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n     \
    \       if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        return groups", " \
    \       val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n  \
    \      val paren_groups = new ListBuffer[String]\n        var current_paren_group\
    \ = new StringBuilder\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_paren_group.append(c)\n            } else if (c == ')') {\n  \
    \              open_parens -= 1\n                current_paren_group.append(c)\n\
    \                if (open_parens == 0) {\n                    paren_groups +=\
    \ current_paren_group.toString\n                    current_paren_group = new\
    \ StringBuilder\n                }\n            }\n        }\n        paren_groups.toList",
  "        var paren_groups = List[String]()\n        var paren_stack = Stack[Char]()\n\
    \        var current_group = \"\"\n        for (c <- paren_string) {\n       \
    \     if (c == '(') {\n                paren_stack.push(c)\n                current_group\
    \ += c\n            } else if (c == ')') {\n                paren_stack.pop\n\
    \                current_group += c\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups = paren_groups :+ current_group\n      \
    \              current_group = \"\"\n                }\n            }\n      \
    \  }\n        return paren_groups", "        var groups = List[String]()\n   \
    \     var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    groups = groups :+ current_group\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                current_group += c\n            }\n       \
    \ }\n        groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups : List[String] = List()\n        var current_group\
    \ : String = \"\"\n        var open_parens : Int = 0\n        for (i <- 0 until\
    \ paren_string_no_spaces.length) {\n            val c = paren_string_no_spaces(i)\n\
    \            if (c == '(') {\n                open_parens += 1\n             \
    \   current_group += c\n            } else if (c == ')') {\n                open_parens\
    \ -= 1\n                current_group += c\n                if (open_parens ==\
    \ 0) {\n                    paren_groups = current_group :: paren_groups\n   \
    \                 current_group = \"\"\n                }\n            }\n   \
    \     }\n        paren_groups.reverse", "        val paren_string_no_spaces =\
    \ paren_string.replaceAll(\" \", \"\")\n        val paren_stack = new Stack[Char]\n\
    \        var paren_groups = new ListBuffer[String]\n        var current_group\
    \ = new StringBuilder\n        for (c <- paren_string_no_spaces) {\n         \
    \   if (c == '(') {\n                paren_stack.push(c)\n            } else if\
    \ (c == ')') {\n                paren_stack.pop\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_groups += current_group.toString\n            \
    \        current_group = new StringBuilder\n                }\n            }\n\
    \            current_group += c\n        }\n        paren_groups.toList", "  \
    \      var result = List[String]()\n        var curr_paren_group = \"\"\n    \
    \    var open_paren_count = 0\n        for (c <- paren_string) {\n           \
    \ if (c == '(') {\n                open_paren_count += 1\n                curr_paren_group\
    \ += c\n            } else if (c == ')') {\n                open_paren_count -=\
    \ 1\n                curr_paren_group += c\n                if (open_paren_count\
    \ == 0) {\n                    result = result :+ curr_paren_group\n         \
    \           curr_paren_group = \"\"\n                }\n            }\n      \
    \  }\n        result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var result = List[String]()\n        var current_paren_group\
    \ = \"\"\n        var open_paren_count = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_paren_count += 1\n    \
    \        } else if (c == ')') {\n                open_paren_count -= 1\n     \
    \       }\n            current_paren_group += c\n            if (open_paren_count\
    \ == 0) {\n                result = current_paren_group :: result\n          \
    \      current_paren_group = \"\"\n            }\n        }\n        result.reverse",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     var groups = List[String]()\n        var current_group = \"\"\n        var\
    \ open_parens = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in paren string\")\n            }\n\
    \        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Unbalanced parens\")\n        }\n        groups", "        var paren_groups =\
    \ List[String]()\n        var paren_stack = Stack[Char]()\n        var current_group\
    \ = \"\"\n        for (c <- paren_string) {\n            if (c == '(') {\n   \
    \             paren_stack.push(c)\n                current_group += c\n      \
    \      } else if (c == ')') {\n                paren_stack.pop\n             \
    \   current_group += c\n                if (paren_stack.isEmpty) {\n         \
    \           paren_groups = paren_groups :+ current_group\n                   \
    \ current_group = \"\"\n                }\n            }\n        }\n        paren_groups",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_list = paren_string_no_spaces.toList\n      \
    \  var paren_string_no_spaces_list_stack = new Stack[Char]\n        var paren_string_no_spaces_list_stack_size\
    \ = 0\n        var paren_string_no_spaces_list_stack_size_max = 0\n        var\
    \ paren_string_no_spaces_list_stack_size_max_index = 0\n        var paren_string_no_spaces_list_stack_size_max_index_list\
    \ = new ListBuffer[Int]\n        for (i <- 0 until paren_string_no_spaces_list.length)\
    \ {\n            if (paren_string_no_spaces_list(i) == '(') {\n              \
    \  paren_string_no_spaces_list_stack.push(paren_string_no_spaces_list(i))\n  \
    \              paren_string_no_spaces_list_stack_size += 1\n            }\n  \
    \          else {\n                paren_string_no_spaces_list_stack.pop\n   \
    \             paren_string_no_spaces_list_stack_size -= 1\n            }\n   \
    \         if (paren_string_no_spaces_list_stack_size == 0) {\n               \
    \ paren_string_no_spaces_list_stack_size_max_index_list += i\n            }\n\
    \        }\n        var paren_string_no_spaces_list_stack_size_max_index_list_size\
    \ = paren_string_no_spaces_list_stack_size_max_index_list.length\n        var\
    \ paren_string_no_spaces_list_stack_size_max_index_list_size_index = 0\n     \
    \   var paren_string_no_spaces_list_stack_size_max_index_list_size_index_list\
    \ = new ListBuffer[Int]\n        for (i <- 0 until paren_string_no_spaces_list.length)\
    \ {\n            if (paren_string_", "        var stack = new Stack[Char]\n  \
    \      var result = new ListBuffer[String]\n        var current_string = new StringBuilder\n\
    \        for (c <- paren_string) {\n            if (c == ' ') {\n            \
    \    continue\n            }\n            if (c == '(') {\n                stack.push(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) {\n  \
    \                  throw new Exception(\"Invalid string\")\n                }\n\
    \                stack.pop\n                if (stack.isEmpty) {\n           \
    \         result += current_string.toString\n                    current_string\
    \ = new StringBuilder\n                }\n            }\n            current_string\
    \ += c\n        }\n        if (!stack.isEmpty) {\n            throw new Exception(\"\
    Invalid string\")\n        }\n        result.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_chars = paren_string_no_spaces.toCharArray\n\
    \        var paren_groups = List[String]()\n        var paren_group = \"\"\n \
    \       var open_parens = 0\n        for (paren_char <- paren_string_chars) {\n\
    \            if (paren_char == '(') {\n                open_parens += 1\n    \
    \        }\n            else if (paren_char == ')') {\n                open_parens\
    \ -= 1\n            }\n            paren_group += paren_char\n            if (open_parens\
    \ == 0) {\n                paren_groups = paren_group :: paren_groups\n      \
    \          paren_group = \"\"\n            }\n        }\n        paren_groups",
  "        var result = List[String]()\n        var current = \"\"\n        var open\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open += 1\n                current += c\n            } else if (c ==\
    \ ')') {\n                open -= 1\n                current += c\n          \
    \      if (open == 0) {\n                    result = current :: result\n    \
    \                current = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character in input string\"\
    )\n            }\n        }\n        if (open != 0) {\n            throw new Exception(\"\
    Invalid input string\")\n        }\n        result.reverse", "        val paren_groups\
    \ = new ListBuffer[String]\n        var current_group = new StringBuilder\n  \
    \      var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group.append(c)\n                if (open_parens == 0) {\n\
    \                    paren_groups += current_group.toString\n                \
    \    current_group = new StringBuilder\n                }\n            } else\
    \ if (c != ' ') {\n                throw new Exception(\"Invalid character in\
    \ paren string\")\n            }\n        }\n        if (open_parens != 0) {\n\
    \            throw new Exception(\"Unbalanced parens\")\n        }\n        paren_groups.toList",
  "        val paren_string_no_space = paren_string.replaceAll(\"\\\\s\", \"\")\n\
    \        val paren_string_no_space_list = paren_string_no_space.toList\n     \
    \   val paren_string_no_space_list_length = paren_string_no_space_list.length\n\
    \        var paren_string_no_space_list_index = 0\n        var paren_string_no_space_list_index_start\
    \ = 0\n        var paren_string_no_space_list_index_end = 0\n        var paren_string_no_space_list_index_end_found\
    \ = false\n        var paren_string_no_space_list_index_end_found_count = 0\n\
    \        var paren_string_no_space_list_index_end_found_count_prev = 0\n     \
    \   var paren_string_no_space_list_index_end_found_count_prev_prev = 0\n     \
    \   var paren_string_no_space_list_index_end_found_count_prev_prev_prev = 0\n\
    \        var paren_string_no_space_list_index_end_found_count_prev_prev_prev_prev\
    \ = 0\n        var paren_string_no_space_list_index_end_found_count_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_no_space_list_index_end_found_count_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_no_space_list_index_end_found_count_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_no_space_list_index_end_found_count_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_no_space_list_index_end_found_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_no_space_list_index_end_found_count_prev_prev_prev_prev_prev_prev_prev_prev_",
  "        var groups = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        groups", "        val\
    \ paren_groups = new ListBuffer[String]\n        var paren_group = new StringBuilder\n\
    \        var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                paren_group.append(c)\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          paren_group.append(c)\n                if (open_parens == 0) {\n  \
    \                  paren_groups += paren_group.toString\n                    paren_group\
    \ = new StringBuilder\n                }\n            }\n        }\n        paren_groups.toList",
  "        var stack = new Stack[Char]\n        var groups = new ListBuffer[String]\n\
    \        var group = new StringBuilder\n        for (c <- paren_string) {\n  \
    \          if (c == '(') {\n                stack.push(c)\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty) {\n                    throw\
    \ new Exception(\"Invalid parentheses string\")\n                }\n         \
    \       stack.pop\n                if (stack.isEmpty) {\n                    groups\
    \ += group.toString\n                    group = new StringBuilder\n         \
    \       }\n            } else if (c != ' ') {\n                group += c\n  \
    \          }\n        }\n        if (!stack.isEmpty) {\n            throw new\
    \ Exception(\"Invalid parentheses string\")\n        }\n        groups.toList",
  "        var paren_list = List[String]()\n        var paren_stack = Stack[Char]()\n\
    \        var paren_string_builder = new StringBuilder()\n        for (paren <-\
    \ paren_string) {\n            if (paren == ' ') {\n                // Do nothing\n\
    \            } else if (paren == '(') {\n                paren_stack.push(paren)\n\
    \            } else if (paren == ')') {\n                paren_stack.pop()\n \
    \               if (paren_stack.isEmpty) {\n                    paren_list = paren_string_builder.toString()\
    \ :: paren_list\n                    paren_string_builder = new StringBuilder()\n\
    \                }\n            } else {\n                paren_string_builder.append(paren)\n\
    \            }\n        }\n        return paren_list", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in paren string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced paren string\")\n    \
    \    }\n        result.reverse", "        var stack = new Stack[Char]\n      \
    \  var groups = new ListBuffer[String]\n        var group = new StringBuilder\n\
    \        for (c <- paren_string) {\n            if (c == ' ') {\n            \
    \    // ignore\n            } else if (c == '(') {\n                stack.push(c)\n\
    \                group.append(c)\n            } else if (c == ')') {\n       \
    \         if (stack.isEmpty) {\n                    throw new Exception(\"Unbalanced\
    \ parentheses\")\n                }\n                stack.pop\n             \
    \   group.append(c)\n                if (stack.isEmpty) {\n                  \
    \  groups.append(group.toString)\n                    group = new StringBuilder\n\
    \                }\n            } else {\n                throw new Exception(\"\
    Invalid character\")\n            }\n        }\n        if (!stack.isEmpty) {\n\
    \            throw new Exception(\"Unbalanced parentheses\")\n        }\n    \
    \    groups.toList", "        var groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in paren string\")\n            }\n\
    \        }\n        return groups", "        // TODO: Implement this function\n\
    \        return List[String]()", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_groups = ListBuffer[String]()\n        var current_paren_group\
    \ = \"\"\n        var open_paren_count = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_paren_count += 1\n    \
    \        } else if (c == ')') {\n                open_paren_count -= 1\n     \
    \       }\n            current_paren_group += c\n            if (open_paren_count\
    \ == 0) {\n                paren_groups += current_paren_group\n             \
    \   current_paren_group = \"\"\n            }\n        }\n        paren_groups.toList",
  "        var result = List[String]()\n        var current = new StringBuilder()\n\
    \        var open = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open += 1\n                current.append(c)\n     \
    \       } else if (c == ')') {\n                open -= 1\n                current.append(c)\n\
    \                if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      } else if (c != ' ') {\n                throw new Exception(\"Invalid character:\
    \ \" + c)\n            }\n        }\n        if (open != 0) throw new Exception(\"\
    Unbalanced parentheses\")\n        return result", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_chars\
    \ = paren_string_no_spaces.toCharArray\n        val paren_groups = ListBuffer[String]()\n\
    \        var current_paren_group = \"\"\n        var open_parens = 0\n       \
    \ for (i <- 0 until paren_string_no_spaces_chars.length) {\n            if (paren_string_no_spaces_chars(i)\
    \ == '(') {\n                open_parens += 1\n                current_paren_group\
    \ += \"(\"\n            } else {\n                open_parens -= 1\n         \
    \       current_paren_group += \")\"\n            }\n            if (open_parens\
    \ == 0) {\n                paren_groups += current_paren_group\n             \
    \   current_paren_group = \"\"\n            }\n        }\n        paren_groups.toList",
  "        val paren_string_no_space = paren_string.replaceAll(\" \", \"\")\n    \
    \    val paren_string_list = paren_string_no_space.toList\n        val paren_string_list_length\
    \ = paren_string_list.length\n        var paren_string_list_index = 0\n      \
    \  var paren_string_list_index_start = 0\n        var paren_string_list_index_end\
    \ = 0\n        var paren_string_list_index_end_found = false\n        var paren_string_list_index_end_found_count\
    \ = 0\n        var paren_string_list_index_end_found_count_prev = 0\n        var\
    \ paren_string_list_index_end_found_count_prev_prev = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_end_found_count_prev_prev_prev_prev_prev_",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in input string\")\n            }\n\
    \        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Unbalanced parentheses\")\n        }\n        result.reverse", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \            }\n            paren_group += c\n            if (open_parens == 0)\
    \ {\n                paren_groups = paren_group :: paren_groups\n            \
    \    paren_group = \"\"\n            }\n        }\n        paren_groups.reverse",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_stack = new Stack[Char]\n        val result = new ListBuffer[String]\n\
    \        var current_string = \"\"\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \      } else if (c == ')') {\n                paren_stack.pop\n             \
    \   if (paren_stack.isEmpty) {\n                    result += current_string\n\
    \                    current_string = \"\"\n                }\n            }\n\
    \            current_string += c\n        }\n        result.toList", "       \
    \ var groups = List[String]()\n        var group = \"\"\n        var open = 0\n\
    \        for (c <- paren_string) {\n            if (c == '(') {\n            \
    \    open += 1\n                group += c\n            } else if (c == ')') {\n\
    \                open -= 1\n                group += c\n                if (open\
    \ == 0) {\n                    groups ::= group\n                    group = \"\
    \"\n                }\n            } else if (c != ' ') {\n                group\
    \ += c\n            }\n        }\n        groups.reverse", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_list\
    \ = paren_string_no_spaces.toList\n        var result = List[String]()\n     \
    \   var current_string = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string_no_spaces_list) {\n            if (c == '(') {\n              \
    \  open_parens += 1\n                current_string += c\n            } else if\
    \ (c == ')') {\n                open_parens -= 1\n                current_string\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_string :: result\n                    current_string = \"\"\n      \
    \          }\n            }\n        }\n        result.reverse", "        var\
    \ result = List[String]()\n        var stack = Stack[Char]()\n        var start\
    \ = 0\n        for (i <- 0 until paren_string.length) {\n            if (paren_string(i)\
    \ == '(') {\n                stack.push('(')\n            } else if (paren_string(i)\
    \ == ')') {\n                stack.pop\n                if (stack.isEmpty) {\n\
    \                    result = result :+ paren_string.substring(start, i + 1)\n\
    \                    start = i + 1\n                }\n            }\n       \
    \ }\n        result", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_chars = paren_string_no_spaces.toCharArray\n\
    \        val paren_groups = new ListBuffer[String]\n        var current_group\
    \ = new StringBuilder\n        var open_parens = 0\n        for (i <- 0 until\
    \ paren_string_no_spaces_chars.length) {\n            if (paren_string_no_spaces_chars(i)\
    \ == '(') {\n                open_parens += 1\n                current_group.append('(')\n\
    \            } else {\n                open_parens -= 1\n                current_group.append(')')\n\
    \            }\n            if (open_parens == 0) {\n                paren_groups\
    \ += current_group.toString\n                current_group = new StringBuilder\n\
    \            }\n        }\n        paren_groups.toList", "        var result =\
    \ List[String]()\n        var current_group = \"\"\n        var open_parens =\
    \ 0\n        for (c <- paren_string) {\n            if (c == '(') {\n        \
    \        open_parens += 1\n                current_group += c\n            } else\
    \ if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                throw new Exception(\"\
    Invalid character in input string\")\n            }\n        }\n        result",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n    \
    \    val paren_groups = new ListBuffer[String]\n        var current_group = new\
    \ StringBuilder\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group.append(c)\n            } else if (c == ')') {\n        \
    \        open_parens -= 1\n                current_group.append(c)\n         \
    \       if (open_parens == 0) {\n                    paren_groups += current_group.toString\n\
    \                    current_group = new StringBuilder\n                }\n  \
    \          }\n        }\n        paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var open_paren_count = 0\n        for\
    \ (c <- paren_string_no_spaces) {\n            if (c == '(') {\n             \
    \   open_paren_count += 1\n            } else if (c == ')') {\n              \
    \  open_paren_count -= 1\n            }\n            paren_group += c\n      \
    \      if (open_paren_count == 0) {\n                paren_groups = paren_groups\
    \ :+ paren_group\n                paren_group = \"\"\n            }\n        }\n\
    \        paren_groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_chars = paren_string_no_spaces.toCharArray\n\
    \        var paren_groups = List[String]()\n        var current_paren_group =\
    \ \"\"\n        var paren_count = 0\n        for (i <- 0 until paren_string_no_spaces_chars.length)\
    \ {\n            if (paren_string_no_spaces_chars(i) == '(') {\n             \
    \   paren_count += 1\n                current_paren_group += \"(\"\n         \
    \   } else {\n                paren_count -= 1\n                current_paren_group\
    \ += \")\"\n            }\n            if (paren_count == 0) {\n             \
    \   paren_groups = paren_groups :+ current_paren_group\n                current_paren_group\
    \ = \"\"\n            }\n        }\n        return paren_groups", "        var\
    \ paren_groups = List[String]()\n        var current_group = \"\"\n        var\
    \ open_parens = 0\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n                current_group += c\n  \
    \          } else if (c == ')') {\n                open_parens -= 1\n        \
    \        current_group += c\n                if (open_parens == 0) {\n       \
    \             paren_groups = current_group :: paren_groups\n                 \
    \   current_group = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                throw new Exception(\"Invalid character in paren string\"\
    )\n            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Unbalanced paren string\")\n        }\n        paren_groups.reverse",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_list = paren_string_no_spaces.toList\n      \
    \  var paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_length\
    \ = paren_string_no_spaces_list.length\n        var paren_string_no_spaces_list_current_char\
    \ = paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n        var\
    \ paren_string_no_spaces_list_current_char_is_open_paren = false\n        var\
    \ paren_string_no_spaces_list_current_char_is_close_paren = false\n        var\
    \ paren_string_no_spaces_list_current_char_is_paren = false\n        var paren_string_no_spaces_list_current_char_is_open_paren_index\
    \ = 0\n        var paren_string_no_spaces_list_current_char_is_close_paren_index\
    \ = 0\n        var paren_string_no_spaces_list_current_char_is_paren_index = 0\n\
    \        var paren_string_no_spaces_list_current_char_is_open_paren_index_list\
    \ = List[Int]()\n        var paren_string_no_spaces_list_current_char_is_close_paren_index_list\
    \ = List[Int]()\n        var paren_string_no_spaces_list_current_char_is_paren_index_list\
    \ = List[Int]()\n        var paren_string_no_spaces_list_current_char_is_open_paren_index_list_length\
    \ = 0\n        var paren_string_no_spaces_list_current_char_is_close_paren_index_list_length\
    \ = 0\n        var paren_string_no_spaces_list_current_char_is_paren_index_list_length\
    \ = 0\n        var paren_string_no_spaces_list_current_", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var current_group_paren_count = 0\n\
    \        for (c <- paren_string_no_spaces) {\n            if (c == '(') {\n  \
    \              current_group_paren_count += 1\n            } else if (c == ')')\
    \ {\n                current_group_paren_count -= 1\n            }\n         \
    \   current_group += c\n            if (current_group_paren_count == 0) {\n  \
    \              paren_groups = paren_groups :+ current_group\n                current_group\
    \ = \"\"\n            }\n        }\n        return paren_groups", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val paren_string_list\
    \ = paren_string_no_spaces.toList\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var open_parens = 0\n        for (paren\
    \ <- paren_string_list) {\n            if (paren == '(') {\n                open_parens\
    \ += 1\n                paren_group += paren\n            } else {\n         \
    \       open_parens -= 1\n                paren_group += paren\n            }\n\
    \            if (open_parens == 0) {\n                paren_groups = paren_group\
    \ :: paren_groups\n                paren_group = \"\"\n            }\n       \
    \ }\n        paren_groups.reverse", "        // Your code here\n        var paren_list\
    \ = List[String]()\n        var paren_string_temp = paren_string\n        while\
    \ (paren_string_temp.length() > 0) {\n            var paren_string_temp_1 = paren_string_temp.substring(paren_string_temp.indexOf(\"\
    (\") + 1, paren_string_temp.length())\n            var count = 0\n           \
    \ var index = 0\n            while (count != -1) {\n                if (paren_string_temp_1.charAt(index)\
    \ == '(') {\n                    count += 1\n                } else if (paren_string_temp_1.charAt(index)\
    \ == ')') {\n                    count -= 1\n                }\n             \
    \   index += 1\n            }\n            paren_list = paren_list :+ paren_string_temp_1.substring(0,\
    \ index - 1)\n            paren_string_temp = paren_string_temp.substring(paren_string_temp.indexOf(\"\
    (\") + index, paren_string_temp.length())\n        }\n        return paren_list",
  "        // Your code here\n        return List[String]()", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_groups = new ListBuffer[String]\n\
    \        var open_parens = 0\n        var group_start = 0\n        for (i <- 0\
    \ until paren_string_no_spaces.length) {\n            if (paren_string_no_spaces(i)\
    \ == '(') {\n                if (open_parens == 0) {\n                    group_start\
    \ = i\n                }\n                open_parens += 1\n            } else\
    \ if (paren_string_no_spaces(i) == ')') {\n                open_parens -= 1\n\
    \                if (open_parens == 0) {\n                    paren_groups +=\
    \ paren_string_no_spaces.substring(group_start, i + 1)\n                }\n  \
    \          }\n        }\n        paren_groups.toList", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_length = paren_string_no_spaces.length\n\
    \        var paren_groups = List[String]()\n        var paren_group = \"\"\n \
    \       var paren_group_open_count = 0\n        var paren_group_close_count =\
    \ 0\n        for (i <- 0 until paren_string_length) {\n            val c = paren_string_no_spaces(i)\n\
    \            if (c == '(') {\n                paren_group_open_count += 1\n  \
    \          } else if (c == ')') {\n                paren_group_close_count +=\
    \ 1\n            }\n            paren_group += c\n            if (paren_group_open_count\
    \ == paren_group_close_count) {\n                paren_groups = paren_group ::\
    \ paren_groups\n                paren_group = \"\"\n                paren_group_open_count\
    \ = 0\n                paren_group_close_count = 0\n            }\n        }\n\
    \        paren_groups.reverse", "        var result = List[String]()\n       \
    \ var current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    result = current_group :: result\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character in input string\"\
    )\n            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Invalid input string\")\n        }\n        result.reverse",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     var stack = new Stack[Char]\n        var groups = new ListBuffer[String]\n\
    \        var current_group = new StringBuilder\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                stack.push(c)\n            }\
    \ else if (c == ')') {\n                stack.pop\n                if (stack.isEmpty)\
    \ {\n                    groups += current_group.toString\n                  \
    \  current_group = new StringBuilder\n                }\n            }\n     \
    \       current_group += c\n        }\n        groups.toList", "        var result\
    \ = List[String]()\n        var current_string = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_string += c\n           \
    \ } else if (c == ')') {\n                open_parens -= 1\n                current_string\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_string :: result\n                    current_string = \"\"\n      \
    \          }\n            } else if (c != ' ') {\n                throw new Exception(\"\
    Invalid character in input string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced parentheses in input string\"\
    )\n        }\n        result.reverse", "        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var open_paren_count = 0\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                open_paren_count\
    \ += 1\n                paren_group += c\n            } else if (c == ')') {\n\
    \                open_paren_count -= 1\n                paren_group += c\n   \
    \             if (open_paren_count == 0) {\n                    paren_groups =\
    \ paren_group :: paren_groups\n                    paren_group = \"\"\n      \
    \          }\n            }\n        }\n        return paren_groups", "      \
    \  val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n       \
    \ val paren_string_no_spaces_list = paren_string_no_spaces.toList\n        var\
    \ paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_length\
    \ = paren_string_no_spaces_list.length\n        var paren_string_no_spaces_list_buffer\
    \ = new ListBuffer[String]\n        while (paren_string_no_spaces_list_index <\
    \ paren_string_no_spaces_list_length) {\n            var current_char = paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \            if (current_char == '(') {\n                var current_paren_string\
    \ = \"\"\n                var paren_count = 1\n                while (paren_count\
    \ > 0) {\n                    paren_string_no_spaces_list_index += 1\n       \
    \             current_char = paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                    if (current_char == '(') {\n                        paren_count\
    \ += 1\n                    } else if (current_char == ')') {\n              \
    \          paren_count -= 1\n                    }\n                    current_paren_string\
    \ += current_char\n                }\n                paren_string_no_spaces_list_buffer\
    \ += current_paren_string\n            }\n            paren_string_no_spaces_list_index\
    \ += 1\n        }\n        return paren_string_no_spaces_list_buffer.toList",
  "        var paren_groups = List[String]()\n        var current_group = \"\"\n \
    \       var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    paren_groups = current_group :: paren_groups\n          \
    \          current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character in input string\"\
    )\n            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Unbalanced parentheses\")\n        }\n        return paren_groups.reverse",
  "        val paren_groups = new ListBuffer[String]()\n        var curr_group = new\
    \ StringBuilder()\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       curr_group.append(c)\n            } else if (c == ')') {\n           \
    \     open_parens -= 1\n                curr_group.append(c)\n               \
    \ if (open_parens == 0) {\n                    paren_groups += curr_group.toString\n\
    \                    curr_group = new StringBuilder()\n                }\n   \
    \         }\n        }\n        paren_groups.toList", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var paren_stack\
    \ = Stack[Char]()\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                paren_stack.push(c)\n            } else if (c == ')') {\n\
    \                paren_stack.pop()\n                if (paren_stack.isEmpty) {\n\
    \                    paren_groups = paren_groups :+ current_group\n          \
    \          current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                current_group += c\n            }\n        }\n     \
    \   paren_groups", "        var stack = new Stack[Char]()\n        var groups\
    \ = new ListBuffer[String]()\n        var group = new StringBuilder()\n      \
    \  for (c <- paren_string) {\n            if (c == ' ') {\n                //\
    \ Ignore spaces\n            } else if (c == '(') {\n                stack.push(c)\n\
    \                group.append(c)\n            } else if (c == ')') {\n       \
    \         if (stack.isEmpty) {\n                    throw new Exception(\"Unbalanced\
    \ parentheses\")\n                }\n                stack.pop()\n           \
    \     group.append(c)\n                if (stack.isEmpty) {\n                \
    \    groups.append(group.toString())\n                    group = new StringBuilder()\n\
    \                }\n            } else {\n                throw new Exception(\"\
    Invalid character: \" + c)\n            }\n        }\n        if (!stack.isEmpty)\
    \ {\n            throw new Exception(\"Unbalanced parentheses\")\n        }\n\
    \        return groups.toList", "        // TODO: Implement this function\n  \
    \      return List[String]()", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \   } else if (c == ')') {\n                open_parens -= 1\n            }\n\
    \            current_group += c\n            if (open_parens == 0) {\n       \
    \         paren_groups ::= current_group\n                current_group = \"\"\
    \n            }\n        }\n        paren_groups.reverse", "        var groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    groups =\
    \ groups :+ current_group\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        groups", "        var result = List[String]()\n\
    \        var current = new StringBuilder()\n        var open = 0\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                open +=\
    \ 1\n                current.append(c)\n            } else if (c == ')') {\n \
    \               open -= 1\n                current.append(c)\n               \
    \ if (open == 0) {\n                    result = result :+ current.toString\n\
    \                    current = new StringBuilder()\n                }\n      \
    \      } else if (c != ' ') {\n                throw new Exception(\"Invalid character\
    \ in input string\")\n            }\n        }\n        if (open != 0) {\n   \
    \         throw new Exception(\"Invalid input string\")\n        }\n        return\
    \ result", "        var paren_groups = List[String]()\n        var paren_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                paren_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                paren_group += c\n                if (open_parens == 0) {\n \
    \                   paren_groups = paren_group :: paren_groups\n             \
    \       paren_group = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                throw new Exception(\"Invalid character in paren string\"\
    )\n            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Unbalanced paren string\")\n        }\n        paren_groups.reverse",
  "        var paren_list = List[String]()\n        var current_paren_string = \"\"\
    \n        var paren_count = 0\n        for (c <- paren_string) {\n           \
    \ if (c == '(') {\n                paren_count += 1\n            } else if (c\
    \ == ')') {\n                paren_count -= 1\n            }\n            current_paren_string\
    \ += c\n            if (paren_count == 0) {\n                paren_list = current_paren_string\
    \ :: paren_list\n                current_paren_string = \"\"\n            }\n\
    \        }\n        return paren_list.reverse", "        var groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_count = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                paren_count\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    groups = groups :+ current_group\n\
    \                    current_group = \"\"\n                }\n            }\n\
    \        }\n        groups", "        var groups = List[String]()\n        var\
    \ current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    groups = groups :+ current_group\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character in input string\"\
    )\n            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Unbalanced parentheses\")\n        }\n        groups", "   \
    \     var result = new ListBuffer[String]()\n        var current_group = new StringBuilder()\n\
    \        var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group.append(c)\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group.append(c)\n                if (open_parens == 0) {\n\
    \                    result += current_group.toString()\n                    current_group\
    \ = new StringBuilder()\n                }\n            } else if (c != ' ') {\n\
    \                throw new IllegalArgumentException(\"Invalid character in input\
    \ string\")\n            }\n        }\n        if (open_parens != 0) {\n     \
    \       throw new IllegalArgumentException(\"Unbalanced parentheses\")\n     \
    \   }\n        result.toList", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_chars = paren_string_no_spaces.toCharArray\n\
    \        var paren_groups = List[String]()\n        var current_paren_group =\
    \ \"\"\n        var open_parens = 0\n        for (i <- 0 until paren_string_no_spaces_chars.length)\
    \ {\n            if (paren_string_no_spaces_chars(i) == '(') {\n             \
    \   open_parens += 1\n                current_paren_group += \"(\"\n         \
    \   } else {\n                open_parens -= 1\n                current_paren_group\
    \ += \")\"\n            }\n            if (open_parens == 0) {\n             \
    \   paren_groups = paren_groups :+ current_paren_group\n                current_paren_group\
    \ = \"\"\n            }\n        }\n        return paren_groups", "        var\
    \ result = List[String]()\n        var current_string = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_string += c\n           \
    \ } else if (c == ')') {\n                open_parens -= 1\n                current_string\
    \ += c\n                if (open_parens == 0) {\n                    result ::=\
    \ current_string\n                    current_string = \"\"\n                }\n\
    \            } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in input string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced parentheses\")\n     \
    \   }\n        result.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_groups = ListBuffer[String]()\n        var current_paren_group\
    \ = \"\"\n        var open_paren_count = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_paren_count += 1\n    \
    \        } else if (c == ')') {\n                open_paren_count -= 1\n     \
    \       }\n            current_paren_group += c\n            if (open_paren_count\
    \ == 0) {\n                paren_groups += current_paren_group\n             \
    \   current_paren_group = \"\"\n            }\n        }\n        paren_groups.toList",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in paren string: \" + c)\n      \
    \      }\n        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Unbalanced parens\")\n        }\n        result.reverse", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                throw\
    \ new Exception(\"Invalid character in input string\")\n            }\n      \
    \  }\n        if (open_parens != 0) {\n            throw new Exception(\"Invalid\
    \ input string\")\n        }\n        return paren_groups.reverse", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string_no_spaces) {\n            if (c == '(')\
    \ {\n                open_parens += 1\n            } else if (c == ')') {\n  \
    \              open_parens -= 1\n            }\n            current_group += c\n\
    \            if (open_parens == 0) {\n                paren_groups = current_group\
    \ :: paren_groups\n                current_group = \"\"\n            }\n     \
    \   }\n        paren_groups.reverse", "        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in paren string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced paren string\")\n    \
    \    }\n        return paren_groups.reverse", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in string\")\n            }\n        }\n        if (open_parens !=\
    \ 0) {\n            throw new Exception(\"Unbalanced parentheses\")\n        }\n\
    \        result.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var paren_group\
    \ = \"\"\n        var open_paren_count = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_paren_count += 1\n    \
    \        } else if (c == ')') {\n                open_paren_count -= 1\n     \
    \       }\n            paren_group += c\n            if (open_paren_count == 0)\
    \ {\n                paren_groups = paren_groups :+ paren_group\n            \
    \    paren_group = \"\"\n            }\n        }\n        return paren_groups",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_string_no_spaces_chars = paren_string_no_spaces.toCharArray\n\
    \        var paren_groups = List[String]()\n        var current_paren_group =\
    \ \"\"\n        var open_parens = 0\n        for (i <- 0 until paren_string_no_spaces_chars.length)\
    \ {\n            val c = paren_string_no_spaces_chars(i)\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_paren_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_paren_group += c\n                if (open_parens ==\
    \ 0) {\n                    paren_groups = paren_groups :+ current_paren_group\n\
    \                    current_paren_group = \"\"\n                }\n         \
    \   }\n        }\n        paren_groups", "        var result = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in paren string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced parens\")\n        }\n\
    \        result.reverse", "        var result = List[String]()\n        var curr\
    \ = \"\"\n        var open = 0\n        for (c <- paren_string) {\n          \
    \  if (c == '(') {\n                open += 1\n                curr += c\n   \
    \         } else if (c == ')') {\n                open -= 1\n                curr\
    \ += c\n                if (open == 0) {\n                    result = result\
    \ :+ curr\n                    curr = \"\"\n                }\n            }\n\
    \        }\n        result", "        var result = List[String]()\n        var\
    \ start = 0\n        var end = 0\n        var count = 0\n        for (i <- 0 until\
    \ paren_string.length) {\n            if (paren_string(i) == '(') {\n        \
    \        if (count == 0) start = i\n                count += 1\n            }\n\
    \            else if (paren_string(i) == ')') {\n                count -= 1\n\
    \                if (count == 0) {\n                    end = i\n            \
    \        result = result :+ paren_string.substring(start, end + 1)\n         \
    \       }\n            }\n        }\n        result", "        val parens = paren_string.filter(c\
    \ => c == '(' || c == ')')\n        var groups = List[String]()\n        var current\
    \ = \"\"\n        var open = 0\n        for (c <- parens) {\n            if (c\
    \ == '(') {\n                open += 1\n                current += c\n       \
    \     } else {\n                open -= 1\n                current += c\n    \
    \            if (open == 0) {\n                    groups = current :: groups\n\
    \                    current = \"\"\n                }\n            }\n      \
    \  }\n        groups.reverse", "        var result = List[String]()\n        var\
    \ current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    result = current_group :: result\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character in paren string\"\
    )\n            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Unbalanced paren string\")\n        }\n        result.reverse",
  "        var result = List[String]()\n        var current_string = \"\"\n      \
    \  var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_string +=\
    \ c\n            } else if (c == ')') {\n                open_parens -= 1\n  \
    \              current_string += c\n                if (open_parens == 0) {\n\
    \                    result = current_string :: result\n                    current_string\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in input string\")\n            }\n\
    \        }\n        return result", "        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in input string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced parentheses in input string\"\
    )\n        }\n        return paren_groups.reverse", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_paren_group = \"\"\n        var open_paren_count = 0\n  \
    \      for (c <- paren_string_no_spaces) {\n            if (c == '(') {\n    \
    \            open_paren_count += 1\n            } else if (c == ')') {\n     \
    \           open_paren_count -= 1\n            }\n            current_paren_group\
    \ += c\n            if (open_paren_count == 0) {\n                paren_groups\
    \ = current_paren_group :: paren_groups\n                current_paren_group =\
    \ \"\"\n            }\n        }\n        paren_groups.reverse", "        // TODO:\
    \ Implement this function\n        return List[String]()", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\"\\\\s\", \"\")\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \            }\n            paren_group += c\n            if (open_parens == 0)\
    \ {\n                paren_groups = paren_group :: paren_groups\n            \
    \    paren_group = \"\"\n            }\n        }\n        return paren_groups.reverse",
  "        var paren_groups = List[String]()\n        var current_group = \"\"\n \
    \       var paren_count = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                paren_count += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                paren_count -= 1\n\
    \                current_group += c\n            }\n            if (paren_count\
    \ == 0 && current_group != \"\") {\n                paren_groups = current_group\
    \ :: paren_groups\n                current_group = \"\"\n            }\n     \
    \   }\n        paren_groups.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_list = paren_string_no_spaces.toList\n\
    \        var paren_string_no_spaces_list_index = 0\n        var paren_string_no_spaces_list_length\
    \ = paren_string_no_spaces_list.length\n        var paren_string_no_spaces_list_buffer\
    \ = new ListBuffer[Char]\n        var paren_string_no_spaces_list_buffer_list\
    \ = new ListBuffer[ListBuffer[Char]]\n        while (paren_string_no_spaces_list_index\
    \ < paren_string_no_spaces_list_length) {\n            if (paren_string_no_spaces_list(paren_string_no_spaces_list_index)\
    \ == '(') {\n                paren_string_no_spaces_list_buffer += paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                paren_string_no_spaces_list_index += 1\n                while\
    \ (paren_string_no_spaces_list(paren_string_no_spaces_list_index) != ')') {\n\
    \                    paren_string_no_spaces_list_buffer += paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                    paren_string_no_spaces_list_index += 1\n                }\n\
    \                paren_string_no_spaces_list_buffer += paren_string_no_spaces_list(paren_string_no_spaces_list_index)\n\
    \                paren_string_no_spaces_list_buffer_list += paren_string_no_spaces_list_buffer\n\
    \                paren_string_no_spaces_list_buffer = new ListBuffer[Char]\n \
    \               paren_string_no_spaces_list_index += 1\n            }\n      \
    \      else {\n                paren_string_no_spaces_list_index += 1\n      \
    \      }\n        }\n        val p", "        var result = List[String]()\n  \
    \      var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            } else if (c != ' ') {\n                throw new Exception(\"\
    Invalid character in input string\")\n            }\n        }\n        if (open\
    \ != 0) throw new Exception(\"Unbalanced parentheses\")\n        result.reverse",
  "        val paren_groups = ListBuffer[String]()\n        var current_group = \"\
    \"\n        var open_parens = 0\n        for (c <- paren_string) {\n         \
    \   if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    paren_groups += current_group\n                    current_group\
    \ = \"\"\n                }\n            }\n        }\n        paren_groups.toList",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     var paren_groups = List[String]()\n        var paren_group = \"\"\n    \
    \    var open_paren_count = 0\n        for (c <- paren_string_no_spaces) {\n \
    \           if (c == '(') {\n                open_paren_count += 1\n         \
    \   } else if (c == ')') {\n                open_paren_count -= 1\n          \
    \  }\n            paren_group += c\n            if (open_paren_count == 0) {\n\
    \                paren_groups = paren_groups :+ paren_group\n                paren_group\
    \ = \"\"\n            }\n        }\n        paren_groups", "        var result\
    \ = List[String]()\n        var temp = \"\"\n        var count = 0\n        for\
    \ (c <- paren_string) {\n            if (c == '(') {\n                count +=\
    \ 1\n            } else if (c == ')') {\n                count -= 1\n        \
    \    }\n            if (count == 0) {\n                result = result :+ temp\n\
    \                temp = \"\"\n            } else {\n                temp += c\n\
    \            }\n        }\n        result", "        var groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_count = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                paren_count\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    groups = groups :+ current_group\n\
    \                    current_group = \"\"\n                }\n            }\n\
    \        }\n        groups", "        var groups = List[String]()\n        var\
    \ current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    groups = groups :+ current_group\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character in paren string\"\
    )\n            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Unbalanced paren string\")\n        }\n        groups", "  \
    \      // Your code here\n        var result = new ListBuffer[String]()\n    \
    \    var temp = new ListBuffer[Char]()\n        var count = 0\n        for (i\
    \ <- 0 until paren_string.length) {\n            if (paren_string(i) == '(') {\n\
    \                count += 1\n                temp += paren_string(i)\n       \
    \     } else if (paren_string(i) == ')') {\n                count -= 1\n     \
    \           temp += paren_string(i)\n            }\n            if (count == 0)\
    \ {\n                result += temp.mkString\n                temp.clear\n   \
    \         }\n        }\n        result.toList", "        var result = List[String]()\n\
    \        var curr_string = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                curr_string += c\n            } else if (c == ')') {\n  \
    \              open_parens -= 1\n                curr_string += c\n          \
    \      if (open_parens == 0) {\n                    result = curr_string :: result\n\
    \                    curr_string = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                curr_string += c\n            }\n        }\n\
    \        result", "        var paren_groups = List[String]()\n        var paren_stack\
    \ = Stack[Char]()\n        var current_group = \"\"\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_stack.push(c)\n      \
    \          current_group += c\n            } else if (c == ')') {\n          \
    \      paren_stack.pop\n                current_group += c\n                if\
    \ (paren_stack.isEmpty) {\n                    paren_groups = paren_groups :+\
    \ current_group\n                    current_group = \"\"\n                }\n\
    \            }\n        }\n        return paren_groups", "        // TODO: Implement\
    \ this function\n        return List[String]()", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_length\
    \ = paren_string_no_spaces.length\n        var paren_string_no_spaces_index =\
    \ 0\n        var paren_string_no_spaces_current_char = paren_string_no_spaces(paren_string_no_spaces_index)\n\
    \        var paren_string_no_spaces_current_char_is_open_paren = paren_string_no_spaces_current_char\
    \ == '('\n        var paren_string_no_spaces_current_char_is_close_paren = paren_string_no_spaces_current_char\
    \ == ')'\n        var paren_string_no_spaces_current_char_is_paren = paren_string_no_spaces_current_char_is_open_paren\
    \ || paren_string_no_spaces_current_char_is_close_paren\n        var paren_string_no_spaces_current_char_is_not_paren\
    \ = !paren_string_no_spaces_current_char_is_paren\n        var paren_string_no_spaces_current_char_is_not_open_paren\
    \ = !paren_string_no_spaces_current_char_is_open_paren\n        var paren_string_no_spaces_current_char_is_not_close_paren\
    \ = !paren_string_no_spaces_current_char_is_close_paren\n        var paren_string_no_spaces_current_char_is_not_open_paren_or_close_paren\
    \ = paren_string_no_spaces_current_char_is_not_open_paren && paren_string_no_spaces_current_char_is_not_close_paren\n\
    \        var paren_string_no_spaces_current_char_is_not_open_paren_and_close_paren\
    \ = paren_string_no_spaces_current_char_is_not_open_paren || paren_string_no_spaces_current_char_is",
  "        var paren_groups = List[String]()\n        var current_group = \"\"\n \
    \       var open_parens = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    paren_groups = current_group :: paren_groups\n          \
    \          current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character: \" + c)\n \
    \           }\n        }\n        if (open_parens != 0) {\n            throw new\
    \ Exception(\"Unbalanced parentheses\")\n        }\n        paren_groups.reverse",
  "        var result = List[String]()\n        var current = \"\"\n        var open\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open += 1\n                current += c\n            } else if (c ==\
    \ ')') {\n                open -= 1\n                current += c\n          \
    \      if (open == 0) {\n                    result = current :: result\n    \
    \                current = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character \" + c)\n  \
    \          }\n        }\n        if (open != 0) {\n            throw new Exception(\"\
    Unbalanced parentheses\")\n        }\n        result.reverse", "        val paren_list\
    \ = paren_string.filter(c => c == '(' || c == ')').toList\n        val paren_list_length\
    \ = paren_list.length\n        var paren_list_index = 0\n        var paren_list_stack\
    \ = Stack[Char]()\n        var paren_list_group = List[Char]()\n        var paren_list_groups\
    \ = List[List[Char]]()\n        while (paren_list_index < paren_list_length) {\n\
    \            val paren_list_char = paren_list(paren_list_index)\n            if\
    \ (paren_list_char == '(') {\n                paren_list_stack.push(paren_list_char)\n\
    \                paren_list_group = paren_list_group :+ paren_list_char\n    \
    \        } else {\n                if (paren_list_stack.isEmpty) {\n         \
    \           paren_list_group = List[Char]()\n                } else {\n      \
    \              paren_list_stack.pop\n                    paren_list_group = paren_list_group\
    \ :+ paren_list_char\n                    if (paren_list_stack.isEmpty) {\n  \
    \                      paren_list_groups = paren_list_groups :+ paren_list_group\n\
    \                        paren_list_group = List[Char]()\n                   \
    \ }\n                }\n            }\n            paren_list_index += 1\n   \
    \     }\n        paren_list_groups.map(group => group.mkString)", "        var\
    \ result = List[String]()\n        var curr = \"\"\n        var count = 0\n  \
    \      for (c <- paren_string) {\n            if (c == '(') {\n              \
    \  count += 1\n                curr += c\n            } else if (c == ')') {\n\
    \                count -= 1\n                curr += c\n            } else if\
    \ (c == ' ') {\n                if (count == 0) {\n                    result\
    \ = result :+ curr\n                    curr = \"\"\n                }\n     \
    \       }\n        }\n        if (curr != \"\") result = result :+ curr\n    \
    \    result", "        var paren_list = List[String]()\n        var paren_stack\
    \ = Stack[Char]()\n        var paren_group = \"\"\n        for (paren <- paren_string)\
    \ {\n            if (paren == '(') {\n                paren_stack.push(paren)\n\
    \            } else if (paren == ')') {\n                if (paren_stack.isEmpty)\
    \ {\n                    return List[String]()\n                } else {\n   \
    \                 paren_stack.pop\n                    if (paren_stack.isEmpty)\
    \ {\n                        paren_list = paren_group :: paren_list\n        \
    \                paren_group = \"\"\n                    }\n                }\n\
    \            } else if (paren != ' ') {\n                paren_group += paren\n\
    \            }\n        }\n        if (!paren_stack.isEmpty) {\n            return\
    \ List[String]()\n        }\n        return paren_list", "        // TODO: Implement\
    \ this function\n        return null", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_len = paren_string_no_spaces.length\n  \
    \      var paren_groups = List[String]()\n        var paren_group = \"\"\n   \
    \     var paren_count = 0\n        for (i <- 0 until paren_string_len) {\n   \
    \         if (paren_string_no_spaces(i) == '(') {\n                paren_count\
    \ += 1\n                paren_group += '('\n            } else {\n           \
    \     paren_count -= 1\n                paren_group += ')'\n            }\n  \
    \          if (paren_count == 0) {\n                paren_groups = paren_group\
    \ :: paren_groups\n                paren_group = \"\"\n            }\n       \
    \ }\n        paren_groups.reverse", "        var result = List[String]()\n   \
    \     var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    result = current_group\
    \ :: result\n                    current_group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in input string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Invalid input string\")\n       \
    \ }\n        result.reverse", "        val paren_string_no_space = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_string_no_space_list = paren_string_no_space.toList\n\
    \        var paren_string_no_space_list_length = paren_string_no_space_list.length\n\
    \        var paren_string_no_space_list_index = 0\n        var paren_string_no_space_list_index_start\
    \ = 0\n        var paren_string_no_space_list_index_end = 0\n        var paren_string_no_space_list_index_end_temp\
    \ = 0\n        var paren_string_no_space_list_index_end_temp_temp = 0\n      \
    \  var paren_string_no_space_list_index_end_temp_temp_temp = 0\n        var paren_string_no_space_list_index_end_temp_temp_temp_temp\
    \ = 0\n        var paren_string_no_space_list_index_end_temp_temp_temp_temp_temp\
    \ = 0\n        var paren_string_no_space_list_index_end_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var paren_string_no_space_list_index_end_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var paren_string_no_space_list_index_end_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var paren_string_no_space_list_index_end_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var paren_string_no_space_list_index_end_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var paren_string_no_space_list_index_end_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var paren_string_no_space_list_index_end_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    current_group += c\n            }\n        }\n        result", "        var\
    \ parens = paren_string.replaceAll(\" \", \"\")\n        var groups = List[String]()\n\
    \        var group = \"\"\n        var open = 0\n        for (c <- parens) {\n\
    \            if (c == '(') {\n                open += 1\n            } else {\n\
    \                open -= 1\n            }\n            group += c\n          \
    \  if (open == 0) {\n                groups = groups :+ group\n              \
    \  group = \"\"\n            }\n        }\n        groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var paren_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string_no_spaces) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \            }\n            paren_group += c\n            if (open_parens == 0)\
    \ {\n                paren_groups = paren_group :: paren_groups\n            \
    \    paren_group = \"\"\n            }\n        }\n        paren_groups.reverse",
  "        var result = List[String]()\n        var curr = \"\"\n        var open\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open += 1\n                curr += c\n            } else if (c == ')')\
    \ {\n                open -= 1\n                curr += c\n                if\
    \ (open == 0) {\n                    result = result :+ curr\n               \
    \     curr = \"\"\n                }\n            }\n        }\n        result",
  "        val paren_list = paren_string.toList.filter(_ != ' ')\n        var paren_groups\
    \ = List[String]()\n        var paren_group = \"\"\n        var open_parens =\
    \ 0\n        for (paren <- paren_list) {\n            if (paren == '(') {\n  \
    \              open_parens += 1\n                paren_group += paren\n      \
    \      } else {\n                open_parens -= 1\n                paren_group\
    \ += paren\n            }\n            if (open_parens == 0) {\n             \
    \   paren_groups = paren_group :: paren_groups\n                paren_group =\
    \ \"\"\n            }\n        }\n        paren_groups.reverse", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_chars\
    \ = paren_string_no_spaces.toCharArray\n        val paren_string_no_spaces_chars_length\
    \ = paren_string_no_spaces_chars.length\n        var paren_string_no_spaces_chars_index\
    \ = 0\n        var paren_string_no_spaces_chars_current_char = paren_string_no_spaces_chars(paren_string_no_spaces_chars_index)\n\
    \        var paren_string_no_spaces_chars_current_char_is_open_paren = false\n\
    \        var paren_string_no_spaces_chars_current_char_is_close_paren = false\n\
    \        var paren_string_no_spaces_chars_current_char_is_open_brace = false\n\
    \        var paren_string_no_spaces_chars_current_char_is_close_brace = false\n\
    \        var paren_string_no_spaces_chars_current_char_is_open_bracket = false\n\
    \        var paren_string_no_spaces_chars_current_char_is_close_bracket = false\n\
    \        var paren_string_no_spaces_chars_current_char_is_open_angle = false\n\
    \        var paren_string_no_spaces_chars_current_char_is_close_angle = false\n\
    \        var paren_string_no_spaces_chars_current_char_is_open_paren_or_brace_or_bracket_or_angle\
    \ = false\n        var paren_string_no_spaces_chars_current_char_is_close_paren_or_brace_or_bracket_or_angle\
    \ = false\n        var paren_string_no_spaces_chars_current_char_is_open_paren_or_brace_or_bracket_or_angle_or_close_paren_or_brace_or_bracket_or_angle\
    \ = false\n        var p", "        var result = List[String]()\n        var current_group\
    \ = new StringBuilder()\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group.append(c)\n            } else if (c == ')') {\n        \
    \        open_parens -= 1\n                current_group.append(c)\n         \
    \       if (open_parens == 0) {\n                    result = result :+ current_group.toString()\n\
    \                    current_group = new StringBuilder()\n                }\n\
    \            }\n        }\n        result", "        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var open_parens = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                open_parens\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in paren string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced parens\")\n        }\n\
    \        return paren_groups.reverse", "        val paren_string_no_space = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var paren_group\
    \ = \"\"\n        var open_paren_count = 0\n        for (c <- paren_string_no_space)\
    \ {\n            if (c == '(') {\n                open_paren_count += 1\n    \
    \        } else if (c == ')') {\n                open_paren_count -= 1\n     \
    \       }\n            paren_group += c\n            if (open_paren_count == 0)\
    \ {\n                paren_groups = paren_groups :+ paren_group\n            \
    \    paren_group = \"\"\n            }\n        }\n        paren_groups", "  \
    \      var groups = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in paren string\")\n            }\n\
    \        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Unbalanced parens\")\n        }\n        groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_list = paren_string_no_spaces.toList\n\
    \        val paren_string_list_length = paren_string_list.length\n        var\
    \ paren_string_list_index = 0\n        var paren_string_list_index_start = 0\n\
    \        var paren_string_list_index_end = 0\n        var paren_string_list_index_end_found\
    \ = false\n        var paren_string_list_index_end_found_count = 0\n        var\
    \ paren_string_list_index_end_found_count_max = 0\n        var paren_string_list_index_end_found_count_max_index\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_start = 0\n\
    \        var paren_string_list_index_end_found_count_max_index_end = 0\n     \
    \   var paren_string_list_index_end_found_count_max_index_end_found = false\n\
    \        var paren_string_list_index_end_found_count_max_index_end_found_count\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index_start\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index_end\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index_end_found\
    \ = false\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index_end_found_count\
    \ = 0\n        var paren_string", "        var groups = List[String]()\n     \
    \   var current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    groups = groups :+ current_group\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Invalid character in input string\"\
    )\n            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Invalid input string\")\n        }\n        return groups",
  "        val paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n   \
    \     val paren_groups = ListBuffer[String]()\n        var current_paren_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_paren_group += c\n            } else if (c == ')') {\n       \
    \         open_parens -= 1\n                current_paren_group += c\n       \
    \         if (open_parens == 0) {\n                    paren_groups += current_paren_group\n\
    \                    current_paren_group = \"\"\n                }\n         \
    \   }\n        }\n        paren_groups.toList", "        // TODO: Implement this\
    \ function\n        return List[String]()", "        var paren_groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_stack = Stack[Char]()\n \
    \       for (c <- paren_string) {\n            if (c == '(') {\n             \
    \   paren_stack.push(c)\n            } else if (c == ')') {\n                paren_stack.pop()\n\
    \                if (paren_stack.isEmpty) {\n                    paren_groups\
    \ = paren_groups :+ current_group\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                current_group\
    \ += c\n            }\n        }\n        paren_groups", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        var paren_groups = List[String]()\n\
    \        var current_paren_group = \"\"\n        var open_parens = 0\n       \
    \ for (i <- 0 until paren_string_no_spaces.length) {\n            val current_char\
    \ = paren_string_no_spaces(i)\n            if (current_char == '(') {\n      \
    \          open_parens += 1\n            } else if (current_char == ')') {\n \
    \               open_parens -= 1\n            }\n            current_paren_group\
    \ += current_char\n            if (open_parens == 0) {\n                paren_groups\
    \ = current_paren_group :: paren_groups\n                current_paren_group =\
    \ \"\"\n            }\n        }\n        paren_groups.reverse", "        val\
    \ paren_string_no_space = paren_string.replaceAll(\" \", \"\")\n        val paren_string_list\
    \ = paren_string_no_space.toList\n        val paren_string_list_len = paren_string_list.length\n\
    \        var paren_string_list_index = 0\n        var paren_string_list_index_stack\
    \ = Stack[Int]()\n        var paren_string_list_index_stack_top = 0\n        var\
    \ paren_string_list_index_stack_top_prev = 0\n        var paren_string_list_index_stack_top_prev_prev\
    \ = 0\n        var paren_string_list_index_stack_top_prev_prev_prev = 0\n    \
    \    var paren_string_list_index_stack_top_prev_prev_prev_prev = 0\n        var\
    \ paren_string_list_index_stack_top_prev_prev_prev_prev_prev = 0\n        var\
    \ paren_string_list_index_stack_top_prev_prev_prev_prev_prev_prev = 0\n      \
    \  var paren_string_list_index_stack_top_prev_prev_prev_prev_prev_prev_prev =\
    \ 0\n        var paren_string_list_index_stack_top_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n        var paren_string_list_index_stack_top_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev",
  "        val paren_string_no_space = paren_string.replaceAll(\" \", \"\")\n    \
    \    val paren_string_no_space_len = paren_string_no_space.length\n        var\
    \ paren_string_no_space_index = 0\n        var paren_string_no_space_current_char\
    \ = paren_string_no_space.charAt(paren_string_no_space_index)\n        var paren_string_no_space_current_char_is_open\
    \ = false\n        var paren_string_no_space_current_char_is_close = false\n \
    \       var paren_string_no_space_current_char_is_open_paren = false\n       \
    \ var paren_string_no_space_current_char_is_close_paren = false\n        var paren_string_no_space_current_char_is_open_brace\
    \ = false\n        var paren_string_no_space_current_char_is_close_brace = false\n\
    \        var paren_string_no_space_current_char_is_open_bracket = false\n    \
    \    var paren_string_no_space_current_char_is_close_bracket = false\n       \
    \ var paren_string_no_space_current_char_is_open_angle = false\n        var paren_string_no_space_current_char_is_close_angle\
    \ = false\n        var paren_string_no_space_current_char_is_open_curly = false\n\
    \        var paren_string_no_space_current_char_is_close_curly = false\n     \
    \   var paren_string_no_space_current_char_is_open_square = false\n        var\
    \ paren_string_no_space_current_char_is_close_square = false\n        var paren_string_no_space_current_char_is_open_triangle\
    \ = false\n        var paren_string_no_space_current_char_is_close_triangle =\
    \ false\n        var paren_string_no_space_current_char_is_open_diamond = false\n\
    \        var paren_string_no_space_current_char_is_", "        var groups = List[String]()\n\
    \        var current_group = \"\"\n        var paren_count = 0\n        for (c\
    \ <- paren_string) {\n            if (c == '(') {\n                paren_count\
    \ += 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                paren_count -= 1\n                current_group += c\n      \
    \          if (paren_count == 0) {\n                    groups = groups :+ current_group\n\
    \                    current_group = \"\"\n                }\n            }\n\
    \        }\n        return groups", "        // Fill in your code here\n     \
    \   return List[String]()", "        // TODO: Implement this function\n      \
    \  return List[String]()", "        var groups = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    groups = groups :+ current_group\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in input string\")\n            }\n\
    \        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Invalid input string\")\n        }\n        return groups", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var open = 0\n       \
    \ for (c <- paren_string) {\n            if (c == '(') {\n                open\
    \ += 1\n                current += c\n            } else if (c == ')') {\n   \
    \             open -= 1\n                current += c\n                if (open\
    \ == 0) {\n                    result = current :: result\n                  \
    \  current = \"\"\n                }\n            } else if (c != ' ') {\n   \
    \             throw new Exception(\"Invalid character \" + c)\n            }\n\
    \        }\n        if (open != 0) throw new Exception(\"Unbalanced parentheses\"\
    )\n        result.reverse", "        var paren_groups = List[String]()\n     \
    \   var cur_group = \"\"\n        var paren_count = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                paren_count += 1\n         \
    \       cur_group += c\n            } else if (c == ')') {\n                paren_count\
    \ -= 1\n                cur_group += c\n                if (paren_count == 0)\
    \ {\n                    paren_groups = paren_groups :+ cur_group\n          \
    \          cur_group = \"\"\n                }\n            }\n        }\n   \
    \     return paren_groups", "        var paren_groups = List[String]()\n     \
    \   var current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    paren_groups = current_group :: paren_groups\n\
    \                    current_group = \"\"\n                }\n            } else\
    \ if (c != ' ') {\n                throw new Exception(\"Invalid character in\
    \ paren string\")\n            }\n        }\n        if (open_parens != 0) {\n\
    \            throw new Exception(\"Invalid paren string\")\n        }\n      \
    \  return paren_groups.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups = List[String]()\n        var paren_stack\
    \ = Stack[Char]()\n        var paren_group = \"\"\n        for (paren <- paren_string_no_spaces)\
    \ {\n            if (paren == '(') {\n                paren_stack.push(paren)\n\
    \            } else if (paren == ')') {\n                paren_stack.pop()\n \
    \               if (paren_stack.isEmpty) {\n                    paren_groups =\
    \ paren_group :: paren_groups\n                    paren_group = \"\"\n      \
    \          }\n            }\n            paren_group += paren\n        }\n   \
    \     paren_groups", "        var result = List[String]()\n        var curr_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                curr_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                curr_group += c\n                if (open_parens == 0) {\n  \
    \                  result = result :+ curr_group\n                    curr_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in input string\")\n            }\n\
    \        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Unbalanced parentheses\")\n        }\n        return result", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var count = 0\n      \
    \  for (c <- paren_string) {\n            if (c == '(') {\n                count\
    \ += 1\n            } else if (c == ')') {\n                count -= 1\n     \
    \       }\n            if (count == 0 && c == ')') {\n                result =\
    \ result :+ current\n                current = \"\"\n            } else if (c\
    \ != ' ') {\n                current += c\n            }\n        }\n        result",
  "        var result = List[String]()\n        var temp = \"\"\n        var open\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open += 1\n                temp += c\n            } else if (c == ')')\
    \ {\n                open -= 1\n                temp += c\n                if\
    \ (open == 0) {\n                    result = temp :: result\n               \
    \     temp = \"\"\n                }\n            }\n        }\n        result.reverse",
  "        var result = List[String]()\n        var current_group = \"\"\n       \
    \ var open_parens = 0\n        for (c <- paren_string) {\n            if (c ==\
    \ '(') {\n                open_parens += 1\n                current_group += c\n\
    \            } else if (c == ')') {\n                open_parens -= 1\n      \
    \          current_group += c\n                if (open_parens == 0) {\n     \
    \               result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in input string\")\n            }\n\
    \        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Unbalanced parentheses in input string\")\n        }\n        result.reverse",
  "        var paren_list = List[String]()\n        var paren_stack = Stack[Char]()\n\
    \        var paren_group = \"\"\n        for (c <- paren_string) {\n         \
    \   if (c == '(') {\n                paren_stack.push(c)\n            } else if\
    \ (c == ')') {\n                paren_stack.pop()\n                if (paren_stack.isEmpty)\
    \ {\n                    paren_list = paren_group :: paren_list\n            \
    \        paren_group = \"\"\n                }\n            } else if (c != '\
    \ ') {\n                paren_group += c\n            }\n        }\n        paren_list",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     var paren_list = List[String]()\n        var current_paren = \"\"\n    \
    \    var open_paren = 0\n        for (c <- paren_string) {\n            if (c\
    \ == '(') {\n                open_paren += 1\n                current_paren +=\
    \ c\n            } else if (c == ')') {\n                open_paren -= 1\n   \
    \             current_paren += c\n                if (open_paren == 0) {\n   \
    \                 paren_list = current_paren :: paren_list\n                 \
    \   current_paren = \"\"\n                }\n            }\n        }\n      \
    \  paren_list", "        var result = List[String]()\n        var current = \"\
    \"\n        var open = 0\n        for (c <- paren_string) {\n            if (c\
    \ == '(') {\n                open += 1\n                current += c\n       \
    \     } else if (c == ')') {\n                open -= 1\n                current\
    \ += c\n                if (open == 0) {\n                    result = current\
    \ :: result\n                    current = \"\"\n                }\n         \
    \   } else if (c != ' ') {\n                throw new Exception(\"Invalid character\
    \ in paren string\")\n            }\n        }\n        if (open != 0) {\n   \
    \         throw new Exception(\"Unbalanced paren string\")\n        }\n      \
    \  result.reverse", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_length = paren_string_no_spaces.length\n\
    \        var paren_string_no_spaces_index = 0\n        var paren_string_no_spaces_current_char\
    \ = paren_string_no_spaces.charAt(paren_string_no_spaces_index)\n        var paren_string_no_spaces_current_char_is_open_paren\
    \ = false\n        var paren_string_no_spaces_current_char_is_close_paren = false\n\
    \        var paren_string_no_spaces_current_char_is_paren = false\n        var\
    \ paren_string_no_spaces_current_char_is_open_paren_count = 0\n        var paren_string_no_spaces_current_char_is_close_paren_count\
    \ = 0\n        var paren_string_no_spaces_current_char_is_paren_count = 0\n  \
    \      var paren_string_no_spaces_current_char_is_paren_count_max = 0\n      \
    \  var paren_string_no_spaces_current_char_is_paren_count_max_index = 0\n    \
    \    var paren_string_no_spaces_current_char_is_paren_count_max_index_start =\
    \ 0\n        var paren_string_no_spaces_current_char_is_paren_count_max_index_end\
    \ = 0\n        var paren_string_no_spaces_current_char_is_paren_count_max_index_start_list\
    \ = List[Int]()\n        var paren_string_no_spaces_current_char_is_paren_count_max_index_end_list\
    \ = List[Int]()\n        var paren_string_no_spaces_current_char_is_paren_count_max_index_start_list_index\
    \ = 0\n        var paren_string_no_spaces_current_char_is_paren_count_max_index_end_list_index\
    \ = 0\n        var paren", "        var result = List[String]()\n        var current\
    \ = new StringBuilder()\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current.append(c)\n\
    \            } else if (c == ')') {\n                open -= 1\n             \
    \   current.append(c)\n                if (open == 0) {\n                    result\
    \ = result :+ current.toString\n                    current = new StringBuilder()\n\
    \                }\n            } else if (c != ' ') {\n                throw\
    \ new IllegalArgumentException(\"Invalid character in input string\")\n      \
    \      }\n        }\n        if (open != 0) {\n            throw new IllegalArgumentException(\"\
    Unbalanced parentheses\")\n        }\n        result", "        var groups = List[String]()\n\
    \        var group = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                group\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          group += c\n                if (open == 0) {\n                    groups\
    \ = groups :+ group\n                    group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in paren string\")\n            }\n        }\n        if (open !=\
    \ 0) {\n            throw new Exception(\"Unbalanced paren string\")\n       \
    \ }\n        groups", "        var result = List[String]()\n        var current_string\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_string\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_string += c\n                if (open_parens == 0) {\n\
    \                    result = current_string :: result\n                    current_string\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character in input string\")\n            }\n\
    \        }\n        if (open_parens != 0) {\n            throw new Exception(\"\
    Invalid input string\")\n        }\n        result.reverse", "        // TODO:\
    \ Implement this function\n        return List[String]()", "        var paren_groups\
    \ = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    paren_groups\
    \ = current_group :: paren_groups\n                    current_group = \"\"\n\
    \                }\n            } else if (c != ' ') {\n                throw\
    \ new Exception(\"Invalid character in paren string\")\n            }\n      \
    \  }\n        if (open_parens != 0) {\n            throw new Exception(\"Unbalanced\
    \ paren string\")\n        }\n        return paren_groups.reverse", "        val\
    \ paren_string_no_spaces = paren_string.replaceAll(\" \", \"\")\n        val paren_string_no_spaces_length\
    \ = paren_string_no_spaces.length\n        val paren_string_no_spaces_chars =\
    \ paren_string_no_spaces.toCharArray\n        var paren_groups = List[String]()\n\
    \        var current_paren_group = \"\"\n        var open_paren_count = 0\n  \
    \      for (i <- 0 until paren_string_no_spaces_length) {\n            val current_char\
    \ = paren_string_no_spaces_chars(i)\n            if (current_char == '(') {\n\
    \                open_paren_count += 1\n            } else if (current_char ==\
    \ ')') {\n                open_paren_count -= 1\n            }\n            current_paren_group\
    \ += current_char\n            if (open_paren_count == 0) {\n                paren_groups\
    \ = current_paren_group :: paren_groups\n                current_paren_group =\
    \ \"\"\n            }\n        }\n        paren_groups.reverse", "        var\
    \ result = List[String]()\n        var s = new Stack[Char]()\n        var i =\
    \ 0\n        var j = 0\n        while (i < paren_string.length) {\n          \
    \  if (paren_string(i) == '(') {\n                s.push(paren_string(i))\n  \
    \          } else if (paren_string(i) == ')') {\n                s.pop()\n   \
    \             if (s.isEmpty) {\n                    result = result :+ paren_string.substring(j,\
    \ i + 1)\n                    j = i + 1\n                }\n            }\n  \
    \          i += 1\n        }\n        result", "        var groups = List[String]()\n\
    \        var group = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                group\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          group += c\n                if (open == 0) {\n                    groups\
    \ = groups :+ group\n                    group = \"\"\n                }\n   \
    \         } else if (c != ' ') {\n                group += c\n            }\n\
    \        }\n        groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        var paren_groups : List[String] = List()\n        var current_group\
    \ : String = \"\"\n        var open_parens : Int = 0\n        for (c <- paren_string_no_spaces)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \   } else if (c == ')') {\n                open_parens -= 1\n            }\n\
    \            current_group += c\n            if (open_parens == 0) {\n       \
    \         paren_groups = paren_groups :+ current_group\n                current_group\
    \ = \"\"\n            }\n        }\n        return paren_groups", "        //\
    \ TODO: Implement this function\n        return List[String]()", "        var\
    \ result = List[String]()\n        var current_group = \"\"\n        var open_parens\
    \ = 0\n        for (c <- paren_string) {\n            if (c == '(') {\n      \
    \          open_parens += 1\n                current_group += c\n            }\
    \ else if (c == ')') {\n                open_parens -= 1\n                current_group\
    \ += c\n                if (open_parens == 0) {\n                    result =\
    \ current_group :: result\n                    current_group = \"\"\n        \
    \        }\n            } else if (c != ' ') {\n                throw new Exception(\"\
    Invalid character in input string\")\n            }\n        }\n        if (open_parens\
    \ != 0) {\n            throw new Exception(\"Unbalanced parentheses in input string\"\
    )\n        }\n        result.reverse", "        var paren_list = List[String]()\n\
    \        var paren_stack = Stack[Char]()\n        var paren_string_builder = new\
    \ StringBuilder()\n        for (c <- paren_string) {\n            if (c == '(')\
    \ {\n                paren_stack.push(c)\n            } else if (c == ')') {\n\
    \                if (paren_stack.isEmpty) {\n                    throw new Exception(\"\
    Invalid paren string\")\n                }\n                paren_stack.pop()\n\
    \                if (paren_stack.isEmpty) {\n                    paren_list =\
    \ paren_string_builder.toString() :: paren_list\n                    paren_string_builder\
    \ = new StringBuilder()\n                }\n            } else if (c != ' ') {\n\
    \                paren_string_builder.append(c)\n            }\n        }\n  \
    \      if (!paren_stack.isEmpty) {\n            throw new Exception(\"Invalid\
    \ paren string\")\n        }\n        return paren_list", "        val paren_string_no_spaces\
    \ = paren_string.replaceAll(\" \", \"\")\n        val paren_string_list = paren_string_no_spaces.toList\n\
    \        val paren_string_list_length = paren_string_list.length\n        var\
    \ paren_string_list_index = 0\n        var paren_string_list_index_start = 0\n\
    \        var paren_string_list_index_end = 0\n        var paren_string_list_index_end_found\
    \ = false\n        var paren_string_list_index_end_found_count = 0\n        var\
    \ paren_string_list_index_end_found_count_max = 0\n        var paren_string_list_index_end_found_count_max_index\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_start = 0\n\
    \        var paren_string_list_index_end_found_count_max_index_end = 0\n     \
    \   var paren_string_list_index_end_found_count_max_index_end_found = false\n\
    \        var paren_string_list_index_end_found_count_max_index_end_found_count\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index_start\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index_end\
    \ = 0\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index_end_found\
    \ = false\n        var paren_string_list_index_end_found_count_max_index_end_found_count_max_index_end_found_count\
    \ = 0\n        var paren_string", "        var result = List[String]()\n     \
    \   var current_group = \"\"\n        var open_parens = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open_parens += 1\n         \
    \       current_group += c\n            } else if (c == ')') {\n             \
    \   open_parens -= 1\n                current_group += c\n                if (open_parens\
    \ == 0) {\n                    result = current_group :: result\n            \
    \        current_group = \"\"\n                }\n            } else if (c !=\
    \ ' ') {\n                throw new Exception(\"Unexpected character \" + c)\n\
    \            }\n        }\n        if (open_parens != 0) {\n            throw\
    \ new Exception(\"Unbalanced parentheses\")\n        }\n        result.reverse",
  "        var paren_groups = List[String]()\n        var paren_group = \"\"\n   \
    \     var open_parens = 0\n        for (c <- paren_string) {\n            if (c\
    \ == '(') {\n                open_parens += 1\n                paren_group +=\
    \ c\n            } else if (c == ')') {\n                open_parens -= 1\n  \
    \              paren_group += c\n                if (open_parens == 0) {\n   \
    \                 paren_groups = paren_group :: paren_groups\n               \
    \     paren_group = \"\"\n                }\n            } else if (c != ' ')\
    \ {\n                throw new Exception(\"Invalid character in paren string\"\
    )\n            }\n        }\n        if (open_parens != 0) throw new Exception(\"\
    Invalid paren string\")\n        return paren_groups", "        var result = List[String]()\n\
    \        var current = \"\"\n        var open = 0\n        for (c <- paren_string)\
    \ {\n            if (c == '(') {\n                open += 1\n                current\
    \ += c\n            } else if (c == ')') {\n                open -= 1\n      \
    \          current += c\n                if (open == 0) {\n                  \
    \  result = current :: result\n                    current = \"\"\n          \
    \      }\n            }\n        }\n        result.reverse", "        var result\
    \ = List[String]()\n        var current = \"\"\n        var open = 0\n       \
    \ for (c <- paren_string) {\n            if (c == '(') {\n                open\
    \ += 1\n                current += c\n            } else if (c == ')') {\n   \
    \             open -= 1\n                current += c\n                if (open\
    \ == 0) {\n                    result = current :: result\n                  \
    \  current = \"\"\n                }\n            } else if (c != ' ') {\n   \
    \             throw new Exception(\"Invalid character in input string\")\n   \
    \         }\n        }\n        if (open != 0) throw new Exception(\"Invalid input\
    \ string\")\n        result.reverse", "        // This is a helper function to\
    \ check if a string is balanced\n        def isBalanced(str : String) : Boolean\
    \ = {\n            var stack = new Stack[Char]\n            for (c <- str) {\n\
    \                if (c == '(') {\n                    stack.push(c)\n        \
    \        } else if (c == ')') {\n                    if (stack.isEmpty) {\n  \
    \                      return false\n                    } else {\n          \
    \              stack.pop\n                    }\n                }\n         \
    \   }\n            stack.isEmpty\n        }\n        // This is a helper function\
    \ to check if a string is balanced and contains only parentheses\n        def\
    \ isValid(str : String) : Boolean = {\n            var stack = new Stack[Char]\n\
    \            for (c <- str) {\n                if (c == '(') {\n             \
    \       stack.push(c)\n                } else if (c == ')') {\n              \
    \      if (stack.isEmpty) {\n                        return false\n          \
    \          } else {\n                        stack.pop\n                    }\n\
    \                } else {\n                    return false\n                }\n\
    \            }\n            stack.isEmpty\n        }\n        // This is a helper\
    \ function to check if a string is balanced and contains only parentheses and\
    \ spaces\n        def isValidWithSpaces(str : String) : Boolean = {\n        \
    \    var stack = new Stack[Char]\n            for (c <- str) {\n             \
    \   if (c == '(') {\n                    stack.push(c)\n                } else\
    \ if (c == ')') {\n                    if (stack.isEmpty) {\n                \
    \        return false\n                    } else {\n                        stack.pop\n\
    \                    }\n                } else if (c != ' ') {\n             \
    \       return false\n                }\n            }\n            stack.isEmpty\n\
    \        }\n        // This is a helper function to check if a string is balanced\
    \ and contains only parentheses and spaces\n        def isValidWithSpacesAndCommas(str\
    \ : String) : Boolean = {\n            var stack = new Stack[Char]\n         \
    \   for (c <- str) {\n                if (c == '(') {\n                    stack.push(c)\n\
    \                } else if (c == ')') {\n                    if (stack.isEmpty)\
    \ {\n                        return false\n                    } else {\n    \
    \                    stack.", "        // TODO: Implement this function\n    \
    \    return List[String]()", "        var paren_groups = List[String]()\n    \
    \    var current_group = \"\"\n        var open_parens = 0\n        for (c <-\
    \ paren_string) {\n            if (c == '(') {\n                open_parens +=\
    \ 1\n                current_group += c\n            } else if (c == ')') {\n\
    \                open_parens -= 1\n                current_group += c\n      \
    \          if (open_parens == 0) {\n                    paren_groups = current_group\
    \ :: paren_groups\n                    current_group = \"\"\n                }\n\
    \            } else if (c != ' ') {\n                throw new Exception(\"Invalid\
    \ character in paren string\")\n            }\n        }\n        return paren_groups",
  "        var paren_groups = List[String]()\n        var current_group = \"\"\n \
    \       var paren_count = 0\n        for (c <- paren_string) {\n            if\
    \ (c == '(') {\n                paren_count += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                paren_count -= 1\n\
    \                current_group += c\n                if (paren_count == 0) {\n\
    \                    paren_groups = paren_groups :+ current_group\n          \
    \          current_group = \"\"\n                }\n            }\n        }\n\
    \        paren_groups", "        val paren_string_no_spaces = paren_string.replaceAll(\"\
    \ \", \"\")\n        val paren_string_no_spaces_list = paren_string_no_spaces.toList\n\
    \        def helper(paren_string_no_spaces_list : List[Char], acc : List[String])\
    \ : List[String] = {\n            if (paren_string_no_spaces_list.isEmpty) acc\n\
    \            else {\n                val (group, rest) = paren_string_no_spaces_list.span(x\
    \ => x != ')')\n                if (rest.isEmpty) acc\n                else helper(rest.tail,\
    \ acc :+ (group :+ ')'))\n            }\n        }\n        helper(paren_string_no_spaces_list,\
    \ List())", "        // TODO: Implement this function\n        return List[String]()",
  "        val paren_string_no_spaces = paren_string.replaceAll(\"\\\\s+\", \"\")\n\
    \        val paren_string_list = paren_string_no_spaces.toList\n        val paren_string_list_length\
    \ = paren_string_list.length\n        var paren_string_list_index = 0\n      \
    \  var paren_string_list_index_start = 0\n        var paren_string_list_index_end\
    \ = 0\n        var paren_string_list_index_start_stack = Stack[Int]()\n      \
    \  var paren_string_list_index_end_stack = Stack[Int]()\n        var paren_string_list_index_start_stack_size\
    \ = 0\n        var paren_string_list_index_end_stack_size = 0\n        var paren_string_list_index_start_stack_top\
    \ = 0\n        var paren_string_list_index_end_stack_top = 0\n        var paren_string_list_index_start_stack_top_value\
    \ = ' '\n        var paren_string_list_index_end_stack_top_value = ' '\n     \
    \   var paren_string_list_index_value = ' '\n        var paren_string_list_index_value_previous\
    \ = ' '\n        var paren_string_list_index_value_next = ' '\n        var paren_string_list_index_value_next_next\
    \ = ' '\n        var paren_string_list_index_value_next_next_next = ' '\n    \
    \    var paren_string_list_index_value_next_next_next_next = ' '\n        var\
    \ paren_string_list_index_value_next_next_next_next_next = ' '\n        var paren_string_list_index_value_next_next_next_next_next_next\
    \ = ' '\n        var paren_string_list_index_value_next_next_next_next_next_next_next\
    \ = ' '\n        var paren_string_list_index_value_next_next_next_next_next_next_next_next\
    \ = ' '\n        var", "        // TODO: Implement this function\n        return\
    \ List[String]()", "        var result = List[String]()\n        var current_group\
    \ = \"\"\n        var open_parens = 0\n        for (c <- paren_string) {\n   \
    \         if (c == '(') {\n                open_parens += 1\n                current_group\
    \ += c\n            } else if (c == ')') {\n                open_parens -= 1\n\
    \                current_group += c\n                if (open_parens == 0) {\n\
    \                    result = current_group :: result\n                    current_group\
    \ = \"\"\n                }\n            } else if (c != ' ') {\n            \
    \    throw new Exception(\"Invalid character '\" + c + \"' in paren string\")\n\
    \            }\n        }\n        if (open_parens != 0) throw new Exception(\"\
    Unbalanced paren string\")\n        return result"]
stop_tokens:
- "\n    }\n"
