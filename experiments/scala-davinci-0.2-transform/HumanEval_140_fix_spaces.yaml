name: HumanEval_140_fix_spaces
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string text, replace all spaces in it with underscores, \n    //\
  \ and if a string has more than 2 consecutive spaces, \n    // then replace all\
  \ consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\"\
  )\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\"\
  \ Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n\
  \    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
  )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ["        var result = \"\"\n        var prev = ' '\n        for (c <-\
    \ text) {\n            if (c == ' ') {\n                if (prev == ' ') {\n \
    \                   result += '-'\n                } else {\n                \
    \    result += '_'\n                }\n            } else {\n                result\
    \ += c\n            }\n            prev = c\n        }\n        result", "   \
    \     var result = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 1) result += \"_\"\n                else if (count == 2)\
    \ result += \"_\"\n                else if (count > 2) result += \"-\"\n     \
    \       }\n            else {\n                result += text(i)\n           \
    \     count = 0\n            }\n        }\n        result", "        var result\
    \ = text.replaceAll(\" \", \"_\")\n        if (result.contains(\"__\")) {\n  \
    \          result = result.replaceAll(\"__\", \"-\")\n        }\n        return\
    \ result", "        var result = text.replaceAll(\" \", \"_\")\n        result\
    \ = result.replaceAll(\"_+\", \"-\")\n        result", "        var result = text.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "  \
    \      // Fill in the code here\n        return text", "        var result = text.replace(\"\
    \ \", \"_\")\n        result = result.replace(\"__\", \"_\")\n        result =\
    \ result.replace(\"__\", \"-\")\n        return result", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        var result = text\n        result = result.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"__\", \"_\")\n        result\
    \ = result.replaceAll(\"___\", \"-\")\n        return result", "        var result\
    \ = \"\"\n        var count = 0\n        for (i <- 0 until text.length) {\n  \
    \          if (text(i) == ' ') {\n                count += 1\n               \
    \ if (count == 1) result += \"_\"\n                else if (count == 2) result\
    \ += \"_\"\n                else if (count > 2) result += \"-\"\n            }\n\
    \            else {\n                count = 0\n                result += text(i)\n\
    \            }\n        }\n        result", '        return text.replaceAll("
    ", "_").replaceAll("_+", "-")', "        var result = \"\"\n        var count\
    \ = 0\n        for (i <- 0 until text.length) {\n            if (text(i) == '\
    \ ') {\n                count += 1\n                if (count == 1) result +=\
    \ '_'\n                else if (count == 2) result += '_'\n                else\
    \ if (count > 2) result += '-'\n            }\n            else {\n          \
    \      count = 0\n                result += text(i)\n            }\n        }\n\
    \        result", "        var result = text\n        result = result.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"__\", \"_\")\n        result\
    \ = result.replaceAll(\"___\", \"-\")\n        return result", "        var result\
    \ = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"_+\",\
    \ \"-\")\n        result", "        var result = text.replaceAll(\" \", \"_\"\
    )\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "     \
    \   var result = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 1) result += '_'\n                else if (count == 2) result\
    \ += '_'\n                else if (count > 2) result += '-'\n            }\n \
    \           else {\n                result += text(i)\n                count =\
    \ 0\n            }\n        }\n        result", "        var result = text.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        var result = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 1) result += '_'\n                else if (count == 2) result\
    \ += '_'\n                else if (count > 2) result += '-'\n            } else\
    \ {\n                count = 0\n                result += text(i)\n          \
    \  }\n        }\n        result", '        text.replaceAll("\\s+", "_").replaceAll("
    ", "-")', "        var s = text.trim\n        s = s.replaceAll(\" \", \"_\")\n\
    \        s = s.replaceAll(\"_+\", \"-\")\n        return s", "        var result\
    \ = \"\"\n        var last = ' '\n        for (c <- text) {\n            if (c\
    \ == ' ') {\n                if (last == ' ') {\n                    result +=\
    \ '-'\n                } else {\n                    result += '_'\n         \
    \       }\n            } else {\n                result += c\n            }\n\
    \            last = c\n        }\n        result", "        val result = new StringBuilder\n\
    \        var prev = ' '\n        for (c <- text) {\n            if (c == ' ')\
    \ {\n                if (prev == ' ') {\n                    result.append('-')\n\
    \                } else {\n                    result.append('_')\n          \
    \      }\n            } else {\n                result.append(c)\n           \
    \ }\n            prev = c\n        }\n        result.toString", "        var result\
    \ = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"_+\",\
    \ \"-\")\n        result", "        var result = text.replaceAll(\" \", \"_\"\
    )\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "     \
    \   var result = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 1) result += '_'\n                else if (count == 2) result\
    \ += '_'\n                else if (count > 2) result += '-'\n            }\n \
    \           else {\n                count = 0\n                result += text(i)\n\
    \            }\n        }\n        result", "        val sb = new StringBuilder\n\
    \        var spaceCount = 0\n        for (c <- text) {\n            if (c == '\
    \ ') {\n                spaceCount += 1\n                if (spaceCount == 1)\
    \ sb.append('_')\n                else if (spaceCount == 2) sb.append('_')\n \
    \               else if (spaceCount > 2) sb.append('-')\n            } else {\n\
    \                spaceCount = 0\n                sb.append(c)\n            }\n\
    \        }\n        sb.toString", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        var result = text.replaceAll(\" \", \"_\")\n        result\
    \ = result.replaceAll(\"_+\", \"-\")\n        result", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+", "-")', "        val\
    \ sb = new StringBuilder\n        var lastChar = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (lastChar == ' ') {\n   \
    \                 sb.append('-')\n                } else {\n                 \
    \   sb.append('_')\n                }\n            } else {\n                sb.append(c)\n\
    \            }\n            lastChar = c\n        }\n        sb.toString", " \
    \       var result = text.trim()\n        result = result.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        return result",
  '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', "        val sb =\
    \ new StringBuilder\n        var lastChar = ' '\n        for (c <- text) {\n \
    \           if (c == ' ') {\n                if (lastChar == ' ') {\n        \
    \            sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            lastChar = c\n        }\n        sb.toString", "      \
    \  var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    __\", \"_\")\n        result = result.replaceAll(\"__\", \"-\")\n        return\
    \ result", "        var result = text.replaceAll(\" \", \"_\")\n        result\
    \ = result.replaceAll(\"_+\", \"-\")\n        result", '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        var result = \"\"\n        var count = 0\n        for (i <-\
    \ 0 until text.length) {\n            if (text(i) == ' ') {\n                count\
    \ += 1\n                if (count == 1) result += \"_\"\n                else\
    \ if (count == 2) result += \"_\"\n                else if (count > 2) result\
    \ += \"-\"\n            }\n            else {\n                result += text(i)\n\
    \                count = 0\n            }\n        }\n        result", "     \
    \   var result = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 1) result += \"_\"\n                else if (count == 2)\
    \ result += \"_\"\n                else if (count > 2) result += \"-\"\n     \
    \       }\n            else {\n                count = 0\n                result\
    \ += text(i)\n            }\n        }\n        result", "        var result =\
    \ text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"_+\", \"\
    -\")\n        result", "        var result = text.replaceAll(\" \", \"_\")\n \
    \       result = result.replaceAll(\"_+\", \"-\")\n        result", "        val\
    \ sb = new StringBuilder\n        var prev = ' '\n        for (c <- text) {\n\
    \            if (c == ' ') {\n                if (prev == ' ') {\n           \
    \         sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            prev = c\n        }\n        sb.toString", "        var\
    \ result = text.replace(\" \", \"_\")\n        result = result.replace(\"__\"\
    , \"_\")\n        result = result.replace(\"___\", \"-\")\n        return result",
  "        var s = text.replaceAll(\" \", \"_\")\n        s = s.replaceAll(\"_+\"\
    , \"-\")\n        s", "        val sb = new StringBuilder\n        var prev =\
    \ ' '\n        for (c <- text) {\n            if (c == ' ') {\n              \
    \  if (prev == ' ') {\n                    sb.append('-')\n                } else\
    \ {\n                    sb.append('_')\n                }\n            } else\
    \ {\n                sb.append(c)\n            }\n            prev = c\n     \
    \   }\n        sb.toString", "        var result = text.replaceAll(\" \", \"_\"\
    )\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "     \
    \   var result = text.replace(\" \", \"_\")\n        var i = 0\n        while\
    \ (i < result.length) {\n            if (result(i) == '_') {\n               \
    \ var j = i + 1\n                while (j < result.length && result(j) == '_')\
    \ j += 1\n                if (j - i > 2) {\n                    result = result.substring(0,\
    \ i) + \"-\" + result.substring(j)\n                }\n            }\n       \
    \     i += 1\n        }\n        result", "        var result = text.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result\
    \ = result.replaceAll(\"^-\", \"\")\n        result", "        var result = text.replaceAll(\"\
    \\\\s+\", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', "        val regex\
    \ = \"\\\\s+\".r\n        regex.replaceAllIn(text, m => if (m.group(0).length\
    \ > 2) \"-\" else \"_\")", "        val sb = new StringBuilder\n        var prev\
    \ = ' '\n        for (c <- text) {\n            if (c == ' ') {\n            \
    \    if (prev == ' ') {\n                    sb.append('-')\n                }\
    \ else {\n                    sb.append('_')\n                }\n            }\
    \ else {\n                sb.append(c)\n            }\n            prev = c\n\
    \        }\n        sb.toString", "        val sb = new StringBuilder\n      \
    \  var prev = ' '\n        for (c <- text) {\n            if (c == ' ') {\n  \
    \              if (prev == ' ') {\n                    sb.append('-')\n      \
    \          } else {\n                    sb.append('_')\n                }\n \
    \           } else {\n                sb.append(c)\n            }\n          \
    \  prev = c\n        }\n        sb.toString", "        var result = text.replace(\"\
    \ \", \"_\")\n        result = result.replace(\"__\", \"_\")\n        result =\
    \ result.replace(\"__\", \"-\")\n        return result", "        var result =\
    \ text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"_+\", \"\
    -\")\n        result", "        var result = text.replace(\" \", \"_\")\n    \
    \    result = result.replace(\"__\", \"_\")\n        result = result.replace(\"\
    __\", \"-\")\n        return result", "        val regex = \"\\\\s+\".r\n    \
    \    regex.replaceAllIn(text, m => if (m.end - m.start > 2) \"-\" else \"_\")",
  "        val sb = new StringBuilder\n        var prev = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (prev == ' ') {\n       \
    \             sb += '-'\n                } else {\n                    sb += '_'\n\
    \                }\n            } else {\n                sb += c\n          \
    \  }\n            prev = c\n        }\n        sb.toString", "        var result\
    \ = \"\"\n        var count = 0\n        for (i <- 0 until text.length) {\n  \
    \          if (text(i) == ' ') {\n                count += 1\n               \
    \ if (count == 2) result += '-'\n            } else {\n                if (count\
    \ == 1) result += '_'\n                count = 0\n                result += text(i)\n\
    \            }\n        }\n        if (count == 1) result += '_'\n        result",
  "        var result = \"\"\n        var spaceCount = 0\n        for (i <- 0 until\
    \ text.length) {\n            if (text(i) == ' ') {\n                spaceCount\
    \ += 1\n                if (spaceCount == 1) result += \"_\"\n               \
    \ else if (spaceCount == 2) result += \"_\"\n                else if (spaceCount\
    \ > 2) result += \"-\"\n            } else {\n                spaceCount = 0\n\
    \                result += text(i)\n            }\n        }\n        result",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        val s = text.trim\n        var t = \"\"\
    \n        var count = 0\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i) == ' ') {\n                count += 1\n                if (count == 1)\
    \ t += \"_\"\n                else if (count == 2) t += \"_\"\n              \
    \  else if (count > 2) t += \"-\"\n            } else {\n                count\
    \ = 0\n                t += s(i)\n            }\n        }\n        t", "    \
    \    val sb = new StringBuilder\n        var prev = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (prev == ' ') {\n       \
    \             sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            prev = c\n        }\n        sb.toString", "        var\
    \ s = text.trim\n        var count = 0\n        for (i <- 0 until s.length) {\n\
    \            if (s(i) == ' ') {\n                count += 1\n                if\
    \ (count > 2) {\n                    s = s.substring(0, i) + \"-\" + s.substring(i\
    \ + 1)\n                } else {\n                    s = s.substring(0, i) +\
    \ \"_\" + s.substring(i + 1)\n                }\n            } else {\n      \
    \          count = 0\n            }\n        }\n        s", "        val sb =\
    \ new StringBuilder\n        var count = 0\n        for (c <- text) {\n      \
    \      if (c == ' ') {\n                count += 1\n                if (count\
    \ == 1) sb.append('_')\n                else if (count == 2) sb.append('_')\n\
    \                else sb.append('-')\n            } else {\n                count\
    \ = 0\n                sb.append(c)\n            }\n        }\n        sb.toString",
  '        text.replaceAll("\\s+", "-")', "        var result = text.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "  \
    \      val sb = new StringBuilder\n        var prev = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (prev == ' ') {\n       \
    \             sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            prev = c\n        }\n        sb.toString", "        val\
    \ sb = new StringBuilder\n        var last = ' '\n        for (c <- text) {\n\
    \            if (c == ' ') {\n                if (last == ' ') {\n           \
    \         sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            last = c\n        }\n        sb.toString", "        val\
    \ sb = new StringBuilder\n        var count = 0\n        for (c <- text) {\n \
    \           if (c == ' ') {\n                count += 1\n                if (count\
    \ == 1) sb.append('_')\n                else if (count == 2) sb.append('_')\n\
    \                else if (count > 2) sb.append('-')\n            } else {\n  \
    \              count = 0\n                sb.append(c)\n            }\n      \
    \  }\n        sb.toString", "        val sb = new StringBuilder\n        var count\
    \ = 0\n        for (c <- text) {\n            if (c == ' ') {\n              \
    \  count += 1\n                if (count == 1) sb.append('_')\n              \
    \  else if (count == 2) sb.append('_')\n                else if (count > 2) sb.append('-')\n\
    \            } else {\n                count = 0\n                sb.append(c)\n\
    \            }\n        }\n        sb.toString", '        text.replaceAll("\\s+",
    "-")', "        var result = text\n        result = result.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", '        text.replaceAll("\\s+",
    "-")', "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text.replace(\" \", \"_\"\
    )\n        result = result.replace(\"__\", \"_\")\n        result = result.replace(\"\
    __\", \"-\")\n        return result", '        return text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        var result = text.replace(\" \", \"_\")\n\
    \        result = result.replace(\"__\", \"_\")\n        result = result.replace(\"\
    __\", \"-\")\n        return result", "        var result = text.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        var result = text.replaceAll(\" \", \"_\")\n        result\
    \ = result.replaceAll(\"_+\", \"-\")\n        result", "        val sb = new StringBuilder\n\
    \        var prev = ' '\n        for (c <- text) {\n            if (c == ' ')\
    \ {\n                if (prev == ' ') {\n                    sb.append('-')\n\
    \                } else {\n                    sb.append('_')\n              \
    \  }\n            } else {\n                sb.append(c)\n            }\n    \
    \        prev = c\n        }\n        sb.toString", "        var result = text\n\
    \        if (text.length > 2) {\n            result = text.replaceAll(\" \", \"\
    _\")\n            if (result.contains(\"__\")) {\n                result = result.replaceAll(\"\
    __\", \"-\")\n            }\n        }\n        result", "        var result =\
    \ text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"_+\", \"\
    -\")\n        result", "        val sb = new StringBuilder\n        var count\
    \ = 0\n        for (c <- text) {\n            if (c == ' ') {\n              \
    \  count += 1\n                if (count == 1) sb.append('_')\n              \
    \  else if (count == 2) sb.append('_')\n                else if (count > 2) sb.append('-')\n\
    \            } else {\n                count = 0\n                sb.append(c)\n\
    \            }\n        }\n        sb.toString", "        var result = text.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        val s = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (s.length > 2) s.replaceAll(\"_\", \"-\") else s", "        val\
    \ sb = new StringBuilder\n        var prev = ' '\n        for (c <- text) {\n\
    \            if (c == ' ') {\n                if (prev == ' ') {\n           \
    \         sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            prev = c\n        }\n        sb.toString", "        var\
    \ result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    __\", \"_\")\n        result = result.replaceAll(\"___\", \"-\")\n        return\
    \ result", '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")', "  \
    \      var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "  \
    \      var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        val sb = new StringBuilder\n        var\
    \ prev = ' '\n        for (c <- text) {\n            if (c == ' ') {\n       \
    \         if (prev == ' ') {\n                    sb.append('-')\n           \
    \     } else {\n                    sb.append('_')\n                }\n      \
    \      } else {\n                sb.append(c)\n            }\n            prev\
    \ = c\n        }\n        sb.toString", "        var sb = new StringBuilder\n\
    \        var count = 0\n        for (c <- text) {\n            if (c == ' ') {\n\
    \                count += 1\n                if (count == 1) sb.append('_')\n\
    \                else if (count == 2) sb.append('_')\n                else if\
    \ (count > 2) sb.append('-')\n            } else {\n                count = 0\n\
    \                sb.append(c)\n            }\n        }\n        sb.toString",
  "        var result = text.trim\n        result = result.replace(\" \", \"_\")\n\
    \        result = result.replaceAll(\"_+\", \"-\")\n        return result", " \
    \       var result = text.replaceAll(\"\\\\s+\", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = \"\"\n        var count =\
    \ 0\n        for (i <- 0 until text.length) {\n            if (text(i) == ' ')\
    \ {\n                count += 1\n                if (count > 2) result += \"-\"\
    \n            } else {\n                if (count == 1) result += \"_\"\n    \
    \            count = 0\n                result += text(i)\n            }\n   \
    \     }\n        result", "        var result = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "  \
    \      var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text.replace(\" \", \"_\"\
    )\n        result = result.replace(\"__\", \"_\")\n        result = result.replace(\"\
    __\", \"-\")\n        return result", "        var result = text.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        val sb = new StringBuilder\n        var\
    \ count = 0\n        for (c <- text) {\n            if (c == ' ') {\n        \
    \        count += 1\n                if (count == 1) sb.append('_')\n        \
    \        else if (count == 2) sb.append('_')\n                else if (count >\
    \ 2) sb.append('-')\n            } else {\n                count = 0\n       \
    \         sb.append(c)\n            }\n        }\n        sb.toString", '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', "        val sb = new StringBuilder\n        var\
    \ last = ' '\n        for (c <- text) {\n            if (c == ' ') {\n       \
    \         if (last == ' ') {\n                    sb.append('-')\n           \
    \     } else {\n                    sb.append('_')\n                }\n      \
    \      } else {\n                sb.append(c)\n            }\n            last\
    \ = c\n        }\n        sb.toString", "        val sb = new StringBuilder\n\
    \        var prev = ' '\n        for (c <- text) {\n            if (c == ' ')\
    \ {\n                if (prev == ' ') {\n                    sb.append('-')\n\
    \                } else {\n                    sb.append('_')\n              \
    \  }\n            } else {\n                sb.append(c)\n            }\n    \
    \        prev = c\n        }\n        sb.toString", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        var result = \"\"\n        var spaceCount\
    \ = 0\n        for (i <- 0 until text.length) {\n            if (text(i) == '\
    \ ') {\n                spaceCount += 1\n                if (spaceCount == 1)\
    \ result += '_'\n                else if (spaceCount == 2) result += '_'\n   \
    \             else if (spaceCount > 2) result += '-'\n            } else {\n \
    \               spaceCount = 0\n                result += text(i)\n          \
    \  }\n        }\n        result", "        val sb = new StringBuilder\n      \
    \  var i = 0\n        while (i < text.length) {\n            if (text(i) == '\
    \ ') {\n                if (i == 0 || text(i - 1) == ' ') {\n                \
    \    sb.append('_')\n                } else {\n                    sb.append('-')\n\
    \                }\n            } else {\n                sb.append(text(i))\n\
    \            }\n            i += 1\n        }\n        sb.toString", "       \
    \ val sb = new StringBuilder\n        var prev = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (prev == ' ') {\n       \
    \             sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            prev = c\n        }\n        return sb.toString", "   \
    \     val sb = new StringBuilder\n        var spaceCount = 0\n        for (c <-\
    \ text) {\n            if (c == ' ') {\n                spaceCount += 1\n    \
    \            if (spaceCount == 2) {\n                    sb.append('_')\n    \
    \            }\n            } else {\n                if (spaceCount > 2) {\n\
    \                    sb.append('-')\n                }\n                sb.append(c)\n\
    \                spaceCount = 0\n            }\n        }\n        sb.toString",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        val sb = new StringBuilder\n        var\
    \ count = 0\n        for (c <- text) {\n            if (c == ' ') {\n        \
    \        count += 1\n                if (count == 1) sb.append('_')\n        \
    \        else if (count == 2) sb.append('_')\n                else if (count >\
    \ 2) sb.append('-')\n            } else {\n                count = 0\n       \
    \         sb.append(c)\n            }\n        }\n        sb.toString", "    \
    \    var result = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 1) result += \"_\"\n                else if (count == 2)\
    \ result += \"_\"\n                else if (count > 2) result += \"-\"\n     \
    \       }\n            else {\n                result += text(i)\n           \
    \     count = 0\n            }\n        }\n        result", "        var result\
    \ = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"_+\",\
    \ \"-\")\n        result", "        var result = text.replaceAll(\" \", \"_\"\
    )\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "     \
    \   var result = text\n        result = result.replaceAll(\"\\\\s+\", \"_\")\n\
    \        result = result.replaceAll(\"_+\", \"-\")\n        result", "       \
    \ var result = text.replaceAll(\"\\\\s+\", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text\n        result = result.replace(\"\
    \ \", \"_\")\n        result = result.replace(\"__\", \"_\")\n        result =\
    \ result.replace(\"___\", \"-\")\n        return result", '        text.replaceAll("\\s+",
    "-")', "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"_\")\n        result = result.replaceAll(\"\
    _\", \"-\")\n        return result", "        val sb = new StringBuilder\n   \
    \     var spaceCount = 0\n        for (c <- text) {\n            if (c == ' ')\
    \ {\n                spaceCount += 1\n                if (spaceCount == 2) {\n\
    \                    sb.append('-')\n                    spaceCount = 0\n    \
    \            }\n            } else {\n                if (spaceCount == 1) {\n\
    \                    sb.append('_')\n                }\n                spaceCount\
    \ = 0\n                sb.append(c)\n            }\n        }\n        if (spaceCount\
    \ == 1) {\n            sb.append('_')\n        }\n        sb.toString", "    \
    \    val sb = new StringBuilder\n        var prev = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (prev == ' ') {\n       \
    \             sb += '-'\n                } else {\n                    sb += '_'\n\
    \                }\n            } else {\n                sb += c\n          \
    \  }\n            prev = c\n        }\n        sb.toString", "        var result\
    \ = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"_+\",\
    \ \"-\")\n        result", "        val sb = new StringBuilder\n        var i\
    \ = 0\n        var count = 0\n        while (i < text.length) {\n            if\
    \ (text(i) == ' ') {\n                count += 1\n                if (count ==\
    \ 1) sb.append('_')\n                else if (count == 2) sb.append('_')\n   \
    \             else if (count > 2) sb.append('-')\n            } else {\n     \
    \           count = 0\n                sb.append(text(i))\n            }\n   \
    \         i += 1\n        }\n        sb.toString", "        var result = text.trim.replaceAll(\"\
    \ \", \"_\")\n        if (result.contains(\"__\")) result = result.replaceAll(\"\
    __\", \"-\")\n        result", "        var result = text.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", '        text.replaceAll("\\s+",
    " ").replaceAll(" ", "_")', '        return text.replaceAll("\\s+", "-")', " \
    \       val sb = new StringBuilder\n        var prev = ' '\n        for (c <-\
    \ text) {\n            if (c == ' ') {\n                if (prev == ' ') {\n \
    \                   sb.append('-')\n                } else {\n               \
    \     sb.append('_')\n                }\n            } else {\n              \
    \  sb.append(c)\n            }\n            prev = c\n        }\n        sb.toString",
  '        text.replaceAll("\\s+", "-")', "        val sb = new StringBuilder\n  \
    \      var prev = ' '\n        for (c <- text) {\n            if (c == ' ') {\n\
    \                if (prev == ' ') {\n                    sb.append('-')\n    \
    \            } else {\n                    sb.append('_')\n                }\n\
    \            } else {\n                sb.append(c)\n            }\n         \
    \   prev = c\n        }\n        sb.toString", "        val sb = new StringBuilder\n\
    \        var lastChar = ' '\n        for (c <- text) {\n            if (c == '\
    \ ') {\n                if (lastChar == ' ') {\n                    sb.append('-')\n\
    \                } else {\n                    sb.append('_')\n              \
    \  }\n            } else {\n                sb.append(c)\n            }\n    \
    \        lastChar = c\n        }\n        sb.toString", "        var result =\
    \ \"\"\n        var count = 0\n        for (i <- 0 until text.length) {\n    \
    \        if (text(i) == ' ') {\n                count += 1\n                if\
    \ (count == 1) result += '_'\n                else if (count == 2) result += '_'\n\
    \                else if (count > 2) result += '-'\n            } else {\n   \
    \             count = 0\n                result += text(i)\n            }\n  \
    \      }\n        result", "        var result = \"\"\n        var prev = ' '\n\
    \        for (c <- text) {\n            if (c == ' ') {\n                if (prev\
    \ == ' ') {\n                    result += '-'\n                } else {\n   \
    \                 result += '_'\n                }\n            } else {\n   \
    \             result += c\n            }\n            prev = c\n        }\n  \
    \      result", "        val sb = new StringBuilder\n        var prev = ' '\n\
    \        for (c <- text) {\n            if (c == ' ') {\n                if (prev\
    \ == ' ') {\n                    sb.append('-')\n                } else {\n  \
    \                  sb.append('_')\n                }\n            } else {\n \
    \               sb.append(c)\n            }\n            prev = c\n        }\n\
    \        sb.toString", '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        val sb = new StringBuilder\n        var\
    \ lastSpace = false\n        for (c <- text) {\n            if (c == ' ') {\n\
    \                if (lastSpace) {\n                    sb.append('-')\n      \
    \          } else {\n                    sb.append('_')\n                    lastSpace\
    \ = true\n                }\n            } else {\n                sb.append(c)\n\
    \                lastSpace = false\n            }\n        }\n        sb.toString",
  "        var result = \"\"\n        var count = 0\n        for (c <- text) {\n \
    \           if (c == ' ') {\n                count += 1\n                if (count\
    \ == 1) result += '_'\n                else if (count == 2) result += '_'\n  \
    \              else if (count > 2) result += '-'\n            } else {\n     \
    \           count = 0\n                result += c\n            }\n        }\n\
    \        result", "        var result = new StringBuilder\n        var last =\
    \ ' '\n        for (c <- text) {\n            if (c == ' ') {\n              \
    \  if (last == ' ') {\n                    result += '-'\n                } else\
    \ {\n                    result += '_'\n                }\n            } else\
    \ {\n                result += c\n            }\n            last = c\n      \
    \  }\n        result.toString", "        val sb = new StringBuilder\n        var\
    \ lastChar = ' '\n        for (c <- text) {\n            if (c == ' ') {\n   \
    \             if (lastChar == ' ') {\n                    sb.append('-')\n   \
    \             } else {\n                    sb.append('_')\n                }\n\
    \            } else {\n                sb.append(c)\n            }\n         \
    \   lastChar = c\n        }\n        sb.toString", "        var result = text.replace(\"\
    \ \", \"_\")\n        result = result.replace(\"__\", \"_\")\n        result =\
    \ result.replace(\"___\", \"-\")\n        return result", "        var result\
    \ = \"\"\n        var count = 0\n        for (i <- 0 until text.length) {\n  \
    \          if (text(i) == ' ') {\n                count += 1\n               \
    \ if (count == 1) result += \"_\"\n                else if (count == 2) result\
    \ += \"_\"\n                else if (count > 2) result += \"-\"\n            }\n\
    \            else {\n                count = 0\n                result += text(i)\n\
    \            }\n        }\n        result", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        var result = text.replace(\" \", \"_\")\n        result = result.replace(\"\
    __\", \"_\")\n        result = result.replace(\"__\", \"-\")\n        return result",
  "        val sb = new StringBuilder\n        var prev = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (prev == ' ') {\n       \
    \             sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            prev = c\n        }\n        sb.toString", "        var\
    \ result = \"\"\n        var prev = ' '\n        for (c <- text) {\n         \
    \   if (c == ' ') {\n                if (prev == ' ') {\n                    result\
    \ += '-'\n                } else {\n                    result += '_'\n      \
    \          }\n            } else {\n                result += c\n            }\n\
    \            prev = c\n        }\n        result", "        var result = \"\"\n\
    \        var prev = ' '\n        for (c <- text) {\n            if (c == ' ')\
    \ {\n                if (prev == ' ') {\n                    result += '-'\n \
    \               } else {\n                    result += '_'\n                }\n\
    \            } else {\n                result += c\n            }\n          \
    \  prev = c\n        }\n        result", '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        var result = text.replace(\" \", \"_\")\n        result = result.replace(\"\
    __\", \"_\")\n        result = result.replace(\"__\", \"-\")\n        return result",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"_\")\n        result = result.replaceAll(\"_\", \"-\")\n        return\
    \ result", "        val sb = new StringBuilder\n        var prev = ' '\n     \
    \   for (c <- text) {\n            if (c == ' ') {\n                if (prev ==\
    \ ' ') {\n                    sb.append('-')\n                } else {\n     \
    \               sb.append('_')\n                }\n            } else {\n    \
    \            sb.append(c)\n            }\n            prev = c\n        }\n  \
    \      sb.toString", '        text.replaceAll("\\s+", "-").replaceAll("\\s", "_")',
  "        var result = \"\"\n        var prev = ' '\n        for (c <- text) {\n\
    \            if (c == ' ') {\n                if (prev == ' ') {\n           \
    \         result += '-'\n                } else {\n                    result\
    \ += '_'\n                }\n            } else {\n                result += c\n\
    \            }\n            prev = c\n        }\n        result", '        text.replaceAll("
    ", "_").replaceAll("_+", "-")', "        val sb = new StringBuilder\n        var\
    \ prev = ' '\n        for (c <- text) {\n            if (c == ' ') {\n       \
    \         if (prev == ' ') {\n                    sb.append('-')\n           \
    \     } else {\n                    sb.append('_')\n                }\n      \
    \      } else {\n                sb.append(c)\n            }\n            prev\
    \ = c\n        }\n        sb.toString", '        return text.replaceAll("\\s+",
    "_").replaceAll("_+", "-")', '        text.replaceAll("\\s+", "-").replaceAll("
    ", "_")', "        var result = \"\"\n        var count = 0\n        for (i <-\
    \ 0 until text.length) {\n            if (text(i) == ' ') {\n                count\
    \ += 1\n                if (count == 1) result += \"_\"\n                else\
    \ if (count == 2) result += \"_\"\n                else if (count > 2) result\
    \ += \"-\"\n            }\n            else {\n                result += text(i)\n\
    \                count = 0\n            }\n        }\n        result", "     \
    \   var s = text.replaceAll(\" \", \"_\")\n        s = s.replaceAll(\"_+\", \"\
    -\")\n        return s", "        var result = text.trim\n        result = result.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        return\
    \ result", "        var result = text\n        result = result.replaceAll(\" \"\
    , \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        var result = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 1) result += '_'\n                else if (count == 2) result\
    \ += '_'\n                else if (count > 2) result += '-'\n            } else\
    \ {\n                count = 0\n                result += text(i)\n          \
    \  }\n        }\n        result", "        var s = text.replaceAll(\"\\\\s+\"\
    , \"_\")\n        s = s.replaceAll(\"_+\", \"-\")\n        s", "        val sb\
    \ = new StringBuilder\n        var lastChar = ' '\n        for (c <- text) {\n\
    \            if (c == ' ') {\n                if (lastChar == ' ') {\n       \
    \             sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            lastChar = c\n        }\n        sb.toString", "      \
    \  var result = text\n        result = result.replaceAll(\" \", \"_\")\n     \
    \   result = result.replaceAll(\"_+\", \"-\")\n        result", '        text.replaceAll("\\s+",
    "-").replaceAll("\\s", "_")', "        val sb = new StringBuilder()\n        var\
    \ prevSpace = false\n        for (c <- text) {\n            if (c == ' ') {\n\
    \                if (prevSpace) {\n                    sb.append('-')\n      \
    \          } else {\n                    sb.append('_')\n                    prevSpace\
    \ = true\n                }\n            } else {\n                sb.append(c)\n\
    \                prevSpace = false\n            }\n        }\n        sb.toString",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        val s = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (s.length > 2) {\n            s.substring(0, 2) + s.substring(2).replaceAll(\"\
    _\", \"-\")\n        } else {\n            s\n        }", "        val sb = new\
    \ StringBuilder\n        var cnt = 0\n        for (i <- 0 until text.length) {\n\
    \            if (text(i) == ' ') {\n                cnt += 1\n               \
    \ if (cnt == 1) sb.append('_')\n                else if (cnt == 2) sb.append('_')\n\
    \                else if (cnt > 2) sb.append('-')\n            } else {\n    \
    \            cnt = 0\n                sb.append(text(i))\n            }\n    \
    \    }\n        sb.toString", "        var result = text.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "  \
    \      val sb = new StringBuilder\n        var lastChar = ' '\n        for (c\
    \ <- text) {\n            if (c == ' ') {\n                if (lastChar == ' ')\
    \ {\n                    sb.append('-')\n                } else {\n          \
    \          sb.append('_')\n                }\n            } else {\n         \
    \       sb.append(c)\n            }\n            lastChar = c\n        }\n   \
    \     sb.toString", "        var result = text.replace(\" \", \"_\")\n       \
    \ result = result.replace(\"__\", \"_\")\n        result = result.replace(\"___\"\
    , \"-\")\n        return result", "        var result = text.replaceAll(\" \"\
    , \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        val sb = new StringBuilder\n        var prev = ' '\n        for (c <- text)\
    \ {\n            if (c == ' ') {\n                if (prev == ' ') {\n       \
    \             sb.append('-')\n                } else {\n                    sb.append('_')\n\
    \                }\n            } else {\n                sb.append(c)\n     \
    \       }\n            prev = c\n        }\n        sb.toString", "        var\
    \ result = \"\"\n        var count = 0\n        for (c <- text) {\n          \
    \  if (c == ' ') {\n                count += 1\n                if (count == 1)\
    \ result += '_'\n                else if (count == 2) result += '_'\n        \
    \        else if (count > 2) result += '-'\n            } else {\n           \
    \     count = 0\n                result += c\n            }\n        }\n     \
    \   result", "        var result = text.replaceAll(\" \", \"_\")\n        result\
    \ = result.replaceAll(\"_+\", \"-\")\n        result", "        var s = text.trim.replaceAll(\"\
    \ \", \"_\")\n        while (s.contains(\"__\")) {\n            s = s.replaceAll(\"\
    __\", \"-\")\n        }\n        s", '        text.replaceAll(" {2,}", "-").replaceAll("
    ", "_")', '        text.replaceAll("\\s+", "-").replaceAll(" ", "_")', '        text.replaceAll("\\s+",
    "-")', "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = \"\"\n        var count =\
    \ 0\n        for (i <- 0 until text.length) {\n            if (text(i) == ' ')\
    \ {\n                count += 1\n                if (count == 1) result += \"\
    _\"\n                else if (count == 2) result += \"_\"\n                else\
    \ if (count > 2) result += \"-\"\n            }\n            else {\n        \
    \        count = 0\n                result += text(i)\n            }\n       \
    \ }\n        result", "        var result = \"\"\n        var count = 0\n    \
    \    for (c <- text) {\n            if (c == ' ') {\n                count +=\
    \ 1\n                if (count == 1) result += '_'\n                else if (count\
    \ == 2) result += '_'\n                else if (count > 2) result += '-'\n   \
    \         } else {\n                count = 0\n                result += c\n \
    \           }\n        }\n        result", "        var result = \"\"\n      \
    \  var spaceCount = 0\n        for (c <- text) {\n            if (c == ' ') {\n\
    \                spaceCount += 1\n                if (spaceCount > 2) {\n    \
    \                result += \"-\"\n                }\n            } else {\n  \
    \              spaceCount = 0\n                result += c\n            }\n  \
    \      }\n        result", '        text.replaceAll("\\s+", "-").replaceAll("\\s",
    "_")', "        var result = \"\"\n        var spaceCount = 0\n        for (c\
    \ <- text) {\n            if (c == ' ') {\n                spaceCount += 1\n \
    \               if (spaceCount == 1) result += \"_\"\n                else if\
    \ (spaceCount == 2) result += \"_\"\n                else if (spaceCount > 2)\
    \ result += \"-\"\n            } else {\n                spaceCount = 0\n    \
    \            result += c\n            }\n        }\n        result", "       \
    \ var result = text\n        result = result.replaceAll(\"\\\\s+\", \"_\")\n \
    \       result = result.replaceAll(\"_+\", \"_\")\n        result = result.replaceAll(\"\
    _\", \"-\")\n        result", "        var result = text.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result"]
stop_tokens:
- "\n    }\n"
