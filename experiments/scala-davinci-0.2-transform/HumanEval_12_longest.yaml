name: HumanEval_12_longest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n    // strings of the same length. Return None in case the input\
  \ list is empty.\n    // >>> longest((List[String]()))\n    // None\n    // >>>\
  \ longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    // >>> longest((List[String](\"\
  a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def longest(strings : List[String])\
  \ : Option[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
  \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
  \n}\n"
completions: ["        if (strings.isEmpty) None\n        else {\n            var\
    \ max = strings(0)\n            for (s <- strings) if (s.length > max.length)\
    \ max = s\n            Some(max)\n        }", "        if (strings.isEmpty) None\n\
    \        else {\n            val maxLength = strings.map(_.length).max\n     \
    \       val maxStrings = strings.filter(_.length == maxLength)\n            Some(maxStrings.head)\n\
    \        }", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x, y)\
    \ => if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n\
    \        else {\n            var max = strings(0)\n            for (s <- strings)\
    \ if (s.length > max.length) max = s\n            Some(max)\n        }", "   \
    \     if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x, y) =>\
    \ if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n \
    \       else Some(strings.reduceLeft((x, y) => if (x.length > y.length) x else\
    \ y))", "        if (strings.isEmpty) None\n        else {\n            var longest\
    \ = strings(0)\n            for (s <- strings) {\n                if (s.length\
    \ > longest.length) longest = s\n            }\n            Some(longest)\n  \
    \      }", "        if (strings.isEmpty) None\n        else {\n            var\
    \ max = strings(0)\n            for (s <- strings) {\n                if (s.length\
    \ > max.length) max = s\n            }\n            Some(max)\n        }", " \
    \       if (strings.isEmpty) None\n        else {\n            var maxLength =\
    \ 0\n            var maxString = strings(0)\n            for (s <- strings) {\n\
    \                if (s.length > maxLength) {\n                    maxLength =\
    \ s.length\n                    maxString = s\n                }\n           \
    \ }\n            Some(maxString)\n        }", "        if (strings.isEmpty) None\n\
    \        else {\n            var max = strings(0)\n            for (s <- strings)\
    \ {\n                if (s.length > max.length) max = s\n            }\n     \
    \       Some(max)\n        }", "        if (strings.isEmpty) None\n        else\
    \ Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else b))", "  \
    \      if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else {\n            var longest\
    \ = strings(0)\n            for (s <- strings) if (s.length > longest.length)\
    \ longest = s\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (i <- 1 until strings.length) {\n                if (strings(i).length > longest.length)\
    \ longest = strings(i)\n            }\n            Some(longest)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > longest.length)\
    \ longest = s\n            }\n            Some(longest)\n        }", "       \
    \ if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x, y) => if\
    \ (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n    \
    \    else {\n            var longest = strings(0)\n            for (s <- strings)\
    \ {\n                if (s.length > longest.length) longest = s\n            }\n\
    \            Some(longest)\n        }"]
stop_tokens:
- "\n    }\n"
