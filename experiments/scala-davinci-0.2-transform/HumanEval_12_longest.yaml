name: HumanEval_12_longest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n    // strings of the same length. Return None in case the input\
  \ list is empty.\n    // >>> longest((List[String]()))\n    // None\n    // >>>\
  \ longest((List[String](\"a\", \"b\", \"c\")))\n    // \"a\"\n    // >>> longest((List[String](\"\
  a\", \"bb\", \"ccc\")))\n    // \"ccc\"\n    def longest(strings : List[String])\
  \ : Option[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
  \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
  \n}\n"
completions: ["        if (strings.isEmpty) None\n        else {\n            var\
    \ max = strings(0)\n            for (s <- strings) if (s.length > max.length)\
    \ max = s\n            Some(max)\n        }", "        if (strings.isEmpty) None\n\
    \        else {\n            val maxLength = strings.map(_.length).max\n     \
    \       val maxStrings = strings.filter(_.length == maxLength)\n            Some(maxStrings.head)\n\
    \        }", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x, y)\
    \ => if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n\
    \        else {\n            var max = strings(0)\n            for (s <- strings)\
    \ if (s.length > max.length) max = s\n            Some(max)\n        }", "   \
    \     if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x, y) =>\
    \ if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n \
    \       else Some(strings.reduceLeft((x, y) => if (x.length > y.length) x else\
    \ y))", "        if (strings.isEmpty) None\n        else {\n            var longest\
    \ = strings(0)\n            for (s <- strings) {\n                if (s.length\
    \ > longest.length) longest = s\n            }\n            Some(longest)\n  \
    \      }", "        if (strings.isEmpty) None\n        else {\n            var\
    \ max = strings(0)\n            for (s <- strings) {\n                if (s.length\
    \ > max.length) max = s\n            }\n            Some(max)\n        }", " \
    \       if (strings.isEmpty) None\n        else {\n            var maxLength =\
    \ 0\n            var maxString = strings(0)\n            for (s <- strings) {\n\
    \                if (s.length > maxLength) {\n                    maxLength =\
    \ s.length\n                    maxString = s\n                }\n           \
    \ }\n            Some(maxString)\n        }", "        if (strings.isEmpty) None\n\
    \        else {\n            var max = strings(0)\n            for (s <- strings)\
    \ {\n                if (s.length > max.length) max = s\n            }\n     \
    \       Some(max)\n        }", "        if (strings.isEmpty) None\n        else\
    \ Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else b))", "  \
    \      if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else {\n            var longest\
    \ = strings(0)\n            for (s <- strings) if (s.length > longest.length)\
    \ longest = s\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (i <- 1 until strings.length) {\n                if (strings(i).length > longest.length)\
    \ longest = strings(i)\n            }\n            Some(longest)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > longest.length)\
    \ longest = s\n            }\n            Some(longest)\n        }", "       \
    \ if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x, y) => if\
    \ (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n    \
    \    else {\n            var longest = strings(0)\n            for (s <- strings)\
    \ {\n                if (s.length > longest.length) longest = s\n            }\n\
    \            Some(longest)\n        }", "        strings match {\n           \
    \ case Nil => None\n            case _ => Some(strings.maxBy(_.length))\n    \
    \    }", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else {\n            val maxLength = strings.map(_.length).max\n     \
    \       val maxStrings = strings.filter(_.length == maxLength)\n            Some(maxStrings.head)\n\
    \        }", "        if (strings.isEmpty) None\n        else {\n            var\
    \ longest = strings(0)\n            for (s <- strings) {\n                if (s.length\
    \ > longest.length) longest = s\n            }\n            Some(longest)\n  \
    \      }", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (i <- 1 until strings.length) {\n                if (strings(i).length\
    \ > longest.length) longest = strings(i)\n            }\n            Some(longest)\n\
    \        }", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x, y)\
    \ => if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else {\n            var longest\
    \ = strings(0)\n            for (s <- strings) if (s.length > longest.length)\
    \ longest = s\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var max = strings(0)\n            for (i <-\
    \ 1 until strings.length) if (strings(i).length > max.length) max = strings(i)\n\
    \            Some(max)\n        }", "        if (strings.isEmpty) None\n     \
    \   else {\n            var longest = strings(0)\n            for (s <- strings)\
    \ {\n                if (s.length > longest.length) longest = s\n            }\n\
    \            Some(longest)\n        }", "        if (strings.isEmpty) None\n \
    \       else Some(strings.maxBy(_.length))", "        if (strings.isEmpty) None\n\
    \        else {\n            val maxLength = strings.map(_.length).max\n     \
    \       val maxStrings = strings.filter(_.length == maxLength)\n            Some(maxStrings.head)\n\
    \        }", "        if (strings.isEmpty) None\n        else {\n            var\
    \ longest = strings(0)\n            for (s <- strings) {\n                if (s.length\
    \ > longest.length) longest = s\n            }\n            Some(longest)\n  \
    \      }", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((x, y) => if (x.length > y.length) x else\
    \ y))", "        if (strings.isEmpty) None\n        else {\n            var longest\
    \ = strings(0)\n            for (s <- strings) {\n                if (s.length\
    \ > longest.length) longest = s\n            }\n            Some(longest)\n  \
    \      }", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else {\n            val maxLength =\
    \ strings.map(_.length).max\n            val maxLengthStrings = strings.filter(_.length\
    \ == maxLength)\n            Some(maxLengthStrings.head)\n        }", "      \
    \  if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > longest.length)\
    \ longest = s\n            }\n            Some(longest)\n        }", "       \
    \ if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (string <- strings) {\n                if (string.length > longest.length)\
    \ longest = string\n            }\n            Some(longest)\n        }", "  \
    \      if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else {\n            var max\
    \ : String = strings(0)\n            for (i <- 1 until strings.length) {\n   \
    \             if (strings(i).length > max.length) max = strings(i)\n         \
    \   }\n            Some(max)\n        }", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((x, y) => if (x.length > y.length) x else\
    \ y))", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else {\n            val maxLength\
    \ = strings.map(_.length).max\n            Some(strings.filter(_.length == maxLength).head)\n\
    \        }", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.sortWith((x, y) => x.length > y.length)(0))", "   \
    \     if (strings.isEmpty) None\n        else {\n            val longest = strings.maxBy(_.length)\n\
    \            Some(longest)\n        }", "        if (strings.length == 0) None\n\
    \        else {\n            var longest = strings(0)\n            for (i <- 1\
    \ until strings.length) {\n                if (strings(i).length > longest.length)\
    \ longest = strings(i)\n            }\n            Some(longest)\n        }",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.maxBy(_.length))", "        if (strings.length == 0)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (i <- 1 until strings.length) {\n                if (strings(i).length > longest.length)\
    \ longest = strings(i)\n            }\n            Some(longest)\n        }",
  "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x, y)\
    \ => if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else {\n            var maxLength =\
    \ 0\n            var maxString = \"\"\n            for (s <- strings) {\n    \
    \            if (s.length > maxLength) {\n                    maxLength = s.length\n\
    \                    maxString = s\n                }\n            }\n       \
    \     Some(maxString)\n        }", "        if (strings.isEmpty) None\n      \
    \  else {\n            var longest = strings(0)\n            for (s <- strings)\
    \ {\n                if (s.length > longest.length) longest = s\n            }\n\
    \            Some(longest)\n        }", "        if (strings.isEmpty) None\n \
    \       else {\n            var maxLength = 0\n            var maxString = \"\"\
    \n            for (s <- strings) {\n                if (s.length > maxLength)\
    \ {\n                    maxLength = s.length\n                    maxString =\
    \ s\n                }\n            }\n            Some(maxString)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > longest.length)\
    \ longest = s\n            }\n            Some(longest)\n        }", "       \
    \ if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))", "  \
    \      if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else {\n            var max = strings(0)\n            for (i <- 1 until\
    \ strings.length) {\n                if (strings(i).length > max.length) max =\
    \ strings(i)\n            }\n            Some(max)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.reduceLeft((a, b) => if (a.length > b.length)\
    \ a else b))", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty) None\n\
    \        else {\n            var maxLength = 0\n            var maxString = \"\
    \"\n            for (s <- strings) {\n                if (s.length > maxLength)\
    \ {\n                    maxLength = s.length\n                    maxString =\
    \ s\n                }\n            }\n            Some(maxString)\n        }",
  "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else {\n            val longest = strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b)\n            Some(longest)\n      \
    \  }", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x,\
    \ y) => if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n\
    \        else {\n            var maxLength = 0\n            var maxString = \"\
    \"\n            for (s <- strings) {\n                if (s.length > maxLength)\
    \ {\n                    maxLength = s.length\n                    maxString =\
    \ s\n                }\n            }\n            Some(maxString)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            val max = strings.maxBy(_.length)\n\
    \            Some(max)\n        }", "        if (strings.isEmpty) None\n     \
    \   else {\n            var longest = strings(0)\n            for (s <- strings)\
    \ {\n                if (s.length > longest.length) longest = s\n            }\n\
    \            Some(longest)\n        }", "        if (strings.isEmpty) None\n \
    \       else {\n            var longest = strings(0)\n            for (i <- 1\
    \ until strings.length) {\n                if (strings(i).length > longest.length)\
    \ longest = strings(i)\n            }\n            Some(longest)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            val max = strings.maxBy(_.length)\n\
    \            Some(max)\n        }", "        strings match {\n            case\
    \ Nil => None\n            case x :: Nil => Some(x)\n            case x :: xs\
    \ => {\n                val y = longest(xs)\n                y match {\n     \
    \               case None => Some(x)\n                    case Some(y) => if (x.length\
    \ > y.length) Some(x) else Some(y)\n                }\n            }\n       \
    \ }", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        strings match {\n        \
    \    case Nil => None\n            case x :: xs => {\n                val max\
    \ = xs.foldLeft(x)((a, b) => if (a.length > b.length) a else b)\n            \
    \    Some(max)\n            }\n        }", "        if (strings.isEmpty) None\n\
    \        else {\n            val longestString = strings.reduceLeft((a, b) =>\
    \ if (a.length > b.length) a else b)\n            Some(longestString)\n      \
    \  }", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.sortWith((a, b) => a.length > b.length)(0))", "   \
    \     if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else {\n            val maxLength =\
    \ strings.map(_.length).max\n            val maxLengthStrings = strings.filter(_.length\
    \ == maxLength)\n            Some(maxLengthStrings.head)\n        }", "      \
    \  if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > longest.length)\
    \ longest = s\n            }\n            Some(longest)\n        }", "       \
    \ if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b) => if\
    \ (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n    \
    \    else {\n            val longest = strings.maxBy(_.length)\n            Some(longest)\n\
    \        }", "        if (strings.isEmpty) None\n        else {\n            var\
    \ longest = strings(0)\n            for (i <- 1 until strings.length) {\n    \
    \            if (strings(i).length > longest.length) longest = strings(i)\n  \
    \          }\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (i <- 1 until strings.length) {\n                if (strings(i).length > longest.length)\
    \ longest = strings(i)\n            }\n            Some(longest)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (i <- 1 until strings.length) {\n                if (strings(i).length\
    \ > longest.length) longest = strings(i)\n            }\n            Some(longest)\n\
    \        }", "        if (strings.isEmpty) None\n        else {\n            var\
    \ max = strings(0)\n            for (s <- strings) if (s.length > max.length)\
    \ max = s\n            Some(max)\n        }", "        if (strings.isEmpty) None\n\
    \        else Some(strings.sortWith((a, b) => a.length > b.length)(0))", "   \
    \     if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b) =>\
    \ if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n \
    \       else Some(strings.sortWith((a, b) => a.length > b.length)(0))", "    \
    \    if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b) =>\
    \ if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n \
    \       else Some(strings.reduceLeft((x, y) => if (x.length > y.length) x else\
    \ y))", "        if (strings.isEmpty) None\n        else {\n            var longest\
    \ = strings(0)\n            for (i <- 1 until strings.length) {\n            \
    \    if (strings(i).length > longest.length) longest = strings(i)\n          \
    \  }\n            Some(longest)\n        }", "        if (strings.isEmpty) None\n\
    \        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else {\n            var max\
    \ = strings(0)\n            for (s <- strings) if (s.length > max.length) max\
    \ = s\n            Some(max)\n        }", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > longest.length)\
    \ longest = s\n            }\n            Some(longest)\n        }", "       \
    \ if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b) => if\
    \ (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n    \
    \    else {\n            var longest : String = strings(0)\n            for (s\
    \ <- strings) {\n                if (s.length > longest.length) longest = s\n\
    \            }\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (s <- strings) {\n                if (s.length > longest.length) longest = s\n\
    \            }\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            val maxLength = strings.map(_.length).max\n\
    \            val longestStrings = strings.filter(_.length == maxLength)\n    \
    \        Some(longestStrings.head)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (s <- strings) {\n                if (s.length > longest.length) longest = s\n\
    \            }\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.reduceLeft((a, b) => if (a.length > b.length)\
    \ a else b))", "        if (strings.isEmpty) None\n        else {\n          \
    \  var longest = strings(0)\n            for (s <- strings) {\n              \
    \  if (s.length > longest.length) longest = s\n            }\n            Some(longest)\n\
    \        }", "        if (strings.isEmpty) None\n        else {\n            var\
    \ maxLength = 0\n            var maxString = \"\"\n            for (s <- strings)\
    \ {\n                if (s.length > maxLength) {\n                    maxLength\
    \ = s.length\n                    maxString = s\n                }\n         \
    \   }\n            Some(maxString)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.reduceLeft((a, b) => if (a.length > b.length)\
    \ a else b))", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x,\
    \ y) => if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.sortWith((a, b) => a.length > b.length)(0))", "   \
    \     if (strings.length == 0) None\n        else {\n            var longest =\
    \ strings(0)\n            for (i <- 1 until strings.length) {\n              \
    \  if (strings(i).length > longest.length) longest = strings(i)\n            }\n\
    \            Some(longest)\n        }", "        if (strings.isEmpty) None\n \
    \       else Some(strings.maxBy(_.length))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else {\n            var longest\
    \ = strings(0)\n            for (i <- 1 until strings.length) {\n            \
    \    if (strings(i).length > longest.length) longest = strings(i)\n          \
    \  }\n            Some(longest)\n        }", "        if (strings.isEmpty) None\n\
    \        else {\n            var maxLength = 0\n            var maxString = \"\
    \"\n            for (s <- strings) {\n                if (s.length > maxLength)\
    \ {\n                    maxLength = s.length\n                    maxString =\
    \ s\n                }\n            }\n            Some(maxString)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > longest.length)\
    \ longest = s\n            }\n            Some(longest)\n        }", "       \
    \ if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))", "  \
    \      if (strings.isEmpty) None\n        else {\n            var max = strings(0)\n\
    \            for (s <- strings) if (s.length > max.length) max = s\n         \
    \   Some(max)\n        }", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) return None\n        var longest = strings(0)\n\
    \        for (s <- strings) {\n            if (s.length > longest.length) longest\
    \ = s\n        }\n        return Some(longest)", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (s <- strings) {\n                if (s.length > longest.length) longest = s\n\
    \            }\n            Some(longest)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var longest = strings(0)\n            for\
    \ (i <- 1 until strings.length) {\n                if (strings(i).length > longest.length)\
    \ longest = strings(i)\n            }\n            Some(longest)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            var max = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > max.length)\
    \ max = s\n            }\n            Some(max)\n        }", "        if (strings.isEmpty)\
    \ None\n        else {\n            var maxLength = 0\n            var maxString\
    \ = strings(0)\n            for (s <- strings) {\n                if (s.length\
    \ > maxLength) {\n                    maxLength = s.length\n                 \
    \   maxString = s\n                }\n            }\n            Some(maxString)\n\
    \        }", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.length == 0) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x,\
    \ y) => if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n\
    \        else {\n            var maxLength = 0\n            var maxString = \"\
    \"\n            for (s <- strings) {\n                if (s.length > maxLength)\
    \ {\n                    maxLength = s.length\n                    maxString =\
    \ s\n                }\n            }\n            Some(maxString)\n        }",
  "        if (strings.isEmpty) None\n        else {\n            var max = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > max.length)\
    \ max = s\n            }\n            Some(max)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.reduceLeft((a, b) => if (a.length > b.length)\
    \ a else b))", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else {\n            val longest = strings.maxBy(_.length)\n         \
    \   Some(longest)\n        }", "        // TODO: Implement this method\n     \
    \   return None", "        if (strings.isEmpty) None\n        else Some(strings.sortWith((a,\
    \ b) => a.length > b.length)(0))", "        if (strings.isEmpty) None\n      \
    \  else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else b))",
  "        if (strings.isEmpty) None\n        else {\n            val longest = strings.reduceLeft((a,\
    \ b) => if (a.length >= b.length) a else b)\n            Some(longest)\n     \
    \   }", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.maxBy(_.length))", "        if (strings.isEmpty) None\n\
    \        else {\n            val longest = strings.maxBy(_.length)\n         \
    \   Some(longest)\n        }", "        if (strings.isEmpty) None\n        else\
    \ {\n            val sorted = strings.sortWith((a, b) => a.length > b.length)\n\
    \            Some(sorted.head)\n        }", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((x, y) => if (x.length > y.length) x else\
    \ y))", "        if (strings.isEmpty) None\n        else {\n            var longest\
    \ = strings(0)\n            for (i <- 1 until strings.length) {\n            \
    \    if (strings(i).length > longest.length) longest = strings(i)\n          \
    \  }\n            Some(longest)\n        }", "        if (strings.isEmpty) None\n\
    \        else {\n            var max = strings(0)\n            for (i <- 1 until\
    \ strings.length) {\n                if (strings(i).length > max.length) max =\
    \ strings(i)\n            }\n            Some(max)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.reduceLeft((a, b) => if (a.length > b.length)\
    \ a else b))", "        if (strings.isEmpty) None\n        else {\n          \
    \  var max = strings(0)\n            for (s <- strings) {\n                if\
    \ (s.length > max.length) max = s\n            }\n            Some(max)\n    \
    \    }", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else {\n            val maxLength = strings.map(_.length).max\n     \
    \       Some(strings.filter(_.length == maxLength).head)\n        }", "      \
    \  if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > longest.length)\
    \ longest = s\n            }\n            Some(longest)\n        }", "       \
    \ if (strings.isEmpty) None\n        else {\n            var max = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > max.length)\
    \ max = s\n            }\n            Some(max)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.reduceLeft((x, y) => if (x.length > y.length)\
    \ x else y))", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else {\n            var max = strings(0)\n            for (s <- strings)\
    \ {\n                if (s.length > max.length) max = s\n            }\n     \
    \       Some(max)\n        }", "        if (strings.isEmpty) None\n        else\
    \ Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else b))", "  \
    \      if (strings.isEmpty) None\n        else {\n            var max = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > max.length)\
    \ max = s\n            }\n            Some(max)\n        }", "        if (strings.isEmpty)\
    \ None\n        else Some(strings.reduceLeft((a, b) => if (a.length > b.length)\
    \ a else b))", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else {\n            var max = strings(0)\n            for (s <- strings)\
    \ {\n                if (s.length > max.length) max = s\n            }\n     \
    \       Some(max)\n        }", "        if (strings.isEmpty) None\n        else\
    \ Some(strings.reduceLeft((x, y) => if (x.length > y.length) x else y))", "  \
    \      if (strings.isEmpty) None\n        else Some(strings.reduceLeft((x, y)\
    \ => if (x.length > y.length) x else y))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((x, y) => if (x.length > y.length) x else\
    \ y))", "        if (strings.isEmpty) None\n        else Some(strings.maxBy(_.length))",
  "        if (strings.isEmpty) None\n        else {\n            var longest = strings(0)\n\
    \            for (s <- strings) {\n                if (s.length > longest.length)\
    \ longest = s\n            }\n            Some(longest)\n        }", "       \
    \ if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b) => if\
    \ (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n    \
    \    else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else b))",
  "        if (strings.isEmpty) None\n        else {\n            val maxLength =\
    \ strings.map(_.length).max\n            val maxLengthStrings = strings.filter(_.length\
    \ == maxLength)\n            Some(maxLengthStrings.head)\n        }", "      \
    \  if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b) => if\
    \ (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n    \
    \    else {\n            var longest = strings(0)\n            for (i <- 1 until\
    \ strings.length) {\n                if (strings(i).length > longest.length) longest\
    \ = strings(i)\n            }\n            Some(longest)\n        }", "      \
    \  if (strings.isEmpty) None\n        else {\n            val longest = strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b)\n            Some(longest)\n      \
    \  }", "        if (strings.isEmpty) None\n        else {\n            var max\
    \ = strings(0)\n            for (s <- strings) if (s.length > max.length) max\
    \ = s\n            Some(max)\n        }", "        if (strings.isEmpty) None\n\
    \        else {\n            var longest = strings(0)\n            for (i <- 1\
    \ until strings.length) {\n                if (strings(i).length > longest.length)\
    \ longest = strings(i)\n            }\n            Some(longest)\n        }",
  "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a, b)\
    \ => if (a.length > b.length) a else b))", "        if (strings.isEmpty) None\n\
    \        else Some(strings.reduceLeft((a, b) => if (a.length > b.length) a else\
    \ b))", "        if (strings.isEmpty) None\n        else Some(strings.reduceLeft((a,\
    \ b) => if (a.length > b.length) a else b))"]
stop_tokens:
- "\n    }\n"
