name: HumanEval_54_same_chars
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"\
  ), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"\
  dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"\
  ))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n\
  \    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>>\
  \ sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0\
  \ : String, s1 : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"\
  ), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\"\
  )) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n\
  \    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"\
  abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"),\
  \ (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        val c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n\
    \        c0.sameElements(c1)", "        val c0 = s0.toList.sorted\n        val\
    \ c1 = s1.toList.sorted\n        c0 == c1", "        val c0 = s0.toCharArray.sorted\n\
    \        val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)", "     \
    \   val c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n \
    \       c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n      \
    \  val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)", "        val\
    \ c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n       \
    \ c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n        val c1\
    \ = s1.toCharArray.sorted\n        c0.sameElements(c1)", "        val m0 = s0.groupBy(identity).mapValues(_.length)\n\
    \        val m1 = s1.groupBy(identity).mapValues(_.length)\n        m0.keySet.forall(k\
    \ => m0(k) == m1(k))", "        val m0 = new HashMap[Char, Int]\n        val m1\
    \ = new HashMap[Char, Int]\n        for (c <- s0) {\n            if (m0.contains(c))\
    \ m0(c) += 1 else m0(c) = 1\n        }\n        for (c <- s1) {\n            if\
    \ (m1.contains(c)) m1(c) += 1 else m1(c) = 1\n        }\n        for (c <- m0.keys)\
    \ {\n            if (!m1.contains(c) || m1(c) < m0(c)) return false\n        }\n\
    \        for (c <- m1.keys) {\n            if (!m0.contains(c) || m0(c) < m1(c))\
    \ return false\n        }\n        return true", "        val s0s = s0.toCharArray.sorted\n\
    \        val s1s = s1.toCharArray.sorted\n        s0s.sameElements(s1s)", "  \
    \      val m0 = new HashMap[Char, Int]\n        val m1 = new HashMap[Char, Int]\n\
    \        for (c <- s0) {\n            if (m0.contains(c)) m0(c) += 1 else m0(c)\
    \ = 1\n        }\n        for (c <- s1) {\n            if (m1.contains(c)) m1(c)\
    \ += 1 else m1(c) = 1\n        }\n        m0 == m1", "        val c0 = s0.toCharArray.sorted\n\
    \        val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)", "     \
    \   val m0 = s0.groupBy(identity).mapValues(_.length)\n        val m1 = s1.groupBy(identity).mapValues(_.length)\n\
    \        m0.forall(x => m1.getOrElse(x._1, 0) >= x._2)", "        val c0 = s0.toCharArray.sorted\n\
    \        val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)", "     \
    \   val c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n \
    \       if (c0.length != c1.length) return false\n        for (i <- 0 until c0.length)\
    \ {\n            if (c0(i) != c1(i)) return false\n        }\n        return true",
  "        val c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n\
    \        return c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n\
    \        val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)", "     \
    \   val c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n \
    \       c0.deep == c1.deep", "        val c0 = s0.toCharArray.sorted\n       \
    \ val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)", "        val m0\
    \ = s0.groupBy(identity).mapValues(_.length)\n        val m1 = s1.groupBy(identity).mapValues(_.length)\n\
    \        m0.keySet.forall(k => m0(k) == m1(k))"]
stop_tokens:
- "\n    }\n"
