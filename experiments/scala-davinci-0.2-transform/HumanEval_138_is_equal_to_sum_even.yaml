name: HumanEval_138_is_equal_to_sum_even
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n \
  \   // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n\
  \    // (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
  \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
  \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
  \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
  \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
completions: ["        val m = n / 2\n        val s = (1l to m).filter(x => x % 2\
    \ == 0).toSet\n        val t = s.subsets(4).filter(x => x.sum == n).toList\n \
    \       t.length > 0", "        val limit = (n / 4)\n        for (i <- 2l to limit\
    \ by 2) {\n            val remaining = n - i\n            if (remaining % 2 ==\
    \ 0) {\n                val limit2 = (remaining / 2)\n                for (j <-\
    \ 2l to limit2 by 2) {\n                    val remaining2 = remaining - j\n \
    \                   if (remaining2 % 2 == 0) {\n                        val limit3\
    \ = (remaining2 / 2)\n                        for (k <- 2l to limit3 by 2) {\n\
    \                            val remaining3 = remaining2 - k\n               \
    \             if (remaining3 % 2 == 0) {\n                                val\
    \ limit4 = (remaining3 / 2)\n                                for (l <- 2l to limit4\
    \ by 2) {\n                                    val remaining4 = remaining3 - l\n\
    \                                    if (remaining4 % 2 == 0) {\n            \
    \                            val limit5 = (remaining4 / 2)\n                 \
    \                       for (m <- 2l to limit5 by 2) {\n                     \
    \                       val remaining5 = remaining4 - m\n                    \
    \                        if (remaining5 % 2 == 0) {\n                        \
    \                        val limit6 = (remaining5 / 2)\n                     \
    \                           for (o <- 2l to limit6 by 2) {\n                 \
    \                                   val remaining6 = remaining5 - o\n        \
    \                                            if (remaining6 % 2 == 0) {\n    \
    \                                                    val limit7 = (remaining6\
    \ / 2)\n                                                        for (p <- 2l to\
    \ limit7 by 2) {\n                                                           \
    \ val remaining7 = remaining6 - p\n                                          \
    \                  if (remaining7 % 2 == 0) {\n                              \
    \                                  val limit8 = (remaining7 / 2)\n           \
    \                                                     for (q <- 2l to limit8 by\
    \ 2) {\n                                                                    val\
    \ remaining8 = remaining7 - q\n                                              \
    \                      if (remaining8 % 2 == 0) {\n                          \
    \                                              val limit9 = (remaining8 / 2)\n\
    \                                                                        for (r\
    \ <- 2l to limit9 by 2) {\n                                                  \
    \                          val remaining9 = remaining8 - r\n                 \
    \                                                           if (remaining9 % 2\
    \ == 0) {\n                                                                  \
    \             ", "        if (n % 2 == 1) return false\n        for (i <- 1 to\
    \ n / 2) {\n            if (n - 2 * i < 0) return false\n            if (isEqualToSumEven(n\
    \ - 2 * i)) return true\n        }\n        return false", "        val m = n\
    \ / 2\n        for (i <- 1l to m) {\n            for (j <- i to m) {\n       \
    \         for (k <- j to m) {\n                    for (l <- k to m) {\n     \
    \                   if (i + j + k + l == m) return true\n                    }\n\
    \                }\n            }\n        }\n        return false", "       \
    \ // Write your code here\n        return false", "        val s = n.toString\n\
    \        if (s.length == 1) {\n            return false\n        }\n        val\
    \ d = s.map(c => c.asDigit)\n        val ds = d.sorted\n        if (ds(0) == 0)\
    \ {\n            return false\n        }\n        if (ds(0) > 2) {\n         \
    \   return false\n        }\n        if (ds(ds.length - 1) % 2 == 1) {\n     \
    \       return false\n        }\n        val ds2 = ds.map(i => i * 2)\n      \
    \  val ds2s = ds2.sorted\n        val ds2ss = ds2s.map(i => i.toString)\n    \
    \    val ds2sss = ds2ss.mkString\n        val ds2sssl = ds2sss.length\n      \
    \  val ds2sssl2 = ds2sssl / 2\n        val ds2sssl2s = ds2sssl2.toString\n   \
    \     val ds2sssl2sl = ds2sssl2s.length\n        val ds2sssl2sl2 = ds2sssl2sl\
    \ - 1\n        val ds2sssl2sl2s = ds2sssl2sl2.toString\n        val ds2sssl2sl2sl\
    \ = ds2sssl2sl2s.length\n        val ds2sssl2sl2sl2 = ds2sssl2sl2sl - 1\n    \
    \    val ds2sssl2sl2sl2s = ds2sssl2sl2sl2.toString\n        val ds2sssl2sl2sl2sl\
    \ = ds2sssl2sl2sl2s.length\n        val ds2sssl2sl2sl2sl2 = ds2sssl2sl2sl2sl -\
    \ 1\n        val ds2sssl2sl2sl2sl2s = ds2sssl2sl2sl2sl2.toString\n        val\
    \ ds2sssl2sl2sl2sl2sl = ds2sssl2sl2sl2sl2s.length\n        val ds2sssl2", "  \
    \      if (n % 2 == 1) return false\n        val m = n / 2\n        val sqrtm\
    \ = sqrt(m).toLong\n        for (i <- 2l to sqrtm) {\n            if (m % i ==\
    \ 0) {\n                val j = m / i\n                if (i % 2 == 0 && j % 2\
    \ == 0) return true\n            }\n        }\n        return false", "      \
    \  val limit = n / 4\n        for (i <- 2l to limit by 2) {\n            for (j\
    \ <- i to limit by 2) {\n                for (k <- j to limit by 2) {\n      \
    \              for (l <- k to limit by 2) {\n                        if (i + j\
    \ + k + l == n) return true\n                    }\n                }\n      \
    \      }\n        }\n        return false", "        val n2 = n / 2\n        val\
    \ n2Sqrt = sqrt(n2).toLong\n        for (i <- 2l to n2Sqrt) {\n            val\
    \ i2 = i * i\n            val j2 = n2 - i2\n            val j = sqrt(j2).toLong\n\
    \            if (j * j == j2) return true\n        }\n        return false", " \
    \       // Write your code here\n        return false", "        if (n % 2 ==\
    \ 1) return false\n        val limit = n / 2\n        for (i <- 1l to limit) {\n\
    \            val j = n - i\n            if (i % 2 == 0 && j % 2 == 0) return true\n\
    \        }\n        return false", "        // Write your code here\n        return\
    \ false", "        // Fill in your code here\n        return false", "       \
    \ // Fill in the code here\n        var result = false\n        for (a <- 2 to\
    \ n.toInt by 2) {\n            for (b <- 2 to n.toInt by 2) {\n              \
    \  for (c <- 2 to n.toInt by 2) {\n                    for (d <- 2 to n.toInt\
    \ by 2) {\n                        if (a + b + c + d == n) {\n               \
    \             result = true\n                        }\n                    }\n\
    \                }\n            }\n        }\n        result", "        var result\
    \ = false\n        for (a <- 2l to n / 4l) {\n            for (b <- a to n / 3l)\
    \ {\n                for (c <- b to n / 2l) {\n                    for (d <- c\
    \ to n) {\n                        if (a + b + c + d == n) {\n               \
    \             result = true\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val m = n / 2\n        val l = (1 to m.toInt).toList\n        val s = l.combinations(4).filter(x\
    \ => x.sum == m).toList\n        s.length > 0", "        // Write your code here\n\
    \        return false", "        // Fill in the code here\n        var sum = 0\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      sum += i\n                if (sum == n) return true\n            }\n  \
    \      }\n        false", "        val m = n / 2\n        val x = (1 to m).toList\n\
    \        val y = x.filter(x => x % 2 == 0)\n        val z = y.map(y => (m - y,\
    \ y))\n        val w = z.filter(z => z._1 % 2 == 0)\n        w.length > 0", " \
    \       // Fill in the code here\n        var result = false\n        for (i <-\
    \ 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                for\
    \ (k <- 1 to n.toInt) {\n                    for (l <- 1 to n.toInt) {\n     \
    \                   if (i + j + k + l == n && i % 2 == 0 && j % 2 == 0 && k %\
    \ 2 == 0 && l % 2 == 0) {\n                            result = true\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        result"]
stop_tokens:
- "\n    }\n"
