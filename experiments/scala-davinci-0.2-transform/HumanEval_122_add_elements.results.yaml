language: scala
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum : Long = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum\
    \ += arr(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        return 0l\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbv9sfh5i.scala:17)\n\tat Problem.main(tmpbv9sfh5i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill this in.\n        var sum : Long = 0\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i).toString.length <= 2) {\n \
    \               sum += arr(i)\n            }\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here.\n        //\n      \
    \  var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) sum += arr(i)\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        var sum : Long = 0\n \
    \       for (i <- 0 until k.toInt) {\n            if (arr(i).toString.length <=\
    \ 2) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a simple for loop to iterate through the first\
    \ k elements of arr.\n        // We can use a simple if statement to check if\
    \ the element is less than 100.\n        // If it is, we can add it to the sum.\n\
    \        // If it is not, we can skip it.\n        // We can return the sum.\n\
    \        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n          \
    \  if (arr(i) < 100) {\n                sum += arr(i)\n            }\n       \
    \ }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        return 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsqy7x2ug.scala:17)\n\tat Problem.main(tmpsqy7x2ug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a foldLeft to iterate through the list and\
    \ add the elements\n        // that are less than 100 to the accumulator.\n  \
    \      // We can use a foldLeft to iterate through the list and add the elements\n\
    \        // that are less than 100 to the accumulator.\n        arr.foldLeft(0l)((acc,\
    \ x) => if (x < 100) acc + x else acc)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr2wyx810.scala:20)\n\tat Problem.main(tmpr2wyx810.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0l\n \
    \       for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n      \
    \          sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        var sum : Long = 0\n\
    \        for (i <- 0 to k.toInt - 1) {\n            if (arr(i) < 100) {\n    \
    \            sum += arr(i)\n            }\n        }\n        return sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a for loop to iterate through the list and\
    \ add\n        // the elements to a sum variable.\n        // We can use a counter\
    \ variable to keep track of the number of\n        // elements we have added to\
    \ the sum.\n        // We can use a while loop to iterate through the list and\
    \ add\n        // the elements to a sum variable.\n        // We can use a counter\
    \ variable to keep track of the number of\n        // elements we have added to\
    \ the sum.\n        // We can use a while loop to iterate through the list and\
    \ add\n        // the elements to a sum variable.\n        // We can use a counter\
    \ variable to keep track of the number of\n        // elements we have added to\
    \ the sum.\n        var sum : Long = 0\n        var counter : Long = 0\n     \
    \   var i : Long = 0\n        while(i < arr.length) {\n            if(arr(i.toInt).toString.length\
    \ <= 2) {\n                sum += arr(i.toInt)\n                counter += 1\n\
    \            }\n            if(counter == k) {\n                return sum\n \
    \           }\n            i += 1\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcrrdq75d.scala:42)\n\tat Problem.main(tmpcrrdq75d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum = 0l\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n \
    \       sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0l\n \
    \       for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n      \
    \          sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l.toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg9woshx9.scala:17)\n\tat Problem.main(tmpg9woshx9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var result : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n     \
    \           result += arr(i)\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum\
    \ += arr(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code here\n        //\n        var sum\
    \ = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum\
    \ += arr(i)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a foldLeft to sum the first k elements of\
    \ arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a fold\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo_nzromq.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m14 |\e[0m        \e[34m// We can use a foldLeft to sum the first k\
    \ elements of arr.\e[0m\n\e[31m15 |\e[0m        \e[34m// We can use a foldLeft\
    \ to sum the first k elements of arr.\e[0m\n\e[31m16 |\e[0m        \e[34m// We\
    \ can use a foldLeft to sum the first k elements of arr.\e[0m\n\e[31m17 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m18 |\e[0m        \e[34m// We can use a foldLeft to sum the first k\
    \ elements of arr.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can use a foldLeft\
    \ to sum the first k elements of arr.\e[0m\n\e[31m20 |\e[0m        \e[34m// We\
    \ can use a foldLeft to sum the first k elements of arr.\e[0m\n\e[31m21 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// We can use a foldLeft to sum the first k\
    \ elements of arr.\e[0m\n\e[31m23 |\e[0m        \e[34m// We can use a foldLeft\
    \ to sum the first k elements of arr.\e[0m\n\e[31m24 |\e[0m        \e[34m// We\
    \ can use a foldLeft to sum the first k elements of arr.\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// We can use a foldLeft to sum the first k\
    \ elements of arr.\e[0m\n\e[31m27 |\e[0m        \e[34m// We can use a foldLeft\
    \ to sum the first k elements of arr.\e[0m\n\e[31m28 |\e[0m        \e[34m// We\
    \ can use a foldLeft to sum the first k elements of arr.\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m30"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        return 0l\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbv9sfh5i.scala:17)\n\tat Problem.main(tmpbv9sfh5i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum : Long = 0\n        for (i\
    \ <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum\
    \ += arr(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            var n : Long = arr(i)\n     \
    \       if (n < 100) {\n                sum += n\n            }\n        }\n \
    \       return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        var sum : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n     \
    \           sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a for loop to iterate through the list,\n\
    \        // and we can use a while loop to iterate through the first k elements.\n\
    \        // We can use a variable to keep track of the sum.\n        // We can\
    \ use a variable to keep track of the number of elements we have iterated through.\n\
    \        // We can use a variable to keep track of the number of elements we have\
    \ added to the sum.\n        // We can use a variable to keep track of the number\
    \ of digits in the current element.\n        // We can use a variable to keep\
    \ track of the current element.\n        // We can use a variable to keep track\
    \ of the current digit.\n        // We can use a variable to keep track of the\
    \ current digit value.\n        // We can use a variable to keep track of the\
    \ current sum.\n        // We can use a variable to keep track of the current\
    \ sum of digits.\n        // We can use a variable to keep track of the current\
    \ sum of digits with at most two digits.\n        // We can use a variable to\
    \ keep track of the current sum of elements with at most two digits.\n       \
    \ // We can use a variable to keep track of the current sum of elements with at\
    \ most two digits from the first k elements.\n        // We can use a variable\
    \ to keep track of the current sum of elements with at most two digits from the\
    \ first k elements of arr.\n        // We can use a variable to keep track of\
    \ the current sum of elements with at most two digits from the first k elements\
    \ of arr.\n        // We can use a variable to keep track of the current sum of\
    \ elements with at most two digits from the first k elements of arr.\n       \
    \ // We can use a variable to keep track of the current sum of elements with at\
    \ most two digits from the first k elements of arr.\n        // We can use a variable\
    \ to keep track of the current sum of elements with at most two digits from the\
    \ first k elements of arr.\n        // We can use a variable to keep track of\
    \ the current sum of elements with at most two digits from the first k elements\
    \ of arr.\n        // We can use a variable to keep track of the current sum of\
    \ elements with at most two digits from the first k elements of arr.\n       \
    \ // We can use a variable to keep track of the current sum of elements with at\
    \ most two digits from the first k elements of arr\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfxk7hkg8.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use a for loop to iterate through the list,\e[0m\n\e\
    [31m14 |\e[0m        \e[34m// and we can use a while loop to iterate through the\
    \ first k elements.\e[0m\n\e[31m15 |\e[0m        \e[34m// We can use a variable\
    \ to keep track of the sum.\e[0m\n\e[31m16 |\e[0m        \e[34m// We can use a\
    \ variable to keep track of the number of elements we have iterated through.\e\
    [0m\n\e[31m17 |\e[0m        \e[34m// We can use a variable to keep track of the\
    \ number of elements we have added to the sum.\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// We can use a variable to keep track of the number of digits in the current\
    \ element.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can use a variable to keep\
    \ track of the current element.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can use\
    \ a variable to keep track of the current digit.\e[0m\n\e[31m21 |\e[0m       \
    \ \e[34m// We can use a variable to keep track of the current digit value.\e[0m\n\
    \e[31m22 |\e[0m        \e[34m// We can use a variable to keep track of the current\
    \ sum.\e[0m\n\e[31m23 |\e[0m        \e[34m// We can use a variable to keep track\
    \ of the current sum of digits.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can use\
    \ a variable to keep track of the current sum of digits with at most two digits.\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// We can use a variable to keep track of the\
    \ current sum of elements with at most two digits.\e[0m\n\e[31m26 |\e[0m     \
    \   \e[34m// We can use a variable to keep track of the current sum of elements\
    \ with at most two digits from the first k elements.\e[0m\n\e[31m27 |\e[0m   \
    \     \e[34m// We can use a variable to keep t"
  stdout: ''
  timestamp: 1659794367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        return 0l;\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphamfhvo_.scala:17)\n\tat Problem.main(tmphamfhvo_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Given a list of integers arr and an integer k, return\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong,\
    \ 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n\
    \        // (24l)\n        // Constraints:\n        // 1. 1 <= len(arr) <= 100\n\
    \        // 2. 1 <= k <= len(arr)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // Constraints:\n        // 1.\
    \ 1 <= len(arr) <= 100\n        // 2. 1 <= k <= len(arr)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // Constraints:\n        // 1.\
    \ 1 <= len(arr) <= 100\n        // 2. 1 <= k <= len(arr)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // Constraints:\n        // 1.\
    \ 1 <= len(arr) <= 100\n        // 2. 1 <= k <= len(arr)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3saavnl_.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// Given a list of integers arr and an integer k, return the sum\
    \ of the elements with at most two digits from the first k elements of arr.\e\
    [0m\n\e[31m14 |\e[0m        \e[34m// >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\e[0m\n\e[31m15 |\e[0m        \e[34m// (24l)\e[0m\n\e[31m16\
    \ |\e[0m        \e[34m// Constraints:\e[0m\n\e[31m17 |\e[0m        \e[34m// 1.\
    \ 1 <= len(arr) <= 100\e[0m\n\e[31m18 |\e[0m        \e[34m// 2. 1 <= k <= len(arr)\e\
    [0m\n\e[31m19 |\e[0m        \e[34m// >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\e[0m\n\e[31m20 |\e[0m        \e[34m// (24l)\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// Constraints:\e[0m\n\e[31m22 |\e[0m        \e[34m// 1.\
    \ 1 <= len(arr) <= 100\e[0m\n\e[31m23 |\e[0m        \e[34m// 2. 1 <= k <= len(arr)\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\e[0m\n\e[31m25 |\e[0m        \e[34m// (24l)\e[0m\n\e[31m26\
    \ |\e[0m        \e[34m// Constraints:\e[0m\n\e[31m27 |\e[0m        \e[34m// 1.\
    \ 1 <= len(arr) <= 100\e[0m\n\e[31m28 |\e[0m        \e[34m// 2. 1 <= k <= len(arr)\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\e[0m\n\e[31m30 |\e[0m        \e[34m// (24l)\e[0m\n\e[31m31\
    \ |\e[0m        \e[34m// Constraints:\e[0m\n\e[31m32 |\e[0m"
  stdout: ''
  timestamp: 1659794367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        var sum = 0l\n       \
    \ for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum : Long = 0\n        for (i\
    \ <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n       \
    \ }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill this\n        return 0l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdud6b8z4.scala:17)\n\tat Problem.main(tmpdud6b8z4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        return 0l\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbv9sfh5i.scala:17)\n\tat Problem.main(tmpbv9sfh5i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        return 0l\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04_znn5e.scala:17)\n\tat Problem.main(tmp04_znn5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Given a list of integers arr and an integer k, return\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong,\
    \ 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n\
    \        // (24l)\n        // Constraints:\n        // 1. 1 <= len(arr) <= 100\n\
    \        // 2. 1 <= k <= len(arr)\n        def addElements(arr : List[Long], k\
    \ : Long) : Long = {\n            // Given a list of integers arr and an integer\
    \ k, return the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n            // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n            // (24l)\n            // Constraints:\n            // 1.\
    \ 1 <= len(arr) <= 100\n            // 2. 1 <= k <= len(arr)\n            def\
    \ addElements(arr : List[Long], k : Long) : Long = {\n                // Given\
    \ a list of integers arr and an integer k, return the sum of the elements with\
    \ at most two digits from the first k elements of arr.\n                // >>>\
    \ addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n                // (24l)\n\
    \                // Constraints:\n                // 1. 1 <= len(arr) <= 100\n\
    \                // 2. 1 <= k <= len(arr)\n                def addElements(arr\
    \ : List[Long], k : Long) : Long = {\n                    // Given a list of integers\
    \ arr and an integer k, return the sum of the elements\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpktg3qogg.scala:45:0 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpktg3qogg.scala:33:69\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m                \e[33mdef\e[0m\
    \ \e[36maddElements\e[0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e\
    [36mk\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m   \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                                          Found:\
    \    Unit\n\e[31m   |\e[0m                                                   \
    \       Required: Long\n\e[31m34 |\e[0m                    \e[34m// Given a list\
    \ of integers arr and an integer k, return the sum of the elements\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpktg3qogg.scala:44:1\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpktg3qogg.scala:36:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            val element : Long = arr(i)\n            if (element < 100) {\n\
    \                sum += element\n            }\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Given a list of integers arr, return the sum of the elements\
    \ with at most two digits.\n        def addElements(arr : List[Long]) : Long =\
    \ {\n            arr.filter(x => x < 100).sum\n        }\n        addElements(arr.take(k.toInt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        return 0l;\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphamfhvo_.scala:17)\n\tat Problem.main(tmphamfhvo_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum : Long = 0\n        for (i\
    \ <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n       \
    \ }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        //\n        //\n        //\n        //\n   \
    \     //\n        //\n        //\n        //\n        //\n        //\n       \
    \ //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n       \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf5_kaqfm.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m 12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m    |\e[0m                           \
    \                              ^\e[0m\n\e[31m    |\e[0m                      \
    \                                  Found:    Unit\n\e[31m    |\e[0m          \
    \                                              Required: Long\n\e[31m 13 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 14 |\e[0m        \e[34m//\e[0m\n\e[31m 15 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 16 |\e[0m        \e[34m//\e[0m\n\e[31m 17 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 18 |\e[0m        \e[34m//\e[0m\n\e[31m 19 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 20 |\e[0m        \e[34m//\e[0m\n\e[31m 21 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 22 |\e[0m        \e[34m//\e[0m\n\e[31m 23 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 24 |\e[0m        \e[34m//\e[0m\n\e[31m 25 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 26 |\e[0m        \e[34m//\e[0m\n\e[31m 27 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 28 |\e[0m        \e[34m//\e[0m\n\e[31m 29 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 30 |\e[0m        \e[34m//\e[0m\n\e[31m 31 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 32 |\e[0m        \e[34m//\e[0m\n\e[31m 33 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 34 |\e[0m        \e[34m//\e[0m\n\e[31m 35 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 36 |\e[0m        \e[34m//\e[0m\n\e[31m 37 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 38 |\e[0m        \e[34m//\e[0m\n\e[31m 39 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 40 |\e[0m        \e[34m//\e[0m\n\e[31m 41 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 42 |\e[0m        \e[34m//\e[0m\n\e[31m 43 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 44 |\e[0m        \e[34m//\e[0m\n\e[31m 45 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 46 |\e[0m        \e[34m//\e[0m\n\e[31m 47 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 48 |\e[0m        \e[34m//\e[0m\n\e[31m 49 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 50 |\e[0m        \e[34m//\e[0m\n\e[31m 51 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 52 |\e[0m        \e[34m//\e[0m\n\e[31m 53 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 54 |\e[0m        \e[34m//\e[0m\n\e[31m 55 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 56 |\e[0m        \e[34m//\e[0m\n\e[31m 57 |\e[0m\
    \        \e[34m//\e[0m\n\e[31m 58 |\e[0m        "
  stdout: ''
  timestamp: 1659794368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a for loop to iterate through the first k\
    \ elements of arr.\n        // We can use a variable to store the sum of the elements\
    \ with at most two digits.\n        // We can use a variable to store the current\
    \ element.\n        // We can use a variable to store the number of digits in\
    \ the current element.\n        // We can use a variable to store the current\
    \ digit.\n        // We can use a variable to store the current digit's place.\n\
    \        // We can use a variable to store the number of digits in the current\
    \ element.\n        // We can use a variable to store the current digit.\n   \
    \     // We can use a variable to store the current digit's place.\n        //\
    \ We can use a variable to store the number of digits in the current element.\n\
    \        // We can use a variable to store the current digit.\n        // We can\
    \ use a variable to store the current digit's place.\n        // We can use a\
    \ variable to store the number of digits in the current element.\n        // We\
    \ can use a variable to store the current digit.\n        // We can use a variable\
    \ to store the current digit's place.\n        // We can use a variable to store\
    \ the number of digits in the current element.\n        // We can use a variable\
    \ to store the current digit.\n        // We can use a variable to store the current\
    \ digit's place.\n        // We can use a variable to store the number of digits\
    \ in the current element.\n        // We can use a variable to store the current\
    \ digit.\n        // We can use a variable to store the current digit's place.\n\
    \        // We can use a variable to store the number of digits in the current\
    \ element.\n        // We can use a variable to store the current digit.\n   \
    \     // We can use a variable to store the current digit's place.\n        //\
    \ We can use a variable to store the number of digits in the current element.\n\
    \        // We can use a variable to store the current digit.\n        // We can\
    \ use a variable to store the current digit's place.\n        // We can use a\
    \ variable to store the number of digits in the current element.\n        // We\
    \ can use a variable to store the current digit.\n        // We can use a variable\
    \ to store the current digit's place.\n        // We can use a variable to store\
    \ the number of digits in the\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6jh3tzrw.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use a for loop to iterate through the first k elements\
    \ of arr.\e[0m\n\e[31m14 |\e[0m        \e[34m// We can use a variable to store\
    \ the sum of the elements with at most two digits.\e[0m\n\e[31m15 |\e[0m     \
    \   \e[34m// We can use a variable to store the current element.\e[0m\n\e[31m16\
    \ |\e[0m        \e[34m// We can use a variable to store the number of digits in\
    \ the current element.\e[0m\n\e[31m17 |\e[0m        \e[34m// We can use a variable\
    \ to store the current digit.\e[0m\n\e[31m18 |\e[0m        \e[34m// We can use\
    \ a variable to store the current digit's place.\e[0m\n\e[31m19 |\e[0m       \
    \ \e[34m// We can use a variable to store the number of digits in the current\
    \ element.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can use a variable to store\
    \ the current digit.\e[0m\n\e[31m21 |\e[0m        \e[34m// We can use a variable\
    \ to store the current digit's place.\e[0m\n\e[31m22 |\e[0m        \e[34m// We\
    \ can use a variable to store the number of digits in the current element.\e[0m\n\
    \e[31m23 |\e[0m        \e[34m// We can use a variable to store the current digit.\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// We can use a variable to store the current\
    \ digit's place.\e[0m\n\e[31m25 |\e[0m        \e[34m// We can use a variable to\
    \ store the number of digits in the current element.\e[0m\n\e[31m26 |\e[0m   \
    \     \e[34m// We can use a variable to store the current digit.\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// We can use a variable to store the current digit's place.\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// We can use a variable to store the number\
    \ of digits in the current element.\e[0m\n\e[31m29 |\e[0"
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here\n        //\n       \
    \ arr.take(k.toInt).filter(x => x < 100).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Given a list arr and an integer k, return the sum of\
    \ the elements with at most two digits from the first k elements of arr.\n   \
    \     def addElementsHelper(arr : List[Long], k : Long, acc : Long) : Long = {\n\
    \            if (k == 0) acc\n            else {\n                val x = arr.head\n\
    \                if (x < 100) addElementsHelper(arr.tail, k - 1, acc + x)\n  \
    \              else addElementsHelper(arr.tail, k - 1, acc)\n            }\n \
    \       }\n        addElementsHelper(arr, k, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        var sum = 0l\n     \
    \   for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n          \
    \      sum += arr(i)\n            }\n        }\n        return sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        return 0l\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04_znn5e.scala:17)\n\tat Problem.main(tmp04_znn5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Define a function that returns the number of digits in\
    \ a number.\n        def digits(n : Long) : Long = {\n            if (n < 10)\
    \ return 1\n            else return 1 + digits(n / 10)\n        }\n        //\
    \ Define a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n        def addElementsHelper(arr : List[Long],\
    \ k : Long, sum : Long) : Long = {\n            if (k == 0) return sum\n     \
    \       else if (digits(arr.head) <= 2) return addElementsHelper(arr.tail, k -\
    \ 1, sum + arr.head)\n            else return addElementsHelper(arr.tail, k -\
    \ 1, sum)\n        }\n        // Return the sum of the elements with at most two\
    \ digits from the first k elements of arr.\n        return addElementsHelper(arr,\
    \ k, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        var sum = 0l\n     \
    \   for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n          \
    \      sum += arr(i)\n            }\n        }\n        return sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0l\n \
    \       for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n      \
    \          sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum\
    \ += arr(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a foldLeft to sum the elements of the list.\n\
    \        // We can use a takeWhile to get the first k elements of the list.\n\
    \        // We can use a filter to get the elements with at most two digits.\n\
    \        // We can use a map to convert the elements to Long.\n        // We can\
    \ use a toList to convert the elements to a List.\n        // We can use a sum\
    \ to sum the elements of the list.\n        arr.takeWhile(x => x <= k).filter(x\
    \ => x < 100).map(x => x.toLong).toList.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9l4wvvt.scala:24)\n\tat Problem.main(tmph9l4wvvt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum = 0l\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n \
    \       sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum\
    \ += arr(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here.\n        //\n      \
    \  var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var result : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) {\n                result += arr(i)\n     \
    \       }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        var sum : Long = 0\n \
    \       for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n      \
    \          sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Given a non-empty array of integers arr and an integer\
    \ k, return\n        // the sum of the elements with at most two digits from the\
    \ first k elements of arr.\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // Constraints:\n        // 1.\
    \ 1 <= len(arr) <= 100\n        // 2. 1 <= k <= len(arr)\n        var sum : Long\
    \ = 0l\n        for (i <- 0l until k) {\n            if (arr(i.toInt).toString.length\
    \ <= 2) {\n                sum += arr(i.toInt)\n            }\n        }\n   \
    \     return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            val n = arr(i)\n            if (n < 100) sum += n\n        }\n  \
    \      return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        var sum = 0l\n       \
    \ for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a foldLeft to iterate through the list and\
    \ sum the elements with at most two digits.\n        // We can use a pattern match\
    \ to determine if the element has at most two digits.\n        // We can use a\
    \ pattern match to determine if the element has at most two digits.\n        //\
    \ We can use a pattern match to determine if the element has at most two digits.\n\
    \        // We can use a pattern match to determine if the element has at most\
    \ two digits.\n        // We can use a pattern match to determine if the element\
    \ has at most two digits.\n        // We can use a pattern match to determine\
    \ if the element has at most two digits.\n        // We can use a pattern match\
    \ to determine if the element has at most two digits.\n        // We can use a\
    \ pattern match to determine if the element has at most two digits.\n        //\
    \ We can use a pattern match to determine if the element has at most two digits.\n\
    \        // We can use a pattern match to determine if the element has at most\
    \ two digits.\n        // We can use a pattern match to determine if the element\
    \ has at most two digits.\n        // We can use a pattern match to determine\
    \ if the element has at most two digits.\n        // We can use a pattern match\
    \ to determine if the element has at most two digits.\n        // We can use a\
    \ pattern match to determine if the element has at most two digits.\n        //\
    \ We can use a pattern match to determine if the element has at most two digits.\n\
    \        // We can use a pattern match to determine if the element has at most\
    \ two digits.\n        // We can use a pattern match to determine if the element\
    \ has at most two digits.\n        // We can use a pattern match to determine\
    \ if the element has at most two digits.\n        // We can use a pattern match\
    \ to determine if the element has at most two digits.\n        // We can use a\
    \ pattern match to determine if the element has at most two digits.\n        //\
    \ We can use a pattern match to determine if the element has at most two digits.\n\
    \        // We can use a pattern match to determine if the element has at most\
    \ two digits.\n        // We can use a pattern match to determine if the element\
    \ has at most two digits.\n        // We can use a pattern match to determine\
    \ if the element has at most two digits.\n        // We can use a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_e50la7j.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use a foldLeft to iterate through the list and sum the\
    \ elements with at most two digits.\e[0m\n\e[31m14 |\e[0m        \e[34m// We can\
    \ use a pattern match to determine if the element has at most two digits.\e[0m\n\
    \e[31m15 |\e[0m        \e[34m// We can use a pattern match to determine if the\
    \ element has at most two digits.\e[0m\n\e[31m16 |\e[0m        \e[34m// We can\
    \ use a pattern match to determine if the element has at most two digits.\e[0m\n\
    \e[31m17 |\e[0m        \e[34m// We can use a pattern match to determine if the\
    \ element has at most two digits.\e[0m\n\e[31m18 |\e[0m        \e[34m// We can\
    \ use a pattern match to determine if the element has at most two digits.\e[0m\n\
    \e[31m19 |\e[0m        \e[34m// We can use a pattern match to determine if the\
    \ element has at most two digits.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can\
    \ use a pattern match to determine if the element has at most two digits.\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// We can use a pattern match to determine if the\
    \ element has at most two digits.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can\
    \ use a pattern match to determine if the element has at most two digits.\e[0m\n\
    \e[31m23 |\e[0m        \e[34m// We can use a pattern match to determine if the\
    \ element has at most two digits.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can\
    \ use a pattern match to determine if the element has at most two digits.\e[0m\n\
    \e[31m25 |\e[0m        \e[34m// We can use a pattern match to determine if the\
    \ element has at most two digits.\e[0m\n\e[31m26 |\e[0m        \e[34m// We can\
    \ use a pattern match to determine if the eleme"
  stdout: ''
  timestamp: 1659794373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a foldLeft to iterate through the list and\
    \ sum up the elements.\n        // We can also use a filter to only include elements\
    \ with at most two digits.\n        // We can use a take to only take the first\
    \ k elements.\n        // We can use a map to convert the elements to Longs.\n\
    \        // We can use a sum to sum up the elements.\n        // We can use a\
    \ toList to convert the elements to a list.\n        // We can use a filter to\
    \ only include elements with at most two digits.\n        // We can use a take\
    \ to only take the first k elements.\n        // We can use a map to convert the\
    \ elements to Longs.\n        // We can use a sum to sum up the elements.\n  \
    \      // We can use a toList to convert the elements to a list.\n        // We\
    \ can use a filter to only include elements with at most two digits.\n       \
    \ // We can use a take to only take the first k elements.\n        // We can use\
    \ a map to convert the elements to Longs.\n        // We can use a sum to sum\
    \ up the elements.\n        // We can use a toList to convert the elements to\
    \ a list.\n        // We can use a filter to only include elements with at most\
    \ two digits.\n        // We can use a take to only take the first k elements.\n\
    \        // We can use a map to convert the elements to Longs.\n        // We\
    \ can use a sum to sum up the elements.\n        // We can use a toList to convert\
    \ the elements to a list.\n        // We can use a filter to only include elements\
    \ with at most two digits.\n        // We can use a take to only take the first\
    \ k elements.\n        // We can use a map to convert the elements to Longs.\n\
    \        // We can use a sum to sum up the elements.\n        // We can use a\
    \ toList to convert the elements to a list.\n        // We can use a filter to\
    \ only include elements with at most two digits.\n        // We can use a take\
    \ to only take the first k elements.\n        // We can use a map to convert the\
    \ elements to Longs.\n        // We can use a sum to sum up the elements.\n  \
    \      // We can use a toList to convert the elements to a list.\n        // We\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgxjkoptf.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use a foldLeft to iterate through the list and sum up\
    \ the elements.\e[0m\n\e[31m14 |\e[0m        \e[34m// We can also use a filter\
    \ to only include elements with at most two digits.\e[0m\n\e[31m15 |\e[0m    \
    \    \e[34m// We can use a take to only take the first k elements.\e[0m\n\e[31m16\
    \ |\e[0m        \e[34m// We can use a map to convert the elements to Longs.\e\
    [0m\n\e[31m17 |\e[0m        \e[34m// We can use a sum to sum up the elements.\e\
    [0m\n\e[31m18 |\e[0m        \e[34m// We can use a toList to convert the elements\
    \ to a list.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can use a filter to only\
    \ include elements with at most two digits.\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ We can use a take to only take the first k elements.\e[0m\n\e[31m21 |\e[0m \
    \       \e[34m// We can use a map to convert the elements to Longs.\e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// We can use a sum to sum up the elements.\e[0m\n\e[31m23\
    \ |\e[0m        \e[34m// We can use a toList to convert the elements to a list.\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// We can use a filter to only include elements\
    \ with at most two digits.\e[0m\n\e[31m25 |\e[0m        \e[34m// We can use a\
    \ take to only take the first k elements.\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ We can use a map to convert the elements to Longs.\e[0m\n\e[31m27 |\e[0m   \
    \     \e[34m// We can use a sum to sum up the elements.\e[0m\n\e[31m28 |\e[0m\
    \        \e[34m// We can use a toList to convert the elements to a list.\e[0m\n\
    \e[31m29 |\e[0m        \e[34m// We can use a filter to only include elements with\
    \ at most two digits.\e[0m\n\e[31m30 |\e[0m        \e[34m// We c"
  stdout: ''
  timestamp: 1659794373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        val arr2 = arr.filter(x\
    \ => x < 100)\n        arr2.take(k.toInt).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1mk2zwac.scala:19)\n\tat Problem.main(tmp1mk2zwac.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum = 0l\n        for (i <- 0 until k.toInt) {\n   \
    \         if (arr(i) >= 10 && arr(i) < 100) sum += arr(i)\n        }\n       \
    \ return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepborro2.scala:20)\n\tat Problem.main(tmpepborro2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        arr.take(k.toInt).filter(x => x <\
    \ 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here.\n        var sum = 0l\n      \
    \  for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        return 0l\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04_znn5e.scala:17)\n\tat Problem.main(tmp04_znn5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here.\n        //\n      \
    \  var sum : Long = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        arr.filter(x => x < 100).take(k.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcs649sp6.scala:18)\n\tat Problem.main(tmpcs649sp6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here.\n        //\n      \
    \  var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here.\n        //\n      \
    \  arr.take(k.toInt).filter(x => x < 100).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            val num = arr(i)\n            if (num\
    \ < 100) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        var sum = 0l\n     \
    \   for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n          \
    \      sum += arr(i)\n            }\n        }\n        return sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        val a = arr.filter(x => x < 100).take(k.toInt)\n       \
    \ a.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiank3c_i.scala:18)\n\tat Problem.main(tmpiank3c_i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 to k.toInt - 1) {\n            if (arr(i) < 100) {\n      \
    \          sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            var num : Long = arr(i)\n            while (num >= 10) {\n      \
    \          num /= 10\n            }\n            sum += num\n        }\n     \
    \   return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lsajidj.scala:25)\n\tat Problem.main(tmp_lsajidj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum\
    \ += arr(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a foldLeft to sum the first k elements of\
    \ arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a fold\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo_nzromq.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m14 |\e[0m        \e[34m// We can use a foldLeft to sum the first k\
    \ elements of arr.\e[0m\n\e[31m15 |\e[0m        \e[34m// We can use a foldLeft\
    \ to sum the first k elements of arr.\e[0m\n\e[31m16 |\e[0m        \e[34m// We\
    \ can use a foldLeft to sum the first k elements of arr.\e[0m\n\e[31m17 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m18 |\e[0m        \e[34m// We can use a foldLeft to sum the first k\
    \ elements of arr.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can use a foldLeft\
    \ to sum the first k elements of arr.\e[0m\n\e[31m20 |\e[0m        \e[34m// We\
    \ can use a foldLeft to sum the first k elements of arr.\e[0m\n\e[31m21 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// We can use a foldLeft to sum the first k\
    \ elements of arr.\e[0m\n\e[31m23 |\e[0m        \e[34m// We can use a foldLeft\
    \ to sum the first k elements of arr.\e[0m\n\e[31m24 |\e[0m        \e[34m// We\
    \ can use a foldLeft to sum the first k elements of arr.\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// We can use a foldLeft to sum the first k\
    \ elements of arr.\e[0m\n\e[31m27 |\e[0m        \e[34m// We can use a foldLeft\
    \ to sum the first k elements of arr.\e[0m\n\e[31m28 |\e[0m        \e[34m// We\
    \ can use a foldLeft to sum the first k elements of arr.\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// We can use a foldLeft to sum the first k elements of arr.\e\
    [0m\n\e[31m30"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b_me8sq.scala:17)\n\tat Problem.main(tmp4b_me8sq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            val num = arr(i)\n            if (num\
    \ < 100) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        var sum = 0l\n       \
    \ for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here\n        //\n       \
    \ return 0l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppldtwsud.scala:19)\n\tat Problem.main(tmppldtwsud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        var sum = 0l\n       \
    \ for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here.\n        //\n      \
    \  var sum : Long = 0l\n        for (i <- 0 to k.toInt - 1) {\n            if\
    \ (arr(i) < 100) {\n                sum += arr(i)\n            }\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        var sum = 0l\n     \
    \   for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use the fact that the sum of the first n integers\
    \ is n(n+1)/2\n        // to find the sum of the first k elements of arr.\n  \
    \      // We can then subtract the sum of the elements with more than two digits\n\
    \        // from the first k elements of arr.\n        // The sum of the elements\
    \ with more than two digits from the first k elements of arr\n        // is the\
    \ sum of the elements with more than two digits from the first k - 1 elements\
    \ of arr\n        // plus the sum of the elements with more than two digits from\
    \ the first k elements of arr.\n        // The sum of the elements with more than\
    \ two digits from the first k - 1 elements of arr\n        // is the sum of the\
    \ elements with more than two digits from the first k - 2 elements of arr\n  \
    \      // plus the sum of the elements with more than two digits from the first\
    \ k - 1 elements of arr.\n        // The sum of the elements with more than two\
    \ digits from the first k - 2 elements of arr\n        // is the sum of the elements\
    \ with more than two digits from the first k - 3 elements of arr\n        // plus\
    \ the sum of the elements with more than two digits from the first k - 2 elements\
    \ of arr.\n        // ...\n        // The sum of the elements with more than two\
    \ digits from the first k - (k - 1) elements of arr\n        // is the sum of\
    \ the elements with more than two digits from the first k - (k - 1) - 1 elements\
    \ of arr\n        // plus the sum of the elements with more than two digits from\
    \ the first k - (k - 1) elements of arr.\n        // The sum of the elements with\
    \ more than two digits from the first k - (k - 1) - 1 elements of arr\n      \
    \  // is the sum of the elements with more than two digits from the first k -\
    \ (k - 1) - 2 elements of arr\n        // plus the sum of the elements with more\
    \ than two digits from the first k - (k - 1) - 1 elements of arr.\n        //\
    \ ...\n        // The sum of the elements with more than two digits from the first\
    \ k - (k - 1) - (k - 2) elements of arr\n        // is the sum of the elements\
    \ with more than two digits from the first k - (k - 1) - (k - 2) - 1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeschpi30.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use the fact that the sum of the first n integers is\
    \ n(n+1)/2\e[0m\n\e[31m14 |\e[0m        \e[34m// to find the sum of the first\
    \ k elements of arr.\e[0m\n\e[31m15 |\e[0m        \e[34m// We can then subtract\
    \ the sum of the elements with more than two digits\e[0m\n\e[31m16 |\e[0m    \
    \    \e[34m// from the first k elements of arr.\e[0m\n\e[31m17 |\e[0m        \e\
    [34m// The sum of the elements with more than two digits from the first k elements\
    \ of arr\e[0m\n\e[31m18 |\e[0m        \e[34m// is the sum of the elements with\
    \ more than two digits from the first k - 1 elements of arr\e[0m\n\e[31m19 |\e\
    [0m        \e[34m// plus the sum of the elements with more than two digits from\
    \ the first k elements of arr.\e[0m\n\e[31m20 |\e[0m        \e[34m// The sum of\
    \ the elements with more than two digits from the first k - 1 elements of arr\e\
    [0m\n\e[31m21 |\e[0m        \e[34m// is the sum of the elements with more than\
    \ two digits from the first k - 2 elements of arr\e[0m\n\e[31m22 |\e[0m      \
    \  \e[34m// plus the sum of the elements with more than two digits from the first\
    \ k - 1 elements of arr.\e[0m\n\e[31m23 |\e[0m        \e[34m// The sum of the\
    \ elements with more than two digits from the first k - 2 elements of arr\e[0m\n\
    \e[31m24 |\e[0m        \e[34m// is the sum of the elements with more than two\
    \ digits from the first k - 3 elements of arr\e[0m\n\e[31m25 |\e[0m        \e\
    [34m// plus the sum of the elements with more than two digits from the first k\
    \ - 2 elements of arr.\e[0m\n\e[31m26 |\e[0m        \e[34m// ...\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// The sum of the elements with more t"
  stdout: ''
  timestamp: 1659794378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        val arr2 = arr.map(x =>\
    \ x.toString.length).zip(arr).filter(x => x._1 <= 2).map(x => x._2)\n        arr2.take(k.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp49lgqx7i.scala:19)\n\tat Problem.main(tmp49lgqx7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            var num : Long = arr(i)\n            while (num > 0) {\n        \
    \        sum += num % 10\n                num /= 10\n            }\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvg4bw9xr.scala:24)\n\tat Problem.main(tmpvg4bw9xr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Recursive function to add elements with at most two digits\n\
    \        def addElementsRec(arr : List[Long], k : Long, sum : Long) : Long = {\n\
    \            if (k == 0) sum\n            else if (arr.head < 100) addElementsRec(arr.tail,\
    \ k - 1, sum + arr.head)\n            else addElementsRec(arr.tail, k - 1, sum)\n\
    \        }\n        // Call recursive function\n        addElementsRec(arr, k,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use the fact that the maximum value of a two digit\
    \ number is 99.\n        // We can also use the fact that the minimum value of\
    \ a two digit number is 10.\n        // We can also use the fact that the maximum\
    \ value of a one digit number is 9.\n        // We can also use the fact that\
    \ the minimum value of a one digit number is 0.\n        // We can also use the\
    \ fact that the maximum value of a three digit number is 999.\n        // We can\
    \ also use the fact that the minimum value of a three digit number is 100.\n \
    \       // We can also use the fact that the maximum value of a four digit number\
    \ is 9999.\n        // We can also use the fact that the minimum value of a four\
    \ digit number is 1000.\n        // We can also use the fact that the maximum\
    \ value of a five digit number is 99999.\n        // We can also use the fact\
    \ that the minimum value of a five digit number is 10000.\n        // We can also\
    \ use the fact that the maximum value of a six digit number is 999999.\n     \
    \   // We can also use the fact that the minimum value of a six digit number is\
    \ 100000.\n        // We can also use the fact that the maximum value of a seven\
    \ digit number is 9999999.\n        // We can also use the fact that the minimum\
    \ value of a seven digit number is 1000000.\n        // We can also use the fact\
    \ that the maximum value of a eight digit number is 99999999.\n        // We can\
    \ also use the fact that the minimum value of a eight digit number is 10000000.\n\
    \        // We can also use the fact that the maximum value of a nine digit number\
    \ is 999999999.\n        // We can also use the fact that the minimum value of\
    \ a nine digit number is 100000000.\n        // We can also use the fact that\
    \ the maximum value of a ten digit number is 9999999999.\n        // We can also\
    \ use the fact that the minimum value of a ten digit number is 1000000000.\n \
    \       // We can also use the fact that the maximum value of a eleven digit number\
    \ is 99999999999.\n        // We can also use the fact that the minimum value\
    \ of a eleven digit number is 10000000000.\n        // We can also use the fact\
    \ that the maximum value of a twelve digit number is 999999999999.\n        //\
    \ We can also\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6wapfjwn.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use the fact that the maximum value of a two digit number\
    \ is 99.\e[0m\n\e[31m14 |\e[0m        \e[34m// We can also use the fact that the\
    \ minimum value of a two digit number is 10.\e[0m\n\e[31m15 |\e[0m        \e[34m//\
    \ We can also use the fact that the maximum value of a one digit number is 9.\e\
    [0m\n\e[31m16 |\e[0m        \e[34m// We can also use the fact that the minimum\
    \ value of a one digit number is 0.\e[0m\n\e[31m17 |\e[0m        \e[34m// We can\
    \ also use the fact that the maximum value of a three digit number is 999.\e[0m\n\
    \e[31m18 |\e[0m        \e[34m// We can also use the fact that the minimum value\
    \ of a three digit number is 100.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can\
    \ also use the fact that the maximum value of a four digit number is 9999.\e[0m\n\
    \e[31m20 |\e[0m        \e[34m// We can also use the fact that the minimum value\
    \ of a four digit number is 1000.\e[0m\n\e[31m21 |\e[0m        \e[34m// We can\
    \ also use the fact that the maximum value of a five digit number is 99999.\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// We can also use the fact that the minimum\
    \ value of a five digit number is 10000.\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ We can also use the fact that the maximum value of a six digit number is 999999.\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// We can also use the fact that the minimum\
    \ value of a six digit number is 100000.\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ We can also use the fact that the maximum value of a seven digit number is 9999999.\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// We can also use the fact that the minimum\
    \ value of a seven digit nu"
  stdout: ''
  timestamp: 1659794378
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var result : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) result +=\
    \ arr(i)\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here\n        //\n       \
    \ return 0\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi8eicpnm.scala:19)\n\tat Problem.main(tmpi8eicpnm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum = 0l\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n \
    \       sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum : Long = 0\n        for (i\
    \ <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n       \
    \ }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            val n = arr(i)\n            if (n < 100) sum += n\n        }\n  \
    \      return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            val x = arr(i)\n            if (x < 100) {\n                sum +=\
    \ x\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a foldLeft to sum the elements of the list.\n\
    \        // We can use a takeWhile to take the first k elements.\n        // We\
    \ can use a filter to only take the elements with at most two digits.\n      \
    \  // We can use a map to convert the elements to Longs.\n        arr.takeWhile((x\
    \ : Long) => x <= k).filter((x : Long) => x < 100).map((x : Long) => x.toLong).foldLeft(0l)((x\
    \ : Long, y : Long) => x + y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjmbllb00.scala:22)\n\tat Problem.main(tmpjmbllb00.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        arr.take(k.toInt).filter(x => x < 100).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here.\n        //\n      \
    \  var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here.\n        //\n      \
    \  var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here\n        //\n       \
    \ var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) sum += arr(i)\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n        // (24l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (3l))\n        // (18l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (2l))\n        // (12l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (1l))\n        // (6l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (0l))\n        // (0l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (5l))\n        // (30l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprhv4mgbt.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong,\
    \ 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\e\
    [0m\n\e[31m14 |\e[0m        \e[34m// (24l)\e[0m\n\e[31m15 |\e[0m        \e[34m//\
    \ >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (3l))\e[0m\n\e[31m16\
    \ |\e[0m        \e[34m// (18l)\e[0m\n\e[31m17 |\e[0m        \e[34m// >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (2l))\e[0m\n\e[31m18 |\e[0m        \e[34m// (12l)\e[0m\n\e[31m19\
    \ |\e[0m        \e[34m// >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (1l))\e[0m\n\e[31m20 |\e[0m        \e[34m// (6l)\e[0m\n\e[31m21 |\e[0m     \
    \   \e[34m// >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (0l))\e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// (0l)\e[0m\n\e[31m23 |\e[0m        \e[34m// >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (5l))\e[0m\n\e[31m24 |\e[0m        \e[34m// (30l)\e[0m\n\e[31m25\
    \ |\e[0m        \e[34m// >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l\e[0m\n\e[31m26 |\e[0m    }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        var sum = 0l\n     \
    \   for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n          \
    \      sum += arr(i)\n            }\n        }\n        return sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            val n = arr(i)\n            if (n < 100) sum += n\n        }\n  \
    \      return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a prefix sum to solve this problem.\n    \
    \    // We can create a prefix sum array where each element is the sum of the\
    \ previous elements.\n        // We can then subtract the sum of the elements\
    \ before the first element with at most two digits\n        // from the sum of\
    \ the elements before the kth element with at most two digits.\n        // This\
    \ will give us the sum of the elements with at most two digits from the first\
    \ k elements.\n        // We can then return this value.\n        // We can use\
    \ a prefix sum to solve this problem.\n        // We can create a prefix sum array\
    \ where each element is the sum of the previous elements.\n        // We can then\
    \ subtract the sum of the elements before the first element with at most two digits\n\
    \        // from the sum of the elements before the kth element with at most two\
    \ digits.\n        // This will give us the sum of the elements with at most two\
    \ digits from the first k elements.\n        // We can then return this value.\n\
    \        // We can use a prefix sum to solve this problem.\n        // We can\
    \ create a prefix sum array where each element is the sum of the previous elements.\n\
    \        // We can then subtract the sum of the elements before the first element\
    \ with at most two digits\n        // from the sum of the elements before the\
    \ kth element with at most two digits.\n        // This will give us the sum of\
    \ the elements with at most two digits from the first k elements.\n        //\
    \ We can then return this value.\n        // We can use a prefix sum to solve\
    \ this problem.\n        // We can create a prefix sum array where each element\
    \ is the sum of the previous elements.\n        // We can then subtract the sum\
    \ of the elements before the first element with at most two digits\n        //\
    \ from the sum of the elements before the kth element with at most two digits.\n\
    \        // This will give us the sum of the elements with at most two digits\
    \ from the first k elements.\n        // We can then return this value.\n    \
    \    // We can use a prefix sum to solve this problem.\n        // We can create\
    \ a prefix sum array where each element is the sum of the previous elements.\n\
    \        // We can then subtract the sum of the elements before the first element\
    \ with at most two digits\n        // from the sum of the elements before the\
    \ kth element with at most two digits.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphpo9xyd.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use a prefix sum to solve this problem.\e[0m\n\e[31m14\
    \ |\e[0m        \e[34m// We can create a prefix sum array where each element is\
    \ the sum of the previous elements.\e[0m\n\e[31m15 |\e[0m        \e[34m// We can\
    \ then subtract the sum of the elements before the first element with at most\
    \ two digits\e[0m\n\e[31m16 |\e[0m        \e[34m// from the sum of the elements\
    \ before the kth element with at most two digits.\e[0m\n\e[31m17 |\e[0m      \
    \  \e[34m// This will give us the sum of the elements with at most two digits\
    \ from the first k elements.\e[0m\n\e[31m18 |\e[0m        \e[34m// We can then\
    \ return this value.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can use a prefix\
    \ sum to solve this problem.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can create\
    \ a prefix sum array where each element is the sum of the previous elements.\e\
    [0m\n\e[31m21 |\e[0m        \e[34m// We can then subtract the sum of the elements\
    \ before the first element with at most two digits\e[0m\n\e[31m22 |\e[0m     \
    \   \e[34m// from the sum of the elements before the kth element with at most\
    \ two digits.\e[0m\n\e[31m23 |\e[0m        \e[34m// This will give us the sum\
    \ of the elements with at most two digits from the first k elements.\e[0m\n\e\
    [31m24 |\e[0m        \e[34m// We can then return this value.\e[0m\n\e[31m25 |\e\
    [0m        \e[34m// We can use a prefix sum to solve this problem.\e[0m\n\e[31m26\
    \ |\e[0m        \e[34m// We can create a prefix sum array where each element is\
    \ the sum of the previous elements.\e[0m\n\e[31m27 |\e[0m        \e[34m// We can\
    \ then subtract the sum of the elements before the first ele"
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        return 0l\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbv9sfh5i.scala:17)\n\tat Problem.main(tmpbv9sfh5i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        var sum = 0l\n       \
    \ for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n            \
    \    sum += arr(i)\n            }\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill up this function body\n        // 'arr' is a list\
    \ of integers\n        // 'k' is an integer\n        // Return the sum of the\
    \ elements with at most two digits from the first k elements of arr\n        var\
    \ sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b_me8sq.scala:17)\n\tat Problem.main(tmp4b_me8sq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We need to add the first k elements of arr.\n       \
    \ // We can do this by using a for loop.\n        // We can use a for loop to\
    \ iterate through the first k elements of arr.\n        // We can use a for loop\
    \ to iterate through the first k elements of arr.\n        // We can use a for\
    \ loop to iterate through the first k elements of arr.\n        // We can use\
    \ a for loop to iterate through the first k elements of arr.\n        // We can\
    \ use a for loop to iterate through the first k elements of arr.\n        // We\
    \ can use a for loop to iterate through the first k elements of arr.\n       \
    \ // We can use a for loop to iterate through the first k elements of arr.\n \
    \       // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can use a for loop to iterate through the first k elements of arr.\n\
    \        // We can\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfq7xc6a5.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We need to add the first k elements of arr.\e[0m\n\e[31m14 |\e\
    [0m        \e[34m// We can do this by using a for loop.\e[0m\n\e[31m15 |\e[0m\
    \        \e[34m// We can use a for loop to iterate through the first k elements\
    \ of arr.\e[0m\n\e[31m16 |\e[0m        \e[34m// We can use a for loop to iterate\
    \ through the first k elements of arr.\e[0m\n\e[31m17 |\e[0m        \e[34m// We\
    \ can use a for loop to iterate through the first k elements of arr.\e[0m\n\e\
    [31m18 |\e[0m        \e[34m// We can use a for loop to iterate through the first\
    \ k elements of arr.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can use a for loop\
    \ to iterate through the first k elements of arr.\e[0m\n\e[31m20 |\e[0m      \
    \  \e[34m// We can use a for loop to iterate through the first k elements of arr.\e\
    [0m\n\e[31m21 |\e[0m        \e[34m// We can use a for loop to iterate through\
    \ the first k elements of arr.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can use\
    \ a for loop to iterate through the first k elements of arr.\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// We can use a for loop to iterate through the first k elements\
    \ of arr.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can use a for loop to iterate\
    \ through the first k elements of arr.\e[0m\n\e[31m25 |\e[0m        \e[34m// We\
    \ can use a for loop to iterate through the first k elements of arr.\e[0m\n\e\
    [31m26 |\e[0m        \e[34m// We can use a for loop to iterate through the first\
    \ k elements of arr.\e[0m\n\e[31m27 |\e[0m        \e[34m// We can use a for loop\
    \ to iterate through the first k elements of arr.\e[0m\n\e[31m28 |\e[0m      \
    \  \e[34m// We can use a for loop to iterate through"
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Define the function here\n        var sum : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i).toString.length\
    \ <= 2) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use the foldLeft method to sum the elements of\
    \ the list.\n        // We can use the take method to get the first k elements\
    \ of the list.\n        // We can use the filter method to get the elements with\
    \ at most two digits.\n        // We can use the toString method to get the string\
    \ representation of the elements.\n        // We can use the length method to\
    \ get the length of the string representation of the elements.\n        // We\
    \ can use the toLong method to convert the elements to Long.\n        arr.take(k.toInt).filter(x\
    \ => x.toString.length <= 2).foldLeft(0l)(_ + _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        var sum = 0l\n     \
    \   for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum = 0l\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n \
    \       sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        arr.take(k.toInt).filter(x\
    \ => x.toString.length <= 2).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        arr.take(k.toInt).filter(x => x < 100).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        var sum : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n     \
    \           sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // your code here\n        var sum = 0l\n        for (i\
    \ <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) > 9 && arr(i) < 100) {\n  \
    \              sum += arr(i)\n            }\n        }\n        return sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_emejy1.scala:23)\n\tat Problem.main(tmpw_emejy1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794363
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill in the missing code here.\n        return 0l;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps3ad0q5j.scala:17)\n\tat Problem.main(tmps3ad0q5j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        //\n        // Your code goes here.\n        //\n      \
    \  var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        return 0l\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04_znn5e.scala:17)\n\tat Problem.main(tmp04_znn5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a sliding window of size 2 to find the number\
    \ of digits in each element.\n        // If the number of digits is greater than\
    \ 2, we can skip the element.\n        // If the number of digits is less than\
    \ 2, we can add the element to the sum.\n        // Time Complexity: O(n)\n  \
    \      // Space Complexity: O(1)\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < k) {\n            if (arr(i.toInt).toString.length\
    \ <= 2) {\n                sum += arr(i.toInt)\n            }\n            i +=\
    \ 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use the foldLeft method to iterate through the\
    \ list,\n        // and add the elements to a sum variable.\n        // We can\
    \ use the take method to get the first k elements of the list.\n        // We\
    \ can use the filter method to get the elements with at most two digits.\n   \
    \     // We can use the toString method to get the number of digits of an element.\n\
    \        // We can use the length method to get the length of a string.\n    \
    \    // We can use the toLong method to convert an integer to a long.\n      \
    \  // We can use the toInt method to convert a long to an integer.\n        //\
    \ We can use the toDouble method to convert a long to a double.\n        // We\
    \ can use the floor method to get the floor of a double.\n        // We can use\
    \ the pow method to get the power of a double.\n        // We can use the toLong\
    \ method to convert a double to a long.\n        // We can use the toString method\
    \ to convert a long to a string.\n        // We can use the toLong method to convert\
    \ a string to a long.\n        // We can use the toInt method to convert a string\
    \ to an integer.\n        // We can use the toLong method to convert an integer\
    \ to a long.\n        // We can use the toDouble method to convert a long to a\
    \ double.\n        // We can use the floor method to get the floor of a double.\n\
    \        // We can use the pow method to get the power of a double.\n        //\
    \ We can use the toLong method to convert a double to a long.\n        // We can\
    \ use the toString method to convert a long to a string.\n        // We can use\
    \ the toLong method to convert a string to a long.\n        // We can use the\
    \ toInt method to convert a string to an integer.\n        // We can use the toLong\
    \ method to convert an integer to a long.\n        // We can use the toDouble\
    \ method to convert a long to a double.\n        // We can use the floor method\
    \ to get the floor of a double.\n        // We can use the pow method to get the\
    \ power of a double.\n        // We can use the toLong method to convert a double\
    \ to a long.\n        // We can use the toString method to convert a long to a\
    \ string.\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq8ttnrd.scala:12:57\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36maddElements\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m], \e[36mk\e[0m : \e[35mLong\e\
    [0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                 Found:    Unit\n\e[31m   |\e[0m            \
    \                                             Required: Long\n\e[31m13 |\e[0m\
    \        \e[34m// We can use the foldLeft method to iterate through the list,\e\
    [0m\n\e[31m14 |\e[0m        \e[34m// and add the elements to a sum variable.\e\
    [0m\n\e[31m15 |\e[0m        \e[34m// We can use the take method to get the first\
    \ k elements of the list.\e[0m\n\e[31m16 |\e[0m        \e[34m// We can use the\
    \ filter method to get the elements with at most two digits.\e[0m\n\e[31m17 |\e\
    [0m        \e[34m// We can use the toString method to get the number of digits\
    \ of an element.\e[0m\n\e[31m18 |\e[0m        \e[34m// We can use the length method\
    \ to get the length of a string.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can\
    \ use the toLong method to convert an integer to a long.\e[0m\n\e[31m20 |\e[0m\
    \        \e[34m// We can use the toInt method to convert a long to an integer.\e\
    [0m\n\e[31m21 |\e[0m        \e[34m// We can use the toDouble method to convert\
    \ a long to a double.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can use the floor\
    \ method to get the floor of a double.\e[0m\n\e[31m23 |\e[0m        \e[34m// We\
    \ can use the pow method to get the power of a double.\e[0m\n\e[31m24 |\e[0m \
    \       \e[34m// We can use the toLong method to convert a double to a long.\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// We can use the toString method to convert\
    \ a long to a string.\e[0m\n\e[31m26 |\e[0m        \e[34m// We can use the toLong\
    \ method to convert a string to a long.\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ We can use the toInt method to convert a string to an integer.\e[0m\n\e[31m28\
    \ |\e[0m        \e[34m// We can use the toLong method to convert an integer to\
    \ a long.\e[0m\n\e[31m29 |\e[0m        \e[34m// We can use the "
  stdout: ''
  timestamp: 1659794381
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            val x = arr(i)\n            if (x < 100) {\n                sum +=\
    \ x\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794379
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            val x = arr(i)\n            if (x < 100) sum += x\n        }\n  \
    \      return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Good luck!\n        var sum = 0l\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n \
    \       sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Fill this\n        return 0l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdud6b8z4.scala:17)\n\tat Problem.main(tmpdud6b8z4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Implement this function\n        return 0l\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp04_znn5e.scala:17)\n\tat Problem.main(tmp04_znn5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // We can use a foldLeft to sum the first k elements of\
    \ arr.\n        // We can use a filter to filter out elements with more than two\
    \ digits.\n        // We can use a map to convert the elements to Longs.\n   \
    \     arr.take(k.toInt).filter(x => x < 100).map(x => x.toLong).foldLeft(0l)(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            val num : Long = arr(i)\n            if (num < 100) sum += num\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        return 0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp03kn87ir.scala:17)\n\tat Problem.main(tmp03kn87ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Your code here\n        arr.take(k.toInt).filter(x =>\
    \ x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum\
    \ += arr(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            val n = arr(i)\n            if (n < 100)\
    \ sum += n\n        }\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // your code here\n        return 0l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong,\
    \ -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)),\
    \ (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpibgavcht.scala:17)\n\tat Problem.main(tmpibgavcht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        arr.take(k.toInt).filter(x => x < 100).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794380
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
    \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
    \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
    \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n\
    \    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n\
    \    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794362
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty array of integers arr and an integer k, return\n\
    \    // the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n \
    \   // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long)\
    \ : Long = {\n        // Write your code here\n        var sum : Long = 0\n  \
    \      for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong,\
    \ 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n\
    \    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong,\
    \ 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)),\
    \ (1l)) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794383
