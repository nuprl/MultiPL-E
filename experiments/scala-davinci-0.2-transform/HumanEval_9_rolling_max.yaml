name: HumanEval_9_rolling_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n    // in the sequence.\n    // >>> rollingMax((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))\n    def rollingMax(numbers\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rollingMax((List[Long]())).equals((List[Long]())));\n\
  \    assert(rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(rollingMax((List[Long](4l.toLong,\
  \ 3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong,\
  \ 4l.toLong))));\n    assert(rollingMax((List[Long](3l.toLong, 2l.toLong, 3l.toLong,\
  \ 100l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
  \ 100l.toLong, 100l.toLong))));\n    }\n\n}\n"
completions: ["        var max = numbers(0)\n        var result = List[Long]()\n \
    \       for (i <- 0 until numbers.length) {\n            if (numbers(i) > max)\
    \ max = numbers(i)\n            result = result :+ max\n        }\n        result",
  "        var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            if (numbers(i) > max) max = numbers(i)\n\
    \            result = result :+ max\n        }\n        result", "        var\
    \ result = new ListBuffer[Long]\n        var max = 0l\n        for (number <-\
    \ numbers) {\n            max = max max number\n            result += max\n  \
    \      }\n        result.toList", "        var max = numbers(0)\n        var result\
    \ = List[Long]()\n        for (number <- numbers) {\n            if (number >\
    \ max) max = number\n            result = result :+ max\n        }\n        result",
  "        var result = List[Long]()\n        var max = 0l\n        for (number <-\
    \ numbers) {\n            max = max.max(number)\n            result = result :+\
    \ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        var result = List[Long]()\n        var max = 0l\n\
    \        for (number <- numbers) {\n            max = max max number\n       \
    \     result = result :+ max\n        }\n        result", "        def rollingMax(numbers\
    \ : List[Long], max : Long) : List[Long] = {\n            numbers match {\n  \
    \              case Nil => Nil\n                case x :: xs => max :: rollingMax(xs,\
    \ max(x, max))\n            }\n        }\n        rollingMax(numbers, 0)", " \
    \       var max = numbers(0)\n        var result = List[Long]()\n        for (number\
    \ <- numbers) {\n            max = max max number\n            result = result\
    \ :+ max\n        }\n        result", "        var max = numbers(0)\n        var\
    \ result = List[Long]()\n        for (i <- 0 until numbers.length) {\n       \
    \     max = max(numbers(i), max)\n            result = result :+ max\n       \
    \ }\n        result", "        if (numbers.length == 0) return List[Long]()\n\
    \        var max = numbers(0)\n        var result = List[Long](max)\n        for\
    \ (i <- 1 until numbers.length) {\n            if (numbers(i) > max) max = numbers(i)\n\
    \            result = result :+ max\n        }\n        return result", "    \
    \    val result = new ListBuffer[Long]()\n        var max = numbers(0)\n     \
    \   result += max\n        for (i <- 1 until numbers.length) {\n            if\
    \ (numbers(i) > max) max = numbers(i)\n            result += max\n        }\n\
    \        result.toList", "        var max = numbers(0)\n        var maxes = List[Long]()\n\
    \        for (i <- 0 until numbers.length) {\n            max = max(numbers(i),\
    \ max)\n            maxes = maxes :+ max\n        }\n        return maxes", " \
    \       var max = numbers(0)\n        var result = List[Long]()\n        for (i\
    \ <- 0 until numbers.length) {\n            max = max(numbers(i), max)\n     \
    \       result = result :+ max\n        }\n        result", "        var result\
    \ = List[Long]()\n        var max = 0l\n        for (number <- numbers) {\n  \
    \          if (number > max) max = number\n            result = result :+ max\n\
    \        }\n        result", "        var result = List[Long]()\n        var max\
    \ = 0l\n        for (number <- numbers) {\n            max = max max number\n\
    \            result = result :+ max\n        }\n        result", "        var\
    \ max = numbers(0)\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length) {\n            max = max(numbers(i), max)\n            result\
    \ = result :+ max\n        }\n        result", "        var max = 0l\n       \
    \ var result = List[Long]()\n        for (number <- numbers) {\n            max\
    \ = max max number\n            result = result :+ max\n        }\n        result",
  "        val maxes = new ListBuffer[Long]\n        var currentMax = 0l\n       \
    \ for (number <- numbers) {\n            currentMax = max(currentMax, number)\n\
    \            maxes += currentMax\n        }\n        maxes.toList", "        var\
    \ max = numbers(0)\n        var result = List[Long]()\n        result = result\
    \ :+ max\n        for (i <- 1 until numbers.length) {\n            max = max.max(numbers(i))\n\
    \            result = result :+ max\n        }\n        result"]
stop_tokens:
- "\n    }\n"
