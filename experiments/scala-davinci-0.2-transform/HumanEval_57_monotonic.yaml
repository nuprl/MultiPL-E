name: HumanEval_57_monotonic
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return True is list elements are monotonically increasing or decreasing.\n\
  \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
  \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
  \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
  \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long]) :\
  \ Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n    assert(monotonic((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong,\
  \ 9l.toLong, 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        if (l.size == 1) return true\n        val inc = l(0) <= l(1)\n\
    \        for (i <- 1 until l.size - 1) {\n            if (inc && l(i) > l(i +\
    \ 1)) return false\n            if (!inc && l(i) < l(i + 1)) return false\n  \
    \      }\n        return true", "        if (l.length == 1) return true\n    \
    \    var increasing = true\n        var decreasing = true\n        for (i <- 0\
    \ until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n\
    \            if (l(i) < l(i + 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length <= 1) return true\n       \
    \ var increasing = true\n        var decreasing = true\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n         \
    \   if (l(i) > l(i - 1)) decreasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing", "  \
    \      if (l.size <= 1) return true\n        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 0 until l.size - 1) {\n            if (l(i)\
    \ > l(i + 1)) increasing = false\n            if (l(i) < l(i + 1)) decreasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.length\
    \ <= 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        val n = l.length\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until n) {\n    \
    \        if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i -\
    \ 1)) decreasing = false\n        }\n        increasing || decreasing", "    \
    \    if (l.length <= 1) return true\n        var increasing = true\n        var\
    \ decreasing = true\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > l(i - 1)) decreasing = false\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n        }\n        return increasing || decreasing", "        if (l.length\
    \ == 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.length == 1) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length == 1) return true\n       \
    \ var increasing = true\n        var decreasing = true\n        for (i <- 0 until\
    \ l.length - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n     \
    \       if (l(i) < l(i + 1)) decreasing = false\n        }\n        return increasing\
    \ || decreasing", "        if (l.size == 1) return true\n        var increasing\
    \ = l(0) < l(1)\n        for (i <- 1 until l.size - 1) {\n            if (increasing\
    \ && l(i) > l(i + 1)) return false\n            if (!increasing && l(i) < l(i\
    \ + 1)) return false\n        }\n        return true", "        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 0 until l.length -\
    \ 1) {\n            if (l(i) > l(i + 1)) increasing = false\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n        }\n        increasing || decreasing",
  "        val n = l.length\n        var increasing = true\n        var decreasing\
    \ = true\n        for (i <- 0 until n - 1) {\n            if (l(i) > l(i + 1))\
    \ increasing = false\n            if (l(i) < l(i + 1)) decreasing = false\n  \
    \      }\n        return increasing || decreasing", "        if (l.length == 1)\
    \ return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing", "        if (l.length <= 1) return true\n  \
    \      var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n\
    \            if (l(i) < l(i + 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length <= 1) return true\n       \
    \ var inc = true\n        var dec = true\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) < l(i - 1)) inc = false\n            if (l(i) > l(i\
    \ - 1)) dec = false\n        }\n        return inc || dec", "        if (l.length\
    \ == 1) return true\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing", "        if (l.length < 2) return true\n\
    \        var increasing = true\n        var decreasing = true\n        for (i\
    \ <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n        }\n        return\
    \ increasing || decreasing", "        if (l.length == 1) true\n        else {\n\
    \            val diff = l.tail.zip(l).map(x => x._1 - x._2)\n            val sign\
    \ = diff.head / abs(diff.head)\n            diff.forall(x => x / abs(x) == sign)\n\
    \        }"]
stop_tokens:
- "\n    }\n"
