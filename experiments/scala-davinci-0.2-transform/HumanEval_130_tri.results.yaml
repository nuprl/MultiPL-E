language: scala
name: HumanEval_130_tri
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n == 1) tri(n - 1, 3 :: l)\n            else if\
    \ (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n            else tri(n - 1, (l(0)\
    \ + l(1) + l(2)) :: l)\n        }\n        tri(n, List[Long]())\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmp5y7xmbc7.scala:25)\n\tat Problem$.tri(tmp5y7xmbc7.scala:27)\n\
    \tat Problem$.main(tmp5y7xmbc7.scala:30)\n\tat Problem.main(tmp5y7xmbc7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1l, 3l, 2l)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpg3chnfds.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpg3chnfds.scala:28)\n\
    \tat Problem$.main(tmpg3chnfds.scala:32)\n\tat Problem.main(tmpg3chnfds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def triRec(n : Long, l : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) l\n            else {\n                val last = l.last\n        \
    \        val next = if (last % 2 == 0) 1 + last / 2 else l(l.length - 2) + l(l.length\
    \ - 3) + l(l.length - 1)\n                triRec(n - 1, l :+ next)\n         \
    \   }\n        }\n        triRec(n, List(1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.triRec$1(tmp_32sug9e.scala:25)\n\tat Problem$.tri(tmp_32sug9e.scala:29)\n\
    \tat Problem$.main(tmp_32sug9e.scala:32)\n\tat Problem.main(tmp_32sug9e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n   \
    \             l += 1 + i / 2\n            } else {\n                l += l(i -\
    \ 1) + l(i - 2) + l(i + 1)\n            }\n        }\n        l.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpxdbw4j1o.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpxdbw4j1o.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpxdbw4j1o.scala:31)\n\
    \tat Problem$.main(tmpxdbw4j1o.scala:35)\n\tat Problem.main(tmpxdbw4j1o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) {\n                l = l :+ 1\n            } else\
    \ if (i == 1) {\n                l = l :+ 3\n            } else if (i == 2) {\n\
    \                l = l :+ 2\n            } else if (i % 2 == 0) {\n          \
    \      l = l :+ (1 + i / 2)\n            } else {\n                l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n        l\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp0wf9_k8w.scala:34)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp0wf9_k8w.scala:36)\n\
    \tat Problem$.main(tmp0wf9_k8w.scala:40)\n\tat Problem.main(tmp0wf9_k8w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp5gbihhj.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (result : List[Int])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += (1 + i / 2)\n            } else {\n\
    \                result += (result(i - 1) + result(i - 2) + result(i + 1))\n \
    \           }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp1hlwlgml.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmp1hlwlgml.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp1hlwlgml.scala:31)\n\
    \tat Problem$.main(tmp1hlwlgml.scala:35)\n\tat Problem.main(tmp1hlwlgml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else {\n                val next = if (n % 2 == 0) 1 +\
    \ n / 2 else l(l.length - 1) + l(l.length - 2) + l(l.length - 3)\n           \
    \     tri(n - 1, l :+ next)\n            }\n        }\n        tri(n, List(1l))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpyx78hq_1.scala:24)\n\tat Problem$.tri(tmpyx78hq_1.scala:28)\n\
    \tat Problem$.main(tmpyx78hq_1.scala:31)\n\tat Problem.main(tmpyx78hq_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of Long numbers\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp9gs_9qzz.scala:30)\n\tat Problem$.tri$$anonfun$adapted$1(tmp9gs_9qzz.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp9gs_9qzz.scala:31)\n\
    \tat Problem$.main(tmp9gs_9qzz.scala:35)\n\tat Problem.main(tmp9gs_9qzz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n == 1) tri(n - 1, 3 :: l)\n            else if\
    \ (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n            else tri(n - 1, (l(0)\
    \ + l(1) + l(2)) :: l)\n        }\n        tri(n, List[Long]())\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmp5y7xmbc7.scala:25)\n\tat Problem$.tri(tmp5y7xmbc7.scala:27)\n\
    \tat Problem$.main(tmp5y7xmbc7.scala:30)\n\tat Problem.main(tmp5y7xmbc7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        val l = new ListBuffer[Long]\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwnoo08r8.scala:30)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwnoo08r8.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwnoo08r8.scala:31)\n\
    \tat Problem$.main(tmpwnoo08r8.scala:35)\n\tat Problem.main(tmpwnoo08r8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp7i7axg56.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp7i7axg56.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp7i7axg56.scala:28)\n\
    \tat Problem$.main(tmp7i7axg56.scala:32)\n\tat Problem.main(tmp7i7axg56.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+\
    \ 3\n            else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpc5f4flil.scala:29)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpc5f4flil.scala:30)\n\
    \tat Problem$.main(tmpc5f4flil.scala:34)\n\tat Problem.main(tmpc5f4flil.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i == 1) l = l :+ 1\n            else if (i == 2) l = l :+ 3\n          \
    \  else if (i == 3) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 2) + l(i - 1) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpffehy8y5.scala:32)\n\tat Problem.main(tmpffehy8y5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        // For example:\n        //\
    \ >>> tri((3l))\n        // (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) {\n                l = l :+ 1\n            } else if (i == 1) {\n\
    \                l = l :+ 3\n            } else if (i == 2) {\n              \
    \  l = l :+ 2\n            } else {\n                if (i % 2 == 0) {\n     \
    \               l = l :+ (1 + i / 2)\n                } else {\n             \
    \       l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n                }\n       \
    \     }\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp9vjy1suq.scala:39)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp9vjy1suq.scala:42)\n\
    \tat Problem$.main(tmp9vjy1suq.scala:46)\n\tat Problem.main(tmp9vjy1suq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 4 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 2) + l(i - 1) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjv1zk64j.scala:32)\n\tat Problem.main(tmpjv1zk64j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpdyywg5h1.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpdyywg5h1.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpdyywg5h1.scala:30)\n\
    \tat Problem$.main(tmpdyywg5h1.scala:34)\n\tat Problem.main(tmpdyywg5h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = ListBuffer[Long]()\n        l += 1\n \
    \       l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n          \
    \  if (i % 2 == 0) {\n                l += 1 + i / 2\n            } else {\n \
    \               l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpdidscg0m.scala:31)\n\tat Problem$.tri$$anonfun$adapted$1(tmpdidscg0m.scala:33)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpdidscg0m.scala:33)\n\
    \tat Problem$.main(tmpdidscg0m.scala:37)\n\tat Problem.main(tmpdidscg0m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = ListBuffer[Long]()\n        l += 1\n \
    \       l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n          \
    \  if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2)\
    \ + l(i + 1))\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp9g3heyq0.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmp9g3heyq0.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp9g3heyq0.scala:30)\n\
    \tat Problem$.main(tmp9g3heyq0.scala:34)\n\tat Problem.main(tmp9g3heyq0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp4un9hnwj.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp4un9hnwj.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp4un9hnwj.scala:28)\n\
    \tat Problem$.main(tmp4un9hnwj.scala:32)\n\tat Problem.main(tmp4un9hnwj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        List[Long]()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpho23w9f4.scala:26)\n\tat Problem.main(tmpho23w9f4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val result = ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwa5q7g37.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwa5q7g37.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwa5q7g37.scala:28)\n\
    \tat Problem$.main(tmpwa5q7g37.scala:32)\n\tat Problem.main(tmpwa5q7g37.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        result = result :+ 1\n        result\
    \ = result :+ 3\n        result = result :+ 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ (1 + i\
    \ / 2)\n            } else {\n                result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpbhomnscr.scala:29)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpbhomnscr.scala:31)\n\
    \tat Problem$.main(tmpbhomnscr.scala:35)\n\tat Problem.main(tmpbhomnscr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val a = new Array[Long](n.toInt + 1)\n        a(0) = 1\n        a(1)\
    \ = 3\n        a(2) = 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) a(i) = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i\
    \ + 1)\n        }\n        a.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.tri$$anonfun$1(tmpdjq1_ul3.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpdjq1_ul3.scala:28)\n\
    \tat Problem$.main(tmpdjq1_ul3.scala:32)\n\tat Problem.main(tmpdjq1_ul3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var list = new ListBuffer[Long]\n        list += 1\n        list += 3\n\
    \        list += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                list += (1 + i / 2)\n            } else {\n          \
    \      list += (list(i - 1) + list(i - 2) + list(i + 1))\n            }\n    \
    \    }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp7uq7lgze.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmp7uq7lgze.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp7uq7lgze.scala:31)\n\
    \tat Problem$.main(tmp7uq7lgze.scala:35)\n\tat Problem.main(tmp7uq7lgze.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794464
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n   \
    \         else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        tri(n, List(1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpukgrxdf5.scala:24)\n\tat Problem$.tri(tmpukgrxdf5.scala:26)\n\
    \tat Problem$.main(tmpukgrxdf5.scala:29)\n\tat Problem.main(tmpukgrxdf5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        var a = 1l\n        var b = 3l\n \
    \       var c = 2l\n        result = result :+ a\n        result = result :+ b\n\
    \        result = result :+ c\n        for (i <- 4l to n) {\n            if (i\
    \ % 2 == 0) {\n                var d = 1 + i / 2\n                result = result\
    \ :+ d\n            } else {\n                var d = a + b + c\n            \
    \    result = result :+ d\n                a = b\n                b = c\n    \
    \            c = d\n            }\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpke3z85qi.scala:43)\n\tat Problem.main(tmpke3z85qi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        val a = new Array[Long](n.toInt +\
    \ 1)\n        a(0) = 1\n        a(1) = 3\n        for (i <- 2 to n.toInt) {\n\
    \            if (i % 2 == 0) a(i) = 1 + i / 2\n            else a(i) = a(i - 1)\
    \ + a(i - 2) + a(i + 1)\n        }\n        a.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.tri$$anonfun$1(tmpc16f0kak.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpc16f0kak.scala:28)\n\
    \tat Problem$.main(tmpc16f0kak.scala:32)\n\tat Problem.main(tmpc16f0kak.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpudyuahmm.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpudyuahmm.scala:28)\n\
    \tat Problem$.main(tmpudyuahmm.scala:32)\n\tat Problem.main(tmpudyuahmm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var list = List[Long]()\n        for (i <- 0 to n.toInt) {\n        \
    \    if (i == 0) list = list :+ 1\n            else if (i == 1) list = list :+\
    \ 3\n            else if (i == 2) list = list :+ 2\n            else if (i % 2\
    \ == 0) list = list :+ (1 + i / 2)\n            else list = list :+ (list(i -\
    \ 1) + list(i - 2) + list(i + 1))\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmphknz25cn.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmphknz25cn.scala:28)\n\
    \tat Problem$.main(tmphknz25cn.scala:32)\n\tat Problem.main(tmphknz25cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l += 1 + i / 2\n         \
    \   } else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n          \
    \  }\n        }\n        l.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp4adrj68u.scala:32)\n\tat Problem$.tri$$anonfun$adapted$1(tmp4adrj68u.scala:34)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp4adrj68u.scala:34)\n\
    \tat Problem$.main(tmp4adrj68u.scala:38)\n\tat Problem.main(tmp4adrj68u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmptls32aer.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmptls32aer.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmptls32aer.scala:30)\n\
    \tat Problem$.main(tmptls32aer.scala:34)\n\tat Problem.main(tmptls32aer.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val list = new ListBuffer[Long]\n        list += 1\n        list += 3\n\
    \        list += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) list += (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2)\
    \ + list(i + 1))\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp40y9ya8j.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp40y9ya8j.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp40y9ya8j.scala:28)\n\
    \tat Problem$.main(tmp40y9ya8j.scala:32)\n\tat Problem.main(tmp40y9ya8j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwzvvo9d_.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwzvvo9d_.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwzvvo9d_.scala:28)\n\
    \tat Problem$.main(tmpwzvvo9d_.scala:32)\n\tat Problem.main(tmpwzvvo9d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = 1l :: l\n            else if (i == 1) l = 3l :: l\n        \
    \    else if (i == 2) l = 2l :: l\n            else if (i % 2 == 0) l = (1 + i\
    \ / 2) :: l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n     \
    \   l.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppn52xsa0.scala:32)\n\tat Problem.main(tmppn52xsa0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += 1 + i / 2\n            } else {\n\
    \                result += result(i - 1) + result(i - 2) + result(i + 1)\n   \
    \         }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpjyer95ja.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpjyer95ja.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpjyer95ja.scala:31)\n\
    \tat Problem$.main(tmpjyer95ja.scala:35)\n\tat Problem.main(tmpjyer95ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List[Long](1)\n        var l = List[Long](1, 3, 2)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpi24p5n44.scala:25)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpi24p5n44.scala:26)\n\
    \tat Problem$.main(tmpi24p5n44.scala:30)\n\tat Problem.main(tmpi24p5n44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwzvvo9d_.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwzvvo9d_.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwzvvo9d_.scala:28)\n\
    \tat Problem$.main(tmpwzvvo9d_.scala:32)\n\tat Problem.main(tmpwzvvo9d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var lst = new ListBuffer[Long]()\n        lst += 1\n        lst += 3\n\
    \        for (i <- 2 to n.toInt) {\n            if (i % 2 == 0) lst += (1 + i\
    \ / 2)\n            else lst += (lst(i - 1) + lst(i - 2) + lst(i + 1))\n     \
    \   }\n        lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpg0ao3nfk.scala:26)\n\tat Problem$.tri$$anonfun$adapted$1(tmpg0ao3nfk.scala:27)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpg0ao3nfk.scala:27)\n\
    \tat Problem$.main(tmpg0ao3nfk.scala:31)\n\tat Problem.main(tmpg0ao3nfk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        val l = new ListBuffer[Long]\n        l += 1\n\
    \        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i -\
    \ 2) + l(i + 1))\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmplz0dm52z.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmplz0dm52z.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmplz0dm52z.scala:30)\n\
    \tat Problem$.main(tmplz0dm52z.scala:34)\n\tat Problem.main(tmplz0dm52z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp5gbihhj.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (result : List[Int])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += 1 + i / 2\n            } else {\n\
    \                result += result(i - 1) + result(i - 2) + result(i + 1)\n   \
    \         }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpenzudwwv.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpenzudwwv.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpenzudwwv.scala:31)\n\
    \tat Problem$.main(tmpenzudwwv.scala:35)\n\tat Problem.main(tmpenzudwwv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) l = 1l :: l\n            else if (i == 1) l = 3l\
    \ :: l\n            else if (i == 2) l = 2l :: l\n            else {\n       \
    \         if (i % 2 == 0) l = (1 + i / 2) :: l\n                else l = (l(0)\
    \ + l(1) + l(2)) :: l\n            }\n        }\n        l.reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpktpm_n1z.scala:36)\n\tat Problem.main(tmpktpm_n1z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwzvvo9d_.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwzvvo9d_.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwzvvo9d_.scala:28)\n\
    \tat Problem$.main(tmpwzvvo9d_.scala:32)\n\tat Problem.main(tmpwzvvo9d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = new ListBuffer[Long]\n        l += 1\n\
    \        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) {\n                l += 1 + i / 2\n            } else {\n\
    \                l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp5e4f_pvt.scala:31)\n\tat Problem$.tri$$anonfun$adapted$1(tmp5e4f_pvt.scala:33)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp5e4f_pvt.scala:33)\n\
    \tat Problem$.main(tmp5e4f_pvt.scala:37)\n\tat Problem.main(tmp5e4f_pvt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n      \
    \      if (i == 0) result = result :+ 1\n            else if (i == 1) result =\
    \ result :+ 3\n            else if (i == 2) result = result :+ 2\n           \
    \ else if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp3ww59pdq.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp3ww59pdq.scala:28)\n\
    \tat Problem$.main(tmp3ww59pdq.scala:32)\n\tat Problem.main(tmp3ww59pdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var list = List[Long]()\n        if (n == 0) {\n\
    \            list = List[Long](1)\n        } else if (n == 1) {\n            list\
    \ = List[Long](1, 3)\n        } else if (n == 2) {\n            list = List[Long](1,\
    \ 3, 2)\n        } else {\n            list = List[Long](1, 3, 2)\n          \
    \  var i = 3\n            while (i <= n) {\n                if (i % 2 == 0) {\n\
    \                    list = list :+ (1 + i / 2)\n                } else {\n  \
    \                  list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n\
    \                }\n                i += 1\n            }\n        }\n       \
    \ list\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri(tmpvjvt3xvc.scala:37)\n\tat Problem$.main(tmpvjvt3xvc.scala:45)\n\
    \tat Problem.main(tmpvjvt3xvc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1l, 3l, 2l)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpg3chnfds.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpg3chnfds.scala:28)\n\
    \tat Problem$.main(tmpg3chnfds.scala:32)\n\tat Problem.main(tmpg3chnfds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        result = result :+ 1\n        result\
    \ = result :+ 3\n        result = result :+ 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ (1 + i\
    \ / 2)\n            } else {\n                result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpbhomnscr.scala:29)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpbhomnscr.scala:31)\n\
    \tat Problem$.main(tmpbhomnscr.scala:35)\n\tat Problem.main(tmpbhomnscr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        var triList = new ListBuffer[Long]()\n \
    \       triList += 1\n        triList += 3\n        triList += 2\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n                triList\
    \ += 1 + i / 2\n            } else {\n                triList += triList(i - 1)\
    \ + triList(i - 2) + triList(i + 1)\n            }\n        }\n        triList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp5bxjsdbc.scala:31)\n\tat Problem$.tri$$anonfun$adapted$1(tmp5bxjsdbc.scala:33)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp5bxjsdbc.scala:33)\n\
    \tat Problem$.main(tmp5bxjsdbc.scala:37)\n\tat Problem.main(tmp5bxjsdbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n   \
    \         else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        tri(n, List(1l))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmp37kmtc1x.scala:24)\n\tat Problem$.tri(tmp37kmtc1x.scala:26)\n\
    \tat Problem$.main(tmp37kmtc1x.scala:29)\n\tat Problem.main(tmp37kmtc1x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of Long\n \
    \       val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n       \
    \ l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpzvc5bgqj.scala:30)\n\tat Problem$.tri$$anonfun$adapted$1(tmpzvc5bgqj.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpzvc5bgqj.scala:31)\n\
    \tat Problem$.main(tmpzvc5bgqj.scala:35)\n\tat Problem.main(tmpzvc5bgqj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val cache = new Array[Long](n.toInt + 1)\n        def tri(n : Long) :\
    \ Long = {\n            if (n == 1) 3\n            else if (n == 2) 1\n      \
    \      else if (n == 3) 2\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n\
    \            else {\n                val result = if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n\
    \                result\n            }\n        }\n        (1 to n.toInt).map(tri(_)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpluvltlwu.scala:36)\n\tat Problem.main(tmpluvltlwu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n    \
    \    cache(1) = 3\n        cache(2) = 2\n        def tri(n : Long) : Long = {\n\
    \            if (n == 0) return 1\n            if (n == 1) return 3\n        \
    \    if (n == 2) return 2\n            if (cache(n.toInt) != 0) return cache(n.toInt)\n\
    \            if (n % 2 == 0) {\n                cache(n.toInt) = 1 + n / 2\n \
    \               return cache(n.toInt)\n            }\n            cache(n.toInt)\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            return cache(n.toInt)\n\
    \        }\n        (0 to n.toInt).map(x => tri(x)).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.tri$1(tmprjq732a2.scala:29)\n\tat Problem$.tri$1(tmprjq732a2.scala:34)\n\
    \tat Problem$.tri$$anonfun$1(tmprjq732a2.scala:37)\n\tat scala.runtime.java8.JFunction1$mcJI$sp.apply(JFunction1$mcJI$sp.scala:17)\n\
    \tat scala.collection.immutable.Range.map(Range.scala:59)\n\tat Problem$.tri(tmprjq732a2.scala:37)\n\
    \tat Problem$.main(tmprjq732a2.scala:40)\n\tat Problem.main(tmprjq732a2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpa_d6vzzo.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpa_d6vzzo.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpa_d6vzzo.scala:30)\n\
    \tat Problem$.main(tmpa_d6vzzo.scala:34)\n\tat Problem.main(tmpa_d6vzzo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = ListBuffer[Long]()\n        l += 1\n \
    \       l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n          \
    \  if (i % 2 == 0) {\n                l += 1 + i / 2\n            } else {\n \
    \               l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpdidscg0m.scala:31)\n\tat Problem$.tri$$anonfun$adapted$1(tmpdidscg0m.scala:33)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpdidscg0m.scala:33)\n\
    \tat Problem$.main(tmpdidscg0m.scala:37)\n\tat Problem.main(tmpdidscg0m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        var a = 1l\n        var b = 3l\n      \
    \  var c = 2l\n        l = l :+ a\n        l = l :+ b\n        l = l :+ c\n  \
    \      for (i <- 3 to n.toInt) {\n            var d = if (i % 2 == 0) 1 + i /\
    \ 2 else a + b + c\n            l = l :+ d\n            a = b\n            b =\
    \ c\n            c = d\n        }\n        return l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1o5z7gxm.scala:30:21\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            l = l :+ d\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ Found:    (d : AnyVal)\n\e[31m   |\e[0m                     Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1o5z7gxm.scala:33:16\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            c = d\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Found:    (d\
    \ : AnyVal)\n\e[31m   |\e[0m                Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, a : Long, b : Long, c : Long) : List[Long] = {\n  \
    \          if (n == 0) List(a)\n            else if (n == 1) List(a, b)\n    \
    \        else if (n == 2) List(a, b, c)\n            else if (n % 2 == 0) a ::\
    \ tri(n - 1, b, c, a + b + c)\n            else a :: tri(n - 1, b, c, b + c)\n\
    \        }\n        tri(n, 1, 3, 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_j8y7wx.scala:31)\n\tat Problem.main(tmpj_j8y7wx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpudyuahmm.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpudyuahmm.scala:28)\n\
    \tat Problem$.main(tmpudyuahmm.scala:32)\n\tat Problem.main(tmpudyuahmm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp7i7axg56.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp7i7axg56.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp7i7axg56.scala:28)\n\
    \tat Problem$.main(tmp7i7axg56.scala:32)\n\tat Problem.main(tmp7i7axg56.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def triRec(n : Long, l : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) l\n            else if (n == 1) triRec(n - 1, l :+ 3)\n           \
    \ else if (n % 2 == 0) triRec(n - 1, l :+ (1 + n / 2))\n            else triRec(n\
    \ - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n\
    \        triRec(n, List())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.triRec$1(tmpldggxayg.scala:25)\n\tat Problem$.tri(tmpldggxayg.scala:27)\n\
    \tat Problem$.main(tmpldggxayg.scala:30)\n\tat Problem.main(tmpldggxayg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        if (n > 1) result += 2\n        for (i <- 3 to n.toInt) {\n  \
    \          if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp0te86amx.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp0te86amx.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp0te86amx.scala:28)\n\
    \tat Problem$.main(tmp0te86amx.scala:32)\n\tat Problem.main(tmp0te86amx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        l = l :+ 1\n        l = l :+ 3\n      \
    \  l = l :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                l = l :+ (1 + i / 2)\n            } else {\n            \
    \    l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n   \
    \     return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp_1mjvmzl.scala:29)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp_1mjvmzl.scala:31)\n\
    \tat Problem$.main(tmp_1mjvmzl.scala:35)\n\tat Problem.main(tmp_1mjvmzl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def triHelper(n : Long, l : List[Long]) : List[Long] = {\n          \
    \  if (n == 0) l\n            else {\n                val last = l.last\n    \
    \            val secondLast = l(l.length - 2)\n                val thirdLast =\
    \ l(l.length - 3)\n                val newLast = if (last % 2 == 0) 1 + last /\
    \ 2 else thirdLast + secondLast + last\n                triHelper(n - 1, l :+\
    \ newLast)\n            }\n        }\n        triHelper(n, List(1, 3, 2))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1xqs4hs3.scala:34)\n\tat Problem.main(tmp1xqs4hs3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp7new4oae.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp7new4oae.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp7new4oae.scala:28)\n\
    \tat Problem$.main(tmp7new4oae.scala:32)\n\tat Problem.main(tmp7new4oae.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1l, 3l, 2l)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpg3chnfds.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpg3chnfds.scala:28)\n\
    \tat Problem$.main(tmpg3chnfds.scala:32)\n\tat Problem.main(tmpg3chnfds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = ListBuffer[Long]()\n        l += 1\n \
    \       l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n          \
    \  if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2)\
    \ + l(i + 1))\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp9g3heyq0.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmp9g3heyq0.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp9g3heyq0.scala:30)\n\
    \tat Problem$.main(tmp9g3heyq0.scala:34)\n\tat Problem.main(tmp9g3heyq0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n          \
    \  else if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i /\
    \ 2) :: l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n       \
    \ l.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt31dnelg.scala:32)\n\tat Problem.main(tmpt31dnelg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        val dp = Array.fill(n.toInt + 1)(0l)\n\
    \        dp(0) = 1\n        dp(1) = 3\n        dp(2) = 2\n        for (i <- 3\
    \ to n.toInt) {\n            if (i % 2 == 0) dp(i) = 1 + i / 2\n            else\
    \ dp(i) = dp(i - 1) + dp(i - 2) + dp(i + 1)\n        }\n        dp.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.tri$$anonfun$1(tmpp7ct01ez.scala:28)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpp7ct01ez.scala:29)\n\
    \tat Problem$.main(tmpp7ct01ez.scala:33)\n\tat Problem.main(tmpp7ct01ez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwzvvo9d_.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwzvvo9d_.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwzvvo9d_.scala:28)\n\
    \tat Problem$.main(tmpwzvvo9d_.scala:32)\n\tat Problem.main(tmpwzvvo9d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        l = l :+ 1\n   \
    \     l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        return l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpb8c8t2ni.scala:29)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpb8c8t2ni.scala:30)\n\
    \tat Problem$.main(tmpb8c8t2ni.scala:34)\n\tat Problem.main(tmpb8c8t2ni.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = ListBuffer[Long]()\n        var a = 1l\n        var b =\
    \ 3l\n        var c = 2l\n        for (i <- 0 to n.toInt) {\n            if (i\
    \ == 0) result += a\n            else if (i == 1) result += b\n            else\
    \ if (i == 2) result += c\n            else {\n                val d = a + b +\
    \ c\n                result += d\n                a = b\n                b = c\n\
    \                c = d\n            }\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3d56dv8.scala:40)\n\tat Problem.main(tmpw3d56dv8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+\
    \ 3\n            else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpc5f4flil.scala:29)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpc5f4flil.scala:30)\n\
    \tat Problem$.main(tmpc5f4flil.scala:34)\n\tat Problem.main(tmpc5f4flil.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def triHelper(n : Long, l : List[Long]) : List[Long] = {\n          \
    \  if (n == 0) l\n            else if (n % 2 == 0) triHelper(n - 1, l :+ (1 +\
    \ n / 2))\n            else triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length\
    \ - 2) + l(l.length - 3)))\n        }\n        triHelper(n, List(1l))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.triHelper$1(tmpu3s3_cxa.scala:24)\n\tat Problem$.tri(tmpu3s3_cxa.scala:26)\n\
    \tat Problem$.main(tmpu3s3_cxa.scala:29)\n\tat Problem.main(tmpu3s3_cxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        // For example:\n        //\
    \ >>> tri((3l))\n        // (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n\
    \        var l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp859c_yog.scala:33)\n\tat Problem$.tri$$anonfun$adapted$1(tmp859c_yog.scala:34)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp859c_yog.scala:34)\n\
    \tat Problem$.main(tmp859c_yog.scala:38)\n\tat Problem.main(tmp859c_yog.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        result = result :+ 1\n        result\
    \ = result :+ 3\n        result = result :+ 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp7p7d6dru.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp7p7d6dru.scala:28)\n\
    \tat Problem$.main(tmp7p7d6dru.scala:32)\n\tat Problem.main(tmp7p7d6dru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You may also define new functions\
    \ as you wish\n        // to solve this problem\n        var list = List[Long]()\n\
    \        var i = 0\n        while (i <= n) {\n            if (i == 0) {\n    \
    \            list = list :+ 1\n            } else if (i == 1) {\n            \
    \    list = list :+ 3\n            } else if (i == 2) {\n                list\
    \ = list :+ 2\n            } else {\n                if (i % 2 == 0) {\n     \
    \               list = list :+ (1 + i / 2)\n                } else {\n       \
    \             list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n     \
    \           }\n            }\n            i += 1\n        }\n        list\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri(tmp6ejxqzgd.scala:37)\n\tat Problem$.main(tmp6ejxqzgd.scala:45)\n\
    \tat Problem.main(tmp6ejxqzgd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n   \
    \         else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        tri(n, List[Long](1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpem41zl7o.scala:24)\n\tat Problem$.tri(tmpem41zl7o.scala:26)\n\
    \tat Problem$.main(tmpem41zl7o.scala:29)\n\tat Problem.main(tmpem41zl7o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        var a = 1l\n        var b = 3l\n \
    \       var c = 2l\n        result = result :+ a\n        result = result :+ b\n\
    \        result = result :+ c\n        for (i <- 4l to n) {\n            if (i\
    \ % 2 == 0) {\n                result = result :+ (1 + i / 2)\n            } else\
    \ {\n                result = result :+ (result(result.length - 1) + result(result.length\
    \ - 2) + result(result.length - 3))\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6go5k6pr.scala:38)\n\tat Problem.main(tmp6go5k6pr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def triHelper(n : Long, l : List[Long]) : List[Long] = {\n          \
    \  if (n == 0) l\n            else if (n % 2 == 0) triHelper(n - 1, l :+ (1 +\
    \ n / 2))\n            else triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length\
    \ - 2) + l(l.length - 3)))\n        }\n        triHelper(n, List[Long](1))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.triHelper$1(tmp6okypxgc.scala:24)\n\tat Problem$.tri(tmp6okypxgc.scala:26)\n\
    \tat Problem$.main(tmp6okypxgc.scala:29)\n\tat Problem.main(tmp6okypxgc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwzvvo9d_.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwzvvo9d_.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwzvvo9d_.scala:28)\n\
    \tat Problem$.main(tmpwzvvo9d_.scala:32)\n\tat Problem.main(tmpwzvvo9d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        else if (n == 1) return List(1, 3)\n\
    \        else if (n == 2) return List(1, 3, 2)\n        else {\n            var\
    \ result = List(1, 3, 2)\n            var i = 3\n            while (i <= n) {\n\
    \                if (i % 2 == 0) result = result :+ (1 + i / 2)\n            \
    \    else result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n\
    \                i += 1\n            }\n            return result\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppdn1pkiw.scala:32:19\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mreturn\e[0m\
    \ result\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Found:    (result : List[Int])\n\e[31m   |\e[0m          \
    \         Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpjcqx09wj.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpjcqx09wj.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpjcqx09wj.scala:28)\n\
    \tat Problem$.main(tmpjcqx09wj.scala:32)\n\tat Problem.main(tmpjcqx09wj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp5gbihhj.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (result : List[Int])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        l = l :+ 1\n   \
    \     l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n           \
    \ } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \      }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpp8dh47pm.scala:31)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpp8dh47pm.scala:33)\n\
    \tat Problem$.main(tmpp8dh47pm.scala:37)\n\tat Problem.main(tmpp8dh47pm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def triRec(n : Long, l : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) l\n            else if (n == 1) triRec(n - 1, 3 :: l)\n           \
    \ else if (n % 2 == 0) triRec(n - 1, (1 + n / 2) :: l)\n            else triRec(n\
    \ - 1, (l(0) + l(1) + l(2)) :: l)\n        }\n        triRec(n, List[Long]()).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.triRec$1(tmp7d6_rav6.scala:25)\n\tat Problem$.tri(tmp7d6_rav6.scala:27)\n\
    \tat Problem$.main(tmp7d6_rav6.scala:30)\n\tat Problem.main(tmp7d6_rav6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, acc : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) acc\n            else {\n                val newAcc = if (n % 2 ==\
    \ 0) acc :+ (1 + n / 2)\n                else acc :+ (acc(acc.length - 1) + acc(acc.length\
    \ - 2) + acc(acc.length - 3))\n                tri(n - 1, newAcc)\n          \
    \  }\n        }\n        tri(n, List(1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpsog8mvwy.scala:25)\n\tat Problem$.tri(tmpsog8mvwy.scala:29)\n\
    \tat Problem$.main(tmpsog8mvwy.scala:32)\n\tat Problem.main(tmpsog8mvwy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ 1 + i / 2\n            else l += l(i - 1) + l(i - 2) + l(i + 1)\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpkuxw1zi9.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpkuxw1zi9.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpkuxw1zi9.scala:28)\n\
    \tat Problem$.main(tmpkuxw1zi9.scala:32)\n\tat Problem.main(tmpkuxw1zi9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var list = List(1, 3, 2)\n \
    \       for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) list = list :+\
    \ (1 + i / 2)\n            else list = list :+ (list(i - 1) + list(i - 2) + list(i\
    \ + 1))\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc8infrt1.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m list\n\
    \e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (list : List[Int])\n\e[31m   |\e[0m               Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794470
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var a = 1l\n        var b = 3l\n        var c = 2l\n        var d = 0l\n\
    \        var result = List[Long]()\n        result = result :+ a\n        result\
    \ = result :+ b\n        result = result :+ c\n        for (i <- 3l to n) {\n\
    \            if (i % 2 == 0) {\n                d = 1 + i / 2\n            } else\
    \ {\n                d = a + b + c\n            }\n            a = b\n       \
    \     b = c\n            c = d\n            result = result :+ d\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkcgy_02.scala:43)\n\tat Problem.main(tmpgkcgy_02.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        var a = 1l\n        var b = 3l\n \
    \       var c = 2l\n        var d = 0l\n        for (i <- 0 to n.toInt) {\n  \
    \          if (i == 0) result = result :+ a\n            else if (i == 1) result\
    \ = result :+ b\n            else if (i == 2) result = result :+ c\n         \
    \   else {\n                d = a + b + c\n                a = b\n           \
    \     b = c\n                c = d\n                result = result :+ d\n   \
    \         }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv475hft2.scala:41)\n\tat Problem.main(tmpv475hft2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long\
    \ = {\n            if (cache.contains(n)) cache(n)\n            else {\n     \
    \           val result = if (n == 1) 3\n                else if (n % 2 == 0) 1\
    \ + n / 2\n                else tri(n - 1) + tri(n - 2) + tri(n + 1)\n       \
    \         cache(n) = result\n                result\n            }\n        }\n\
    \        (1 to n.toInt).map(tri(_)).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2igpvc2q.scala:35)\n\tat Problem.main(tmp2igpvc2q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, acc : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) acc\n            else if (n % 2 == 0) tri(n - 1, acc :+ (1 + n / 2))\n\
    \            else tri(n - 1, acc :+ (acc(acc.length - 1) + acc(acc.length - 2)\
    \ + acc(acc.length - 3)))\n        }\n        tri(n, List(1))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpluuti2v1.scala:24)\n\tat Problem$.tri(tmpluuti2v1.scala:26)\n\
    \tat Problem$.main(tmpluuti2v1.scala:29)\n\tat Problem.main(tmpluuti2v1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        l = l :+ 1\n   \
    \     l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n           \
    \ } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \      }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpp8dh47pm.scala:31)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpp8dh47pm.scala:33)\n\
    \tat Problem$.main(tmpp8dh47pm.scala:37)\n\tat Problem.main(tmpp8dh47pm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        var i = 3\n        while (i <= n)\
    \ {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 1) + result(i - 2) + result(i + 1))\n            i += 1\n   \
    \     }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri(tmpvip37o5z.scala:30)\n\tat Problem$.main(tmpvip37o5z.scala:36)\n\
    \tat Problem.main(tmpvip37o5z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+\
    \ 3\n            else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpc5f4flil.scala:29)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpc5f4flil.scala:30)\n\
    \tat Problem$.main(tmpc5f4flil.scala:34)\n\tat Problem.main(tmpc5f4flil.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpudyuahmm.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpudyuahmm.scala:28)\n\
    \tat Problem$.main(tmpudyuahmm.scala:32)\n\tat Problem.main(tmpudyuahmm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp5_s7ep5c.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp5_s7ep5c.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp5_s7ep5c.scala:28)\n\
    \tat Problem$.main(tmp5_s7ep5c.scala:32)\n\tat Problem.main(tmp5_s7ep5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = ListBuffer[Long]()\n        l += 1\n \
    \       l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n          \
    \  if (i % 2 == 0) {\n                l += 1 + i / 2\n            } else {\n \
    \               l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpdidscg0m.scala:31)\n\tat Problem$.tri$$anonfun$adapted$1(tmpdidscg0m.scala:33)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpdidscg0m.scala:33)\n\
    \tat Problem$.main(tmpdidscg0m.scala:37)\n\tat Problem.main(tmpdidscg0m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = List(1)\n            else if (i == 1) l = List(1, 3)\n     \
    \       else if (i == 2) l = List(1, 3, 2)\n            else {\n             \
    \   if (i % 2 == 0) l = l :+ (1 + i / 2)\n                else l = l :+ (l(i -\
    \ 1) + l(i - 2) + l(i + 1))\n            }\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpm6ik2rt3.scala:28)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpm6ik2rt3.scala:30)\n\
    \tat Problem$.main(tmpm6ik2rt3.scala:34)\n\tat Problem.main(tmpm6ik2rt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+\
    \ 1\n            else if (i == 3) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (i / 2)\n            else l = l :+ (l(i - 2) + l(i - 3) + l(i - 1))\n\
    \        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo8emwz2n.scala:34)\n\tat Problem.main(tmpo8emwz2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the sequence\n        // You have to return a list of 'n' + 1 elements\n\
    \        // You can use the helper functions defined below\n        // You can\
    \ use the 'isEven' function to check if a number is even\n        // You can use\
    \ the 'isOdd' function to check if a number is odd\n        // You can use the\
    \ 'divide' function to divide a number by 2\n        // You can use the 'multiply'\
    \ function to multiply a number by 2\n        // You can use the 'add' function\
    \ to add two numbers\n        // You can use the 'subtract' function to subtract\
    \ two numbers\n        // You can use the 'mod' function to find the modulus of\
    \ two numbers\n        // You can use the 'pow' function to find the power of\
    \ a number\n        // You can use the 'log' function to find the logarithm of\
    \ a number\n        // You can use the 'sqrt' function to find the square root\
    \ of a number\n        // You can use the 'floor' function to find the floor of\
    \ a number\n        // You can use the 'ceil' function to find the ceiling of\
    \ a number\n        // You can use the 'abs' function to find the absolute value\
    \ of a number\n        // You can use the 'max' function to find the maximum of\
    \ two numbers\n        // You can use the 'min' function to find the minimum of\
    \ two numbers\n        // You can use the 'round' function to round a number\n\
    \        // You can use the 'truncate' function to truncate a number\n       \
    \ // You can use the 'signum' function to find the sign of a number\n        //\
    \ You can use the 'isPositive' function to check if a number is positive\n   \
    \     // You can use the 'isNegative' function to check if a number is negative\n\
    \        // You can use the 'isZero' function to check if a number is zero\n \
    \       // You can use the 'isNonZero' function to check if a number is non-zero\n\
    \        // You can use the 'isInfinity' function to check if a number is infinity\n\
    \        // You can use the 'isFinite' function to check if a number is finite\n\
    \        // You can use the 'isNaN\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0jg22sqs.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mtri\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                     Found:    Unit\n\e[31m   |\e[0m        \
    \                             Required: List[Long]\n\e[31m21 |\e[0m        \e\
    [34m// Fill up this function body\e[0m\n\e[31m22 |\e[0m        \e[34m// 'n' is\
    \ the number of elements in the sequence\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ You have to return a list of 'n' + 1 elements\e[0m\n\e[31m24 |\e[0m        \e\
    [34m// You can use the helper functions defined below\e[0m\n\e[31m25 |\e[0m  \
    \      \e[34m// You can use the 'isEven' function to check if a number is even\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// You can use the 'isOdd' function to check\
    \ if a number is odd\e[0m\n\e[31m27 |\e[0m        \e[34m// You can use the 'divide'\
    \ function to divide a number by 2\e[0m\n\e[31m28 |\e[0m        \e[34m// You can\
    \ use the 'multiply' function to multiply a number by 2\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// You can use the 'add' function to add two numbers\e[0m\n\e[31m30\
    \ |\e[0m        \e[34m// You can use the 'subtract' function to subtract two numbers\e\
    [0m\n\e[31m31 |\e[0m        \e[34m// You can use the 'mod' function to find the\
    \ modulus of two numbers\e[0m\n\e[31m32 |\e[0m        \e[34m// You can use the\
    \ 'pow' function to find the power of a number\e[0m\n\e[31m33 |\e[0m        \e\
    [34m// You can use the 'log' function to find the logarithm of a number\e[0m\n\
    \e[31m34 |\e[0m        \e[34m// You can use the 'sqrt' function to find the square\
    \ root of a number\e[0m\n\e[31m35 |\e[0m        \e[34m// You can use the 'floor'\
    \ function to find the floor of a number\e[0m\n\e[31m36 |\e[0m        \e[34m//\
    \ You can use the 'ceil' function to find the ceiling of a number\e[0m\n\e[31m37\
    \ |\e[0m        \e[34m// You can use the 'abs' function to find the absolute value\
    \ of a number\e[0m\n\e[31m38 |\e[0m        \e[34m// You can use the 'max' function\
    \ to find the maximum of two numbers\e[0m\n\e[31m39 |"
  stdout: ''
  timestamp: 1659794691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwzvvo9d_.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwzvvo9d_.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwzvvo9d_.scala:28)\n\
    \tat Problem$.main(tmpwzvvo9d_.scala:32)\n\tat Problem.main(tmpwzvvo9d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        var a = 1L\n   \
    \     var b = 3L\n        var c = 2L\n        l = l :+ a\n        l = l :+ b\n\
    \        l = l :+ c\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                var d = 1 + i / 2\n                l = l :+ d\n   \
    \         }\n            else {\n                var d = a + b + c\n         \
    \       l = l :+ d\n                a = b\n                b = c\n           \
    \     c = d\n            }\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfco9sogx.scala:46)\n\tat Problem.main(tmpfco9sogx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp5_s7ep5c.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp5_s7ep5c.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp5_s7ep5c.scala:28)\n\
    \tat Problem$.main(tmp5_s7ep5c.scala:32)\n\tat Problem.main(tmp5_s7ep5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpudyuahmm.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpudyuahmm.scala:28)\n\
    \tat Problem$.main(tmpudyuahmm.scala:32)\n\tat Problem.main(tmpudyuahmm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var a = 1l\n        var b = 3l\n        var c = 2l\n        var d = 0l\n\
    \        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i == 1) {\n                l = l :+ a\n            } else if (i == 2) {\n\
    \                l = l :+ b\n            } else if (i == 3) {\n              \
    \  l = l :+ c\n            } else {\n                d = a + b + c\n         \
    \       a = b\n                b = c\n                c = d\n                l\
    \ = l :+ d\n            }\n        }\n        return l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprr9r9_ic.scala:44)\n\tat Problem.main(tmprr9r9_ic.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        val result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += 1 + i / 2\n      \
    \      else result += result(i - 1) + result(i - 2) + result(i + 1)\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpzmb9ug83.scala:30)\n\tat Problem$.tri$$anonfun$adapted$1(tmpzmb9ug83.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpzmb9ug83.scala:31)\n\
    \tat Problem$.main(tmpzmb9ug83.scala:35)\n\tat Problem.main(tmpzmb9ug83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n      \
    \      if (i == 0) result = result :+ 1\n            else if (i == 1) result =\
    \ result :+ 3\n            else if (i == 2) result = result :+ 2\n           \
    \ else if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp3ww59pdq.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp3ww59pdq.scala:28)\n\
    \tat Problem$.main(tmp3ww59pdq.scala:32)\n\tat Problem.main(tmp3ww59pdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val cache = new Array[Long](n.toInt + 1)\n        def tri(n : Long) :\
    \ Long = {\n            if (n == 1) 3\n            else if (n == 2) 1\n      \
    \      else if (n == 3) 2\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n\
    \            else {\n                val result = if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n\
    \                result\n            }\n        }\n        (1 to n.toInt).map(tri(_)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpluvltlwu.scala:36)\n\tat Problem.main(tmpluvltlwu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmptls32aer.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmptls32aer.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmptls32aer.scala:30)\n\
    \tat Problem$.main(tmptls32aer.scala:34)\n\tat Problem.main(tmptls32aer.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        var a = 1l\n        var b = 3l\n\
    \        var c = 2l\n        var result = List(a, b, c)\n        for (i <- 3l\
    \ to n) {\n            var d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n    \
    \        result = result :+ d\n            a = b\n            b = c\n        \
    \    c = d\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj2flsus.scala:36)\n\tat Problem.main(tmptj2flsus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpudyuahmm.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpudyuahmm.scala:28)\n\
    \tat Problem$.main(tmpudyuahmm.scala:32)\n\tat Problem.main(tmpudyuahmm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+\
    \ 1\n            else if (i == 3) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 2) + l(i - 3) + l(i -\
    \ 1))\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51vw2dp2.scala:34)\n\tat Problem.main(tmp51vw2dp2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the sequence\n        // You have to return a list of 'n' + 1 elements\n\
    \        // The first element of the list should be 1\n        // The second element\
    \ of the list should be 3\n        // The third element of the list should be\
    \ 2\n        // The fourth element of the list should be 8\n        // The fifth\
    \ element of the list should be 11\n        // The sixth element of the list should\
    \ be 19\n        // and so on...\n        var l = ListBuffer[Long]()\n       \
    \ l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                l += 1 + i / 2\n            }\
    \ else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n\
    \        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpaq7phy6v.scala:39)\n\tat Problem$.tri$$anonfun$adapted$1(tmpaq7phy6v.scala:41)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpaq7phy6v.scala:41)\n\
    \tat Problem$.main(tmpaq7phy6v.scala:45)\n\tat Problem.main(tmpaq7phy6v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += 1 + i / 2\n            } else {\n\
    \                result += result(i - 1) + result(i - 2) + result(i + 1)\n   \
    \         }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp04h8soqp.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmp04h8soqp.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp04h8soqp.scala:31)\n\
    \tat Problem$.main(tmp04h8soqp.scala:35)\n\tat Problem.main(tmp04h8soqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        var a = 1l\n        var b = 3l\n \
    \       var c = 2l\n        for (i <- 0 to n.toInt) {\n            if (i == 0)\
    \ result = result :+ a\n            else if (i == 1) result = result :+ b\n  \
    \          else if (i == 2) result = result :+ c\n            else {\n       \
    \         if (i % 2 == 0) {\n                    result = result :+ (1 + i / 2)\n\
    \                } else {\n                    result = result :+ (result(i -\
    \ 1) + result(i - 2) + result(i + 1))\n                }\n            }\n    \
    \    }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpq_xykli9.scala:33)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpq_xykli9.scala:36)\n\
    \tat Problem$.main(tmpq_xykli9.scala:40)\n\tat Problem.main(tmpq_xykli9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n      \
    \      if (i == 0) result = result :+ 1\n            else if (i == 1) result =\
    \ result :+ 3\n            else if (i == 2) result = result :+ 2\n           \
    \ else if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp3ww59pdq.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp3ww59pdq.scala:28)\n\
    \tat Problem$.main(tmp3ww59pdq.scala:32)\n\tat Problem.main(tmp3ww59pdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n          \
    \  else if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i /\
    \ 2) :: l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n       \
    \ l.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt31dnelg.scala:32)\n\tat Problem.main(tmpt31dnelg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += (1 + i / 2)\n            } else {\n\
    \                result += (result(i - 1) + result(i - 2) + result(i + 1))\n \
    \           }\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpyw37n07n.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpyw37n07n.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpyw37n07n.scala:31)\n\
    \tat Problem$.main(tmpyw37n07n.scala:35)\n\tat Problem.main(tmpyw37n07n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var list = new ListBuffer[Long]\n        list\
    \ += 1\n        list += 3\n        list += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list += (1 + i / 2)\n    \
    \        } else {\n                list += (list(i - 1) + list(i - 2) + list(i\
    \ + 1))\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpbybbknaf.scala:31)\n\tat Problem$.tri$$anonfun$adapted$1(tmpbybbknaf.scala:33)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpbybbknaf.scala:33)\n\
    \tat Problem$.main(tmpbybbknaf.scala:37)\n\tat Problem.main(tmpbybbknaf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpjcqx09wj.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpjcqx09wj.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpjcqx09wj.scala:28)\n\
    \tat Problem$.main(tmpjcqx09wj.scala:32)\n\tat Problem.main(tmpjcqx09wj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpudyuahmm.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpudyuahmm.scala:28)\n\
    \tat Problem$.main(tmpudyuahmm.scala:32)\n\tat Problem.main(tmpudyuahmm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def triHelper(n : Long, l : List[Long]) : List[Long] = {\n          \
    \  if (n == 0) l\n            else if (n == 1) triHelper(n - 1, l :+ 3)\n    \
    \        else if (n == 2) triHelper(n - 1, l :+ 2)\n            else if (n % 2\
    \ == 0) triHelper(n - 1, l :+ (1 + n / 2))\n            else triHelper(n - 1,\
    \ l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n   \
    \     triHelper(n, List())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.triHelper$1(tmpy1l_h0aq.scala:26)\n\tat Problem$.tri(tmpy1l_h0aq.scala:28)\n\
    \tat Problem$.main(tmpy1l_h0aq.scala:31)\n\tat Problem.main(tmpy1l_h0aq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n   \
    \             l += (1 + i / 2)\n            } else {\n                l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n        l.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpdeyrzfat.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpdeyrzfat.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpdeyrzfat.scala:31)\n\
    \tat Problem$.main(tmpdeyrzfat.scala:35)\n\tat Problem.main(tmpdeyrzfat.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp5gbihhj.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (result : List[Int])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri_rec(n : Long, l : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) l\n            else if (n == 1) tri_rec(n - 1, 3 :: l)\n          \
    \  else if (n % 2 == 0) tri_rec(n - 1, 1 + n / 2 :: l)\n            else tri_rec(n\
    \ - 1, l.head + l.tail.head + l.tail.tail.head :: l)\n        }\n        tri_rec(n,\
    \ List()).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.tri_rec$1(tmpcua80962.scala:25)\n\
    \tat Problem$.tri(tmpcua80962.scala:27)\n\tat Problem$.main(tmpcua80962.scala:30)\n\
    \tat Problem.main(tmpcua80962.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n\
    \        var i = 3\n        while (i <= n) {\n            if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp4z620cc.scala:31:15\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (result : List[Int])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val cache = new Array[Long](n.toInt + 1)\n        def tri(n : Long) :\
    \ Long = {\n            if (n == 1) 3\n            else if (n == 2) 1\n      \
    \      else if (n == 3) 2\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n\
    \            else {\n                val result = if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n\
    \                result\n            }\n        }\n        (1 to n.toInt).map(tri(_)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpluvltlwu.scala:36)\n\tat Problem.main(tmpluvltlwu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var a = 1l\n        var b = 3l\n        var c = 2l\n        var d = 0l\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) {\n                result = result :+ a\n            } else\
    \ if (i == 2) {\n                result = result :+ b\n            } else if (i\
    \ == 3) {\n                result = result :+ c\n            } else {\n      \
    \          d = c + b + a\n                a = b\n                b = c\n     \
    \           c = d\n                result = result :+ d\n            }\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptcun2dl4.scala:44)\n\tat Problem.main(tmptcun2dl4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        result = result :+ 1\n        if (n\
    \ == 0) return result\n        result = result :+ 3\n        if (n == 1) return\
    \ result\n        result = result :+ 2\n        if (n == 2) return result\n  \
    \      for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpgvhg794m.scala:30)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpgvhg794m.scala:31)\n\
    \tat Problem$.main(tmpgvhg794m.scala:35)\n\tat Problem.main(tmpgvhg794m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp4un9hnwj.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp4un9hnwj.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp4un9hnwj.scala:28)\n\
    \tat Problem$.main(tmp4un9hnwj.scala:32)\n\tat Problem.main(tmp4un9hnwj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n          \
    \  else if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i /\
    \ 2) :: l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n       \
    \ l.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt31dnelg.scala:32)\n\tat Problem.main(tmpt31dnelg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var a = 1l\n        var b = 3l\n        var c = 2l\n        var d = 0l\n\
    \        var result = List[Long]()\n        result = result :+ a\n        result\
    \ = result :+ b\n        result = result :+ c\n        for (i <- 3l to n) {\n\
    \            if (i % 2 == 0) {\n                d = 1 + i / 2\n            } else\
    \ {\n                d = a + b + c\n            }\n            a = b\n       \
    \     b = c\n            c = d\n            result = result :+ d\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkcgy_02.scala:43)\n\tat Problem.main(tmpgkcgy_02.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var a = 1l\n        var b =\
    \ 3l\n        var c = 2l\n        var d = 0l\n        var result = List(1l, 3l,\
    \ 2l)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n    \
    \            d = 1 + i / 2\n            } else {\n                d = a + b +\
    \ c\n            }\n            a = b\n            b = c\n            c = d\n\
    \            result = result :+ d\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpywpy9l94.scala:43)\n\tat Problem.main(tmpywpy9l94.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ l = l :+ trii(i)\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl6l_heu5.scala:23:21 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            l = l :+ trii(i)\n\e[31m\e[31m   |\e[0m \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ trii\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ 'n' + 1 elements of the Tribonacci sequence\n        // The first element of\
    \ the Tribonacci sequence is 1\n        // The second element of the Tribonacci\
    \ sequence is 3\n        // The third element of the Tribonacci sequence is 2\n\
    \        // The fourth element of the Tribonacci sequence is 8\n        // The\
    \ fifth element of the Tribonacci sequence is 11\n        // The sixth element\
    \ of the Tribonacci sequence is 19\n        // The seventh element of the Tribonacci\
    \ sequence is 30\n        // The eighth element of the Tribonacci sequence is\
    \ 50\n        // The ninth element of the Tribonacci sequence is 81\n        //\
    \ The tenth element of the Tribonacci sequence is 133\n        // The eleventh\
    \ element of the Tribonacci sequence is 214\n        // The twelfth element of\
    \ the Tribonacci sequence is 347\n        // The thirteenth element of the Tribonacci\
    \ sequence is 561\n        // The fourteenth element of the Tribonacci sequence\
    \ is 907\n        // The fifteenth element of the Tribonacci sequence is 1468\n\
    \        // The sixteenth element of the Tribonacci sequence is 2375\n       \
    \ // The seventeenth element of the Tribonacci sequence is 3843\n        // The\
    \ eighteenth element of the Tribonacci sequence is 6208\n        // The nineteenth\
    \ element of the Tribonacci sequence is 10051\n        // The twentieth element\
    \ of the Tribonacci sequence is 16299\n        // The twenty-first element of\
    \ the Tribonacci sequence is 26350\n        // The twenty-second element of the\
    \ Tribonacci sequence is 42649\n        // The twenty-third element of the Tribonacci\
    \ sequence is 68900\n        // The twenty-fourth element of the Tribonacci sequence\
    \ is 111849\n        // The twenty-fifth element of the Tribonacci sequence is\
    \ 180698\n        // The twenty-sixth element of the Tribonacci sequence is 292548\n\
    \        // The twenty-seventh element of the Tribonacci sequence is 473097\n\
    \        // The twenty-eighth element of the Tribonacci sequence is 765644\n \
    \       // The twenty-ninth element of the Tribonacci sequence is 1238641\n  \
    \      //\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi4kl82bn.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mtri\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                     Found:    Unit\n\e[31m   |\e[0m        \
    \                             Required: List[Long]\n\e[31m21 |\e[0m        \e\
    [34m// Fill up this function body\e[0m\n\e[31m22 |\e[0m        \e[34m// 'n' is\
    \ the number of elements in the Tribonacci sequence\e[0m\n\e[31m23 |\e[0m    \
    \    \e[34m// You have to return a list of the first 'n' + 1 elements of the Tribonacci\
    \ sequence\e[0m\n\e[31m24 |\e[0m        \e[34m// The first element of the Tribonacci\
    \ sequence is 1\e[0m\n\e[31m25 |\e[0m        \e[34m// The second element of the\
    \ Tribonacci sequence is 3\e[0m\n\e[31m26 |\e[0m        \e[34m// The third element\
    \ of the Tribonacci sequence is 2\e[0m\n\e[31m27 |\e[0m        \e[34m// The fourth\
    \ element of the Tribonacci sequence is 8\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ The fifth element of the Tribonacci sequence is 11\e[0m\n\e[31m29 |\e[0m   \
    \     \e[34m// The sixth element of the Tribonacci sequence is 19\e[0m\n\e[31m30\
    \ |\e[0m        \e[34m// The seventh element of the Tribonacci sequence is 30\e\
    [0m\n\e[31m31 |\e[0m        \e[34m// The eighth element of the Tribonacci sequence\
    \ is 50\e[0m\n\e[31m32 |\e[0m        \e[34m// The ninth element of the Tribonacci\
    \ sequence is 81\e[0m\n\e[31m33 |\e[0m        \e[34m// The tenth element of the\
    \ Tribonacci sequence is 133\e[0m\n\e[31m34 |\e[0m        \e[34m// The eleventh\
    \ element of the Tribonacci sequence is 214\e[0m\n\e[31m35 |\e[0m        \e[34m//\
    \ The twelfth element of the Tribonacci sequence is 347\e[0m\n\e[31m36 |\e[0m\
    \        \e[34m// The thirteenth element of the Tribonacci sequence is 561\e[0m\n\
    \e[31m37 |\e[0m        \e[34m// The fourteenth element of the Tribonacci sequence\
    \ is 907\e[0m\n\e[31m38 |\e[0m        \e[34m// The fifteenth element of the Tribonacci\
    \ sequence is 1468\e[0m\n\e[31m39 |\e[0m        \e[34m// The sixteenth element\
    \ of the Tribonacci sequence is 2375\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659794693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List[Long](1)\n        if (n == 1) return List[Long](1,\
    \ 3)\n        if (n == 2) return List[Long](1, 3, 2)\n        var l = List[Long](1,\
    \ 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l\
    \ :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \        }\n        return l\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpg634nd5g.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpg634nd5g.scala:28)\n\
    \tat Problem$.main(tmpg634nd5g.scala:32)\n\tat Problem.main(tmpg634nd5g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n == 1) tri(n - 1, List(3))\n            else\
    \ if (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n            else tri(n - 1, (l(0)\
    \ + l(1) + l(2)) :: l)\n        }\n        tri(n, List())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpqmz3v4d2.scala:25)\n\tat Problem$.tri(tmpqmz3v4d2.scala:27)\n\
    \tat Problem$.main(tmpqmz3v4d2.scala:30)\n\tat Problem.main(tmpqmz3v4d2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        for\
    \ (i <- 2 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n      \
    \      else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpa4e887g_.scala:26)\n\tat Problem$.tri$$anonfun$adapted$1(tmpa4e887g_.scala:27)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpa4e887g_.scala:27)\n\
    \tat Problem$.main(tmpa4e887g_.scala:31)\n\tat Problem.main(tmpa4e887g_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794460
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpdyywg5h1.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpdyywg5h1.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpdyywg5h1.scala:30)\n\
    \tat Problem$.main(tmpdyywg5h1.scala:34)\n\tat Problem.main(tmpdyywg5h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        l = l :+ 1\n   \
    \     l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n           \
    \ } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \      }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpp8dh47pm.scala:31)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpp8dh47pm.scala:33)\n\
    \tat Problem$.main(tmpp8dh47pm.scala:37)\n\tat Problem.main(tmpp8dh47pm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri_helper(n : Long, l : List[Long]) : List[Long] = {\n         \
    \   if (n == 0) l\n            else if (n % 2 == 0) tri_helper(n - 1, l :+ (1\
    \ + n / 2))\n            else tri_helper(n - 1, l :+ (l(l.length - 1) + l(l.length\
    \ - 2) + l(l.length - 3)))\n        }\n        tri_helper(n, List(1))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri_helper$1(tmpyfee4lf6.scala:24)\n\tat Problem$.tri(tmpyfee4lf6.scala:26)\n\
    \tat Problem$.main(tmpyfee4lf6.scala:29)\n\tat Problem.main(tmpyfee4lf6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n      \
    \      if (i == 0) result = result :+ 1\n            else if (i == 1) result =\
    \ result :+ 3\n            else if (i == 2) result = result :+ 2\n           \
    \ else if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp3ww59pdq.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp3ww59pdq.scala:28)\n\
    \tat Problem$.main(tmp3ww59pdq.scala:32)\n\tat Problem.main(tmp3ww59pdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        result = result :+ 1\n        result\
    \ = result :+ 3\n        result = result :+ 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp7p7d6dru.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp7p7d6dru.scala:28)\n\
    \tat Problem$.main(tmp7p7d6dru.scala:32)\n\tat Problem.main(tmp7p7d6dru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n      \
    \      if (i == 0) result = result :+ 1\n            else if (i == 1) result =\
    \ result :+ 3\n            else if (i == 2) result = result :+ 2\n           \
    \ else if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp3ww59pdq.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp3ww59pdq.scala:28)\n\
    \tat Problem$.main(tmp3ww59pdq.scala:32)\n\tat Problem.main(tmp3ww59pdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n    \
    \    cache(1) = 3\n        cache(2) = 2\n        def tri(n : Long) : Long = {\n\
    \            if (n == 0) return 1\n            if (n == 1) return 3\n        \
    \    if (n == 2) return 2\n            if (cache(n.toInt) != 0) return cache(n.toInt)\n\
    \            if (n % 2 == 0) {\n                cache(n.toInt) = 1 + n / 2\n \
    \               return cache(n.toInt)\n            }\n            cache(n.toInt)\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            return cache(n.toInt)\n\
    \        }\n        (0l to n).map(tri(_)).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.tri$1(tmpisgsfpvr.scala:29)\n\tat Problem$.tri$1(tmpisgsfpvr.scala:34)\n\
    \tat Problem$.tri$$anonfun$1(tmpisgsfpvr.scala:37)\n\tat scala.runtime.java8.JFunction1$mcJJ$sp.apply(JFunction1$mcJJ$sp.scala:17)\n\
    \tat scala.collection.StrictOptimizedIterableOps.map(StrictOptimizedIterableOps.scala:100)\n\
    \tat scala.collection.StrictOptimizedIterableOps.map$(StrictOptimizedIterableOps.scala:87)\n\
    \tat scala.collection.immutable.NumericRange.map(NumericRange.scala:40)\n\tat\
    \ Problem$.tri(tmpisgsfpvr.scala:37)\n\tat Problem$.main(tmpisgsfpvr.scala:40)\n\
    \tat Problem.main(tmpisgsfpvr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp1_yra28_.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmp1_yra28_.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp1_yra28_.scala:30)\n\
    \tat Problem$.main(tmp1_yra28_.scala:34)\n\tat Problem.main(tmp1_yra28_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        val l = new ListBuffer[Long]\n        l += 1\n\
    \        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i -\
    \ 2) + l(i + 1))\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmplz0dm52z.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmplz0dm52z.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmplz0dm52z.scala:30)\n\
    \tat Problem$.main(tmplz0dm52z.scala:34)\n\tat Problem.main(tmplz0dm52z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var list = new ListBuffer[Long]()\n        list\
    \ += 1\n        list += 3\n        list += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) list += (1 + i / 2)\n            else list +=\
    \ (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmph2h4bfje.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmph2h4bfje.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmph2h4bfje.scala:30)\n\
    \tat Problem$.main(tmph2h4bfje.scala:34)\n\tat Problem.main(tmph2h4bfje.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val result = new ArrayBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4 is out of bounds (min 0, max 2)\n\
    \tat scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:99)\n\tat scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:43)\n\
    \tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\
    \tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\tat Problem$.tri$$anonfun$1(tmpn54xcxq4.scala:27)\n\
    \tat Problem$.tri$$anonfun$adapted$1(tmpn54xcxq4.scala:28)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.tri(tmpn54xcxq4.scala:28)\n\tat Problem$.main(tmpn54xcxq4.scala:32)\n\
    \tat Problem.main(tmpn54xcxq4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val cache = new Array[Long](n.toInt + 1)\n        def tri(n : Long) :\
    \ Long = {\n            if (n == 1) 3\n            else if (n == 2) 2\n      \
    \      else if (n == 3) 8\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n\
    \            else {\n                val result = if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n\
    \                result\n            }\n        }\n        (1 to n.toInt).map(tri(_)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43iry3m5.scala:36)\n\tat Problem.main(tmp43iry3m5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n      \
    \      if (i == 0) result = result :+ 1\n            else if (i == 1) result =\
    \ result :+ 3\n            else if (i == 2) result = result :+ 2\n           \
    \ else if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp3ww59pdq.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp3ww59pdq.scala:28)\n\
    \tat Problem$.main(tmp3ww59pdq.scala:32)\n\tat Problem.main(tmp3ww59pdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n   \
    \         else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        tri(n, List(1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpukgrxdf5.scala:24)\n\tat Problem$.tri(tmpukgrxdf5.scala:26)\n\
    \tat Problem$.main(tmpukgrxdf5.scala:29)\n\tat Problem.main(tmpukgrxdf5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var a = 1l\n        var b = 3l\n        var c = 2l\n        var d = 0l\n\
    \        var result = List[Long]()\n        result = result :+ a\n        result\
    \ = result :+ b\n        result = result :+ c\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2\n          \
    \  } else {\n                d = a + b + c\n            }\n            a = b\n\
    \            b = c\n            c = d\n            result = result :+ d\n    \
    \    }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjbf2dc0f.scala:43)\n\tat Problem.main(tmpjbf2dc0f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp5_s7ep5c.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp5_s7ep5c.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp5_s7ep5c.scala:28)\n\
    \tat Problem$.main(tmp5_s7ep5c.scala:32)\n\tat Problem.main(tmp5_s7ep5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp1_yra28_.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmp1_yra28_.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp1_yra28_.scala:30)\n\
    \tat Problem$.main(tmp1_yra28_.scala:34)\n\tat Problem.main(tmp1_yra28_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1l, 3l, 2l)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpg3chnfds.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpg3chnfds.scala:28)\n\
    \tat Problem$.main(tmpg3chnfds.scala:32)\n\tat Problem.main(tmpg3chnfds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n   \
    \         else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        tri(n, List[Long](1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpem41zl7o.scala:24)\n\tat Problem$.tri(tmpem41zl7o.scala:26)\n\
    \tat Problem$.main(tmpem41zl7o.scala:29)\n\tat Problem.main(tmpem41zl7o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        l = l :+ 1\n   \
    \     l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n           \
    \ } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \      }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpp8dh47pm.scala:31)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpp8dh47pm.scala:33)\n\
    \tat Problem$.main(tmpp8dh47pm.scala:37)\n\tat Problem.main(tmpp8dh47pm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = ListBuffer[Long]()\n        l += 1\n \
    \       l += 3\n        for (i <- 2 to n.toInt) {\n            if (i % 2 == 0)\
    \ l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n \
    \       }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpd6ybj6b5.scala:28)\n\tat Problem$.tri$$anonfun$adapted$1(tmpd6ybj6b5.scala:29)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpd6ybj6b5.scala:29)\n\
    \tat Problem$.main(tmpd6ybj6b5.scala:33)\n\tat Problem.main(tmpd6ybj6b5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        l = l :+ 1\n   \
    \     l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n           \
    \ } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \      }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpp8dh47pm.scala:31)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpp8dh47pm.scala:33)\n\
    \tat Problem$.main(tmpp8dh47pm.scala:37)\n\tat Problem.main(tmpp8dh47pm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpdyywg5h1.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpdyywg5h1.scala:30)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpdyywg5h1.scala:30)\n\
    \tat Problem$.main(tmpdyywg5h1.scala:34)\n\tat Problem.main(tmpdyywg5h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n   \
    \         else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        tri(n, List(1l))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmp37kmtc1x.scala:24)\n\tat Problem$.tri(tmp37kmtc1x.scala:26)\n\
    \tat Problem$.main(tmp37kmtc1x.scala:29)\n\tat Problem.main(tmp37kmtc1x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var a = 1l\n        var b =\
    \ 3l\n        var c = 2l\n        var d = 0l\n        var result = List(1l, 3l,\
    \ 2l)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n    \
    \            d = 1 + i / 2\n            } else {\n                d = a + b +\
    \ c\n            }\n            a = b\n            b = c\n            c = d\n\
    \            result = result :+ d\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpywpy9l94.scala:43)\n\tat Problem.main(tmpywpy9l94.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in Tribonacci sequence to return\n        // You can create new lists with the\
    \ '::' operator\n        // Example:\n        // val x = 1 :: (2 :: (3 :: (4 ::\
    \ Nil)))\n        // val y = x.head\n        // val z = x.tail\n        // The\
    \ above example creates a list x with four elements.\n        // x.head is 1,\
    \ x.tail is (2 :: (3 :: (4 :: Nil)))\n        // x.tail.head is 2, x.tail.tail\
    \ is (3 :: (4 :: Nil))\n        // x.tail.tail.head is 3, x.tail.tail.tail is\
    \ (4 :: Nil)\n        // x.tail.tail.tail.head is 4, x.tail.tail.tail.tail is\
    \ Nil\n        // Example:\n        // val x = List(1, 2, 3, 4)\n        // val\
    \ y = x.head\n        // val z = x.tail\n        // The above example creates\
    \ a list x with four elements.\n        // x.head is 1, x.tail is List(2, 3, 4)\n\
    \        // x.tail.head is 2, x.tail.tail is List(3, 4)\n        // x.tail.tail.head\
    \ is 3, x.tail.tail.tail is List(4)\n        // x.tail.tail.tail.head is 4, x.tail.tail.tail.tail\
    \ is Nil\n        var x = List[Long]()\n        for (i <- 1 to n.toInt) {\n  \
    \          if (i == 1) x = 1 :: x\n            else if (i == 2) x = 3 :: x\n \
    \           else if (i == 3) x = 2 :: x\n            else if (i % 2 == 0) x =\
    \ (i / 2) :: x\n            else x = (x.head + x.tail.head + x.tail.tail.head)\
    \ :: x\n        }\n        x.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp53w74jo9.scala:53)\n\tat Problem.main(tmp53w74jo9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n      \
    \      if (i == 0) result = result :+ 1\n            else if (i == 1) result =\
    \ result :+ 3\n            else if (i == 2) result = result :+ 2\n           \
    \ else if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmp3ww59pdq.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp3ww59pdq.scala:28)\n\
    \tat Problem$.main(tmp3ww59pdq.scala:32)\n\tat Problem.main(tmp3ww59pdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n          \
    \  else if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i /\
    \ 2) :: l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n       \
    \ l.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt31dnelg.scala:32)\n\tat Problem.main(tmpt31dnelg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n          \
    \  else if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i /\
    \ 2) :: l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n       \
    \ l.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt31dnelg.scala:32)\n\tat Problem.main(tmpt31dnelg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, acc : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) acc\n            else if (n % 2 == 0) tri(n - 1, acc :+ (1 + n / 2))\n\
    \            else tri(n - 1, acc :+ (acc(acc.length - 1) + acc(acc.length - 2)\
    \ + acc(acc.length - 3)))\n        }\n        tri(n, List[Long](1))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpf6028oa2.scala:24)\n\tat Problem$.tri(tmpf6028oa2.scala:26)\n\
    \tat Problem$.main(tmpf6028oa2.scala:29)\n\tat Problem.main(tmpf6028oa2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwzvvo9d_.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwzvvo9d_.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwzvvo9d_.scala:28)\n\
    \tat Problem$.main(tmpwzvvo9d_.scala:32)\n\tat Problem.main(tmpwzvvo9d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpudyuahmm.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpudyuahmm.scala:28)\n\
    \tat Problem$.main(tmpudyuahmm.scala:32)\n\tat Problem.main(tmpudyuahmm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += 1\
    \ + i / 2\n            else l += l(i - 1) + l(i - 2) + l(i + 1)\n        }\n \
    \       l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpptxkioec.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpptxkioec.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpptxkioec.scala:28)\n\
    \tat Problem$.main(tmpptxkioec.scala:32)\n\tat Problem.main(tmpptxkioec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794450
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var list = List[Long]()\n        for (i <- 0 to n.toInt) {\n        \
    \    if (i == 0) list = list :+ 1\n            else if (i == 1) list = list :+\
    \ 3\n            else if (i == 2) list = list :+ 2\n            else if (i % 2\
    \ == 0) list = list :+ (1 + i / 2)\n            else list = list :+ (list(i -\
    \ 1) + list(i - 2) + list(i + 1))\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmphknz25cn.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmphknz25cn.scala:28)\n\
    \tat Problem$.main(tmphknz25cn.scala:32)\n\tat Problem.main(tmphknz25cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def triHelper(n : Long, l : List[Long]) : List[Long] = {\n          \
    \  if (n == 0) l\n            else if (n == 1) triHelper(n - 1, l :+ 3)\n    \
    \        else if (n % 2 == 0) triHelper(n - 1, l :+ (1 + n / 2))\n           \
    \ else triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length -\
    \ 3)))\n        }\n        triHelper(n, List[Long]())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.triHelper$1(tmpxtcifzu5.scala:25)\n\tat Problem$.tri(tmpxtcifzu5.scala:27)\n\
    \tat Problem$.main(tmpxtcifzu5.scala:30)\n\tat Problem.main(tmpxtcifzu5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of Long containing\
    \ the first 'n' + 1 elements of the Tribonacci sequence\n        // You can use\
    \ the helper function 'triHelper'\n        triHelper(n, List(1l, 3l, 2l))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpne86eenu.scala:25:8 -------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        triHelper(n, List(\e[31m1l\e[0m, \e[31m3l\e[0m,\
    \ \e[31m2l\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Not found: triHelper\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwzvvo9d_.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwzvvo9d_.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwzvvo9d_.scala:28)\n\
    \tat Problem$.main(tmpwzvvo9d_.scala:32)\n\tat Problem.main(tmpwzvvo9d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        var l = new ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpoktr9k8d.scala:30)\n\tat Problem$.tri$$anonfun$adapted$1(tmpoktr9k8d.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpoktr9k8d.scala:31)\n\
    \tat Problem$.main(tmpoktr9k8d.scala:35)\n\tat Problem.main(tmpoktr9k8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n < 0) throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n\
    \        if (n == 2) return List(1, 3, 2)\n        val result = new ArrayBuffer[Long]\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))));\n\
    \    assert(tri((4l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4 is out of bounds (min 0, max 2)\n\
    \tat scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:99)\n\tat scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:43)\n\
    \tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\
    \tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\tat Problem$.tri$$anonfun$1(tmp2pvr4i34.scala:31)\n\
    \tat Problem$.tri$$anonfun$adapted$1(tmp2pvr4i34.scala:32)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.tri(tmp2pvr4i34.scala:32)\n\tat Problem$.main(tmp2pvr4i34.scala:36)\n\
    \tat Problem.main(tmp2pvr4i34.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$$anonfun$1(tmpudyuahmm.scala:27)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpudyuahmm.scala:28)\n\
    \tat Problem$.main(tmpudyuahmm.scala:32)\n\tat Problem.main(tmpudyuahmm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmp5_s7ep5c.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmp5_s7ep5c.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmp5_s7ep5c.scala:28)\n\
    \tat Problem$.main(tmp5_s7ep5c.scala:32)\n\tat Problem.main(tmp5_s7ep5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpwp488m2e.scala:27)\n\tat Problem$.tri$$anonfun$adapted$1(tmpwp488m2e.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpwp488m2e.scala:28)\n\
    \tat Problem$.main(tmpwp488m2e.scala:32)\n\tat Problem.main(tmpwp488m2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n\
    \        var i = 3\n        while (i <= n) {\n            if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n            i += 1\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp4z620cc.scala:31:15\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mreturn\e[0m result\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \  Found:    (result : List[Int])\n\e[31m   |\e[0m               Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n\
    \                l += 1 + i / 2\n            } else {\n                l += l(i\
    \ - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n        l.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpzsh09rt5.scala:29)\n\tat Problem$.tri$$anonfun$adapted$1(tmpzsh09rt5.scala:31)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpzsh09rt5.scala:31)\n\
    \tat Problem$.main(tmpzsh09rt5.scala:35)\n\tat Problem.main(tmpzsh09rt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) List(1)\n        else if (n == 1) List(1, 3)\n        else\
    \ if (n == 2) List(1, 3, 2)\n        else {\n            val result = new ListBuffer[Long]\n\
    \            result += 1\n            result += 3\n            result += 2\n \
    \           for (i <- 3 to n.toInt) {\n                if (i % 2 == 0) result\
    \ += (1 + i / 2)\n                else result += (result(i - 1) + result(i - 2)\
    \ + result(i + 1))\n            }\n            result.toList\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:60)\n\
    \tat scala.collection.mutable.ListBuffer.apply(ListBuffer.scala:39)\n\tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\
    \tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\
    \tat Problem$.tri$$anonfun$1(tmpn0__1b6t.scala:31)\n\tat Problem$.tri$$anonfun$adapted$1(tmpn0__1b6t.scala:32)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.tri(tmpn0__1b6t.scala:32)\n\
    \tat Problem$.main(tmpn0__1b6t.scala:37)\n\tat Problem.main(tmpn0__1b6t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.Mai"
  stdout: ''
  timestamp: 1659794700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else {\n                val next = if (n % 2 == 0) 1 +\
    \ n / 2 else l(l.length - 1) + l(l.length - 2) + l(l.length - 3)\n           \
    \     tri(n - 1, l :+ next)\n            }\n        }\n        tri(n, List(1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.tri$1(tmpamv0co4y.scala:24)\n\tat Problem$.tri(tmpamv0co4y.scala:28)\n\
    \tat Problem$.main(tmpamv0co4y.scala:31)\n\tat Problem.main(tmpamv0co4y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n \
    \       if (n == 2) return List(1, 3, 2)\n        var l = List(1, 3, 2)\n    \
    \    for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 + i /\
    \ 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        return l\n    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmponblpga0.scala:29:15\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mreturn\e[0m l\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (l : List[Int])\n\e[31m   |\e[0m               Required: List[Long]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659794700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    //\
    \ tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
    \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
    \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
    \ sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n\
    \        var list = new ArrayBuffer[Long]()\n        list += 1\n        list +=\
    \ 3\n        list += 2\n        for (i <- 3 to n.toInt) {\n            if (i %\
    \ 2 == 0) list += (1 + i / 2)\n            else list += (list(i - 1) + list(i\
    \ - 2) + list(i + 1))\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n   \
    \ assert(tri((7l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
    \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n    assert(tri((8l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
    \ 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong,\
    \ 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong, 80l.toLong,\
    \ 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n    assert(tri((0l)).equals((List[Long](1l.toLong))));\n\
    \    assert(tri((1l)).equals((List[Long](1l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4 is out of bounds (min 0, max 2)\n\
    \tat scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:99)\n\tat scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:43)\n\
    \tat scala.Function1.apply$mcJI$sp(Function1.scala:69)\n\tat scala.Function1.apply$mcJI$sp$(Function1.scala:69)\n\
    \tat scala.collection.AbstractSeq.apply$mcJI$sp(Seq.scala:1161)\n\tat Problem$.tri$$anonfun$1(tmptb_2zgaq.scala:27)\n\
    \tat Problem$.tri$$anonfun$adapted$1(tmptb_2zgaq.scala:28)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.tri(tmptb_2zgaq.scala:28)\n\tat Problem$.main(tmptb_2zgaq.scala:32)\n\
    \tat Problem.main(tmptb_2zgaq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794700
