name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an array of numbers as input and returns \n\
  \    // the number of elements in the array that are greater than 10 and both \n\
  \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
  \    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong,\
  \ 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ["        def isSpecial(n : Long) : Boolean = {\n            val nStr\
    \ = n.toString\n            if (nStr.length == 1) return false\n            val\
    \ firstDigit = nStr.charAt(0).asDigit\n            val lastDigit = nStr.charAt(nStr.length\
    \ - 1).asDigit\n            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return\
    \ false\n            return true\n        }\n        return nums.filter(n => n\
    \ > 10 && isSpecial(n)).length", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(num\
    \ : Long) : Boolean = {\n            val str = num.toString\n            val first\
    \ = str.charAt(0).toString.toInt\n            val last = str.charAt(str.length\
    \ - 1).toString.toInt\n            if (num > 10 && first % 2 == 1 && last % 2\
    \ == 1) true else false\n        }\n        nums.filter(isSpecial(_)).length",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ num.toString.length > 1 && num.toString.charAt(0).toString.toInt % 2 == 1 &&\
    \ num.toString.charAt(num.toString.length - 1).toString.toInt % 2 == 1) count\
    \ += 1\n        }\n        count", "        def isSpecial(num : Long) : Boolean\
    \ = {\n            val str = num.toString\n            if (str.length == 1) return\
    \ false\n            val first = str.head.toString.toInt\n            val last\
    \ = str.last.toString.toInt\n            if (first % 2 == 0 || last % 2 == 0)\
    \ return false\n            if (num <= 10) return false\n            return true\n\
    \        }\n        return nums.filter(isSpecial(_)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` the number of elements in the array that\
    \ are greater than 10 and both first and last digits of a number are odd (1, 3,\
    \ 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        def isSpecial(n\
    \ : Long) : Boolean = {\n            val s = n.toString\n            s.length\
    \ > 1 && s.head.toString.toInt % 2 == 1 && s.last.toString.toInt % 2 == 1 && n\
    \ > 10\n        }\n        nums.filter(isSpecial(_)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        var count = 0l\n        for (num <- nums) {\n      \
    \      if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        def isSpecial(n :\
    \ Long) : Boolean = {\n            val s = n.toString\n            val first =\
    \ s(0).toString.toInt\n            val last = s(s.length - 1).toString.toInt\n\
    \            n > 10 && first % 2 == 1 && last % 2 == 1\n        }\n        nums.filter(isSpecial).length",
  "        def isSpecial(n : Long) : Boolean = {\n            val s = n.toString\n\
    \            val first = s(0).toString.toInt\n            val last = s(s.length\
    \ - 1).toString.toInt\n            if (n > 10 && first % 2 == 1 && last % 2 ==\
    \ 1) true else false\n        }\n        nums.filter(isSpecial(_)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            if (n < 10) return false\n            val\
    \ s = n.toString\n            val first = s(0).toString.toInt\n            val\
    \ last = s(s.length - 1).toString.toInt\n            if (first % 2 == 0 || last\
    \ % 2 == 0) return false\n            return true\n        }\n        nums.filter(n\
    \ => n > 10 && isSpecial(n)).length", "        var count = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt % 2\
    \ == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n \
    \       count", "        def isSpecial(n : Long) : Boolean = {\n            if\
    \ (n < 10) return false\n            val s = n.toString\n            val first\
    \ = s(0).toString.toInt\n            val last = s(s.length - 1).toString.toInt\n\
    \            if (first % 2 == 0 || last % 2 == 0) return false\n            return\
    \ true\n        }\n        nums.filter(isSpecial).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(num : Long) : Boolean = {\n        \
    \    val str = num.toString\n            if (str.length == 1) return false\n \
    \           val first = str.head\n            val last = str.last\n          \
    \  if (first % 2 == 0 || last % 2 == 0) return false\n            if (num <= 10)\
    \ return false\n            return true\n        }\n        return nums.filter(isSpecial).length",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(num : Long) : Boolean = {\n        \
    \    if (num < 10) return false\n            val digits = num.toString.toList.map(x\
    \ => x.asDigit)\n            if (digits.head % 2 == 0 || digits.last % 2 == 0)\
    \ return false\n            return true\n        }\n        nums.filter(x => isSpecial(x)).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            val s = n.toString\n            s.length\
    \ > 1 && s.head.toString.toInt % 2 == 1 && s.last.toString.toInt % 2 == 1 && n\
    \ > 10\n        }\n        nums.filter(isSpecial).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(n : Long) : Boolean = {\n          \
    \  if (n < 10) return false\n            val s = n.toString\n            val first\
    \ = s(0).toString.toInt\n            val last = s(s.length - 1).toString.toInt\n\
    \            if (first % 2 == 0 || last % 2 == 0) return false\n            return\
    \ true\n        }\n        nums.filter(isSpecial(_)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0l\n        for (num <- nums) {\n    \
    \        if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => (x > 10) && (x % 2 == 1) && (x %
    10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 == 7 || x % 10 == 9)).length',
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // You have to return the number of elements in the array that are greater\
    \ than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var firstDigit = num % 10\n                var lastDigit\
    \ = num / pow(10, floor(log10(num)).toInt).toLong\n                if (firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0) {\n                    count += 1\n        \
    \        }\n            }\n        }\n        count", "        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).asDigit\
    \ % 2 == 1 && num.toString.charAt(num.toString.length - 1).asDigit % 2 == 1) count\
    \ += 1\n        }\n        count", "        var count = 0l\n        for (num <-\
    \ nums) {\n            if (num > 10 && num % 2 == 1 && num % 10 == 1) count +=\
    \ 1\n        }\n        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // Compute\
    \ and return the number of elements in the list that are greater than 10 and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        // For example:\n\
    \        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0l\n        for (num <- nums) {\n    \
    \        if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // `return` should return\
    \ the number of elements in the array that are greater than 10 and both first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n        var count = 0\n\
    \        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 != 0 && num.toString.last.toString.toInt % 2 != 0) count += 1\n        }\n\
    \        count", "        def isSpecial(n : Long) : Boolean = {\n            val\
    \ s = n.toString\n            s.length > 1 && s.head.asDigit % 2 == 1 && s.last.asDigit\
    \ % 2 == 1 && n > 10\n        }\n        nums.filter(isSpecial).length", "   \
    \     def isSpecial(num : Long) : Boolean = {\n            val firstDigit = num.toString.charAt(0).asDigit\n\
    \            val lastDigit = num.toString.charAt(num.toString.length - 1).asDigit\n\
    \            (firstDigit % 2 != 0 && lastDigit % 2 != 0 && num > 10)\n       \
    \ }\n        nums.filter(isSpecial(_)).length", "        def isSpecial(num : Long)\
    \ : Boolean = {\n            val str = num.toString\n            if (str.length\
    \ == 1) return false\n            val first = str.charAt(0).toString.toInt\n \
    \           val last = str.charAt(str.length - 1).toString.toInt\n           \
    \ if (first % 2 == 0 || last % 2 == 0) return false\n            if (num < 10)\
    \ return false\n            return true\n        }\n        return nums.filter(isSpecial).length",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Compute and return the number of elements in the\
    \ list that are greater than 10 and both first and last digits of a number are\
    \ odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var first = num.toString.charAt(0).toString.toInt\n     \
    \           var last = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // Fill Up this function body\n        // `nums` is a list of numbers\n    \
    \    // The function should return the number of elements in the array that are\
    \ greater than 10 and both first and last digits of a number are odd (1, 3, 5,\
    \ 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", "        def isSpecial(num\
    \ : Long) : Boolean = {\n            if (num < 10) return false\n            val\
    \ firstDigit = num % 10\n            val lastDigit = num / pow(10, floor(log10(num)).toInt).toLong\n\
    \            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n   \
    \         return true\n        }\n        return nums.filter(isSpecial(_)).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(n : Long) : Boolean = {\n          \
    \  val s = n.toString\n            s.length > 1 && s.head.toString.toInt % 2 ==\
    \ 1 && s.last.toString.toInt % 2 == 1 && n > 10\n        }\n        nums.filter(isSpecial).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        val filtered = nums.filter(x => x > 10 && x % 2 ==\
    \ 1 && (x / 10) % 2 == 1)\n        filtered.length", '        nums.filter(x =>
    x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` the number of elements in the array that\
    \ are greater than 10 and both \n        // first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n        var count = 0l\n        for (num <- nums)\
    \ {\n            if (num > 10 && isOdd(num.toString.head) && isOdd(num.toString.last))\
    \ count += 1\n        }\n        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && (x % 2 == 1 || x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10
    == 7 || x % 10 == 9)).length', "        // Fill Up this function body\n      \
    \  // `nums` is a list of numbers\n        // Compute and return the number of\
    \ elements in `nums` that are greater than 10 and both first and last digits of\
    \ a number are odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n\
    \                var first = i.toString.charAt(0).toString.toInt\n           \
    \     var last = i.toString.charAt(i.toString.length - 1).toString.toInt\n   \
    \             if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ var count = 0l\n        for (num <- nums) {\n            if (num > 10) {\n \
    \               val firstDigit = num.toString.charAt(0).asDigit\n            \
    \    val lastDigit = num.toString.charAt(num.toString.length - 1).asDigit\n  \
    \              if (firstDigit % 2 == 1 && lastDigit % 2 == 1) count += 1\n   \
    \         }\n        }\n        count", "        var count = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt % 2\
    \ == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n \
    \       count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).toString.toInt\
    \ % 2 == 1 && num.toString.charAt(num.toString.length - 1).toString.toInt % 2\
    \ == 1) {\n                count += 1\n            }\n        }\n        return\
    \ count", "        // Fill Up this function body\n        // `nums` is a list\
    \ of numbers\n        // `nums.size` is the size of the list\n        // `nums(i)`\
    \ is the ith element of the list\n        // `nums.head` is the first element\
    \ of the list\n        // `nums.tail` is the list without the first element\n\
    \        // `nums.last` is the last element of the list\n        // `nums.init`\
    \ is the list without the last element\n        // `nums.reverse` is the list\
    \ in reverse order\n        // `nums.reverse.head` is the last element of the\
    \ list\n        // `nums.reverse.tail` is the list without the last element\n\
    \        // `nums.reverse.init` is the list without the first element\n      \
    \  // `nums.reverse.last` is the first element of the list\n        // `nums.min`\
    \ is the minimum element of the list\n        // `nums.max` is the maximum element\
    \ of the list\n        // `nums.sum` is the sum of all elements of the list\n\
    \        // `nums.product` is the product of all elements of the list\n      \
    \  // `nums.contains(x)` is true if the list contains `x`\n        // `nums.sorted`\
    \ is the list sorted in ascending order\n        // `nums.sortWith(_>_)` is the\
    \ list sorted in descending order\n        // `nums.sortWith(_<_)` is the list\
    \ sorted in ascending order\n        // `nums.sortWith(_>_).head` is the maximum\
    \ element of the list\n        // `nums.sortWith(_>_).tail` is the list without\
    \ the maximum element\n        // `nums.sortWith(_>_).init` is the list without\
    \ the minimum element\n        // `nums.sortWith(_>_).last` is the minimum element\
    \ of the list\n        // `nums.sortWith(_<_).head` is the minimum element of\
    \ the list\n        // `nums.sortWith(_<_).tail` is the list without the minimum\
    \ element\n        // `nums.sortWith(_<_).init` is the list without the maximum\
    \ element\n        // `n", "        // Fill Up this function body\n        //\
    \ `nums` is a list of numbers\n        // Do not change the function defination...\n\
    \        // For example, if `nums` is List(1, 2, 3, 4, 5) then\n        // the\
    \ output should be 2\n        var count = 0\n        for (i <- nums) {\n     \
    \       if (i > 10 && i.toString.charAt(0).toString.toInt % 2 != 0 && i.toString.charAt(i.toString.length\
    \ - 1).toString.toInt % 2 != 0) {\n                count += 1\n            }\n\
    \        }\n        return count", "        var count = 0l\n        for (num <-\
    \ nums) {\n            if (num > 10 && num.toString.head.toString.toInt % 2 ==\
    \ 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n    \
    \    count", "        def isSpecial(num : Long) : Boolean = {\n            if\
    \ (num < 10) return false\n            val firstDigit = num % 10\n           \
    \ val lastDigit = num / pow(10, floor(log10(num)).toInt).toLong\n            firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1\n        }\n        nums.filter(isSpecial).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Compute and return the number of elements in `nums`\
    \ that are greater than 10 and both first and last digits of a number are odd\
    \ (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        nums.filter(x => {\n            val firstDigit = x.toString.head.asDigit\n\
    \            val lastDigit = x.toString.last.asDigit\n            x > 10 && firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1\n        }).length", "        def isSpecial(num\
    \ : Long) : Boolean = {\n            val firstDigit = num.toString.charAt(0).asDigit\n\
    \            val lastDigit = num.toString.charAt(num.toString.length - 1).asDigit\n\
    \            (firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10)\n       \
    \ }\n        nums.filter(isSpecial(_)).length", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // `return` the number\
    \ of elements in the array that are greater than 10 and both first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", '        nums.filter(x
    => x > 10 && x.toString.charAt(0).toString.toInt % 2 == 1 && x.toString.charAt(x.toString.length
    - 1).toString.toInt % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(n
    => n > 10 && n.toString.head.toString.toInt % 2 == 1 && n.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && (x % 2 == 1) && (x / 10 % 2 == 1)).length', "        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // `nums.length`\
    \ is the length of the list\n        // `nums(i)` is the ith element of the list\n\
    \        // `nums.head` is the first element of the list\n        // `nums.tail`\
    \ is the list without the first element\n        // `nums.last` is the last element\
    \ of the list\n        // `nums.init` is the list without the last element\n \
    \       // `nums.reverse` is the list in reverse order\n        // `nums.reverse.head`\
    \ is the last element of the list\n        // `nums.reverse.tail` is the list\
    \ without the last element\n        // `nums.reverse.init` is the list without\
    \ the first element\n        // `nums.reverse.last` is the first element of the\
    \ list\n        // `nums.min` is the minimum element of the list\n        // `nums.max`\
    \ is the maximum element of the list\n        // `nums.sum` is the sum of all\
    \ elements of the list\n        // `nums.product` is the product of all elements\
    \ of the list\n        // `nums.contains(x)` is true if the list contains `x`\n\
    \        // `nums.take(n)` is the list of the first `n` elements\n        // `nums.drop(n)`\
    \ is the list of the remaining elements after taking `n` elements\n        //\
    \ `nums.splitAt(n)` is a pair of lists, where the first list has `n` elements\n\
    \        // `nums.apply(n)` is the nth element of the list\n        // `nums.indices`\
    \ is a list of valid indices of the list\n        // `nums.indices.reverse` is\
    \ a list of valid indices of the list in reverse order\n        // `nums.indices.min`\
    \ is the minimum valid index of the list\n        // `nums.indices.max` is the\
    \ maximum valid index of the list\n        // `nums.indices.sum` is the sum of\
    \ all valid indices of the list\n        // `nums.indices.product` is the product\
    \ of all valid", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.charAt(0).toInt
    % 2 == 1 && x.toString.charAt(x.toString.length - 1).toInt % 2 == 1).length',
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // `nums.size` is the size of the list `nums`\n        // `nums(i)` is\
    \ the element at index `i` in the list `nums`\n        // `nums.head` is the first\
    \ element in the list `nums`\n        // `nums.tail` is the list `nums` without\
    \ the first element\n        // `nums.last` is the last element in the list `nums`\n\
    \        // `nums.init` is the list `nums` without the last element\n        //\
    \ `nums.reverse` is the list `nums` reversed\n        // `nums.reverse.head` is\
    \ the last element in the list `nums`\n        // `nums.reverse.tail` is the list\
    \ `nums` without the last element\n        // `nums.reverse.last` is the first\
    \ element in the list `nums`\n        // `nums.reverse.init` is the list `nums`\
    \ without the first element\n        // `nums.min` is the smallest element in\
    \ the list `nums`\n        // `nums.max` is the largest element in the list `nums`\n\
    \        // `nums.sum` is the sum of all elements in the list `nums`\n       \
    \ // `nums.product` is the product of all elements in the list `nums`\n      \
    \  // `nums.contains(x)` is true if the list `nums` contains `x`\n        // `nums.mkString(s)`\
    \ is a string representation of the list `nums`\n        // separated by the string\
    \ `s`\n        // `nums.mkString` is a string representation of the list `nums`\n\
    \        // separated by commas\n        // `nums.mkString(\"<\", \",\", \">\"\
    )` is a string representation of the\n        // list `nums` separated by commas\
    \ and enclosed in angle brackets\n        // `nums.toArray` is an array representation\
    \ of the list `nums`\n        // `nums.toSet` is a set representation of the list\
    \ `nums`\n        // `nums.", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toInt % 2 == 1 && x.toString.last.toInt % 2 == 1).length',
  "        def isSpecial(n : Long) : Boolean = {\n            if (n < 10) return false\n\
    \            val s = n.toString\n            val first = s(0).toString.toInt\n\
    \            val last = s(s.length - 1).toString.toInt\n            return (first\
    \ % 2 == 1 && last % 2 == 1)\n        }\n        return nums.filter(x => x > 10\
    \ && isSpecial(x)).length", "        // Fill Up this function body\n        //\
    \ `nums` is a list of numbers\n        // You have to return the number of elements\
    \ in the array that are greater than 10 and both first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", "        var count =\
    \ 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.length\
    \ > 1 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) {\n                count += 1\n            }\n        }\n        count",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x % 2 == 1 && x % 10 ==
    1).length', "        var count = 0\n        for (num <- nums) {\n            if\
    \ (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // `nums.length` is the\
    \ number of elements in the list\n        // `nums(i)` is the i-th element of\
    \ the list\n        // `nums.head` is the first element of the list\n        //\
    \ `nums.tail` is the list without the first element\n        // `nums.last` is\
    \ the last element of the list\n        // `nums.init` is the list without the\
    \ last element\n        // `nums.reverse` is the list in reverse order\n     \
    \   // `nums.reverse.head` is the last element of the list\n        // `nums.reverse.tail`\
    \ is the list without the last element\n        // `nums.reverse.last` is the\
    \ first element of the list\n        // `nums.reverse.init` is the list without\
    \ the first element\n        // `nums.take(i)` is the list of the first i elements\n\
    \        // `nums.drop(i)` is the list without the first i elements\n        //\
    \ `nums.splitAt(i)` is a pair of lists, the first list is the first i elements,\
    \ the second list is the rest\n        // `nums.takeWhile(f)` is the list of elements\
    \ that satisfy the condition f\n        // `nums.dropWhile(f)` is the list of\
    \ elements that do not satisfy the condition f\n        // `nums.span(f)` is a\
    \ pair of lists, the first list is the list of elements that satisfy the condition\
    \ f, the second list is the rest\n        // `nums.partition(f)` is a pair of\
    \ lists, the first list is the list of elements that satisfy the condition f,\
    \ the second list is the list of elements that do not satisfy the condition f\n\
    \        // `nums.forall(f)` is true if all elements satisfy the condition f\n\
    \        // `nums.exists(f)` is true if at least one element satisfies the condition\
    \ f\n        // `nums.count(f)` is the number of elements that satisfy the condition\
    \ f\n        // `nums.zip(nums2)` is a list of pairs of corresponding elements\n\
    \        // `nums.", "        // Fill Up this function body\n        // `nums`\
    \ is a list of integers\n        // Do not modify the function signature\n   \
    \     var count = 0l\n        for (i <- nums) {\n            if (i > 10 && i.toString.head.toString.toInt\
    \ % 2 != 0 && i.toString.last.toString.toInt % 2 != 0) count += 1\n        }\n\
    \        count", "        var count = 0l\n        for (num <- nums) {\n      \
    \      if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        def isSpecial(n :\
    \ Long) : Boolean = {\n            if (n < 10) return false\n            var m\
    \ = n\n            var first = m % 10\n            m /= 10\n            while\
    \ (m > 0) {\n                if (m % 10 == 0) return false\n                m\
    \ /= 10\n            }\n            if (first % 2 == 0) return false\n       \
    \     m = n\n            var last = m % 10\n            while (m > 10) m /= 10\n\
    \            if (last % 2 == 0) return false\n            return true\n      \
    \  }\n        var count = 0l\n        for (n <- nums) if (isSpecial(n)) count\
    \ += 1\n        return count", "        var cnt = 0l\n        for (num <- nums)\
    \ {\n            if (num > 10 && num.toString.head.toString.toInt % 2 == 1 &&\
    \ num.toString.last.toString.toInt % 2 == 1) cnt += 1\n        }\n        cnt",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ num.toString.charAt(0).toString.toInt % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).toString.toInt % 2 == 1) count += 1\n        }\n        count", "     \
    \   // Fill Up this function body\n        // `nums` is a list of numbers\n  \
    \      // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers\n        // `nums` is a list of numbers\n\
    \        // `nums` is a list of numbers", "        def isSpecial(n : Long) : Boolean\
    \ = {\n            if (n < 10) return false\n            val firstDigit = n %\
    \ 10\n            val lastDigit = n / pow(10, floor(log10(n)).toInt).toLong\n\
    \            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n   \
    \         true\n        }\n        nums.filter(isSpecial).length", "        var\
    \ count = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        val firstDigit\
    \ = (x : Long) => x.toString.head.asDigit\n        val lastDigit = (x : Long)\
    \ => x.toString.last.asDigit\n        nums.filter(x => x > 10 && firstDigit(x)\
    \ % 2 == 1 && lastDigit(x) % 2 == 1).length", "        def isSpecial(num : Long)\
    \ : Boolean = {\n            if (num < 10) return false\n            val firstDigit\
    \ = num % 10\n            val lastDigit = num / pow(10, floor(log10(num)).toInt).toLong\n\
    \            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n   \
    \         return true\n        }\n        return nums.filter(num => isSpecial(num)).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            val s = n.toString\n            val first\
    \ = s(0).toString.toInt\n            val last = s(s.length - 1).toString.toInt\n\
    \            n > 10 && first % 2 == 1 && last % 2 == 1\n        }\n        nums.filter(isSpecial).length",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        var count = 0l\n \
    \       for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            val s = n.toString\n            s.length\
    \ > 1 && s.head.toString.toInt % 2 == 1 && s.last.toString.toInt % 2 == 1 && n\
    \ > 10\n        }\n        nums.filter(isSpecial).length", "        def isSpecial(num\
    \ : Long) : Boolean = {\n            var n = num\n            if (n < 0) n = -n\n\
    \            if (n < 10) return false\n            var firstDigit = n % 10\n \
    \           var lastDigit = n\n            while (lastDigit >= 10) lastDigit /=\
    \ 10\n            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n\
    \            return true\n        }\n        nums.filter(isSpecial(_)).length",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // `return` the number of elements in the array that are greater than\
    \ 10 and both \n        // first and last digits of a number are odd (1, 3, 5,\
    \ 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt %\
    \ 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Compute and return the number of elements in `nums`\
    \ that are greater than 10 and both first and last digits of a number are odd\
    \ (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Compute and return the number of elements in `nums`\
    \ that are greater than 10 and both first and last digits of a number are odd\
    \ (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var first = num.toString.charAt(0).toString.toInt\n     \
    \           var last = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // Fill Up this function body\n        // `nums` is a list of numbers\n    \
    \    // `nums.length` is the length of the list\n        // `nums(i)` is the ith\
    \ element of the list\n        // `nums.head` is the first element of the list\n\
    \        // `nums.tail` is the list without the first element\n        // `nums.last`\
    \ is the last element of the list\n        // `nums.init` is the list without\
    \ the last element\n        // `nums.reverse` is the list in reverse order\n \
    \       // `nums.reverse.head` is the last element of the list\n        // `nums.reverse.tail`\
    \ is the list without the last element\n        // `nums.reverse.init` is the\
    \ list without the first element\n        // `nums.reverse.last` is the first\
    \ element of the list\n        // `nums.min` is the minimum element of the list\n\
    \        // `nums.max` is the maximum element of the list\n        // `nums.sum`\
    \ is the sum of all elements of the list\n        // `nums.product` is the product\
    \ of all elements of the list\n        // `nums.contains(x)` is true if the list\
    \ contains `x`\n        // `nums.mkString(s)` is a string representation of the\
    \ list, with elements separated by the string `s`\n        // `nums.mkString`\
    \ is a string representation of the list, with elements separated by commas\n\
    \        // `nums.mkString(\"(\", \"; \", \")\")` is a string representation of\
    \ the list, with elements separated by `; ` and surrounded by `(` and `)`\n  \
    \      // `nums.toArray` is an array containing the same elements as the list\n\
    \        // `nums.toSet` is a set containing the same elements as the list\n \
    \       // `nums.toList` is a list containing the same elements as the list\n\
    \        // `nums.toSeq` is a sequence containing the same elements as the list\n\
    \        // `nums.toIndexedSeq` is an indexed sequence containing the same elements\
    \ as the list\n        // `nums.toStream` is a stream containing the", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(num : Long) : Boolean = {\n        \
    \    if (num < 10) return false\n            val firstDigit = num % 10\n     \
    \       val lastDigit = num / pow(10, floor(log10(num)).toInt).toLong\n      \
    \      if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n         \
    \   return true\n        }\n        return nums.filter(isSpecial(_)).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            val s = n.toString\n            if (s.length\
    \ == 1) return false\n            val first = s.charAt(0).toString.toInt\n   \
    \         val last = s.charAt(s.length - 1).toString.toInt\n            if (first\
    \ % 2 == 0 || last % 2 == 0) return false\n            if (n < 10) return false\n\
    \            return true\n        }\n        return nums.filter(isSpecial(_)).length",
  '        nums.filter(x => x > 10 && (x % 2 != 0) && (x % 10 != 0)).length', "  \
    \      def isSpecial(num : Long) : Boolean = {\n            val firstDigit = num\
    \ / pow(10, floor(log10(num)).toInt).toLong\n            val lastDigit = num %\
    \ 10\n            num > 10 && firstDigit % 2 == 1 && lastDigit % 2 == 1\n    \
    \    }\n        nums.filter(isSpecial(_)).length", "        val isOdd = (n : Long)\
    \ => n % 2 == 1\n        val isGreaterThan10 = (n : Long) => n > 10\n        val\
    \ firstDigit = (n : Long) => n.toString.head.asDigit\n        val lastDigit =\
    \ (n : Long) => n.toString.last.asDigit\n        nums.filter(isGreaterThan10).filter(n\
    \ => isOdd(firstDigit(n)) && isOdd(lastDigit(n))).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0l\n        for (num <- nums) {\n    \
    \        if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        def isSpecial(num\
    \ : Long) : Boolean = {\n            val firstDigit = num.toString.head.asDigit\n\
    \            val lastDigit = num.toString.last.asDigit\n            if (firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1 && num > 10) true else false\n        }\n   \
    \     nums.filter(isSpecial).length", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ the number of elements in the array that are greater than 10 and both \n   \
    \     // first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        var count = 0l\n        for (num <- nums) {\n  \
    \          if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        def firstDigit(n :\
    \ Long) : Long = {\n            if (n < 0) firstDigit(-n)\n            else if\
    \ (n < 10) n\n            else firstDigit(n / 10)\n        }\n        def lastDigit(n\
    \ : Long) : Long = {\n            n % 10\n        }\n        nums.filter(n =>\
    \ n > 10 && firstDigit(n) % 2 == 1 && lastDigit(n) % 2 == 1).length", "      \
    \  def isSpecial(n : Long) : Boolean = {\n            val s = n.toString\n   \
    \         s.length > 1 && s.head.asDigit % 2 == 1 && s.last.asDigit % 2 == 1 &&\
    \ n > 10\n        }\n        nums.filter(isSpecial).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(n => n > 10 && n.toString.head.toString.toInt
    % 2 == 1 && n.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        var count = 0l\n        for (num <- nums) {\n      \
    \      if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        def isSpecial(n :\
    \ Long) : Boolean = {\n            val s = n.toString\n            if (s.length\
    \ == 1) return false\n            val first = s.charAt(0).asDigit\n          \
    \  val last = s.charAt(s.length - 1).asDigit\n            if (first % 2 == 0 ||\
    \ last % 2 == 0) return false\n            n > 10\n        }\n        nums.filter(isSpecial).length",
  "        def isSpecial(num : Long) : Boolean = {\n            if (num < 10) return\
    \ false\n            val firstDigit = num % 10\n            val lastDigit = num\
    \ / pow(10, floor(log10(num)).toInt).toLong\n            firstDigit % 2 == 1 &&\
    \ lastDigit % 2 == 1\n        }\n        nums.filter(num => num > 10 && isSpecial(num)).length",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // Compute and return the number of elements in the list that are greater\
    \ than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n\
    \                var first = i.toString.charAt(0).toString.toInt\n           \
    \     var last = i.toString.charAt(i.toString.length - 1).toString.toInt\n   \
    \             if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ def isSpecial(n : Long) : Boolean = {\n            val s = n.toString\n    \
    \        (s.length > 1) && (s.head.toString.toInt % 2 == 1) && (s.last.toString.toInt\
    \ % 2 == 1) && (n > 10)\n        }\n        nums.filter(isSpecial).length", " \
    \       def isValid(n : Long) : Boolean = {\n            val s = n.toString\n\
    \            s.length > 1 && s.head.toString.toInt % 2 == 1 && s.last.toString.toInt\
    \ % 2 == 1\n        }\n        nums.filter(n => n > 10 && isValid(n)).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // Compute\
    \ and return the number of elements in the list that are greater than 10 and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        // For example:\n\
    \        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n\
    \                var num = i\n                var first = num % 10\n         \
    \       var last = num\n                while (last > 10) {\n                \
    \    last = last / 10\n                }\n                if (first % 2 != 0 &&\
    \ last % 2 != 0) {\n                    count += 1\n                }\n      \
    \      }\n        }\n        count", "        // Fill Up this function body\n\
    \        // `nums` In case you do not remember is a `List[Long]`\n        // The\
    \ return type of this function should be Long\n        var count = 0l\n      \
    \  for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 != 0 && num.toString.last.toString.toInt % 2 != 0) count += 1\n        }\n\
    \        count", "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `nums.length` is the number of elements in the\
    \ list\n        // `nums(i)` is the ith element of the list\n        // `nums.head`\
    \ is the first element of the list\n        // `nums.tail` is the list of all\
    \ elements except the first\n        // `nums.last` is the last element of the\
    \ list\n        // `nums.init` is the list of all elements except the last\n \
    \       // `nums.reverse` is the list of all elements in reverse order\n     \
    \   // `nums.reverse.head` is the last element of the list\n        // `nums.reverse.tail`\
    \ is the list of all elements except the last\n        // `nums.reverse.last`\
    \ is the first element of the list\n        // `nums.reverse.init` is the list\
    \ of all elements except the first\n        // `nums.take(i)` is the list of the\
    \ first i elements\n        // `nums.drop(i)` is the list of all elements except\
    \ the first i\n        // `nums.splitAt(i)` is a tuple containing the list of\
    \ the first i elements\n        // and the list of all elements except the first\
    \ i\n        // `nums.takeWhile(f)` is the list of all elements that satisfy the\
    \ predicate f\n        // `nums.dropWhile(f)` is the list of all elements that\
    \ do not satisfy the predicate f\n        // `nums.span(f)` is a tuple containing\
    \ the list of all elements that satisfy the predicate f\n        // and the list\
    \ of all elements that do not satisfy the predicate f\n        // `nums.partition(f)`\
    \ is a tuple containing the list of all elements that satisfy the predicate f\n\
    \        // and the list of all elements that do not satisfy the predicate f\n\
    \        // `nums.forall(f)` is true if all elements satisfy the predicate f\n\
    \        // `nums.exists(f)` is true if at least one element satisfies the predicate\
    \ f\n        // `nums.count(f)` is the number of elements that satisfy the predicate\
    \ f\n        // `nums.zip(nums2)", "        var count = 0l\n        for (num <-\
    \ nums) {\n            if (num > 10 && num.toString.charAt(0).toString.toInt %\
    \ 2 == 1 && num.toString.charAt(num.toString.length - 1).toString.toInt % 2 ==\
    \ 1) count += 1\n        }\n        count", "        def isSpecial(num : Long)\
    \ : Boolean = {\n            if (num < 10) return false\n            val firstDigit\
    \ = num % 10\n            val lastDigit = num / pow(10, floor(log10(num)).toInt).toLong\n\
    \            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n   \
    \         true\n        }\n        nums.filter(isSpecial(_)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(num : Long) : Boolean = {\n        \
    \    if (num < 10) return false\n            var n = num\n            var first\
    \ = n % 10\n            n /= 10\n            while (n > 0) {\n               \
    \ if (n % 10 == 0) return false\n                n /= 10\n            }\n    \
    \        first % 2 == 1 && n % 2 == 1\n        }\n        nums.filter(x => x >\
    \ 10 && isSpecial(x)).length", "        def isSpecial(n : Long) : Boolean = {\n\
    \            if (n < 10) return false\n            val first = n.toString.head.asDigit\n\
    \            val last = n.toString.last.asDigit\n            if (first % 2 ==\
    \ 0 || last % 2 == 0) return false\n            return true\n        }\n     \
    \   return nums.filter(isSpecial).length", "        var count = 0l\n        for\
    \ (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        var count = 0l\n        for (num <- nums) {\n      \
    \      if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        def isSpecial(num\
    \ : Long) : Boolean = {\n            if (num < 10) return false\n            val\
    \ firstDigit = num / 10\n            val lastDigit = num % 10\n            if\
    \ (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n            return\
    \ true\n        }\n        nums.filter(isSpecial).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Do not change the function definition provided.\n\
    \        var count = 0l\n        for (i <- nums) {\n            if (i > 10) {\n\
    \                var num = i\n                var first = num % 10\n         \
    \       var last = num\n                while (last >= 10) {\n               \
    \     last = last / 10\n                }\n                if (first % 2 != 0\
    \ && last % 2 != 0) {\n                    count += 1\n                }\n   \
    \         }\n        }\n        return count", '        nums.filter(x => x > 10
    && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt %
    2 == 1).length', "        def isSpecial(n : Long) : Boolean = {\n            val\
    \ s = n.toString\n            val first = s(0).toString.toInt\n            val\
    \ last = s(s.length - 1).toString.toInt\n            if (first % 2 == 1 && last\
    \ % 2 == 1 && n > 10) true else false\n        }\n        nums.filter(isSpecial(_)).length",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // Compute and return the number of elements in the array that are greater\
    \ than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var first = num.toString.charAt(0).toString.toInt\n     \
    \           var last = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // Fill Up this function body\n        // `nums` In case you do not remember\
    \ is List[Long]\n        // You can use pattern matching:\n        // http://alvinalexander.com/scala/how-to-use-lists-nil-cons-scala-match-case-expressions\n\
    \        // You can also write your own `isOdd` function\n        // http://alvinalexander.com/scala/how-determine-odd-even-number-scala-match-expression\n\
    \        nums.filter(x => x > 10 && isOdd(x) && isOdd(x % 10)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(num : Long) : Boolean = {\n        \
    \    if (num < 10) return false\n            var firstDigit = num\n          \
    \  while (firstDigit >= 10) firstDigit /= 10\n            var lastDigit = num\
    \ % 10\n            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n\
    \            return true\n        }\n        return nums.filter(isSpecial).length",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            if (n < 10) return false\n            var\
    \ m = n\n            var first = m % 10\n            m /= 10\n            var\
    \ last = m % 10\n            m /= 10\n            while (m > 0) {\n          \
    \      if (m % 10 == 0) return false\n                m /= 10\n            }\n\
    \            first % 2 == 1 && last % 2 == 1\n        }\n        nums.filter(n\
    \ => n > 10 && isSpecial(n)).length", '        nums.filter(n => n > 10 && n.toString.head.toString.toInt
    % 2 == 1 && n.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            val s = n.toString\n            if (s.length\
    \ == 1) {\n                false\n            } else {\n                val first\
    \ = s.charAt(0).toString.toInt\n                val last = s.charAt(s.length -\
    \ 1).toString.toInt\n                if (first % 2 == 1 && last % 2 == 1 && n\
    \ > 10) {\n                    true\n                } else {\n              \
    \      false\n                }\n            }\n        }\n        nums.filter(isSpecial(_)).length",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // You have to return the number of elements in the array that are greater\
    \ than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        // You can use the function `isOdd`\n        // You can use the function\
    \ `isGreaterThan10`\n        // You can use the function `firstDigit`\n      \
    \  // You can use the function `lastDigit`\n        nums.filter(x => isGreaterThan10(x)\
    \ && isOdd(firstDigit(x)) && isOdd(lastDigit(x))).length", '        return nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(num : Long) : Boolean = {\n        \
    \    val numStr = num.toString\n            if (numStr.length == 1) return false\n\
    \            val firstDigit = numStr.charAt(0).asDigit\n            val lastDigit\
    \ = numStr.charAt(numStr.length - 1).asDigit\n            if (firstDigit % 2 ==\
    \ 0 || lastDigit % 2 == 0) return false\n            num > 10\n        }\n   \
    \     nums.filter(isSpecial(_)).length", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // You\
    \ need to return the number of elements in the list that are greater than 10 and\
    \ both first and last digits of a number are odd (1, 3, 5, 7, 9).\n        var\
    \ count = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 != 0 && num.toString.last.toString.toInt % 2 != 0) {\n                count\
    \ += 1\n            }\n        }\n        count", '        nums.filter(x => x
    > 10 && (x % 2 == 1) && (x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 ==
    7 || x % 10 == 9)).length', "        def isSpecial(num : Long) : Boolean = {\n\
    \            if (num < 10) return false\n            val str = num.toString\n\
    \            val first = str.charAt(0).toInt - '0'.toInt\n            val last\
    \ = str.charAt(str.length - 1).toInt - '0'.toInt\n            if (first % 2 ==\
    \ 0 || last % 2 == 0) return false\n            true\n        }\n        nums.filter(isSpecial).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0l\n        for (num <- nums) {\n    \
    \        if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        def isOdd(n : Long)\
    \ : Boolean = {\n            if (n % 2 == 0) false\n            else true\n  \
    \      }\n        def isSpecial(n : Long) : Boolean = {\n            if (n > 10\
    \ && isOdd(n / 10) && isOdd(n % 10)) true\n            else false\n        }\n\
    \        nums.filter(isSpecial(_)).length", '        nums.filter(x => (x > 10)
    && (x.toString.head.toString.toInt % 2 == 1) && (x.toString.last.toString.toInt
    % 2 == 1)).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length']
stop_tokens:
- "\n    }\n"
