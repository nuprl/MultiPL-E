name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an array of numbers as input and returns \n\
  \    // the number of elements in the array that are greater than 10 and both \n\
  \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
  \    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong,\
  \ 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ["        def isSpecial(n : Long) : Boolean = {\n            val nStr\
    \ = n.toString\n            if (nStr.length == 1) return false\n            val\
    \ firstDigit = nStr.charAt(0).asDigit\n            val lastDigit = nStr.charAt(nStr.length\
    \ - 1).asDigit\n            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return\
    \ false\n            return true\n        }\n        return nums.filter(n => n\
    \ > 10 && isSpecial(n)).length", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(num\
    \ : Long) : Boolean = {\n            val str = num.toString\n            val first\
    \ = str.charAt(0).toString.toInt\n            val last = str.charAt(str.length\
    \ - 1).toString.toInt\n            if (num > 10 && first % 2 == 1 && last % 2\
    \ == 1) true else false\n        }\n        nums.filter(isSpecial(_)).length",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ num.toString.length > 1 && num.toString.charAt(0).toString.toInt % 2 == 1 &&\
    \ num.toString.charAt(num.toString.length - 1).toString.toInt % 2 == 1) count\
    \ += 1\n        }\n        count", "        def isSpecial(num : Long) : Boolean\
    \ = {\n            val str = num.toString\n            if (str.length == 1) return\
    \ false\n            val first = str.head.toString.toInt\n            val last\
    \ = str.last.toString.toInt\n            if (first % 2 == 0 || last % 2 == 0)\
    \ return false\n            if (num <= 10) return false\n            return true\n\
    \        }\n        return nums.filter(isSpecial(_)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` the number of elements in the array that\
    \ are greater than 10 and both first and last digits of a number are odd (1, 3,\
    \ 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        def isSpecial(n\
    \ : Long) : Boolean = {\n            val s = n.toString\n            s.length\
    \ > 1 && s.head.toString.toInt % 2 == 1 && s.last.toString.toInt % 2 == 1 && n\
    \ > 10\n        }\n        nums.filter(isSpecial(_)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        var count = 0l\n        for (num <- nums) {\n      \
    \      if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        def isSpecial(n :\
    \ Long) : Boolean = {\n            val s = n.toString\n            val first =\
    \ s(0).toString.toInt\n            val last = s(s.length - 1).toString.toInt\n\
    \            n > 10 && first % 2 == 1 && last % 2 == 1\n        }\n        nums.filter(isSpecial).length",
  "        def isSpecial(n : Long) : Boolean = {\n            val s = n.toString\n\
    \            val first = s(0).toString.toInt\n            val last = s(s.length\
    \ - 1).toString.toInt\n            if (n > 10 && first % 2 == 1 && last % 2 ==\
    \ 1) true else false\n        }\n        nums.filter(isSpecial(_)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            if (n < 10) return false\n            val\
    \ s = n.toString\n            val first = s(0).toString.toInt\n            val\
    \ last = s(s.length - 1).toString.toInt\n            if (first % 2 == 0 || last\
    \ % 2 == 0) return false\n            return true\n        }\n        nums.filter(n\
    \ => n > 10 && isSpecial(n)).length", "        var count = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt % 2\
    \ == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n \
    \       count"]
stop_tokens:
- "\n    }\n"
