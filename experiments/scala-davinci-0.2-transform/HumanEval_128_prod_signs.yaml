name: HumanEval_128_prod_signs
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given an array arr of integers and you need to return\n    // sum\
  \ of magnitudes of integers multiplied by product of all signs\n    // of each number\
  \ in the array, represented by 1, -1 or 0.\n    // Note: return None for empty arr.\n\
  \    // Example:\n    // >>> prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong,\
  \ -4l.toLong)))\n    // 9l\n    // >>> prodSigns((List[Long](0l.toLong, 1l.toLong)))\n\
  \    // 0l\n    // >>> prodSigns((List[Long]()))\n    // None\n    def prodSigns(arr\
  \ : List[Long]) : Option[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(prodSigns((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, -4l.toLong))).equals(-9l));\n    assert(prodSigns((List[Long](0l.toLong,\
  \ 1l.toLong))).equals(0l));\n    assert(prodSigns((List[Long](1l.toLong, 1l.toLong,\
  \ 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(-10l));\n   \
  \ assert(prodSigns((List[Long]())).equals(None));\n    assert(prodSigns((List[Long](2l.toLong,\
  \ 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(20l));\n\
  \    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(4l));\n\
  \    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(-4l));\n\
  \    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(0l));\n\
  \    }\n\n}\n"
completions: ["        if (arr.isEmpty) None\n        else {\n            val sign\
    \ = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n            val mag\
    \ = arr.map(x => if (x < 0) -x else x)\n            Some(sign.product * mag.sum)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            var sum\
    \ = 0l\n            var prod = 1l\n            for (i <- arr) {\n            \
    \    if (i > 0) sum += i\n                else if (i < 0) {\n                \
    \    sum += -i\n                    prod *= -1\n                }\n          \
    \  }\n            Some(sum * prod)\n        }", "        if (arr.length == 0)\
    \ return None\n        var sum = 0l\n        var prod = 1l\n        for (i <-\
    \ arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n   \
    \             sum += -i\n                prod *= -1\n            }\n        }\n\
    \        return Some(sum * prod)", "        if (arr.length == 0) return None\n\
    \        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n     \
    \       if (i > 0) sum += i\n            else if (i < 0) {\n                sum\
    \ += -i\n                prod *= -1\n            }\n        }\n        return\
    \ Some(sum * prod)", "        if (arr.length == 0) return None\n        var sum\
    \ = 0l\n        var prod = 1l\n        for (i <- arr) {\n            if (i > 0)\
    \ sum += i\n            else if (i < 0) {\n                sum += -i\n       \
    \         prod *= -1\n            }\n        }\n        return Some(sum * prod)",
  "        if (arr.length == 0) return None\n        var sum = 0l\n        var prod\
    \ = 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum += -i\n                prod *= -1\n\
    \            }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            var product = 1l\n            var sum = 0l\n\
    \            for (i <- arr) {\n                if (i > 0) product *= 1\n     \
    \           else if (i < 0) product *= -1\n                else product *= 0\n\
    \                sum += abs(i)\n            }\n            Some(sum * product)\n\
    \        }", "        if (arr.length == 0) None\n        else {\n            var\
    \ sum = 0l\n            var prod = 1l\n            for (i <- arr) {\n        \
    \        if (i > 0) sum += i\n                else if (i < 0) {\n            \
    \        sum += -i\n                    prod *= -1\n                }\n      \
    \      }\n            Some(sum * prod)\n        }", "        if (arr.length ==\
    \ 0) return None\n        var sum = 0l\n        var prod = 1l\n        for (i\
    \ <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum += -i\n                prod *= -1\n            }\n      \
    \  }\n        return Some(sum * prod)", "        if (arr.isEmpty) None\n     \
    \   else {\n            var sum = 0l\n            var prod = 1l\n            for\
    \ (i <- arr) {\n                if (i > 0) sum += i\n                else if (i\
    \ < 0) {\n                    sum += -i\n                    prod *= -1\n    \
    \            }\n            }\n            Some(sum * prod)\n        }", "   \
    \     if (arr.isEmpty) None\n        else {\n            var sum = 0l\n      \
    \      var prod = 1l\n            for (i <- arr) {\n                if (i > 0)\
    \ sum += i\n                else if (i < 0) {\n                    sum += -i\n\
    \                    prod *= -1\n                }\n            }\n          \
    \  Some(sum * prod)\n        }", "        if (arr.length == 0) None\n        else\
    \ {\n            var product = 1l\n            var sum = 0l\n            for (i\
    \ <- arr) {\n                if (i > 0) product *= 1\n                else if\
    \ (i < 0) product *= -1\n                else product *= 0\n                sum\
    \ += abs(i)\n            }\n            Some(sum * product)\n        }", "   \
    \     if (arr.length == 0) None\n        else {\n            var sum = 0l\n  \
    \          var prod = 1l\n            for (i <- arr) {\n                if (i\
    \ > 0) sum += i\n                else if (i < 0) {\n                    sum +=\
    \ -i\n                    prod *= -1\n                }\n            }\n     \
    \       Some(sum * prod)\n        }", "        if (arr.length == 0) None\n   \
    \     else {\n            var prod = 1l\n            var sum = 0l\n          \
    \  for (i <- arr) {\n                if (i > 0) prod *= 1\n                else\
    \ if (i < 0) prod *= -1\n                else prod *= 0\n                sum +=\
    \ abs(i)\n            }\n            Some(sum * prod)\n        }", "        if\
    \ (arr.length == 0) return None\n        var prod = 1l\n        var sum = 0l\n\
    \        for (i <- arr) {\n            if (i == 0) prod = 0\n            else\
    \ if (i < 0) prod *= -1\n            sum += abs(i)\n        }\n        Some(sum\
    \ * prod)", "        if (arr.isEmpty) None\n        else {\n            var prod\
    \ = 1l\n            var sum = 0l\n            for (i <- arr) {\n             \
    \   if (i > 0) {\n                    prod *= 1\n                    sum += i\n\
    \                }\n                else if (i < 0) {\n                    prod\
    \ *= -1\n                    sum += -i\n                }\n                else\
    \ {\n                    prod *= 0\n                    sum += 0\n           \
    \     }\n            }\n            Some(sum * prod)\n        }", "        if\
    \ (arr.isEmpty) None\n        else {\n            var sum = 0l\n            var\
    \ prod = 1l\n            for (i <- arr) {\n                if (i > 0) sum += i\n\
    \                else if (i < 0) {\n                    sum += -i\n          \
    \          prod *= -1\n                }\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.isEmpty) None\n        else {\n      \
    \      var prod = 1l\n            var sum = 0l\n            for (i <- arr) {\n\
    \                if (i > 0) prod *= 1\n                else if (i < 0) prod *=\
    \ -1\n                else prod *= 0\n                sum += abs(i)\n        \
    \    }\n            Some(sum * prod)\n        }", "        if (arr.length == 0)\
    \ return None\n        var sign = 1\n        var sum = 0l\n        for (i <- arr)\
    \ {\n            if (i == 0) return Some(0l)\n            if (i < 0) sign *= -1\n\
    \            sum += abs(i)\n        }\n        Some(sum * sign)", "        if\
    \ (arr.length == 0) return None\n        var sum = 0l\n        var prod = 1l\n\
    \        for (i <- arr) {\n            sum += abs(i)\n            if (i != 0)\
    \ prod *= i / abs(i)\n        }\n        return Some(sum * prod)"]
stop_tokens:
- "\n    }\n"
