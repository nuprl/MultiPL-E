name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"Hello\"\
  , \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
  Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def splitWords(txt\
  \ : String) : Either[List[String], Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        // your code here\n        val words = txt.split(\" \")\n \
    \       if (words.length > 1) {\n            Left(words.toList)\n        } else\
    \ {\n            val words = txt.split(\",\")\n            if (words.length >\
    \ 1) {\n                Left(words.toList)\n            } else {\n           \
    \     var count = 0\n                for (i <- 0 until txt.length) {\n       \
    \             if (txt(i) - 'a' % 2 == 1) {\n                        count += 1\n\
    \                    }\n                }\n                Right(count)\n    \
    \        }\n        }", "        // TODO: Implement this function\n        null",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' >= 0 && txt(i) - 'a' < 26 && i % 2 == 0) count += 1\n                }\n\
    \                Right(count)\n            }\n        }", "        // TODO: Implement\
    \ me!\n        Left(List(\"Hello\", \"world!\"))", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toList.filter(x => x.toInt % 2 == 1).length)\n        }", "  \
    \      // TODO: Implement me\n        null", '        ???', "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        // Your code here\n\
    \        null", "        // TODO: Implement me!\n        null", "        // Your\
    \ code here\n        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => (c -\
    \ 'a') % 2 == 0).length)\n            }\n        }", "        // Your code here\n\
    \        null", "        // TODO: Implement this method\n        null", "    \
    \    if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n \
    \       } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.filter(x => x.toInt\
    \ % 2 == 1).length)\n        }", "        val words = txt.split(\" \")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        // TODO: Implement this method\n        Left(List(\"Hello\",\
    \ \"world!\"))", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => c >=\
    \ 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }", "        // Write your code here\n        null", " \
    \       // YOUR CODE HERE\n        null", "        val words = txt.split(\" \"\
    )\n        if (words.length > 1) Left(words.toList)\n        else {\n        \
    \    val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }"]
stop_tokens:
- "\n    }\n"
