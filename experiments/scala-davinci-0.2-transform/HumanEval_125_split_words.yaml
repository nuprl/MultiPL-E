name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"Hello\"\
  , \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
  Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def splitWords(txt\
  \ : String) : Either[List[String], Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        // your code here\n        val words = txt.split(\" \")\n \
    \       if (words.length > 1) {\n            Left(words.toList)\n        } else\
    \ {\n            val words = txt.split(\",\")\n            if (words.length >\
    \ 1) {\n                Left(words.toList)\n            } else {\n           \
    \     var count = 0\n                for (i <- 0 until txt.length) {\n       \
    \             if (txt(i) - 'a' % 2 == 1) {\n                        count += 1\n\
    \                    }\n                }\n                Right(count)\n    \
    \        }\n        }", "        // TODO: Implement this function\n        null",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' >= 0 && txt(i) - 'a' < 26 && i % 2 == 0) count += 1\n                }\n\
    \                Right(count)\n            }\n        }", "        // TODO: Implement\
    \ me!\n        Left(List(\"Hello\", \"world!\"))", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toList.filter(x => x.toInt % 2 == 1).length)\n        }", "  \
    \      // TODO: Implement me\n        null", '        ???', "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        // Your code here\n\
    \        null", "        // TODO: Implement me!\n        null", "        // Your\
    \ code here\n        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => (c -\
    \ 'a') % 2 == 0).length)\n            }\n        }", "        // Your code here\n\
    \        null", "        // TODO: Implement this method\n        null", "    \
    \    if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n \
    \       } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.filter(x => x.toInt\
    \ % 2 == 1).length)\n        }", "        val words = txt.split(\" \")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        // TODO: Implement this method\n        Left(List(\"Hello\",\
    \ \"world!\"))", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => c >=\
    \ 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }", "        // Write your code here\n        null", " \
    \       // YOUR CODE HERE\n        null", "        val words = txt.split(\" \"\
    )\n        if (words.length > 1) Left(words.toList)\n        else {\n        \
    \    val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.flatMap(x => x.toList).filter(x\
    \ => x.isLower).map(x => x.toInt - ord('a')).filter(x => x % 2 == 1).length)\n\
    \            }\n        }", '        ???', "        // TODO: Implement\n     \
    \   null", "        // TODO: Implement this function\n        ???", "        //\
    \ Your code here\n        null", "        // TODO: Implement me!\n        ???",
  "        // Your code here\n        null", "        // Your code here\n        null",
  "        // TODO: Implement this method\n        Left(List(\"Hello\", \"world!\"\
    ))", "        // Your code here\n        null", "        // Your code here\n \
    \       null", "        // Your code here\n        null", "        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                Right(txt.toList.filter(x => x.toInt %\
    \ 2 == 1).length)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n     \
    \       Left(words.toList)\n        } else {\n            val letters = txt.split(\"\
    ,\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                Right(letters.map(x => x.toCharArray.map(y\
    \ => y - 'a').filter(z => z % 2 == 1).length).sum)\n            }\n        }",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n  \
    \          Left(words.toList)\n        } else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.head.toLowerCase.map(c => if\
    \ (c - 'a' % 2 == 0) 1 else 0).sum)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        // Your code here\n\
    \        val words = txt.split(\" \")\n        if (words.length > 1) {\n     \
    \       Left(words.toList)\n        } else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toList.filter(c =>\
    \ c.toInt % 2 == 1).length)\n            }\n        }", "        // TODO: Implement\
    \ me\n        null", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0l\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && (txt(i) - 'a')\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        // TODO: Implement this method\n        ???",
  "        val words = txt.split(\" \")\n        if (words.length > 1) {\n       \
    \     Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.filter(c => c >= 'a' && c <=\
    \ 'z').map(c => c - 'a').filter(i => i % 2 == 0).length)\n            }\n    \
    \    }", "        // TODO: Implement me!\n        null", "        // Your code\
    \ here\n        null", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.map(c => (c - 'a')\
    \ % 2).filter(_ == 1).length)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.filter(x => x.toInt % 2 == 1).length)\n   \
    \     }", "        // Your code here\n        val words = txt.split(\" \")\n \
    \       if (words.length > 1) {\n            Left(words.toList)\n        } else\
    \ {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        var count = 0\n                for (i <- 0 until txt.length) {\n    \
    \                if (txt(i) >= 'a' && txt(i) <= 'z' && i % 2 == 0) {\n       \
    \                 count += 1\n                    }\n                }\n     \
    \           Right(count)\n            }\n        }", "        // Your code here\n\
    \        ???", "        // Your code here\n        if (txt.contains(\" \")) {\n\
    \            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toList.filter(x => x.toInt % 2 == 1).length)\n        }", "  \
    \      // Your code here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                val count = txt.filter(x => x.toInt % 2\
    \ == 1).length\n                Right(count)\n            }\n        }", "   \
    \     // TODO: Implement me!\n        null", "        // Your code here\n    \
    \    null", "        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0l\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && (txt(i) - 'a')\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        // YOUR CODE HERE\n        null", "        //\
    \ Your code here\n        null", "        // Your code here\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toList.filter(x\
    \ => x.toInt % 2 == 1).length\n                Right(count)\n            }\n \
    \       }", "        // Your code here\n        null", "        // your code here\n\
    \        null", "        // Your code here\n        val words = txt.split(\" \"\
    )\n        if (words.length > 1) {\n            Left(words.toList)\n        }\
    \ else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       val count = txt.filter(c => c.isLower && (c.toInt - 'a'.toInt) % 2 ==\
    \ 1).length\n                Right(count)\n            }\n        }", "      \
    \  // Your code goes here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toList.filter(c => c.isLower\
    \ && c.toInt % 2 == 1).length)\n            }\n        }", "        // YOUR CODE\
    \ HERE\n        null", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => c >=\
    \ 'a' && c <= 'z').zipWithIndex.filter(t => t._2 % 2 == 0).map(t => t._1).length)\n\
    \            }\n        }", "        // Your code here\n        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val letters = txt.split(\",\")\n            if (letters.length\
    \ > 1) {\n                Left(letters.toList)\n            } else {\n       \
    \         Right(letters(0).filter(c => c.toInt % 2 == 1).length)\n           \
    \ }\n        }", "        // Your code here\n        null", "        // your code\
    \ here\n        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).length)\n        }", "        // your code\
    \ here\n        null", "        // TODO: Implement this function\n        Left(List(\"\
    Hello\", \"world!\"))", "        // TODO: Implement this method\n        null",
  "        // Your code here\n        null", "        // Your code here\n        val\
    \ words = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       val count = txt.filter(c => c.isLower && c.toInt % 2 == 1).length\n  \
    \              Right(count)\n            }\n        }", "        // YOUR CODE\
    \ HERE\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                val letters = txt.toList\n            \
    \    var count = 0\n                for (i <- 0 until letters.length) {\n    \
    \                if (letters(i).toInt % 2 == 1) {\n                        count\
    \ += 1\n                    }\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (txt(i) - 'a') % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                val letters = txt.toLowerCase.toList\n  \
    \              val oddLetters = letters.zipWithIndex.filter(x => x._2 % 2 == 1).map(_._1)\n\
    \                Right(oddLetters.length)\n            }\n        }", "      \
    \  // Your code here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) {\n  \
    \                      count += 1\n                    }\n                }\n\
    \                Right(count)\n            }\n        }", "        // Your code\
    \ goes here\n        null", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val words = txt.split(\",\")\n            if (words.length > 1) {\n\
    \                Left(words.toList)\n            } else {\n                Right(txt.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(x => x == 1).length)\n\
    \            }\n        }", "        // Your code here\n        null", "     \
    \   // TODO: Implement this method\n        null", "        // Your code here\n\
    \        null", "        // Your code here\n        null", "        // Your code\
    \ here\n        null", "        // Your code here\n        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) {\n                Left(words.toList)\n            } else {\n         \
    \       Right(txt.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(x => x._2\
    \ % 2 == 0).map(x => x._1).length)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 1).map(p => p._1).distinct.length)\n            }\n        }",
  "        val words = txt.split(\" \")\n        if (words.length > 1) {\n       \
    \     Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toList.filter(c =>\
    \ c >= 'a' && c <= 'z').zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1).length)\n\
    \            }\n        }", "        // Your code here\n        ???", "      \
    \  // your code here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val letters\
    \ = txt.split(\",\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                val count = letters(0).count(c => c.toInt\
    \ % 2 == 1)\n                Right(count)\n            }\n        }", "      \
    \  // Your code here\n        null", "        if (txt.contains(\" \")) {\n   \
    \         Left(txt.split(\" \").toList)\n        } else if (txt.contains(\",\"\
    )) {\n            Left(txt.split(\",\").toList)\n        } else {\n          \
    \  Right(txt.toLowerCase.map(c => c - 'a').filter(i => i % 2 == 1).length)\n \
    \       }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toList.filter(x =>\
    \ x >= 'a' && x <= 'z').zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1).length)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val commas = txt.split(\",\")\n            if (commas.length > 1) {\n\
    \                Left(commas.toList)\n            } else {\n                Right(txt.filter(c\
    \ => c.isLower && c.toInt % 2 == 1).length)\n            }\n        }", "    \
    \    // your code here\n        null", "        // Your code here\n        null",
  "        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.map(x => x - 'a').filter(x\
    \ => x % 2 == 1).length)\n        }", "        // Your code here\n        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n           \
    \ Left(words.toList)\n        } else {\n            val chars = txt.split(\",\"\
    )\n            if (chars.length > 1) {\n                Left(chars.toList)\n \
    \           } else {\n                Right(txt.toList.filter(c => c.isLower &&\
    \ c.toInt % 2 == 1).length)\n            }\n        }", "        // TODO: Implement\
    \ this function\n        Right(0l)", "        val words = txt.split(\"\\\\s+\"\
    )\n        if (words.length > 1) Left(words.toList)\n        else {\n        \
    \    val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' >= 0 && txt(i) -\
    \ 'a' < 26 && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n       \
    \         Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.flatMap(x => x.toList).filter(x => x.isLower).map(x => x.toLong\
    \ - 'a'.toLong).filter(x => x % 2 == 1).length)\n            }\n        }", " \
    \       // Fill in the code here\n        val words = txt.split(\" \")\n     \
    \   if (words.length > 1) {\n            Left(words.toList)\n        } else {\n\
    \            val letters = txt.split(\",\")\n            if (letters.length >\
    \ 1) {\n                Left(letters.toList)\n            } else {\n         \
    \       val count = txt.count(c => c.isLower && c.toInt % 2 == 1)\n          \
    \      Right(count)\n            }\n        }", "        // TODO: Implement this\
    \ function\n        null", "        // Your code here\n        null", "      \
    \  val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val splitOnWhitespace = txt.split(\"\\\\\
    s+\")\n        if (splitOnWhitespace.length > 1) {\n            Left(splitOnWhitespace.toList)\n\
    \        } else {\n            val splitOnComma = txt.split(\",\")\n         \
    \   if (splitOnComma.length > 1) {\n                Left(splitOnComma.toList)\n\
    \            } else {\n                Right(txt.count(c => c.isLower && c.toInt\
    \ % 2 == 1))\n            }\n        }", "        val words = txt.split(\" \"\
    )\n        if (words.length > 1) {\n            Left(words.toList)\n        }\
    \ else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.filter(c => c.isLower && c.toInt % 2 == 1).length)\n      \
    \      }\n        }", "        // TODO: Implement me!\n        null", "      \
    \  // Your code here\n        null", "        // Your code here\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     var count = 0\n            for (i <- 0 until txt.length) {\n           \
    \     if (txt(i) - 'a' % 2 == 1) {\n                    count += 1\n         \
    \       }\n            }\n            Right(count)\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toList.filter(x => x.toInt % 2 == 1).length)\n        }", "  \
    \      // TODO: Implement me\n        Left(List(\"Hello\", \"world!\"))", "  \
    \      // Your code here\n        null", "        // Your code here\n        null",
  "        // TODO: Implement this method\n        ???", "        // Your code here\n\
    \        null", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0l\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && i % 2 == 0) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.flatMap(x => x.toList).filter(x\
    \ => x.isLower).map(x => x.toInt - 'a'.toInt).filter(x => x % 2 == 1).length)\n\
    \            }\n        }", "        // TODO: Implement this method\n        ???",
  "        // TODO: Implement this function\n        ???", "        // Your code here\n\
    \        null", "        // Your code here\n        null", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.filter(c => c.isLower && c.toInt % 2 == 1).length)\n      \
    \      }\n        }", "        // TODO: Implement this method\n        Left(List(\"\
    Hello\", \"world!\"))", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) Left(words.toList)\n        else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n \
    \           else {\n                var count = 0\n                for (i <- 0\
    \ until txt.length) {\n                    if (txt(i) - 'a' >= 0 && txt(i) - 'a'\
    \ < 26 && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n           \
    \     Right(count)\n            }\n        }", "        // TODO: Implement me!\n\
    \        null", "        // TODO: Implement this method\n        ???", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n     \
    \       Left(words.toList)\n        } else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => c >=\
    \ 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(i => i == 1).length)\n     \
    \       }\n        }", "        // Your code here\n        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.map(c => c.toLowerCase).filter(c => (c.toInt - 'a'.toInt)\
    \ % 2 == 1).length)\n            }\n        }", "        // Your code here\n \
    \       null", "        // Your code here\n        null", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.map(_.toCharArray.map(c => (c - 'a') % 2).sum).sum)\n    \
    \        }\n        }", "        // Your code here\n        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) {\n                Left(words.toList)\n            } else {\n         \
    \       Right(txt.filter(c => c.isLower).zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(txt.toLowerCase.toList.filter(x => x >= 'a' && x <= 'z').zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).length)\n            }\n        }", "     \
    \   // TODO: Implement me!\n        null", "        // TODO: Implement this method\n\
    \        null", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.filter(c =>\
    \ c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n   \
    \             Right(count)\n            }\n        }", "        // TODO: implement\
    \ me\n        null", "        // Your code here\n        null", '        ???',
  "        // TODO: Implement me\n        null", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val commas = txt.split(\",\")\n            if (commas.length > 1) {\n\
    \                Left(commas.toList)\n            } else {\n                Right(txt.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(c => c == 1).length)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) {\n            Left(words.toList)\n        } else {\n\
    \            val letters = txt.split(\",\")\n            if (letters.length >\
    \ 1) {\n                Left(letters.toList)\n            } else {\n         \
    \       Right(letters(0).toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1 - 'a' % 2 == 1))\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' >= 0 && txt(i) -\
    \ 'a' < 26 && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n       \
    \         Right(count)\n            }\n        }", "        // TODO: Implement\
    \ me!\n        Left(List[String]())", "        val words = txt.split(\"\\\\s+\"\
    )\n        if (words.length > 1) {\n            Left(words.toList)\n        }\
    \ else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1.toInt - 'a'.toInt % 2 == 1))\n            }\n        }", "        //\
    \ Your code here\n        null", "        // Your code here\n        null", " \
    \       // Your code here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.toList.filter(x\
    \ => x.toInt % 2 == 1).length\n                Right(count)\n            }\n \
    \       }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c.toInt - 'a'.toInt % 2 == 1).length\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val chars = txt.split(\",\")\n            if (chars.length > 1) {\n\
    \                Left(chars.toList)\n            } else {\n                Right(chars.flatMap(x\
    \ => x.toList).filter(x => x.isLower).map(x => x.toInt - 'a'.toInt).filter(x =>\
    \ x % 2 == 1).length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' >= 0 && txt(i) -\
    \ 'a' < 26 && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n       \
    \         Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1.toInt - 'a'.toInt % 2 == 1))\n            }\n        }", "        //\
    \ Your code here\n        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            var count = 0\n            for (i\
    \ <- 0 until txt.length) {\n                if (txt(i) - 'a' % 2 == 1) {\n   \
    \                 count += 1\n                }\n            }\n            Right(count)\n\
    \        }", "        // TODO: Implement me!\n        null", "        // TODO:\
    \ Implement me!\n        ???", "        // Your code here\n        null", "  \
    \      // TODO: Implement me!\n        Left(List(\"\"))", "        // YOUR CODE\
    \ HERE\n        null", "        // Your code here\n        null", "        //\
    \ TODO: Implement me!\n        Left(List())", "        // your code here\n   \
    \     val words = txt.split(\" \")\n        if (words.length > 1) {\n        \
    \    Left(words.toList)\n        } else {\n            val letters = txt.split(\"\
    ,\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                val count = txt.toList.filter(c => c.toInt\
    \ % 2 == 1).length\n                Right(count)\n            }\n        }", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (txt(i) - 'a') % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        // TODO\n        null", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       val count = txt.toLowerCase.toCharArray.filter(c => c - 'a' % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a')).filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        // TODO: Implement\
    \ me!\n        ???", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0l\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) - 'a' % 2 == 1) count += 1\n             \
    \   }\n                Right(count)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        //\
    \ Write your code here\n        ???", "        // your code here\n        null",
  "        // YOUR CODE HERE\n        null", "        val words = txt.split(\" \"\
    )\n        if (words.length > 1) {\n            Left(words.toList)\n        }\
    \ else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(x => x.toInt % 2 == 1).length)\n\
    \            }\n        }", "        // TODO: Implement me!\n        null", " \
    \       // Your code here\n        null", "        val words = txt.split(\"\\\\\
    s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        // Your code here\n        null", "     \
    \   val words = txt.split(\" \")\n        if (words.length > 1) {\n          \
    \  Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.filter(c => c.isLower && c.toInt\
    \ % 2 == 1).length)\n            }\n        }", "        // TODO: Implement\n\
    \        null", "        // Write your code here\n        null", "        // your\
    \ code here\n        if (txt.contains(\" \")) {\n          Left(txt.split(\" \"\
    ).toList)\n        } else if (txt.contains(\",\")) {\n          Left(txt.split(\"\
    ,\").toList)\n        } else {\n          Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 1).map(x => x._1.toInt - 'a'.toInt).sum)\n        }", "     \
    \   // your code here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                Right(txt.filter(x => x.toInt % 2 == 1).length)\n\
    \            }\n        }", "        // Your code here\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     val l = txt.toLowerCase.toList\n            var count = 0\n            for\
    \ (i <- 0 until l.length) {\n                if (i % 2 == 0) {\n             \
    \       if (l(i) == 'a' || l(i) == 'c' || l(i) == 'e' || l(i) == 'g' || l(i) ==\
    \ 'i' || l(i) == 'k' || l(i) == 'm' || l(i) == 'o' || l(i) == 'q' || l(i) == 's'\
    \ || l(i) == 'u' || l(i) == 'w' || l(i) == 'y') {\n                        count\
    \ += 1\n                    }\n                }\n            }\n            Right(count)\n\
    \        }", "        // Your code here\n        null", "        var words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            return Left(words.toList)\n\
    \        }\n        words = txt.split(\",\")\n        if (words.length > 1) {\n\
    \            return Left(words.toList)\n        }\n        var count = 0\n   \
    \     for (i <- 0 until txt.length) {\n            if ((txt(i) - 'a') % 2 == 1)\
    \ {\n                count += 1\n            }\n        }\n        return Right(count)",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n  \
    \          Left(words.toList)\n        } else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.filter(c =>\
    \ c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).count(b => b == 1)\n         \
    \       Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }", "     \
    \   var words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n     \
    \       Left(words.toList)\n        } else {\n            words = txt.split(\"\
    ,\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (i % 2 == 0)) {\n                        count += 1\n                   \
    \ }\n                }\n                Right(count)\n            }\n        }",
  "        // TODO: Implement this function\n        Right(0)", "        // Your code\
    \ here\n        null", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val chars = txt.split(\",\")\n            if (chars.length > 1) {\n\
    \                Left(chars.toList)\n            } else {\n                val\
    \ count = txt.toLowerCase.map(c => c - 'a').filter(i => i % 2 == 1).length\n \
    \               Right(count)\n            }\n        }", "        val words =\
    \ txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) {\n                Left(words.toList)\n            } else {\n         \
    \       Right(txt.toLowerCase.map(c => c - 'a').filter(i => i % 2 == 1).length)\n\
    \            }\n        }", "        // TODO: Implement this method\n        null",
  "        // TODO: Implement this method\n        null", "        // Your code here\n\
    \        null", "        // Your code here\n        null", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 0) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }", "        val\
    \ words = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.filter(x => x.toInt % 2 == 1).length)\n       \
    \     }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.flatMap(x => x.toList).filter(x\
    \ => x.isLower).map(x => x.toInt - ord('a')).filter(x => x % 2 == 1).length)\n\
    \            }\n        }", "        // TODO: Implement me!\n        Left(List())",
  "        // YOUR CODE HERE\n        null"]
stop_tokens:
- "\n    }\n"
