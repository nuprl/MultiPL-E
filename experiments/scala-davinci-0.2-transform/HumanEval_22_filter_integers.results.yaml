language: scala
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = List[Long]()\n\
    \        for (value <- values) {\n            value match {\n                case\
    \ i : Long => result = result :+ i\n                case _ =>\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(v => v.isInstanceOf[Long]).map(v\
    \ => v.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = List()\n  \
    \      for (value <- values) {\n            value match {\n                case\
    \ i : Long => result = result :+ i\n                case _ =>\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = List()\n  \
    \      for (value <- values) {\n            value match {\n                case\
    \ x : Int => result = result :+ x.toLong\n                case x : Long => result\
    \ = result :+ x\n                case _ =>\n            }\n        }\n       \
    \ return result\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = List[Long]()\n\
    \        for (value <- values) {\n            value match {\n                case\
    \ x : Long => result = result :+ x\n                case _ =>\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = List[Long]()\n\
    \        for (value <- values) {\n            value match {\n                case\
    \ x : Long => result = result :+ x\n                case _ =>\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = List()\n  \
    \      for (value <- values) {\n            value match {\n                case\
    \ v : Long => result = result :+ v\n                case _ =>\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = List()\n  \
    \      for (value <- values) {\n            value match {\n                case\
    \ x : Long => result = result :+ x\n                case _ =>\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        val result = new ListBuffer[Long]()\n\
    \        for (value <- values) {\n            value match {\n                case\
    \ i : Int => result += i.toLong\n                case l : Long => result += l\n\
    \                case _ =>\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        var result : List[Long] = List()\n  \
    \      for (value <- values) {\n            value match {\n                case\
    \ x : Long => result = result :+ x\n                case _ =>\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        // TODO: Implement me\n        return\
    \ List[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwcj0rmz.scala:15)\n\tat Problem.main(tmpjwcj0rmz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
    \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
    \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
    \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Filter given list of any python values only for integers\n    // >>>\
    \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
    \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
    \ : List[Any]) : List[Long] = {\n        return values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(filterIntegers((List[Any]())).equals((List[Long]())));\n    assert(filterIntegers((List[Any](4l,\
    \ Map[Long,Long](), List[Long](), 23.2f, 9l, \"adasd\"))).equals((List[Long](4l.toLong,\
    \ 9l.toLong))));\n    assert(filterIntegers((List[Any](3l, \"c\", 3l, 3l, \"a\"\
    , \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795345
