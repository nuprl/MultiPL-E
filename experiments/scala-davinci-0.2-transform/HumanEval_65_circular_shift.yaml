name: HumanEval_65_circular_shift
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Circular shift the digits of the integer x, shift the digits right by shift\n\
  \    // and return the result as a string.\n    // If shift > number of digits,\
  \ return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\"\
  )\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x\
  \ : Long, shift : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        val s = x.toString\n        val n = s.length\n        if (shift\
    \ > n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0, n\
    \ - shift.toInt)", "        val digits = x.toString.length\n        if (shift\
    \ > digits) x.toString.reverse\n        else {\n            val shiftDigits =\
    \ x.toString.substring(0, digits - shift.toInt)\n            val unshiftDigits\
    \ = x.toString.substring(digits - shift.toInt, digits)\n            unshiftDigits\
    \ + shiftDigits\n        }", "        val s = x.toString\n        val n = s.length\n\
    \        val shiftMod = shift % n\n        if (shiftMod == 0) s\n        else\
    \ if (shiftMod == 1) s.last + s.substring(0, n - 1)\n        else s.substring(n\
    \ - shiftMod, n) + s.substring(0, n - shiftMod)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            return x.toString.reverse\n      \
    \  }\n        val right = x % pow(10, shift).toLong\n        val left = x / pow(10,\
    \ shift).toLong\n        (right.toString + left.toString).reverse", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.length\n        if (shift > digits) {\n       \
    \     x.toString.reverse\n        } else {\n            val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            b + a\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else digits.slice(n - shift.toInt, n) ++ digits.slice(0, n - shift.toInt)\
    \ mkString", "        val digits = x.toString.length\n        if (shift > digits)\
    \ x.toString.reverse\n        else x.toString.substring(digits - shift.toInt)\
    \ + x.toString.substring(0, digits - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n - shift\
    \ else shift\n        val shift2 = if (shift > n) shift - n else 0\n        val\
    \ (left, right) = digits.splitAt(n - shift1)\n        (right ++ left).reverse.mkString",
  "        val digits = x.toString.length\n        if (shift >= digits) x.toString.reverse\n\
    \        else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val digits = x.toString.map(_.asDigit)\n\
    \        val shiftDigits = digits.slice(digits.length - shift.toInt, digits.length)\n\
    \        val remainingDigits = digits.slice(0, digits.length - shift.toInt)\n\
    \        (shiftDigits ++ remainingDigits).mkString", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (a, b) = digits.splitAt(shift2)\n        (b ++ a).mkString",
  "        val digits = x.toString.toList\n        val shiftDigits = digits.drop((digits.length\
    \ - shift.toInt) % digits.length)\n        val remainingDigits = digits.take((digits.length\
    \ - shift.toInt) % digits.length)\n        (shiftDigits ::: remainingDigits).mkString",
  "        val str = x.toString\n        val len = str.length\n        if (shift >=\
    \ len) str.reverse\n        else str.substring(len - shift.toInt) + str.substring(0,\
    \ len - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n else shift\n\
    \        val shift2 = if (shift1 == n) 0 else shift1\n        val (left, right)\
    \ = digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.length\n        if (shift > digits) x.toString.reverse\n\
    \        else x.toString.substring(digits - shift.toInt) + x.toString.substring(0,\
    \ digits - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.map(_.asDigit)\n\
    \        val n = digits.length\n        val shifted = digits.slice(n - shift.toInt,\
    \ n) ++ digits.slice(0, n - shift.toInt)\n        shifted.mkString", "       \
    \ val digits = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val s = x.toString\n        if (shift\
    \ > s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        val\
    \ n = digits.length\n        val shift2 = if (shift > n) n - shift else shift\n\
    \        val (left, right) = digits.splitAt(shift2)\n        (right ::: left).mkString",
  "        val s = x.toString\n        val n = s.length\n        val r = shift % n\n\
    \        if (r == 0) s\n        else if (r < n / 2) s.substring(r) + s.substring(0,\
    \ r)\n        else s.substring(n - r) + s.substring(0, n - r)", "        val s\
    \ = x.toString\n        if (shift >= s.length) s.reverse\n        else s.substring(s.length\
    \ - shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.toList\n        val shiftDigits = digits.drop((digits.length -\
    \ shift).toInt) ::: digits.take((digits.length - shift).toInt)\n        shiftDigits.mkString",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   val shift2 = if (shift > len) len else shift\n        val (left, right) =\
    \ digits.splitAt(len - shift2)\n        (right ::: left).mkString", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.length\n        if (shift >= digits) x.toString.reverse\n\
    \        else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val digits = x.toString.length\n    \
    \    if (shift > digits) x.toString.reverse\n        else {\n            val (a,\
    \ b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n        }",
  "        val digits = x.toString.length\n        val shift2 = if (shift > digits)\
    \ digits else shift\n        val shift3 = if (shift2 == digits) 0 else shift2\n\
    \        val (left, right) = x.toString.splitAt(digits - shift3)\n        right\
    \ + left", "        val digits = x.toString.length\n        val shiftDigits =\
    \ shift % digits\n        if (shiftDigits == 0) x.toString\n        else {\n \
    \           val (left, right) = x.toString.splitAt(digits - shiftDigits.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.length\n\
    \        if (shift >= digits) x.toString.reverse\n        else {\n           \
    \ val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n \
    \       }", "        val digits = x.toString.toList\n        val len = digits.length\n\
    \        val shiftMod = shift % len\n        if (shiftMod == 0) x.toString\n \
    \       else {\n            val (left, right) = digits.splitAt(len - shiftMod)\n\
    \            (right ::: left).mkString\n        }", "        val digits = x.toString.map(_.asDigit)\n\
    \        val n = digits.length\n        val shifted = digits.slice(n - shift.toInt,\
    \ n) ++ digits.slice(0, n - shift.toInt)\n        shifted.mkString", "       \
    \ val digits = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.map(_.asDigit)\n\
    \        val n = digits.length\n        val shiftMod = shift % n\n        if (shiftMod\
    \ == 0) {\n            digits.mkString\n        } else {\n            val (left,\
    \ right) = digits.splitAt(n - shiftMod)\n            (right ++ left).mkString\n\
    \        }", "        val digits = x.toString.map(_.asDigit)\n        if (shift\
    \ > digits.length) digits.reverse.mkString\n        else {\n            val (left,\
    \ right) = digits.splitAt(digits.length - shift.toInt)\n            (right ++\
    \ left).mkString\n        }", "        val s = x.toString\n        val len = s.length\n\
    \        val shift2 = if (shift > len) len else shift\n        val shift3 = if\
    \ (shift2 == len) 0 else shift2\n        s.substring(len - shift3) + s.substring(0,\
    \ len - shift3)", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        val shift1 = shift % n\n        if (shift1 == 0) digits.mkString\n  \
    \      else if (shift1 > n / 2) digits.reverse.mkString\n        else digits.drop(shift1.toInt).mkString\
    \ + digits.take(shift1.toInt).mkString", "        val digits = x.toString.toList\n\
    \        if (shift >= digits.length) digits.reverse.mkString\n        else (digits.drop(shift.toInt)\
    \ ::: digits.take(shift.toInt)).mkString", "        val digits = x.toString.length\n\
    \        val shiftDigits = shift % digits\n        if (shiftDigits == 0) x.toString\n\
    \        else {\n            val (left, right) = x.toString.splitAt(digits - shiftDigits.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val digits = x.toString.length\n        if\
    \ (shift >= digits) x.toString.reverse\n        else {\n            val (a, b)\
    \ = x.toString.splitAt(digits - shift.toInt)\n            b + a\n        }", " \
    \       val digits = x.toString.length\n        if (shift > digits) {\n      \
    \      x.toString.reverse\n        } else {\n            val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            b + a\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift == n) s.reverse\n        else if\
    \ (shift > n) s.reverse.substring(0, n)\n        else s.substring(n - shift.toInt,\
    \ n) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n       \
    \ val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n\
    \            (right ::: left).mkString\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            return x.toString.reverse\n      \
    \  }\n        val right = x % pow(10, shift).toLong\n        val left = x / pow(10,\
    \ shift).toLong\n        return (right.toString + left.toString)", "        val\
    \ digits = x.toString.length\n        if (shift >= digits) return x.toString.reverse\n\
    \        val (left, right) = x.toString.splitAt(digits - shift.toInt)\n      \
    \  right + left", "        val s = x.toString\n        if (shift > s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val digits = x.toString.map(_.asDigit)\n        if (shift\
    \ > digits.length) digits.reverse.mkString\n        else digits.drop(shift.toInt)\
    \ ++ digits.take(shift.toInt) mkString", "        val s = x.toString\n       \
    \ val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt)\n        val\
    \ shiftedDigits = shiftDigits ::: digits.dropRight(shift.toInt)\n        shiftedDigits.mkString",
  "        val digits = x.toString.length\n        if (shift >= digits) x.toString.reverse\n\
    \        else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val n\
    \ = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = shift % n\n        if (shift2\
    \ == 0) digits.mkString\n        else if (shift2 < n / 2) digits.drop(shift2).mkString\
    \ + digits.take(shift2).mkString\n        else digits.takeRight(n - shift2).mkString\
    \ + digits.dropRight(n - shift2).mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (left, right) = x.toString.splitAt(digits - shift.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val digits = x.toString.length\n        if\
    \ (shift >= digits) x.toString.reverse\n        else {\n            val (left,\
    \ right) = x.toString.splitAt(digits - shift.toInt)\n            (right + left)\n\
    \        }", "        val digits = x.toString.length\n        if (shift > digits)\
    \ {\n            x.toString.reverse\n        } else {\n            val (a, b)\
    \ = x.toString.splitAt(digits - shift.toInt)\n            b + a\n        }", " \
    \       val digits = x.toString.length\n        if (shift > digits) {\n      \
    \      x.toString.reverse\n        } else {\n            val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            b + a\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        val m = shift % n\n        if (m == 0) s\n\
    \        else s.substring(n - m) + s.substring(0, n - m)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.toList\n        val n = digits.length\n        val shift1 = if\
    \ (shift > n) n - shift else shift\n        val (left, right) = digits.splitAt(shift1)\n\
    \        (right ::: left).mkString", "        val digits = x.toString.length\n\
    \        if (shift >= digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       (b + a)\n        }", "        val digits = x.toString.length\n       \
    \ if (shift > digits) x.toString.reverse\n        else {\n            val (a,\
    \ b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n        }",
  "        val digits = x.toString.toList\n        val shiftDigits = (digits.length\
    \ - shift) % digits.length\n        val shifted = digits.slice(shiftDigits, digits.length)\
    \ ++ digits.slice(0, shiftDigits)\n        shifted.mkString", "        val s =\
    \ x.toString\n        if (shift > s.length) s.reverse\n        else s.substring(s.length\
    \ - shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.toList\n        val n = digits.length\n        if (shift >= n)\
    \ digits.reverse.mkString\n        else {\n            val (left, right) = digits.splitAt(n\
    \ - shift.toInt)\n            (right ::: left).mkString\n        }", "       \
    \ val digits = x.toString.toList\n        val n = digits.length\n        val shift1\
    \ = shift % n\n        val shift2 = if (shift1 == 0) n else shift1\n        val\
    \ (a, b) = digits.splitAt(n - shift2)\n        (b ::: a).mkString", "        val\
    \ digits = x.toString.toList\n        val n = digits.length\n        val shift2\
    \ = if (shift > n) n - shift else shift\n        val (a, b) = digits.splitAt(n\
    \ - shift2)\n        (b ++ a).mkString", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = shift % n\n        if (shift2\
    \ == 0) digits.mkString\n        else if (shift2 > n / 2) digits.reverse.mkString\n\
    \        else (digits.drop(n - shift2) ++ digits.take(n - shift2)).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.length\n        val shift2 = if (shift > digits)\
    \ digits else shift\n        val shift3 = if (shift2 == digits) 0 else shift2\n\
    \        val shift4 = if (shift3 == 0) digits else shift3\n        val shift5\
    \ = if (shift4 == digits) 1 else shift4\n        val shift6 = if (shift5 == 1)\
    \ digits - 1 else shift5\n        val shift7 = if (shift6 == digits - 1) 2 else\
    \ shift6\n        val shift8 = if (shift7 == 2) digits - 2 else shift7\n     \
    \   val shift9 = if (shift8 == digits - 2) 3 else shift8\n        val shift10\
    \ = if (shift9 == 3) digits - 3 else shift9\n        val shift11 = if (shift10\
    \ == digits - 3) 4 else shift10\n        val shift12 = if (shift11 == 4) digits\
    \ - 4 else shift11\n        val shift13 = if (shift12 == digits - 4) 5 else shift12\n\
    \        val shift14 = if (shift13 == 5) digits - 5 else shift13\n        val\
    \ shift15 = if (shift14 == digits - 5) 6 else shift14\n        val shift16 = if\
    \ (shift15 == 6) digits - 6 else shift15\n        val shift17 = if (shift16 ==\
    \ digits - 6) 7 else shift16\n        val shift18 = if (shift17 == 7) digits -\
    \ 7 else shift17\n        val shift19 = if (shift18 == digits - 7) 8 else shift18\n\
    \        val shift20 = if (shift19 == 8) digits - 8 else shift19\n        val\
    \ shift21 = if (shift20 == digits - 8) 9 else shift20\n        val shift22 = if\
    \ (shift21 == 9) digits - 9 else shift21\n        val shift23 = if (shift22 ==\
    \ digits - 9) 10 else shift22\n        val shift24 = if (shift23 == 10) digits\
    \ - 10 else shift23\n        val shift25 = if (shift24 == digits - 10) 11 else\
    \ shift24\n        val shift26 = if (shift25 == 11) digits - 11 else shift25\n\
    \        val shift27 = if (shift26 == digits - 11) 12 else shift26\n        val\
    \ shift28 = if (shift27 == 12) digits - 12 else", "        val digits = x.toString.map(_.asDigit)\n\
    \        val shiftDigits = digits.slice(digits.length - shift.toInt, digits.length)\n\
    \        val remainingDigits = digits.slice(0, digits.length - shift.toInt)\n\
    \        (shiftDigits ++ remainingDigits).mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            return x.toString.reverse\n      \
    \  }\n        val left = x.toString.substring(0, digits - shift.toInt)\n     \
    \   val right = x.toString.substring(digits - shift.toInt, digits)\n        return\
    \ right + left", "        val digits = x.toString.length\n        if (shift >\
    \ digits) x.toString.reverse\n        else {\n            val shiftDigits = x.toString.substring(digits\
    \ - shift.toInt)\n            val remainingDigits = x.toString.substring(0, digits\
    \ - shift.toInt)\n            shiftDigits + remainingDigits\n        }", "   \
    \     val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ val shift2 = if (shift > n) n - shift else shift\n        val (left, right)\
    \ = digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ digits = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val digits = x.toString.length\n    \
    \    if (shift > digits) x.toString.reverse\n        else {\n            val (left,\
    \ right) = x.toString.splitAt(digits - shift.toInt)\n            right + left\n\
    \        }", "        val s = x.toString\n        if (shift > s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val s = x.toString\n        if (shift >= s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        val shift2 = if (shift > n) n - shift else shift\n        val (left,\
    \ right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString", " \
    \       val digits = x.toString.toList\n        val shiftDigits = digits.drop((digits.length\
    \ - shift).toInt) ::: digits.take((digits.length - shift).toInt)\n        shiftDigits.mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        val r = shift % n\n\
    \        if (r == 0) s\n        else if (r < n / 2) s.substring(r) + s.substring(0,\
    \ r)\n        else s.substring(n - r) + s.substring(0, n - r)", "        val digits\
    \ = x.toString.toList\n        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else (digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)).mkString",
  "        val digits = x.toString.length\n        val shiftDigits = shift % digits\n\
    \        if (shiftDigits == 0) x.toString\n        else {\n            val (left,\
    \ right) = x.toString.splitAt(digits - shiftDigits.toInt)\n            right +\
    \ left\n        }", "        val digits = x.toString.length\n        if (shift\
    \ > digits) x.toString.reverse\n        else x.toString.substring(digits - shift.toInt)\
    \ + x.toString.substring(0, digits - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n\
    \            (right ::: left).mkString\n        }", "        val n = x.toString.length\n\
    \        if (shift > n) return x.toString.reverse\n        val (a, b) = x.toString.splitAt(n\
    \ - shift.toInt)\n        b + a", "        val digits = x.toString.toList\n  \
    \      val n = digits.length\n        val shift2 = if (shift > n) n - shift else\
    \ shift\n        val (left, right) = digits.splitAt(n - shift2)\n        (right\
    \ ::: left).mkString", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(n - shift2)\n       \
    \ (right ::: left).mkString", "        if (shift == 0) return x.toString\n   \
    \     val digits = x.toString.length\n        if (shift >= digits) return x.toString.reverse\n\
    \        val (left, right) = x.toString.splitAt(digits - shift.toInt)\n      \
    \  right + left", "        val digits = x.toString.map(_.asDigit)\n        val\
    \ n = digits.length\n        val shift1 = shift % n\n        if (shift1 == 0)\
    \ x.toString\n        else if (shift1 == n) digits.reverse.mkString\n        else\
    \ digits.drop(n - shift1).mkString + digits.take(n - shift1).mkString", "    \
    \    if (shift == 0) return x.toString\n        val digits = x.toString.length\n\
    \        if (shift >= digits) return x.toString.reverse\n        val left = x.toString.substring(0,\
    \ digits - shift.toInt)\n        val right = x.toString.substring(digits - shift.toInt,\
    \ digits)\n        return right + left", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n\
    \        else digits.drop(n - shift.toInt).mkString + digits.take(n - shift.toInt).mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift >= n) digits.reverse.mkString\n        else (digits.drop(n - shift.toInt)\
    \ ::: digits.take(n - shift.toInt)).mkString", "        val digits = x.toString.map(_.asDigit)\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else {\n\
    \            val shifted = digits.slice(digits.length - shift.toInt, digits.length)\
    \ ++ digits.slice(0, digits.length - shift.toInt)\n            shifted.mkString\n\
    \        }", "        val digits = x.toString.length\n        if (shift > digits)\
    \ x.toString.reverse\n        else {\n            val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            b + a\n        }", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val digits = x.toString.length\n        if (shift >= digits)\
    \ x.toString.reverse\n        else x.toString.substring(digits - shift.toInt)\
    \ + x.toString.substring(0, digits - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt)\n        val\
    \ shiftedDigits = shiftDigits ++ digits.take(digits.length - shift.toInt)\n  \
    \      shiftedDigits.mkString", "        val digits = x.toString.length\n    \
    \    if (shift > digits) x.toString.reverse\n        else {\n            val (a,\
    \ b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n        }",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   if (shift > len) digits.reverse.mkString\n        else {\n            val\
    \ (left, right) = digits.splitAt(len - shift.toInt)\n            (right ::: left).mkString\n\
    \        }", "        val digits = x.toString.length\n        if (shift > digits)\
    \ {\n            x.toString.reverse\n        } else {\n            val (a, b)\
    \ = x.toString.splitAt(digits - shift.toInt)\n            b + a\n        }", " \
    \       val digits = x.toString.toList\n        val n = digits.length\n      \
    \  val shift2 = if (shift > n) n - shift else shift\n        val (a, b) = digits.splitAt(n\
    \ - shift2)\n        (b ++ a).mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val s = x.toString\n        val n = s.length\n        if (shift\
    \ > n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0, n\
    \ - shift.toInt)", "        val s = x.toString\n        val n = s.length\n   \
    \     val shift2 = if (shift > n) n - shift else shift\n        s.substring(n\
    \ - shift2) + s.substring(0, n - shift2)", "        val s = x.toString\n     \
    \   val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val digits = x.toString.length\n        if\
    \ (shift > digits) x.toString.reverse\n        else x.toString.substring(digits\
    \ - shift.toInt) + x.toString.substring(0, digits - shift.toInt)", "        val\
    \ digits = x.toString.toList\n        val n = digits.length\n        val shift\
    \ = shift % n\n        if (shift == 0) digits.mkString\n        else if (shift\
    \ < n / 2) digits.slice(shift, n).mkString + digits.slice(0, shift).mkString\n\
    \        else digits.reverse.slice(0, n - shift).mkString + digits.reverse.slice(n\
    \ - shift, n).mkString", "        val digits = x.toString.map(_.asDigit)\n   \
    \     val n = digits.length\n        val shifted = if (shift > n) digits.reverse\
    \ else digits.slice(n - shift.toInt, n) ++ digits.slice(0, n - shift.toInt)\n\
    \        shifted.mkString", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt)\n        val\
    \ shiftedDigits = shiftDigits ::: digits.dropRight(shift.toInt)\n        shiftedDigits.mkString",
  "        val digits = x.toString.length\n        if (shift >= digits) x.toString.reverse\n\
    \        else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val digits = x.toString.length\n    \
    \    if (shift > digits) x.toString.reverse\n        else {\n            val (left,\
    \ right) = x.toString.splitAt(digits - shift.toInt)\n            right + left\n\
    \        }", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        val shift1 = if (shift > n) n - shift else shift\n        val shift2\
    \ = if (shift > n) shift - n else 0\n        val (a, b) = digits.splitAt(n - shift1)\n\
    \        (b ::: a).reverse.mkString", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        val s = shift % digits\n        if (s == 0) x.toString\n        else\
    \ (x.toString.substring(digits - s) + x.toString.substring(0, digits - s))", " \
    \       val n = x.toString.length\n        if (shift > n) x.toString.reverse\n\
    \        else x.toString.substring(n - shift.toInt) + x.toString.substring(0,\
    \ n - shift.toInt)", "        val s = x.toString\n        val n = s.length\n \
    \       val shiftMod = shift % n\n        if (shiftMod == 0) s\n        else if\
    \ (shiftMod == 1) s.substring(n - 1, n) + s.substring(0, n - 1)\n        else\
    \ if (shiftMod == n - 1) s.substring(1, n) + s.substring(0, 1)\n        else if\
    \ (shiftMod < n - shiftMod) s.substring(shiftMod, n) + s.substring(0, shiftMod)\n\
    \        else s.substring(n - shiftMod, n) + s.substring(0, n - shiftMod)", " \
    \       val digits = x.toString.toList\n        val n = digits.length\n      \
    \  val shift2 = if (shift >= n) n - shift else shift\n        val (left, right)\
    \ = digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift >= n) digits.reverse.mkString\n        else digits.drop(n - shift.toInt).mkString\
    \ + digits.take(n - shift.toInt).mkString", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop((digits.length - shift.toInt) % digits.length)\n\
    \        val shiftDigits2 = digits.take((digits.length - shift.toInt) % digits.length)\n\
    \        (shiftDigits ::: shiftDigits2).mkString", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        val shift2 = if (shift > n) n else shift\n\
    \        val shift3 = if (shift2 == n) 0 else shift2\n        s.substring(shift3,\
    \ n) + s.substring(0, shift3)", "        val digits = x.toString.map(_.asDigit)\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n\
    \            (right ++ left).mkString\n        }", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else x.toString.substring(digits\
    \ - shift.toInt) + x.toString.substring(0, digits - shift.toInt)", "        val\
    \ digits = x.toString.length\n        if (shift > digits) {\n            return\
    \ x.toString.reverse\n        }\n        val (left, right) = x.toString.splitAt(digits\
    \ - shift.toInt)\n        right + left", "        val digits = x.toString.map(_.asDigit)\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else {\n\
    \            val (left, right) = digits.splitAt(digits.length - shift.toInt)\n\
    \            (right ++ left).mkString\n        }", "        val digits = x.toString.length\n\
    \        if (shift > digits) return x.toString.reverse\n        val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n        b + a", "        val digits = x.toString.length\n  \
    \      if (shift >= digits) x.toString.reverse\n        else {\n            val\
    \ (left, right) = x.toString.splitAt(digits - shift.toInt)\n            right\
    \ + left\n        }", "        val s = x.toString\n        if (shift == 0) s\n\
    \        else if (shift > s.length) s.reverse\n        else s.substring(s.length\
    \ - shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.length\n        if (shift >= digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            (b + a)\n        }", "        val digits = x.toString.toList\n  \
    \      val n = digits.length\n        val shift2 = if (shift > n) n - shift else\
    \ shift\n        val (left, right) = digits.splitAt(shift2)\n        (right :::\
    \ left).mkString", "        val s = x.toString\n        val n = s.length\n   \
    \     if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift >= digits) x.toString.reverse\n        else {\n           \
    \ val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n \
    \       }", "        val digits = x.toString.length\n        val s = shift % digits\n\
    \        if (s == 0) x.toString\n        else {\n            val (a, b) = x.toString.splitAt(digits\
    \ - s.toInt)\n            b + a\n        }", "        val s = x.toString\n   \
    \     if (shift > s.length) s.reverse\n        else s.substring(s.length - shift.toInt)\
    \ + s.substring(0, s.length - shift.toInt)", "        val digits = x.toString.map(_.asDigit)\n\
    \        if (shift >= digits.length) digits.reverse.mkString\n        else digits.drop(shift.toInt)\
    \ ++ digits.take(shift.toInt) mkString", "        val s = x.toString\n       \
    \ val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt) ::: digits.take(digits.length\
    \ - shift.toInt)\n        shiftDigits.mkString", "        val digits = x.toString.length\n\
    \        val shiftDigits = shift % digits\n        if (shiftDigits == 0) x.toString\n\
    \        else if (shiftDigits == digits) x.toString.reverse\n        else x.toString.substring(digits\
    \ - shiftDigits) + x.toString.substring(0, digits - shiftDigits)", "        val\
    \ digits = x.toString.length\n        if (shift >= digits) {\n            return\
    \ x.toString.reverse\n        }\n        val left = x.toString.substring(0, digits\
    \ - shift.toInt)\n        val right = x.toString.substring(digits - shift.toInt,\
    \ digits)\n        return right + left", "        val digits = x.toString.length\n\
    \        val shiftDigits = shift % digits\n        if (shiftDigits == 0) x.toString\n\
    \        else {\n            val (left, right) = x.toString.splitAt(digits - shiftDigits.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val digits = x.toString.length\n        if\
    \ (shift > digits) x.toString.reverse\n        else {\n            val (a, b)\
    \ = x.toString.splitAt(digits - shift.toInt)\n            b + a\n        }", " \
    \       val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   if (shift >= len) digits.reverse.mkString\n        else (digits.slice(len\
    \ - shift.toInt, len) ::: digits.slice(0, len - shift.toInt)).mkString", "   \
    \     val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val shiftDigits = digits.slice(digits.length\
    \ - shift.toInt, digits.length)\n        val remainingDigits = digits.slice(0,\
    \ digits.length - shift.toInt)\n        (shiftDigits ++ remainingDigits).mkString",
  "        val digits = x.toString.length\n        if (shift > digits) {\n       \
    \     x.toString.reverse\n        } else {\n            val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            b + a\n        }", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.length\n        val shift2 = if (shift > digits) digits else shift\n\
    \        val (a, b) = x.toString.splitAt(digits - shift2)\n        (b + a).reverse",
  "        val s = x.toString\n        val len = s.length\n        if (shift > len)\
    \ s.reverse\n        else s.substring(len - shift.toInt) + s.substring(0, len\
    \ - shift.toInt)", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.toList\n        val\
    \ shiftDigits = digits.drop(digits.length - shift.toInt) ::: digits.take(digits.length\
    \ - shift.toInt)\n        shiftDigits.mkString", "        val n = x.toString.length\n\
    \        if (shift > n) x.toString.reverse\n        else x.toString.substring(n\
    \ - shift.toInt) + x.toString.substring(0, n - shift.toInt)", "        val digits\
    \ = x.toString.toList\n        val shiftDigits = digits.drop(digits.length - shift.toInt)\n\
    \        val remainingDigits = digits.take(digits.length - shift.toInt)\n    \
    \    (shiftDigits ::: remainingDigits).mkString", "        val digits = x.toString.length\n\
    \        if (shift >= digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val digits = x.toString.toList\n        val\
    \ shiftDigits = digits.drop(digits.length - (shift % digits.length).toInt) :::\
    \ digits.take(digits.length - (shift % digits.length).toInt)\n        shiftDigits.mkString",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.length\n        if (shift >= digits) {\n      \
    \      x.toString.reverse\n        } else {\n            val (left, right) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            right + left\n        }", "        val digits =\
    \ x.toString.length\n        if (shift > digits) {\n            return x.toString.reverse\n\
    \        }\n        val shiftDigits = x.toString.substring(digits - shift.toInt)\n\
    \        val remainingDigits = x.toString.substring(0, digits - shift.toInt)\n\
    \        shiftDigits + remainingDigits", "        val digits = x.toString.length\n\
    \        if (shift >= digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       (b + a)\n        }", "        val digits = x.toString.toList\n       \
    \ val len = digits.length\n        val shift1 = if (shift > len) len else shift\n\
    \        val shift2 = if (shift1 == len) 0 else shift1\n        val (left, right)\
    \ = digits.splitAt(len - shift2)\n        (right ::: left).mkString", "      \
    \  val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        var s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)"]
stop_tokens:
- "\n    }\n"
