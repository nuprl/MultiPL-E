name: HumanEval_71_triangle_area
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return the area of\n\
  \    // the triangle rounded to 2 decimal points if the three sides form a valid\
  \ triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n    // than the third side.\n    //\
  \ Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>>\
  \ triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a : Long, b\
  \ : Long, c : Long) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
  \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
  \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
  \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
  \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
  \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
  \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
completions: ["        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the side lengths of the triangle\n        if (a + b > c && a + c > b && b +\
    \ c > a) {\n            val s = (a + b + c) / 2.0\n            sqrt(s * (s - a)\
    \ * (s - b) * (s - c)).toFloat\n        } else -1", "        // Your code here\n\
    \        if (a + b > c && a + c > b && b + c > a) {\n            val s = (a +\
    \ b + c) / 2.0f\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n \
    \       } else -1.0f", "        // Fill Up this function body\n        // `a`,\
    \ `b`, `c` are the side lengths of the triangle\n        if (a + b > c && a +\
    \ c > b && b + c > a) {\n            val s = (a + b + c) / 2.0\n            sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1", "        // Your\
    \ code here\n        if (a + b > c && a + c > b && b + c > a) {\n            val\
    \ s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        } else -1", "        // Fill Up this function body\n        // `a`, `b`,\
    \ `c` are the side lengths of the triangle\n        if (a + b > c && a + c > b\
    \ && b + c > a) {\n            val s = (a + b + c) / 2.0\n            sqrt(s *\
    \ (s - a) * (s - b) * (s - c)).toFloat\n        } else -1", "        // Fill Up\
    \ this function body\n        // `a`, `b`, `c` are the side lengths of the triangle\n\
    \        // `a`, `b`, `c` are all positive integers\n        // `a`, `b`, `c`\
    \ are all less than or equal to 100\n        // `a`, `b`, `c` are all greater\
    \ than 0\n        if (a + b > c && a + c > b && b + c > a) {\n            val\
    \ s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        } else -1", "        if (a + b > c && a + c > b && b + c > a) {\n   \
    \         val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) *\
    \ (s - c)).toFloat\n        } else -1", "        // Your code here\n        if\
    \ (a + b > c && a + c > b && b + c > a) {\n            val s = (a + b + c) / 2.0\n\
    \            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1",
  "        // Fill Up this function body\n        // `a`, `b`, `c` are the side lengths\
    \ of the triangle\n        // return the area of the triangle rounded to 2 decimal\
    \ points\n        val s = (a + b + c) / 2.0\n        val area = sqrt(s * (s -\
    \ a) * (s - b) * (s - c))\n        if (area > 0) area.toFloat else -1", "    \
    \    // Your code here\n        if (a + b > c && a + c > b && b + c > a) {\n \
    \           val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b)\
    \ * (s - c)).toFloat\n        } else -1", "        val s = (a + b + c) / 2.0\n\
    \        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area >\
    \ 0) area.toFloat else -1", "        // Your code here\n        if (a + b > c\
    \ && a + c > b && b + c > a) {\n            val s = (a + b + c) / 2.0\n      \
    \      sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1", "  \
    \      // Your code here\n        if (a + b > c && a + c > b && b + c > a) {\n\
    \            val s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b)\
    \ * (s - c)).toFloat\n        } else -1", "        // Your Code Here\n       \
    \ if (a + b > c && a + c > b && b + c > a) {\n            val s = (a + b + c)\
    \ / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        }\
    \ else -1", "        // Your code here\n        if (a + b > c && a + c > b &&\
    \ b + c > a) {\n            val s = (a + b + c) / 2.0\n            sqrt(s * (s\
    \ - a) * (s - b) * (s - c)).toFloat\n        } else -1", "        // Your code\
    \ here\n        if (a + b > c && a + c > b && b + c > a) {\n            val s\
    \ = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        } else -1", "        // Your Code Here\n        if (a + b > c && a +\
    \ c > b && b + c > a) {\n            val s = (a + b + c) / 2.0\n            sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1", "        // Your\
    \ code here\n        if (a + b > c && a + c > b && b + c > a) {\n            val\
    \ s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        } else -1.0f", "        // Your code here\n        if (a + b > c && a\
    \ + c > b && b + c > a) {\n            val s = (a + b + c) / 2.0\n           \
    \ sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n        } else -1", "       \
    \ // Fill Up this function body\n        // `a`, `b`, `c` are the side lengths\
    \ of the triangle\n        // return the area of the triangle rounded to 2 decimal\
    \ points\n        if (a + b > c && a + c > b && b + c > a) {\n            val\
    \ s = (a + b + c) / 2.0\n            sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n\
    \        } else -1"]
stop_tokens:
- "\n    }\n"
