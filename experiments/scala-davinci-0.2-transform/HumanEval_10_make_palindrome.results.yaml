language: scala
name: HumanEval_10_make_palindrome
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val palindrome = suffix + prefix.reverse\n        palindrome\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsldeguls.scala:24)\n\tat Problem.main(tmpsldeguls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val reverse\
    \ = string.reverse\n        val suffix = string.substring(0, length - 1)\n   \
    \     val prefix = string.substring(1, length)\n        if (suffix == reverse)\
    \ string + prefix\n        else if (prefix == reverse) suffix + string\n     \
    \   else makePalindrome(string.substring(1, length))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpga6uwgwf.scala:17)\n\tat Problem$.main(tmpga6uwgwf.scala:24)\n\
    \tat Problem.main(tmpga6uwgwf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe55_uxsc.scala:25)\n\tat Problem.main(tmpe55_uxsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val palindrome = new StringBuilder\n       \
    \ val reverse = new StringBuilder\n        var i = 0\n        while (i < string.length)\
    \ {\n            palindrome.append(string(i))\n            reverse.append(string(string.length\
    \ - 1 - i))\n            if (palindrome.toString == reverse.toString) {\n    \
    \            palindrome.append(reverse.toString.substring(0, reverse.length -\
    \ 1).reverse)\n                return palindrome.toString\n            }\n   \
    \         i += 1\n        }\n        palindrome.append(reverse.toString.reverse)\n\
    \        palindrome.toString\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy_iv4b3z.scala:33)\n\tat Problem.main(tmpy_iv4b3z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def makePalindromeHelper(string : String, length\
    \ : Int) : String = {\n            if (length == 0) {\n                string\
    \ + string.reverse\n            } else {\n                val prefix = string.substring(0,\
    \ length)\n                val suffix = string.substring(length)\n           \
    \     if (prefix == suffix.reverse) {\n                    string + string.substring(0,\
    \ length).reverse.substring(1)\n                } else {\n                   \
    \ makePalindromeHelper(string, length - 1)\n                }\n            }\n\
    \        }\n        makePalindromeHelper(string, string.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphtu4dv07.scala:32)\n\tat Problem.main(tmphtu4dv07.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = longestPalindrome(suffix)\n\
    \        if (palindromeSuffix.length == suffix.length) string\n        else suffix\
    \ + reversedPrefix + palindromeSuffix\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvnmjvcci.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ longestPalindrome(suffix)\n\e[31m\e[31m   |\e[0m                           \
    \    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: longestPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest postfix of supplied string\
    \ that is a palindrome.\n        def findLongestPalindromicSuffix(string : String)\
    \ : String = {\n            // Find the longest palindromic suffix of a string.\n\
    \            def findLongestPalindromicSuffixRec(string : String, index : Int)\
    \ : String = {\n                if (index == string.length) string\n         \
    \       else {\n                    val suffix = string.substring(index)\n   \
    \                 if (isPalindrome(suffix)) suffix\n                    else findLongestPalindromicSuffixRec(string,\
    \ index + 1)\n                }\n            }\n            findLongestPalindromicSuffixRec(string,\
    \ 0)\n        }\n        // Find the longest prefix of supplied string that is\
    \ a palindrome.\n        def findLongestPalindromicPrefix(string : String) : String\
    \ = {\n            // Find the longest palindromic prefix of a string.\n     \
    \       def findLongestPalindromicPrefixRec(string : String, index : Int) : String\
    \ = {\n                if (index == string.length) string\n                else\
    \ {\n                    val prefix = string.substring(0, string.length - index)\n\
    \                    if (isPalindrome(prefix)) prefix\n                    else\
    \ findLongestPalindromicPrefixRec(string, index + 1)\n                }\n    \
    \        }\n            findLongestPalindromicPrefixRec(string, 0)\n        }\n\
    \        // Find the longest palindromic suffix of a string.\n        val palindromicSuffix\
    \ = findLongestPalindromicSuffix(string)\n        // Find the longest palindromic\
    \ prefix of a string.\n        val palindromicPrefix = findLongestPalindromicPrefix(string)\n\
    \        // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n        palindromicSuffix + reverse(string.substring(0,\
    \ string.length - palindromicPrefix.length))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp272n7u8m.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mif\e[0m (isPalindrome(suffix))\
    \ suffix\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: isPalindrome\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp272n7u8m.scala:35:24 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                    \e[33mif\e[0m (isPalindrome(prefix))\
    \ prefix\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: isPalindrome\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp272n7u8m.scala:46:28 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        palindromicSuffix + reverse(string.substring(\e\
    [31m0\e[0m, string.length - palindromicPrefix.length))\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ (0 until n).map(i => string.substring(i, n)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - suffix.length)\n        string +\
    \ prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.maxBy\n\tat scala.collection.IterableOnceOps.maxBy(IterableOnce.scala:978)\n\
    \tat scala.collection.IterableOnceOps.maxBy$(IterableOnce.scala:976)\n\tat scala.collection.AbstractIterable.maxBy(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmpsazqg45x.scala:16)\n\tat Problem$.main(tmpsazqg45x.scala:21)\n\
    \tat Problem.main(tmpsazqg45x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val s = string\
    \ + \"#\" + string.reverse\n        val z = Array.fill(s.length)(0)\n        var\
    \ l = 0; var r = 0\n        for (i <- 1 until s.length) {\n            if (i <=\
    \ r) z(i) = min(z(i - l), r - i + 1)\n            while (i + z(i) < s.length &&\
    \ s(z(i)) == s(i + z(i))) z(i) += 1\n            if (i + z(i) - 1 > r) {\n   \
    \             l = i; r = i + z(i) - 1\n            }\n        }\n        string\
    \ + string.substring(n - z(s.length - 1), n).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6_thn71g.scala:30)\n\tat Problem.main(tmp6_thn71g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val prefix =\
    \ string.substring(0, n - 1)\n        val suffix = string.substring(n - 1, n)\n\
    \        val reversedPrefix = prefix.reverse\n        val reversedSuffix = suffix.reverse\n\
    \        if (suffix == reversedSuffix) {\n            string + reversedPrefix\n\
    \        } else {\n            string + reversedSuffix + reversedPrefix\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpivkhd032.scala:16)\n\tat Problem$.main(tmpivkhd032.scala:27)\n\
    \tat Problem.main(tmpivkhd032.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val prefixReverse = prefix.reverse\n        val suffixPalindrome = suffix\
    \ + prefixReverse\n        val prefixPalindrome = prefix + prefixReverse\n   \
    \     if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr26piz60.scala:25)\n\tat Problem.main(tmpr26piz60.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ Array.ofDim[Int](n + 1)\n        suffix(0) = -1\n        for (i <- 1 to n) {\n\
    \            var j = suffix(i - 1)\n            while (j >= 0 && string(j) !=\
    \ string(i - 1)) j = suffix(j)\n            suffix(i) = j + 1\n        }\n   \
    \     val prefix = string.substring(0, n - suffix(n))\n        prefix + string\
    \ + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpjiz17tzv.scala:23)\n\tat Problem$.main(tmpjiz17tzv.scala:27)\n\
    \tat Problem.main(tmpjiz17tzv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2arl3y8o.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindrome\e[0m =\
    \ longestPalindromeSuffix(string)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            Not found: longestPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindromeSuffix = string.zipWithIndex.reverse.find(x\
    \ => isPalindrome(string.substring(x._2))).get._2\n        string + string.substring(0,\
    \ string.length - longestPalindromeSuffix).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz87v7jks.scala:15:76 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindromeSuffix\e\
    [0m = string.zipWithIndex.reverse.find(\e[36mx\e[0m => isPalindrome(string.substring(x._2))).get._2\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                           Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix.reverse\n        if (suffixPalindrome ==\
    \ suffix) suffix + prefix else suffix + prefix + suffixPalindrome\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbd8vevs_.scala:24)\n\tat Problem.main(tmpbd8vevs_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val palindrome = suffix + prefix.reverse\n        palindrome\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpywv08j4e.scala:24)\n\tat Problem.main(tmpywv08j4e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.suffixes.find(x => x ==\
    \ x.reverse).get\n        val prefix = string.substring(0, string.length - suffix.length)\n\
    \        suffix + prefix.reverse + prefix\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7d72ibvz.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msuffix\e[0m = string.suffixes.find(\e\
    [36mx\e[0m => x == x.reverse).get\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value suffixes is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.reverse.find(suffix.startsWith(_)).get\n\
    \        val palindromeSuffixLength = palindromeSuffix.length\n        val palindromePrefix\
    \ = reversePrefix.substring(reversePrefix.length - palindromeSuffixLength)\n \
    \       palindromePrefix + suffix\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi0p6ah15.scala:19:69\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e\
    [0m = suffix.reverse.find(suffix.startsWith(_)).get\n\e[31m\e[31m   |\e[0m   \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                                  Found:    (_$1\
    \ : Char)\n\e[31m   |\e[0m                                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi0p6ah15.scala:20:54\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mpalindromeSuffixLength\e[0m = palindromeSuffix.length\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                    value length is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val prefix = string.substring(0, string.length\
    \ - longestPalindromeSuffix(string).length)\n        string + prefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcg4wibku.scala:15:57 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mprefix\e[0m = string.substring(\e\
    [31m0\e[0m, string.length - longestPalindromeSuffix(string).length)\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: longestPalindromeSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversePrefix))\n        val palindrome = suffix + reversePrefix\
    \ + palindromeSuffix\n        palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp92e3ge5t.scala:19)\n\tat Problem$.main(tmp92e3ge5t.scala:26)\n\
    \tat Problem.main(tmp92e3ge5t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix) + 1)\n        string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpdikqy73o.scala:19)\n\tat Problem$.main(tmpdikqy73o.scala:23)\n\
    \tat Problem.main(tmpdikqy73o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        suffix + reversedPrefix + palindromeSuffix\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbpql2m81.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findPalindromeSuffix(suffix)\n\e[31m\e[31m   |\e[0m                        \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: findPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = longestPalindromicSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - suffix.length)\n   \
    \     prefix + suffix + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3_et6y6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msuffix\e[0m = longestPalindromicSuffix(string)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: longestPalindromicSuffix\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val stringLength = string.length\n        val\
    \ halfLength = stringLength / 2\n        val palindromeSuffix = (0 until halfLength).find(i\
    \ => string(i) == string(stringLength - 1 - i)).map(i => string.substring(i)).getOrElse(\"\
    \")\n        val palindromePrefix = palindromeSuffix.reverse\n        string +\
    \ palindromePrefix\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpep8l4lyc.scala:24)\n\tat Problem.main(tmpep8l4lyc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ - string.reverse.indexOf(string))\n        string + string.substring(0, string.length\
    \ - suffix.length).reverse\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgh45hpr8.scala:20)\n\tat Problem.main(tmpgh45hpr8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.reverse\n\
    \        val palindrome = prefix + palindromeSuffix\n        if (palindrome ==\
    \ string) palindrome\n        else reversedPrefix + palindrome\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp64ren9zr.scala:27)\n\tat Problem.main(tmp64ren9zr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ palindromeSuffix = suffix.substring(suffix.length - suffix.reverse.indexOf(prefix.reverse))\n\
    \        prefix + palindromeSuffix + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph55i1e1t.scala:22)\n\tat Problem.main(tmph55i1e1t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversePrefix) + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp_hits4im.scala:19)\n\tat Problem$.main(tmp_hits4im.scala:23)\n\
    \tat Problem.main(tmp_hits4im.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPalindrome = \"\"\n        for (i\
    \ <- 0 to string.length) {\n            val prefix = string.substring(0, i)\n\
    \            val suffix = string.substring(i)\n            if (prefix == suffix.reverse)\
    \ longestPalindrome = prefix\n        }\n        string + string.substring(longestPalindrome.length).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5536dnmg.scala:25)\n\tat Problem.main(tmp5536dnmg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val m = n / 2\n\
    \        var i = m\n        while (i >= 0 && string(i) == string(n - i - 1)) i\
    \ -= 1\n        val prefix = string.substring(0, i + 1)\n        val suffix =\
    \ string.substring(i + 1, n)\n        prefix + suffix.reverse + suffix\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.makePalindrome(tmprxqb4v5q.scala:18)\n\
    \tat Problem$.main(tmprxqb4v5q.scala:24)\n\tat Problem.main(tmprxqb4v5q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ new Array[Int](n)\n        var i = 0\n        var j = 1\n        while (j <\
    \ n) {\n            if (string(i) == string(j)) {\n                suffix(j) =\
    \ i + 1\n                i += 1\n                j += 1\n            } else {\n\
    \                if (i == 0) {\n                    suffix(j) = 0\n          \
    \          j += 1\n                } else {\n                    i = suffix(i\
    \ - 1)\n                }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length\
    \ 0\n\tat Problem$.makePalindrome(tmpmp9rtx6r.scala:33)\n\tat Problem$.main(tmpmp9rtx6r.scala:37)\n\
    \tat Problem.main(tmpmp9rtx6r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val longestPalindrome\
    \ = (0 until length).map(i => {\n            val prefix = string.substring(0,\
    \ i)\n            val postfix = string.substring(i, length)\n            if (prefix\
    \ == postfix.reverse) postfix.length else 0\n        }).max\n        string +\
    \ string.substring(0, length - longestPalindrome).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmpau17igf4.scala:20)\n\tat Problem$.main(tmpau17igf4.scala:24)\n\
    \tat Problem.main(tmpau17igf4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reversedString = string.reverse\n      \
    \  val longestPalindromicSuffix = string.zip(reversedString).takeWhile(x => x._1\
    \ == x._2).map(_._1).mkString\n        val prefix = string.substring(0, string.length\
    \ - longestPalindromicSuffix.length)\n        string + prefix.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqf17jfoy.scala:23)\n\tat Problem.main(tmpqf17jfoy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def isPalindrome(string : String) : Boolean\
    \ = {\n            if (string.length == 0) return true\n            if (string.length\
    \ == 1) return true\n            if (string.length == 2) return string(0) == string(1)\n\
    \            if (string(0) != string(string.length - 1)) return false\n      \
    \      isPalindrome(string.substring(1, string.length - 1))\n        }\n     \
    \   def findLongestPalindrome(string : String) : String = {\n            if (string.length\
    \ == 0) return \"\"\n            if (string.length == 1) return string\n     \
    \       if (string.length == 2) return if (string(0) == string(1)) string else\
    \ string.substring(0, 1)\n            if (string(0) != string(string.length -\
    \ 1)) return findLongestPalindrome(string.substring(0, string.length - 1))\n \
    \           val palindrome = string(0) + findLongestPalindrome(string.substring(1,\
    \ string.length - 1)) + string(0)\n            if (isPalindrome(palindrome)) palindrome\
    \ else findLongestPalindrome(string.substring(0, string.length - 1))\n       \
    \ }\n        val longestPalindrome = findLongestPalindrome(string)\n        val\
    \ prefix = string.substring(0, string.length - longestPalindrome.length)\n   \
    \     string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest palindromic suffix of the\
    \ string.\n        def findPalindromicSuffix(string : String) : String = {\n \
    \           val n = string.length\n            for (i <- 0 to n) {\n         \
    \       val suffix = string.substring(n - i, n)\n                val prefix =\
    \ suffix.reverse\n                if (string.startsWith(prefix)) return suffix\n\
    \            }\n            return \"\"\n        }\n        val palindromicSuffix\
    \ = findPalindromicSuffix(string)\n        val prefix = string.substring(0, string.length\
    \ - palindromicSuffix.length)\n        return string + prefix.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpug9tsdc1.scala:31)\n\tat Problem.main(tmpug9tsdc1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversePrefix = prefix.reverse\n        val palindromeSuffix = longestPalindromeSuffix(suffix)\n\
    \        val palindromePrefix = reversePrefix.substring(reversePrefix.length -\
    \ (suffix.length - palindromeSuffix.length))\n        return prefix + palindromeSuffix\
    \ + palindromePrefix\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6bcowmm_.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ longestPalindromeSuffix(suffix)\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Not found: longestPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val (longestPalindrome, palindromeStart) = longestPalindrome(string)\n\
    \        val prefix = string.substring(0, palindromeStart)\n        val reversedPrefix\
    \ = prefix.reverse\n        string + reversedPrefix\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2hu7lug3.scala:15:13 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (longestPalindrome, palindromeStart)\
    \ = longestPalindrome(string)\n\e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m\
    \   |\e[0m             Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2hu7lug3.scala:15:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ (longestPalindrome, palindromeStart) = longestPalindrome(string)\n\e[31m\e[31m\
    \   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m            \
    \                    Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        if (n == 0) return\
    \ \"\"\n        var i = n - 1\n        while (i >= 0) {\n            if (string(i)\
    \ == string(0)) {\n                var j = 1\n                while (j <= i &&\
    \ string(j) == string(i - j)) j += 1\n                if (j > i) return string\
    \ + string.substring(i + 1).reverse\n            }\n            i -= 1\n     \
    \   }\n        return string + string.reverse.substring(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkdqloobl.scala:31)\n\tat Problem.main(tmpkdqloobl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = findPalindromicSuffix(suffix)\n\
    \        return prefix + palindromicSuffix + reversedPrefix\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnvpnuq3n.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpalindromicSuffix\e[0m =\
    \ findPalindromicSuffix(suffix)\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \        Not found: findPalindromicSuffix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ Array.ofDim[Int](n)\n        var i = 0\n        var j = 1\n        while (j\
    \ < n) {\n            if (string(i) == string(j)) {\n                suffix(j)\
    \ = i + 1\n                i += 1\n                j += 1\n            } else\
    \ {\n                if (i == 0) {\n                    suffix(j) = 0\n      \
    \              j += 1\n                } else {\n                    i = suffix(i\
    \ - 1)\n                }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length\
    \ 0\n\tat Problem$.makePalindrome(tmpm6snc96m.scala:33)\n\tat Problem$.main(tmpm6snc96m.scala:37)\n\
    \tat Problem.main(tmpm6snc96m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPalindrome = \"\"\n        for (i\
    \ <- 0 to string.length) {\n            val candidate = string.substring(i)\n\
    \            if (candidate.length > longestPalindrome.length && candidate == candidate.reverse)\
    \ longestPalindrome = candidate\n        }\n        string + string.substring(0,\
    \ string.length - longestPalindrome.length).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe55_uxsc.scala:25)\n\tat Problem.main(tmpe55_uxsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = makePalindrome(suffix)\n\
    \        val palindrome = palindromeSuffix + reversedPrefix\n        palindrome\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.StringBuilder.append(StringBuilder.java:179)\n\
    \tat java.base/java.lang.StringBuilder.append(StringBuilder.java:91)\n\tat java.base/java.lang.AbstractStringBuilder.<init>(AbstractStringBuilder.java:112)\n\
    \tat java.base/java.lang.StringBuilder.<init>(StringBuilder.java:131)\n\tat scala.collection.StringOps$.reverse$extension(StringOps.scala:1180)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:18)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\tat Problem$.makePalindrome(tmpwlxp7ymn.scala:19)\n\
    \tat Problem$.makePalindrome(t"
  stdout: ''
  timestamp: 1659805984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe55_uxsc.scala:25)\n\tat Problem.main(tmpe55_uxsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val s = string\
    \ + \"#\" + string.reverse\n        val z = Array.fill(s.length)(0)\n        var\
    \ l = 0; var r = 0\n        for (i <- 1 until s.length) {\n            if (i <=\
    \ r) z(i) = min(z(i - l), r - i + 1)\n            while (i + z(i) < s.length &&\
    \ s(z(i)) == s(i + z(i))) z(i) += 1\n            if (i + z(i) - 1 > r) {\n   \
    \             l = i; r = i + z(i) - 1\n            }\n        }\n        val longestPalindromicSuffix\
    \ = z.max\n        string + string.substring(longestPalindromicSuffix, n).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvxqd4hu.scala:32)\n\tat Problem.main(tmpbvxqd4hu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val palindrome\
    \ = Array.ofDim[Int](n, n)\n        for (i <- 0 until n) {\n            palindrome(i)(i)\
    \ = 1\n            if (i < n - 1) {\n                palindrome(i)(i + 1) = if\
    \ (string(i) == string(i + 1)) 2 else 0\n            }\n        }\n        for\
    \ (i <- 2 until n) {\n            for (j <- 0 until n - i) {\n               \
    \ palindrome(j)(j + i) = if (string(j) == string(j + i) && palindrome(j + 1)(j\
    \ + i - 1) > 0) palindrome(j + 1)(j + i - 1) + 2 else 0\n            }\n     \
    \   }\n        var maxLength = 0\n        var maxIndex = 0\n        for (i <-\
    \ 0 until n) {\n            if (palindrome(0)(i) > maxLength) {\n            \
    \    maxLength = palindrome(0)(i)\n                maxIndex = i\n            }\n\
    \        }\n        string + string.substring(maxIndex + 1, n).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp0roz0c9x.scala:36)\n\tat Problem$.main(tmp0roz0c9x.scala:39)\n\
    \tat Problem.main(tmp0roz0c9x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.findPalindromeSuffix\n\
    \        suffix + reversedPrefix + palindromeSuffix\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgdfkweg5.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ suffix.findPalindromeSuffix\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ findPalindromeSuffix is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659805984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val dp = Array.ofDim[Int](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 1\n            if\
    \ (i < n - 1) {\n                if (string(i) == string(i + 1)) dp(i)(i + 1)\
    \ = 2\n                else dp(i)(i + 1) = 1\n            }\n        }\n     \
    \   for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n         \
    \       val j = i + k\n                if (string(i) == string(j)) dp(i)(j) =\
    \ dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j\
    \ - 1))\n            }\n        }\n        val i = 0\n        val j = n - 1\n\
    \        val prefix = string.substring(0, i)\n        val suffix = string.substring(j\
    \ - dp(i)(j) + 1, j + 1)\n        prefix + suffix.reverse + suffix\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length\
    \ 0\n\tat Problem$.makePalindrome(tmptchyumws.scala:34)\n\tat Problem$.main(tmptchyumws.scala:38)\n\
    \tat Problem.main(tmptchyumws.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val palindrome\
    \ = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n        while (i\
    \ < n) {\n            var k = 0\n            while (i - k >= 0 && i + k < n &&\
    \ string(i - k) == string(i + k)) k += 1\n            palindrome(i) = k\n    \
    \        if (i + k > j + palindrome(j)) j = i\n            i += 1\n        }\n\
    \        val prefix = string.substring(0, j - palindrome(j) + 1)\n        string\
    \ + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length\
    \ 0\n\tat Problem$.makePalindrome(tmpfwcubusn.scala:26)\n\tat Problem$.main(tmpfwcubusn.scala:30)\n\
    \tat Problem.main(tmpfwcubusn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ new Array[Int](n)\n        var j = 0\n        for (i <- 1 until n) {\n     \
    \       while (j > 0 && string(i) != string(j)) j = suffix(j - 1)\n          \
    \  if (string(i) == string(j)) j += 1\n            suffix(i) = j\n        }\n\
    \        val prefix = string.substring(0, n - suffix(n - 1))\n        string +\
    \ prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length\
    \ 0\n\tat Problem$.makePalindrome(tmp5v5zbohh.scala:23)\n\tat Problem$.main(tmp5v5zbohh.scala:27)\n\
    \tat Problem.main(tmp5v5zbohh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        if (n == 0) return\
    \ \"\"\n        val suffix = string.substring(n / 2, n)\n        val prefix =\
    \ string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n  \
    \      val reversedSuffix = suffix.reverse\n        val palindromeSuffix = suffix\
    \ + reversedSuffix\n        val palindromePrefix = reversedPrefix + prefix\n \
    \       if (palindromeSuffix.startsWith(prefix)) return palindromeSuffix\n   \
    \     else return palindromePrefix\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ftqsyzs.scala:28)\n\tat Problem.main(tmp_ftqsyzs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(0,\
    \ suffix.length - suffix.indexOf(reversedPrefix))\n        string + reversedPrefix.substring(reversedPrefix.length\
    \ - palindromicSuffix.length)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpxtx6yi95.scala:20)\n\
    \tat Problem$.main(tmpxtx6yi95.scala:24)\n\tat Problem.main(tmpxtx6yi95.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ palindrome = suffix + prefix.reverse\n        palindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp899lpdzw.scala:23)\n\tat Problem.main(tmp899lpdzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val suffix\
    \ = string.substring(length / 2)\n        val prefix = string.substring(0, length\
    \ / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversePrefix) + 1)\n        val palindrome\
    \ = string + reversePrefix.substring(palindromeSuffix.length)\n        palindrome\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpks753qq6.scala:19)\n\tat Problem$.main(tmpks753qq6.scala:24)\n\
    \tat Problem.main(tmpks753qq6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix))\n        string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp5j0ixxbq.scala:19)\n\tat Problem$.main(tmp5j0ixxbq.scala:25)\n\
    \tat Problem.main(tmp5j0ixxbq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        var i = n - 1\n\
    \        while (i >= 0) {\n            if (string.substring(0, i) == string.substring(n\
    \ - i, n).reverse) return string + string.substring(0, i).reverse\n          \
    \  i -= 1\n        }\n        return string + string.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgujxjuo2.scala:26)\n\tat Problem.main(tmpgujxjuo2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.findPalindromicSuffix\n\
    \        val palindromicPrefix = reversedPrefix.findPalindromicPrefix\n      \
    \  val palindromicSuffixLength = palindromicSuffix.length\n        val palindromicPrefixLength\
    \ = palindromicPrefix.length\n        val palindromicSuffixIndex = suffix.length\
    \ - palindromicSuffixLength\n        val palindromicPrefixIndex = palindromicPrefixLength\n\
    \        val palindromicSuffixString = suffix.substring(palindromicSuffixIndex)\n\
    \        val palindromicPrefixString = reversedPrefix.substring(0, palindromicPrefixIndex)\n\
    \        val palindromicSuffixStringLength = palindromicSuffixString.length\n\
    \        val palindromicPrefixStringLength = palindromicPrefixString.length\n\
    \        val palindromicSuffixStringIndex = palindromicSuffixStringLength - palindromicSuffixStringLength\n\
    \        val palindromicPrefixStringIndex = palindromicPrefixStringLength - palindromicPrefixStringLength\n\
    \        val palindromicSuffixStringSubstring = palindromicSuffixString.substring(palindromicSuffixStringIndex)\n\
    \        val palindromicPrefixStringSubstring = palindromicPrefixString.substring(palindromicPrefixStringIndex)\n\
    \        val palindromicSuffixStringSubstringLength = palindromicSuffixStringSubstring.length\n\
    \        val palindromicPrefixStringSubstringLength = palindromicPrefixStringSubstring.length\n\
    \        val palindromicSuffixStringSubstringIndex = palindromicSuffixStringSubstringLength\
    \ - palindromicSuffixStringSubstringLength\n        val palindromicPrefixStringSubstringIndex\
    \ = palindromicPrefixStringSubstringLength - pal\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpshg96ay4.scala:18:39 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpalindromicSuffix\e[0m =\
    \ suffix.findPalindromicSuffix\n\e[31m\e[31m   |\e[0m                        \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \ value findPalindromicSuffix is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpshg96ay4.scala:19:47 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromicPrefix\e[0m = reversedPrefix.findPalindromicPrefix\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value findPalindromicPrefix is not a member\
    \ of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshg96ay4.scala:35:93\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mpalindromicPrefixStringSubstringIndex\e[0m = palindromicPrefixStringSubstringLength\
    \ - pal\n\e[31m\e[31m   |\e[0m                                               \
    \                                              ^^^\e[0m\n\e[31m   |\e[0m     \
    \                                                     Not found: pal\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpshg96ay4.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        var maxLength\
    \ = 0\n        var maxIndex = 0\n        for (i <- 0 until n) {\n            var\
    \ length = 0\n            for (j <- 0 until min(i + 1, n - i)) {\n           \
    \     if (string(i - j) == string(i + j)) length += 1\n                else break\n\
    \            }\n            if (length > maxLength) {\n                maxLength\
    \ = length\n                maxIndex = i\n            }\n        }\n        val\
    \ prefix = string.substring(0, maxIndex - maxLength + 1)\n        val suffix =\
    \ string.substring(maxIndex + maxLength)\n        prefix + suffix.reverse + suffix\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb37jkpbr.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33melse\e[0m break\n\e[31m\e[31m \
    \  |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val s = string\
    \ + \"#\" + string.reverse\n        val lps = Array.fill(s.length)(0)\n      \
    \  for (i <- 1 until s.length) {\n            var j = lps(i - 1)\n           \
    \ while (j > 0 && s(i) != s(j)) j = lps(j - 1)\n            if (s(i) == s(j))\
    \ lps(i) = j + 1\n        }\n        string + string.reverse.substring(0, n -\
    \ lps(s.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgvs3_5f.scala:28)\n\tat Problem.main(tmpqgvs3_5f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val s = string\
    \ + \"#\" + string.reverse\n        val p = Array.fill(s.length)(0)\n        for\
    \ (i <- 1 until s.length) {\n            var j = p(i - 1)\n            while (j\
    \ > 0 && s(i) != s(j)) j = p(j - 1)\n            if (s(i) == s(j)) j += 1\n  \
    \          p(i) = j\n        }\n        string + string.reverse.substring(0, n\
    \ - p(s.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_9uacr9.scala:29)\n\tat Problem.main(tmp1_9uacr9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ (0 until n).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, n - suffix).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqig78b1a.scala:21)\n\tat Problem.main(tmpqig78b1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ - 1 - string.reverse.indexOf(string.last))\n        val prefix = string.substring(0,\
    \ string.length - suffix.length)\n        prefix + suffix + prefix.reverse\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty String\n\tat scala.collection.StringOps$.last$extension(StringOps.scala:1142)\n\
    \tat Problem$.makePalindrome(tmp4_dpak1m.scala:15)\n\tat Problem$.main(tmp4_dpak1m.scala:20)\n\
    \tat Problem.main(tmp4_dpak1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe55_uxsc.scala:25)\n\tat Problem.main(tmpe55_uxsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix.substring(suffix.indexOf(suffix.reverse))\n\
    \        string + suffixPalindrome.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8wds9k2.scala:23)\n\tat Problem.main(tmpu8wds9k2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix.substring(suffix.indexOf(prefix.reverse))\n\
    \        string + suffixPalindrome.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphu30_n6i.scala:23)\n\tat Problem.main(tmphu30_n6i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix) + 1)\n        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpifissmip.scala:19)\n\tat Problem$.main(tmpifissmip.scala:24)\n\
    \tat Problem.main(tmpifissmip.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val longestPalindrome\
    \ = (0 until length).map(i => {\n            val prefix = string.substring(0,\
    \ i)\n            val postfix = string.substring(i, length)\n            if (prefix\
    \ == postfix.reverse) prefix.length else 0\n        }).max\n        val prefix\
    \ = string.substring(0, length - longestPalindrome)\n        string + prefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmpdqte9kne.scala:20)\n\tat Problem$.main(tmpdqte9kne.scala:25)\n\
    \tat Problem.main(tmpdqte9kne.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix\
    \ + reversedPrefix\n        val palindrome = string + palindromeSuffix\n     \
    \   palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr6mgh2o6.scala:25)\n\tat Problem.main(tmpr6mgh2o6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix))\n        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp6_tulok5.scala:19)\n\tat Problem$.main(tmp6_tulok5.scala:26)\n\
    \tat Problem.main(tmp6_tulok5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val revPrefix = prefix.reverse\n        val palindrome = suffix + revPrefix\n\
    \        if (palindrome.length == n) palindrome\n        else palindrome + suffix.charAt(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqmgvk7h1.scala:26)\n\tat Problem.main(tmpqmgvk7h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def makePalindromeHelper(string : String, suffix\
    \ : String) : String = {\n            if (string.length == 0) suffix\n       \
    \     else if (string.last == suffix.head) makePalindromeHelper(string.init, string.last\
    \ + suffix)\n            else makePalindromeHelper(string.init, suffix)\n    \
    \    }\n        string + makePalindromeHelper(string.init, \"\").reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty String\n\tat scala.collection.StringOps$.head$extension(StringOps.scala:1129)\n\
    \tat Problem$.makePalindromeHelper$1(tmpvp_1rcp9.scala:17)\n\tat Problem$.makePalindrome(tmpvp_1rcp9.scala:20)\n\
    \tat Problem$.main(tmpvp_1rcp9.scala:25)\n\tat Problem.main(tmpvp_1rcp9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805993
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    var longestPalindrome = string.charAt(0).toString\n        for (i <- 0 until\
    \ string.length) {\n            for (j <- i + 1 to string.length) {\n        \
    \        val substring = string.substring(i, j)\n                if (substring.length\
    \ > longestPalindrome.length && substring == substring.reverse) longestPalindrome\
    \ = substring\n            }\n        }\n        string + string.substring(0,\
    \ string.length - longestPalindrome.length).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpboh08lnr.scala:30)\n\tat Problem.main(tmpboh08lnr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ Array.ofDim[Int](n)\n        suffix(0) = 0\n        var i = 1\n        var j\
    \ = 0\n        while (i < n) {\n            if (string(i) == string(j)) {\n  \
    \              suffix(i) = j + 1\n                i += 1\n                j +=\
    \ 1\n            } else {\n                if (j == 0) {\n                   \
    \ suffix(i) = 0\n                    i += 1\n                } else {\n      \
    \              j = suffix(j - 1)\n                }\n            }\n        }\n\
    \        val prefix = string.substring(0, n - suffix(n - 1))\n        string +\
    \ prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length\
    \ 0\n\tat Problem$.makePalindrome(tmpgf4u9ah8.scala:17)\n\tat Problem$.main(tmpgf4u9ah8.scala:38)\n\
    \tat Problem.main(tmpgf4u9ah8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reversed = string.reverse\n        val longestPalindrome\
    \ = (0 to string.length).map(i => string.substring(0, i)).filter(s => reversed.startsWith(s)).maxBy(_.length)\n\
    \        longestPalindrome + reversed.substring(longestPalindrome.length)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5kdsi2l2.scala:22)\n\tat Problem.main(tmp5kdsi2l2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix))\n        val palindrome = suffix + reversedPrefix\
    \ + palindromeSuffix\n        palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpv3ssaed0.scala:19)\n\tat Problem$.main(tmpv3ssaed0.scala:26)\n\
    \tat Problem.main(tmpv3ssaed0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val palindrome\
    \ = string.substring(0, length - length / 2) + string.substring(length / 2, length)\n\
    \        palindrome + palindrome.reverse.substring(length % 2)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp30yiwv9v.scala:21)\n\tat Problem.main(tmp30yiwv9v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ (0 until n).map(i => string.substring(i, n)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        string + string.substring(0, n - suffix.length).reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.maxBy\n\tat scala.collection.IterableOnceOps.maxBy(IterableOnce.scala:978)\n\
    \tat scala.collection.IterableOnceOps.maxBy$(IterableOnce.scala:976)\n\tat scala.collection.AbstractIterable.maxBy(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmp6eixtd79.scala:16)\n\tat Problem$.main(tmp6eixtd79.scala:20)\n\
    \tat Problem.main(tmp6eixtd79.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.reverse.substring(0,\
    \ suffix.indexOf(reversedPrefix))\n        val palindrome = suffix + palindromeSuffix\
    \ + prefix\n        palindrome\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpnxext34l.scala:19)\n\tat Problem$.main(tmpnxext34l.scala:26)\n\
    \tat Problem.main(tmpnxext34l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe55_uxsc.scala:25)\n\tat Problem.main(tmpe55_uxsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        val palindromicPrefix = reversedPrefix.substring(0, reversedPrefix.length\
    \ - palindromicSuffix.length)\n        palindromicPrefix + string + palindromicSuffix\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpz11b4wlr.scala:19)\n\tat Problem$.main(tmpz11b4wlr.scala:24)\n\
    \tat Problem.main(tmpz11b4wlr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        val palindromePrefix = reversedPrefix.substring(0, reversedPrefix.length\
    \ - palindromeSuffix.length)\n        string + palindromePrefix\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2fepubw.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findPalindromeSuffix(suffix)\n\e[31m\e[31m   |\e[0m                        \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: findPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findLongestPalindrome(string : String) :\
    \ String = {\n            def findLongestPalindrome(string : String, start : Int,\
    \ end : Int) : String = {\n                if (start < 0 || end >= string.length)\
    \ return \"\"\n                if (string(start) != string(end)) return \"\"\n\
    \                val palindrome = string.substring(start, end + 1)\n         \
    \       if (palindrome.length <= 1) return palindrome\n                val nextPalindrome\
    \ = findLongestPalindrome(string, start - 1, end + 1)\n                if (nextPalindrome.length\
    \ > palindrome.length) nextPalindrome else palindrome\n            }\n       \
    \     var maxPalindrome = \"\"\n            for (i <- 0 until string.length) {\n\
    \                val palindrome = findLongestPalindrome(string, i, i)\n      \
    \          if (palindrome.length > maxPalindrome.length) maxPalindrome = palindrome\n\
    \                val palindrome2 = findLongestPalindrome(string, i, i + 1)\n \
    \               if (palindrome2.length > maxPalindrome.length) maxPalindrome =\
    \ palindrome2\n            }\n            maxPalindrome\n        }\n        val\
    \ palindrome = findLongestPalindrome(string)\n        if (palindrome.length ==\
    \ string.length) return string\n        val prefix = string.substring(0, string.length\
    \ - palindrome.length)\n        string + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpws6i6cw5.scala:42)\n\tat Problem.main(tmpws6i6cw5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.reverse.takeWhile(c => string.startsWith(c.toString))\n\
    \        val prefix = string.take(string.length - suffix.length)\n        string\
    \ + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6xccste.scala:22)\n\tat Problem.main(tmpg6xccste.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindrome = suffix\
    \ + reversedPrefix\n        if (palindrome == string) string else palindrome +\
    \ string\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpykkgwc63.scala:25)\n\tat Problem.main(tmpykkgwc63.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        var i = 0\n \
    \       var j = n - 1\n        var k = 0\n        while (i < j) {\n          \
    \  if (string(i) == string(j)) {\n                i += 1\n                j -=\
    \ 1\n            } else {\n                i = 0\n                k += 1\n   \
    \             j = n - 1 - k\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - k)\n        val suffix = string.substring(n - k, n)\n        prefix + suffix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8m3ulsd5.scala:36)\n\tat Problem.main(tmp8m3ulsd5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindrome = longestPalindromePostfix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        prefix + string + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlnmz3tx.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindrome\e[0m =\
    \ longestPalindromePostfix(string)\n\e[31m\e[31m   |\e[0m                    \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Not found: longestPalindromePostfix\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        var longestPalindrome\
    \ = 0\n        var longestPalindromeIndex = 0\n        for (i <- 0 until n) {\n\
    \            var j = 0\n            while (i + j < n && i - j >= 0 && string(i\
    \ + j) == string(i - j)) {\n                if (2 * j + 1 > longestPalindrome)\
    \ {\n                    longestPalindrome = 2 * j + 1\n                    longestPalindromeIndex\
    \ = i\n                }\n                j += 1\n            }\n            j\
    \ = 0\n            while (i + j + 1 < n && i - j >= 0 && string(i + j + 1) ==\
    \ string(i - j)) {\n                if (2 * j + 2 > longestPalindrome) {\n   \
    \                 longestPalindrome = 2 * j + 2\n                    longestPalindromeIndex\
    \ = i\n                }\n                j += 1\n            }\n        }\n \
    \       val prefix = string.substring(0, longestPalindromeIndex - (longestPalindrome\
    \ - 1) / 2)\n        val reversePrefix = prefix.reverse\n        string + reversePrefix\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi49270mw.scala:43)\n\tat Problem.main(tmpi49270mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp812fys6j.scala:25)\n\tat Problem.main(tmp812fys6j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val palindrome = suffix + prefix.reverse\n        palindrome\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsldeguls.scala:24)\n\tat Problem.main(tmpsldeguls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val palindromeSuffix = (for (i <- 0 to suffix.length; j <- 0 to suffix.length\
    \ - i) yield suffix.substring(i, suffix.length - j)).filter(x => x == x.reverse).max\n\
    \        val palindromePrefix = prefix.substring(0, prefix.length - palindromeSuffix.length)\n\
    \        palindromePrefix + palindromeSuffix + palindromePrefix.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpzhx101xg.scala:19)\n\tat Problem$.main(tmpzhx101xg.scala:24)\n\
    \tat Problem.main(tmpzhx101xg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val palindrome\
    \ = new Array[Boolean](length)\n        var i = 0\n        var j = length - 1\n\
    \        while (i < j) {\n            if (string(i) == string(j)) {\n        \
    \        palindrome(i) = true\n                palindrome(j) = true\n        \
    \    }\n            i += 1\n            j -= 1\n        }\n        var k = length\
    \ - 1\n        while (k >= 0 && palindrome(k)) k -= 1\n        val prefix = string.substring(0,\
    \ k + 1)\n        string + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9szd5g6j.scala:34)\n\tat Problem.main(tmp9szd5g6j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe55_uxsc.scala:25)\n\tat Problem.main(tmpe55_uxsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val longestPalindrome\
    \ = Array.fill(n)(0)\n        var center = 0\n        var right = 0\n        for\
    \ (i <- 0 until n) {\n            val mirror = 2 * center - i\n            if\
    \ (i < right) longestPalindrome(i) = min(right - i, longestPalindrome(mirror))\n\
    \            var a = i - (1 + longestPalindrome(i))\n            var b = i + (1\
    \ + longestPalindrome(i))\n            while (a >= 0 && b < n && string(a) ==\
    \ string(b)) {\n                longestPalindrome(i) += 1\n                a -=\
    \ 1\n                b += 1\n            }\n            if (i + longestPalindrome(i)\
    \ > right) {\n                center = i\n                right = i + longestPalindrome(i)\n\
    \            }\n        }\n        val longestPalindromeLength = longestPalindrome.max\n\
    \        val longestPalindromeCenter = longestPalindrome.indexOf(longestPalindromeLength)\n\
    \        val prefix = string.substring(0, longestPalindromeCenter - longestPalindromeLength)\n\
    \        val suffix = string.substring(longestPalindromeCenter + longestPalindromeLength)\n\
    \        prefix + string + suffix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmp41dv1qoy.scala:34)\n\tat Problem$.main(tmp41dv1qoy.scala:41)\n\
    \tat Problem.main(tmp41dv1qoy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val palindrome\
    \ = Array.ofDim[Int](length, length)\n        for (i <- 0 until length) palindrome(i)(i)\
    \ = 1\n        for (i <- 0 until length - 1) if (string(i) == string(i + 1)) palindrome(i)(i\
    \ + 1) = 1\n        for (i <- 2 until length) {\n            for (j <- 0 until\
    \ length - i) {\n                if (string(j) == string(j + i) && palindrome(j\
    \ + 1)(j + i - 1) == 1) palindrome(j)(j + i) = 1\n            }\n        }\n \
    \       var max = 0\n        var maxIndex = 0\n        for (i <- 0 until length)\
    \ {\n            if (palindrome(0)(i) == 1) {\n                max = i\n     \
    \           maxIndex = i\n            }\n        }\n        string.substring(0,\
    \ maxIndex + 1) + string.substring(0, length - maxIndex - 1).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpzmsewjhw.scala:32)\n\tat Problem$.main(tmpzmsewjhw.scala:35)\n\
    \tat Problem.main(tmpzmsewjhw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val reversed = string.reverse\n        val suffix\
    \ = string.substring(0, string.length - reversed.indexOf(string))\n        string\
    \ + reversed.substring(suffix.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp1p1lsl4p.scala:16)\n\tat Problem$.main(tmp1p1lsl4p.scala:22)\n\
    \tat Problem.main(tmp1p1lsl4p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val palindrome\
    \ = Array.ofDim[Int](length, length)\n        var maxLength = 0\n        var maxIndex\
    \ = 0\n        for (i <- 0 until length) {\n            palindrome(i)(i) = 1\n\
    \            if (i < length - 1 && string(i) == string(i + 1)) {\n           \
    \     palindrome(i)(i + 1) = 1\n                maxLength = 2\n              \
    \  maxIndex = i\n            }\n        }\n        for (k <- 3 to length) {\n\
    \            for (i <- 0 until length - k + 1) {\n                val j = i +\
    \ k - 1\n                if (string(i) == string(j) && palindrome(i + 1)(j - 1)\
    \ == 1) {\n                    palindrome(i)(j) = 1\n                    maxLength\
    \ = k\n                    maxIndex = i\n                }\n            }\n  \
    \      }\n        string.substring(0, maxIndex) + string.substring(maxIndex +\
    \ maxLength) + string.substring(maxIndex, maxIndex + maxLength).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1p_c__ws.scala:42)\n\tat Problem.main(tmp1p_c__ws.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reverse = prefix.reverse\n        val palindrome = suffix + reverse\n\
    \        val palindromeLength = palindrome.length\n        val palindromeSuffix\
    \ = palindrome.substring(palindromeLength / 2)\n        val palindromePrefix =\
    \ palindrome.substring(0, palindromeLength / 2)\n        val palindromeSuffixLength\
    \ = palindromeSuffix.length\n        val palindromePrefixLength = palindromePrefix.length\n\
    \        val palindromeSuffixReverse = palindromeSuffix.reverse\n        val palindromePrefixReverse\
    \ = palindromePrefix.reverse\n        val palindromeSuffixReverseLength = palindromeSuffixReverse.length\n\
    \        val palindromePrefixReverseLength = palindromePrefixReverse.length\n\
    \        val palindromeSuffixReversePrefix = palindromeSuffixReverse.substring(0,\
    \ palindromeSuffixReverseLength / 2)\n        val palindromePrefixReverseSuffix\
    \ = palindromePrefixReverse.substring(palindromePrefixReverseLength / 2)\n   \
    \     val palindromeSuffixReversePrefixLength = palindromeSuffixReversePrefix.length\n\
    \        val palindromePrefixReverseSuffixLength = palindromePrefixReverseSuffix.length\n\
    \        val palindromeSuffixReversePrefixReverse = palindromeSuffixReversePrefix.reverse\n\
    \        val palindromePrefixReverseSuffixReverse = palindromePrefixReverseSuffix.reverse\n\
    \        val palindromeSuffixReversePrefixReverseLength = palindromeSuffixReversePrefixReverse.length\n\
    \        val palindromePrefixReverseSuffixReverseLength = palindromePrefixReverseSuffixReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbembey7l.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val stringLength = string.length\n        val\
    \ stringLengthHalf = stringLength / 2\n        val stringLengthHalfCeil = ceil(stringLength\
    \ / 2.0).toInt\n        val stringLengthHalfFloor = floor(stringLength / 2.0).toInt\n\
    \        var palindromeSuffix = \"\"\n        for (i <- 0 to stringLengthHalf)\
    \ {\n            val substring = string.substring(stringLengthHalfFloor - i, stringLengthHalfCeil\
    \ + i)\n            if (substring == substring.reverse) {\n                palindromeSuffix\
    \ = substring\n            }\n        }\n        val palindromePrefix = string.substring(0,\
    \ stringLengthHalfFloor - palindromeSuffix.length)\n        palindromePrefix +\
    \ palindromeSuffix + palindromePrefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpuojysliy.scala:26)\n\tat Problem$.main(tmpuojysliy.scala:31)\n\
    \tat Problem.main(tmpuojysliy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        string + reverse(string.substring(0, string.length - longestPalindrome.length))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt6ukj0if.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindrome\e[0m =\
    \ longestPalindromeSuffix(string)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            Not found: longestPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt6ukj0if.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        string + reverse(string.substring(\e[31m0\e[0m,\
    \ string.length - longestPalindrome.length))\n\e[31m\e[31m   |\e[0m          \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: reverse\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpqzjpyukg.scala:20)\n\
    \tat Problem$.main(tmpqzjpyukg.scala:24)\n\tat Problem.main(tmpqzjpyukg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversedPrefix = prefix.reverse\n        val palindromicSuffix = (1\
    \ to suffix.length).find(i => suffix.substring(0, i) == suffix.substring(i).reverse).get\n\
    \        val nonPalindromicPrefix = prefix.substring(0, prefix.length - palindromicSuffix)\n\
    \        nonPalindromicPrefix + suffix + reversedPrefix\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: None.get\n\tat scala.None$.get(Option.scala:627)\n\
    \tat scala.None$.get(Option.scala:626)\n\tat Problem$.makePalindrome(tmpj8yywfyf.scala:19)\n\
    \tat Problem$.main(tmpj8yywfyf.scala:24)\n\tat Problem.main(tmpj8yywfyf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    val suffix = string.substring(string.length / 2)\n        val prefix = string.substring(0,\
    \ string.length / 2)\n        val palindromeSuffix = findPalindrome(suffix)\n\
    \        val palindromePrefix = findPalindrome(prefix.reverse)\n        return\
    \ string + palindromePrefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb9fzsvjk.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findPalindrome(suffix)\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ findPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb9fzsvjk.scala:19:31\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mpalindromePrefix\e[0m = findPalindrome(prefix.reverse)\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        Not found: findPalindrome\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659806001
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ (0 until n).map(i => string.substring(i)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - suffix.length)\n        prefix +\
    \ suffix + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.maxBy\n\tat scala.collection.IterableOnceOps.maxBy(IterableOnce.scala:978)\n\
    \tat scala.collection.IterableOnceOps.maxBy$(IterableOnce.scala:976)\n\tat scala.collection.AbstractIterable.maxBy(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmprp8bfako.scala:16)\n\tat Problem$.main(tmprp8bfako.scala:21)\n\
    \tat Problem.main(tmprp8bfako.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val s = string\
    \ + \"*\" + string.reverse\n        val lps = Array.fill(s.length)(0)\n      \
    \  for (i <- 1 until s.length) {\n            var j = lps(i - 1)\n           \
    \ while (j > 0 && s(i) != s(j)) j = lps(j - 1)\n            if (s(i) == s(j))\
    \ lps(i) = j + 1\n        }\n        string + string.reverse.substring(lps(s.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659806005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findLongestPalindrome(string : String) :\
    \ String = {\n            def findLongestPalindrome(string : String, start : Int,\
    \ end : Int) : String = {\n                if (start < 0 || end >= string.length)\
    \ return \"\"\n                if (string(start) != string(end)) return \"\"\n\
    \                val palindrome = string.substring(start, end + 1)\n         \
    \       val nextPalindrome = findLongestPalindrome(string, start - 1, end + 1)\n\
    \                if (nextPalindrome.length > palindrome.length) nextPalindrome\
    \ else palindrome\n            }\n            def findLongestPalindrome(string\
    \ : String, index : Int) : String = {\n                val palindrome1 = findLongestPalindrome(string,\
    \ index, index)\n                val palindrome2 = findLongestPalindrome(string,\
    \ index, index + 1)\n                if (palindrome1.length > palindrome2.length)\
    \ palindrome1 else palindrome2\n            }\n            def findLongestPalindrome(string\
    \ : String) : String = {\n                var longestPalindrome = \"\"\n     \
    \           for (i <- 0 until string.length) {\n                    val palindrome\
    \ = findLongestPalindrome(string, i)\n                    if (palindrome.length\
    \ > longestPalindrome.length) longestPalindrome = palindrome\n               \
    \ }\n                longestPalindrome\n            }\n            findLongestPalindrome(string)\n\
    \        }\n        val longestPalindrome = findLongestPalindrome(string)\n  \
    \      val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_j5ncfra.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mdef\e[0m \e[36mfindLongestPalindrome\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m, \e[36mindex\e[0m : \e[35mInt\e[0m)\
    \ : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0mfindLongestPalindrome is already defined as \e[33mmethod\e[0m \e[35mfindLongestPalindrome\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m24 |\e[0m         \
    \       \e[33mval\e[0m \e[36mpalindrome1\e[0m = findLongestPalindrome(string,\
    \ index, index)\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mpalindrome2\e\
    [0m = findLongestPalindrome(string, index, index + \e[31m1\e[0m)\n\e[31m26 |\e\
    [0m                \e[33mif\e[0m (palindrome1.length > palindrome2.length) palindrome1\
    \ \e[33melse\e[0m palindrome2\n\e[31m27 |\e[0m            }\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp_j5ncfra.scala:28:16 ---------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mdef\e[0m \e[36mfindLongestPalindrome\e[0m(\e\
    [36mstring\e[0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e\
    [0m            ^\e[0m\n\e[31m   |\e[0mfindLongestPalindrome is already defined\
    \ as \e[33mmethod\e[0m \e[35mfindLongestPalindrome\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m29 |\e[0m                \e[33mvar\e[0m \e[36mlongestPalindrome\e\
    [0m = \e[31m\"\"\e[0m\n\e[31m30 |\e[0m                \e[33mfor\e[0m (i <- \e\
    [31m0\e[0m until string.length) {\n\e[31m31 |\e[0m                    \e[33mval\e\
    [0m \e[36mpalindrome\e[0m = findLongestPalindrome(string, i)\n\e[31m32 |\e[0m\
    \                    \e[33mif\e[0m (palindrome.length > longestPalindrome.length)\
    \ longestPalindrome = palindrome\n\e[31m33 |\e[0m                }\n\e[31m34 |\e\
    [0m                longestPalindrome\n\e[31m35 |\e[0m            }\n\e[31m\e[31m--\
    \ Error: /tmp/tmp_j5ncfra.scala:36:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            findLongestPalindrome(string)\n\e[31m\e[31m\
    \   |\e[0m      "
  stdout: ''
  timestamp: 1659806002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromeSuffix.length)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpkr11565f.scala:20)\n\
    \tat Problem$.main(tmpkr11565f.scala:24)\n\tat Problem.main(tmpkr11565f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe55_uxsc.scala:25)\n\tat Problem.main(tmpe55_uxsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val reversedSuffix = suffix.reverse\n\
    \        val palindromeSuffix = suffix + reversedSuffix\n        val palindromePrefix\
    \ = reversedPrefix + prefix\n        if (palindromeSuffix.length > palindromePrefix.length)\
    \ palindromeSuffix else palindromePrefix\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe350d9xg.scala:26)\n\tat Problem.main(tmpe350d9xg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val m = n * 2\
    \ + 1\n        val t = new Array[Int](m)\n        var l = 0\n        var r = -1\n\
    \        for (i <- 0 until m) {\n            val k = if (i % 2 == 0) 0 else 1\n\
    \            var j = (i + k) / 2\n            while (j >= 0 && j < n && i - j\
    \ >= 0 && i - j < n && string(j) == string(i - j)) j += 1\n            t(i) =\
    \ j\n            if (i + t(i) > r) {\n                l = i - t(i)\n         \
    \       r = i + t(i)\n            }\n        }\n        val p = t.indexOf(n)\n\
    \        val q = p - n\n        string + string.substring(q, n).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -1, end 1, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmplg4bmx05.scala:32)\n\tat Problem$.main(tmplg4bmx05.scala:36)\n\
    \tat Problem.main(tmplg4bmx05.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix.substring(0, suffix.length - suffix.reverse.indexOf(suffix))\n\
    \        val prefixPalindrome = prefix.substring(prefix.reverse.indexOf(prefix))\n\
    \        prefixPalindrome + suffixPalindrome + prefixPalindrome.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 3, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpr9xdntqm.scala:18)\n\tat Problem$.main(tmpr9xdntqm.scala:25)\n\
    \tat Problem.main(tmpr9xdntqm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPalindromeSuffix = \"\"\n       \
    \ for (i <- 0 to string.length) {\n            val suffix = string.substring(i)\n\
    \            if (isPalindrome(suffix)) {\n                longestPalindromeSuffix\
    \ = suffix\n                break\n            }\n        }\n        val prefix\
    \ = string.substring(0, string.length - longestPalindromeSuffix.length)\n    \
    \    prefix + longestPalindromeSuffix + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbgccepya.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPalindrome(suffix)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbgccepya.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        var i = 0\n \
    \       var j = n - 1\n        while (i < j) {\n            if (string(i) != string(j))\
    \ {\n                return string.substring(0, j) + string.substring(j, n).reverse\
    \ + string\n            }\n            i += 1\n            j -= 1\n        }\n\
    \        return string + string.reverse.substring(1, n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpnznh2v1s.scala:25)\n\tat Problem$.main(tmpnznh2v1s.scala:28)\n\
    \tat Problem.main(tmpnznh2v1s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val palindromeSuffix = findPalindromeSuffix(suffix)\n        val palindromePrefix\
    \ = reverse(prefix.substring(0, prefix.length - palindromeSuffix.length))\n  \
    \      palindromePrefix + suffix + palindromePrefix\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpurrr7taz.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findPalindromeSuffix(suffix)\n\e[31m\e[31m   |\e[0m                        \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: findPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpurrr7taz.scala:19:31 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromePrefix\e[0m = reverse(prefix.substring(\e\
    [31m0\e[0m, prefix.length - palindromeSuffix.length))\n\e[31m\e[31m   |\e[0m \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              Not found: reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val s = string\
    \ + \"#\" + string.reverse\n        val z = Array.fill(s.length)(0)\n        var\
    \ l = 0; var r = 0\n        for (i <- 1 until s.length) {\n            if (i <=\
    \ r) z(i) = min(z(i - l), r - i + 1)\n            while (i + z(i) < s.length &&\
    \ s(z(i)) == s(i + z(i))) z(i) += 1\n            if (i + z(i) - 1 > r) {\n   \
    \             l = i; r = i + z(i) - 1\n            }\n        }\n        val prefix\
    \ = string.substring(0, n - z(n + 1))\n        string + prefix.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.makePalindrome(tmpw6ea2_1a.scala:26)\n\tat Problem$.main(tmpw6ea2_1a.scala:30)\n\
    \tat Problem.main(tmpw6ea2_1a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = (suffix + reversedPrefix).substring(0,\
    \ suffix.length)\n        val palindromicPrefix = reversedPrefix.substring(suffix.length)\n\
    \        palindromicPrefix + string + palindromicSuffix\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpbdw_2jgi.scala:19)\n\
    \tat Problem$.main(tmpbdw_2jgi.scala:24)\n\tat Problem.main(tmpbdw_2jgi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = new StringBuilder(prefix).reverse.toString\n   \
    \     val palindromeSuffix = findLongestPalindrome(suffix)\n        val palindrome\
    \ = suffix + reversedPrefix + palindromeSuffix\n        palindrome\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3q9zhpr6.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findLongestPalindrome(suffix)\n\e[31m\e[31m   |\e[0m                       \
    \        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      Not found: findLongestPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val suffixPalindrome = suffix.reverse\n        if (suffixPalindrome ==\
    \ suffix) return string\n        val prefixPalindrome = prefix.reverse\n     \
    \   val prefixPalindromeLength = prefixPalindrome.length\n        val suffixPalindromeLength\
    \ = suffixPalindrome.length\n        val commonPrefixLength = prefixPalindrome.zip(suffixPalindrome).takeWhile(Function.tupled(_\
    \ == _)).length\n        val prefixPalindromeSuffix = prefixPalindrome.substring(commonPrefixLength)\n\
    \        val suffixPalindromePrefix = suffixPalindrome.substring(0, suffixPalindromeLength\
    \ - commonPrefixLength)\n        val result = prefixPalindromeSuffix + suffixPalindromePrefix\
    \ + suffix\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdglb5d23.scala:32)\n\tat Problem.main(tmpdglb5d23.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val palindromeSuffix = findPalindromeSuffix(suffix)\n        val palindromePrefix\
    \ = prefix.substring(0, prefix.length - palindromeSuffix.length)\n        palindromePrefix\
    \ + suffix + palindromePrefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ulykzfd.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findPalindromeSuffix(suffix)\n\e[31m\e[31m   |\e[0m                        \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: findPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ (0 until n).map(i => string.substring(i)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - suffix.length)\n        prefix +\
    \ suffix + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.maxBy\n\tat scala.collection.IterableOnceOps.maxBy(IterableOnce.scala:978)\n\
    \tat scala.collection.IterableOnceOps.maxBy$(IterableOnce.scala:976)\n\tat scala.collection.AbstractIterable.maxBy(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmprp8bfako.scala:16)\n\tat Problem$.main(tmprp8bfako.scala:21)\n\
    \tat Problem.main(tmprp8bfako.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n - 1, n)\n        val prefix = string.substring(0, n - 1)\n\
    \        val suffixPalindrome = isPalindrome(suffix)\n        val prefixPalindrome\
    \ = isPalindrome(prefix)\n        if (suffixPalindrome && prefixPalindrome) string\n\
    \        else if (suffixPalindrome) string + prefix.reverse\n        else if (prefixPalindrome)\
    \ suffix + string\n        else string + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5fpx8ea.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msuffixPalindrome\e[0m =\
    \ isPalindrome(suffix)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: isPalindrome\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5fpx8ea.scala:19:31\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mprefixPalindrome\e[0m = isPalindrome(prefix)\n\e[31m\e[31m   |\e[0m      \
    \                         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val palindromeLength\
    \ = (0 until length).find(i => string.substring(0, i) == string.substring(length\
    \ - i, length).reverse).getOrElse(0)\n        string + string.substring(0, length\
    \ - palindromeLength).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplagpzdpw.scala:21)\n\tat Problem.main(tmplagpzdpw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversedPrefix = prefix.reverse\n        val palindromicSuffix = (1\
    \ to suffix.length).find(i => suffix.substring(0, i) == suffix.substring(i).reverse).get\n\
    \        val nonPalindromicPrefix = prefix.substring(0, prefix.length - palindromicSuffix)\n\
    \        nonPalindromicPrefix + suffix + reversedPrefix\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: None.get\n\tat scala.None$.get(Option.scala:627)\n\
    \tat scala.None$.get(Option.scala:626)\n\tat Problem$.makePalindrome(tmpj8yywfyf.scala:19)\n\
    \tat Problem$.main(tmpj8yywfyf.scala:24)\n\tat Problem.main(tmpj8yywfyf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val reversed\
    \ = string.reverse\n        val suffix = string.substring(0, length - 1)\n   \
    \     val prefix = reversed.substring(0, length - 1)\n        val palindrome =\
    \ suffix + prefix\n        string + palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmplpyxbasa.scala:17)\n\tat Problem$.main(tmplpyxbasa.scala:23)\n\
    \tat Problem.main(tmplpyxbasa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        val reversePrefix = prefix.reverse\n        string + reversePrefix\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7h0yamxn.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindrome\e[0m =\
    \ longestPalindromeSuffix(string)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            Not found: longestPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = (1\
    \ to n / 2).find(i => suffix.substring(0, i) == reversedPrefix.substring(n / 2\
    \ - i, n / 2)).get\n        string + reversedPrefix.substring(n / 2 - palindromeSuffix,\
    \ n / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: None.get\n\tat scala.None$.get(Option.scala:627)\n\
    \tat scala.None$.get(Option.scala:626)\n\tat Problem$.makePalindrome(tmpwyenga3_.scala:19)\n\
    \tat Problem$.main(tmpwyenga3_.scala:23)\n\tat Problem.main(tmpwyenga3_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val suffixPalindrome = suffix.substring(suffix.indexOf(prefix.reverse))\n\
    \        string + suffixPalindrome.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk9qbgi9s.scala:23)\n\tat Problem.main(tmpk9qbgi9s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val palindrome\
    \ = new Array[Int](length)\n        var i = 0\n        var j = 0\n        while\
    \ (i < length) {\n            while (i - j >= 0 && i + j < length && string(i\
    \ - j) == string(i + j)) j += 1\n            palindrome(i) = j\n            var\
    \ k = 1\n            while (i - k >= 0 && i + k < length && k + palindrome(i -\
    \ k) < j) {\n                palindrome(i + k) = palindrome(i - k)\n         \
    \       k += 1\n            }\n            i += k\n            j -= k\n      \
    \  }\n        var maxLength = 0\n        var centerIndex = 0\n        i = 1\n\
    \        while (i < length) {\n            if (i + palindrome(i) == length) {\n\
    \                maxLength = palindrome(i)\n                centerIndex = i\n\
    \            }\n            i += 1\n        }\n        val prefix = string.substring(0,\
    \ centerIndex - maxLength)\n        val suffix = string.substring(centerIndex\
    \ + maxLength)\n        prefix + string + suffix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph3uc9yyb.scala:46)\n\tat Problem.main(tmph3uc9yyb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var prefix = string\n        var suffix = \"\
    \"\n        var palindrome = \"\"\n        while (prefix.length > 0) {\n     \
    \       if (isPalindrome(prefix)) {\n                palindrome = prefix + suffix\n\
    \                break\n            }\n            suffix = prefix.charAt(0) +\
    \ suffix\n            prefix = prefix.substring(1)\n        }\n        palindrome\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpga36y9j4.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (isPalindrome(prefix)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpga36y9j4.scala:21:16 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        val palindrome = suffix + reversedPrefix + palindromeSuffix\n       \
    \ palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx5nsiej4.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findPalindromeSuffix(suffix)\n\e[31m\e[31m   |\e[0m                        \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: findPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805820
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val prefix\
    \ = string.substring(0, length / 2)\n        val suffix = string.substring(length\
    \ / 2 + length % 2, length)\n        val reversedPrefix = prefix.reverse\n   \
    \     val reversedSuffix = suffix.reverse\n        val palindromeSuffix = reversedSuffix.substring(0,\
    \ reversedSuffix.indexOf(reversedPrefix))\n        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp257o9oxp.scala:20)\n\tat Problem$.main(tmp257o9oxp.scala:27)\n\
    \tat Problem.main(tmp257o9oxp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val palindromeSuffix\
    \ = (0 until length).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, length - palindromeSuffix).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpppltppbc.scala:21)\n\tat Problem.main(tmpppltppbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val longestPalindrome\
    \ = Array.fill(n)(0)\n        var center = 0\n        var right = 0\n        for\
    \ (i <- 0 until n) {\n            val mirror = 2 * center - i\n            if\
    \ (i < right) longestPalindrome(i) = min(right - i, longestPalindrome(mirror))\n\
    \            var left = i - (1 + longestPalindrome(i))\n            var right\
    \ = i + (1 + longestPalindrome(i))\n            while (left >= 0 && right < n\
    \ && string(left) == string(right)) {\n                longestPalindrome(i) +=\
    \ 1\n                left -= 1\n                right += 1\n            }\n  \
    \          if (i + longestPalindrome(i) > right) {\n                center = i\n\
    \                right = i + longestPalindrome(i)\n            }\n        }\n\
    \        val longestPalindromeLength = longestPalindrome.max\n        val longestPalindromeCenter\
    \ = longestPalindrome.indexOf(longestPalindromeLength)\n        val prefix = string.substring(0,\
    \ longestPalindromeCenter - longestPalindromeLength)\n        val suffix = string.substring(longestPalindromeCenter\
    \ + longestPalindromeLength)\n        prefix + string + suffix.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E039] Reference Error: /tmp/tmpdemij4j0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (i < right) longestPalindrome(i)\
    \ = min(right - i, longestPalindrome(mirror))\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m      right is a forward reference extending\
    \ over the definition of left\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val suffix\
    \ = string.substring(length / 2, length)\n        val prefix = string.substring(0,\
    \ length / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromicSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        val palindromicPrefix\
    \ = reversedPrefix.substring(reversedPrefix.indexOf(palindromicSuffix) + 1)\n\
    \        palindromicPrefix + string + palindromicPrefix.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp3nu5kwzr.scala:19)\n\tat Problem$.main(tmp3nu5kwzr.scala:24)\n\
    \tat Problem.main(tmp3nu5kwzr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val prefix =\
    \ string.substring(0, n / 2)\n        val suffix = string.substring(n / 2 + n\
    \ % 2, n)\n        val reversedPrefix = prefix.reverse\n        val reversedSuffix\
    \ = suffix.reverse\n        val prefixSuffix = prefix + suffix\n        val reversedPrefixSuffix\
    \ = reversedPrefix + reversedSuffix\n        val reversedPrefixSuffixPrefix =\
    \ reversedPrefix + suffix\n        val prefixSuffixReversedSuffix = prefix + reversedSuffix\n\
    \        val reversedPrefixSuffixReversedSuffix = reversedPrefix + reversedSuffix\n\
    \        val prefixSuffixReversedPrefix = prefix + reversedPrefix\n        val\
    \ reversedPrefixSuffixReversedPrefix = reversedPrefix + reversedPrefix\n     \
    \   val prefixSuffixPrefix = prefix + suffix + prefix\n        val reversedPrefixSuffixPrefixReversedPrefix\
    \ = reversedPrefix + suffix + prefix + reversedPrefix\n        if (prefixSuffix\
    \ == reversedPrefixSuffix) prefixSuffix\n        else if (reversedPrefixSuffixPrefix\
    \ == reversedPrefixSuffixPrefix.reverse) reversedPrefixSuffixPrefix\n        else\
    \ if (prefixSuffixReversedSuffix == prefixSuffixReversedSuffix.reverse) prefixSuffixReversedSuffix\n\
    \        else if (reversedPrefixSuffixReversedSuffix == reversedPrefixSuffixReversedSuffix.reverse)\
    \ reversedPrefixSuffixReversedSuffix\n        else if (prefixSuffixReversedPrefix\
    \ == prefixSuffixReversedPrefix.reverse) prefixSuffixReversedPrefix\n        else\
    \ if (reversedPrefixSuffixReversedPrefix == reversedPrefixSuffixReversedPrefix.reverse)\
    \ reversedPrefixSuffixReversedPrefix\n        else if (prefixSuffixPrefix == prefixSuffixPrefix.reverse)\
    \ prefixSuffixPrefix\n        else if (reversedPrefixSuffixPrefixReversedPrefix\
    \ == reversedPrefixSuff\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd9o20ype.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd9o20ype.scala:36:61\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (reversedPrefixSuffixPrefixReversedPrefix == reversedPrefixSuff\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \          Not found: reversedPrefixSuff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findLongestPalindrome(string : String) :\
    \ String = {\n            def findLongestPalindrome(string : String, start : Int,\
    \ end : Int) : String = {\n                if (start < 0 || end >= string.length)\
    \ return \"\"\n                if (string(start) != string(end)) return \"\"\n\
    \                val palindrome = string.substring(start, end + 1)\n         \
    \       if (palindrome.length == 1) return palindrome\n                if (palindrome.length\
    \ == 2) return if (palindrome(0) == palindrome(1)) palindrome else \"\"\n    \
    \            if (palindrome.length == 3) return if (palindrome(0) == palindrome(2))\
    \ palindrome else \"\"\n                if (palindrome.length == 4) return if\
    \ (palindrome(0) == palindrome(3) && palindrome(1) == palindrome(2)) palindrome\
    \ else \"\"\n                val left = findLongestPalindrome(string, start -\
    \ 1, end + 1)\n                if (left.length > 0) return left\n            \
    \    val right = findLongestPalindrome(string, start + 1, end - 1)\n         \
    \       if (right.length > 0) return right\n                return \"\"\n    \
    \        }\n            val palindrome = findLongestPalindrome(string, 0, string.length\
    \ - 1)\n            if (palindrome.length > 0) return palindrome\n           \
    \ return findLongestPalindrome(string, 0, string.length - 2)\n        }\n    \
    \    val palindrome = findLongestPalindrome(string)\n        if (palindrome.length\
    \ == string.length) return string\n        return string + string.substring(0,\
    \ string.length - palindrome.length).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.findLongestPalindrome$2(tmpzx0k0_mz.scala:18)\n\
    \tat Problem$.findLongestPalindrome$1(tmpzx0k0_mz.scala:30)\n\tat Problem$.makePalindrome(tmpzx0k0_mz.scala:34)\n\
    \tat Problem$.main(tmpzx0k0_mz.scala:39)\n\tat Problem.main(tmpzx0k0_mz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = (for\
    \ (i <- 0 to suffix.length) yield {\n            val suffixPrefix = suffix.substring(0,\
    \ i)\n            val reversedSuffixPrefix = suffixPrefix.reverse\n          \
    \  if (suffixPrefix == reversedSuffixPrefix) suffixPrefix else \"\"\n        }).max\n\
    \        string + reversedPrefix.substring(palindromeSuffix.length)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmp_njqm3y0.scala:24)\n\
    \tat Problem$.main(tmp_njqm3y0.scala:28)\n\tat Problem.main(tmp_njqm3y0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversed = prefix.reverse\n        val palindrome = suffix + reversed\n\
    \        val longestPalindrome = suffix.zipWithIndex.reverse.find(x => string.endsWith(x._1\
    \ + suffix.substring(0, x._2)))\n        val palindromeLength = longestPalindrome\
    \ match {\n            case Some(x) => x._2\n            case None => 0\n    \
    \    }\n        val prefixLength = n - palindromeLength\n        val prefixToAppend\
    \ = reversed.substring(0, prefixLength)\n        palindrome + prefixToAppend\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpxbwjuutf.scala:26)\n\tat Problem$.main(tmpxbwjuutf.scala:31)\n\
    \tat Problem.main(tmpxbwjuutf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findLongestPalindrome(string : String) :\
    \ String = {\n            def isPalindrome(string : String) : Boolean = {\n  \
    \              if (string.length <= 1) true\n                else if (string.head\
    \ != string.last) false\n                else isPalindrome(string.tail.init)\n\
    \            }\n            def findLongestPalindrome(string : String, longestPalindrome\
    \ : String) : String = {\n                if (string.length == 0) longestPalindrome\n\
    \                else if (isPalindrome(string)) findLongestPalindrome(string.init,\
    \ string)\n                else findLongestPalindrome(string.init, longestPalindrome)\n\
    \            }\n            findLongestPalindrome(string, \"\")\n        }\n \
    \       val longestPalindrome = findLongestPalindrome(string)\n        if (longestPalindrome.length\
    \ == string.length) string\n        else string + string.substring(0, string.length\
    \ - longestPalindrome.length).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkikqpa9o.scala:36)\n\tat Problem.main(tmpkikqpa9o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val prefix =\
    \ string.substring(0, n - 1)\n        val suffix = string.substring(n - 1, n)\n\
    \        val reversedPrefix = prefix.reverse\n        if (suffix == reversedPrefix)\
    \ string + suffix else string + reversedPrefix\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpdzd1154m.scala:16)\n\tat Problem$.main(tmpdzd1154m.scala:22)\n\
    \tat Problem.main(tmpdzd1154m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpqzjpyukg.scala:20)\n\
    \tat Problem$.main(tmpqzjpyukg.scala:24)\n\tat Problem.main(tmpqzjpyukg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val prefix =\
    \ string.substring(0, n / 2)\n        val suffix = string.substring(n / 2 + n\
    \ % 2, n)\n        val reversedPrefix = prefix.reverse\n        val reversedSuffix\
    \ = suffix.reverse\n        val palindromeSuffix = suffix + reversedSuffix.substring(reversedSuffix.indexOf(prefix))\n\
    \        val palindromePrefix = reversedPrefix.substring(reversedPrefix.indexOf(suffix))\
    \ + suffix\n        if (palindromeSuffix.length < palindromePrefix.length) palindromeSuffix\
    \ else palindromePrefix\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_y5ozgk.scala:26)\n\tat Problem.main(tmpz_y5ozgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpomr0wzpw.scala:19)\n\
    \tat Problem$.main(tmpomr0wzpw.scala:23)\n\tat Problem.main(tmpomr0wzpw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n - 1, n)\n        val prefix = string.substring(0, 1)\n  \
    \      val suffixPalindrome = suffix + makePalindrome(string.substring(0, n -\
    \ 1)) + prefix\n        if (suffixPalindrome.length < string.length + 1) suffixPalindrome\
    \ else string + string.reverse.substring(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpehq6zt7n.scala:16)\n\tat Problem$.main(tmpehq6zt7n.scala:22)\n\
    \tat Problem.main(tmpehq6zt7n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(suffix.indexOf(reversePrefix))\n\
    \        string + reversePrefix.substring(reversePrefix.indexOf(palindromeSuffix)\
    \ + palindromeSuffix.length)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -1, end 2, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpm2w8ukd6.scala:19)\n\
    \tat Problem$.main(tmpm2w8ukd6.scala:25)\n\tat Problem.main(tmpm2w8ukd6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversePrefix) + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp_hits4im.scala:19)\n\tat Problem$.main(tmp_hits4im.scala:23)\n\
    \tat Problem.main(tmp_hits4im.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reverse = prefix.reverse\n        val palindrome = suffix + reverse\n\
    \        palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfno9ff1_.scala:25)\n\tat Problem.main(tmpfno9ff1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ Array.ofDim[Int](n)\n        var i = 0\n        var j = 1\n        while (j\
    \ < n) {\n            if (string(i) == string(j)) {\n                suffix(j)\
    \ = i + 1\n                i += 1\n            } else {\n                if (i\
    \ == 0) suffix(j) = 0\n                else {\n                    i = suffix(i\
    \ - 1)\n                    j -= 1\n                }\n            }\n       \
    \     j += 1\n        }\n        val prefix = string.substring(0, n - suffix(n\
    \ - 1))\n        string + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length\
    \ 0\n\tat Problem$.makePalindrome(tmpznzd0__9.scala:32)\n\tat Problem$.main(tmpznzd0__9.scala:36)\n\
    \tat Problem.main(tmpznzd0__9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPalindromeSuffix = \"\"\n       \
    \ for (i <- 0 to string.length - 1) {\n            val suffix = string.substring(i)\n\
    \            if (suffix == suffix.reverse) {\n                longestPalindromeSuffix\
    \ = suffix\n                break\n            }\n        }\n        val prefix\
    \ = string.substring(0, string.length - longestPalindromeSuffix.length)\n    \
    \    prefix + longestPalindromeSuffix + prefix.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8lmw2bds.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659806012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val prefix =\
    \ string.substring(0, n / 2)\n        val suffix = string.substring(n / 2 + n\
    \ % 2, n)\n        val reversedPrefix = prefix.reverse\n        val palindromicSuffix\
    \ = suffix.substring(suffix.indexOf(reversedPrefix))\n        string + reversedPrefix.substring(palindromicSuffix.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -1, end 1, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpoi69yfd5.scala:19)\n\
    \tat Problem$.main(tmpoi69yfd5.scala:25)\n\tat Problem.main(tmpoi69yfd5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    val suffix = string.substring(string.length / 2)\n        val prefix = string.substring(0,\
    \ string.length / 2)\n        val reversePrefix = prefix.reverse\n        val\
    \ palindromeSuffix = suffix.substring(0, suffix.length - suffix.indexOf(reversePrefix))\n\
    \        val palindrome = string + reversePrefix.substring(reversePrefix.length\
    \ - (string.length - palindromeSuffix.length))\n        palindrome\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 3, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpuwhwce03.scala:19)\n\tat Problem$.main(tmpuwhwce03.scala:26)\n\
    \tat Problem.main(tmpuwhwce03.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val suffixPalindrome = suffix.reverse\n        if (suffix == suffixPalindrome)\
    \ suffix + prefix else suffix + prefix + suffixPalindrome\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph4krp53i.scala:24)\n\tat Problem.main(tmph4krp53i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val reverse\
    \ = string.reverse\n        val suffix = (0 until length).map(i => string.substring(i)).filter(s\
    \ => s == reverse.substring(0, length - i)).maxBy(_.length)\n        val prefix\
    \ = string.substring(0, length - suffix.length)\n        string + prefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwmqvcvo9.scala:17:115 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msuffix\e[0m = (\e[31m0\e\
    [0m until length).map(\e[36mi\e[0m => string.substring(i)).filter(\e[36ms\e[0m\
    \ => s == reverse.substring(\e[31m0\e[0m, length - i)).maxBy(_.length)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                                          Not found: i\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659806014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        prefix + string + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80x__adz.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindrome\e[0m =\
    \ longestPalindromeSuffix(string)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            Not found: longestPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix) + 1)\n        val palindromePrefix = reversedPrefix.substring(reversedPrefix.indexOf(palindromeSuffix)\
    \ + 1)\n        palindromePrefix + suffix + palindromePrefix.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpuuqia2nf.scala:19)\n\tat Problem$.main(tmpuuqia2nf.scala:24)\n\
    \tat Problem.main(tmpuuqia2nf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        if (string.length == 0) return string\n    \
    \    val suffix = string.substring(string.length / 2)\n        val prefix = string.substring(0,\
    \ string.length / 2)\n        val reversedPrefix = prefix.reverse\n        val\
    \ palindromeSuffix = suffix.substring(0, suffix.length - suffix.indexOf(reversedPrefix))\n\
    \        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmp5lz84ru5.scala:20)\n\
    \tat Problem$.main(tmp5lz84ru5.scala:25)\n\tat Problem.main(tmp5lz84ru5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val suffix\
    \ = string.substring(length / 2, length)\n        val prefix = string.substring(0,\
    \ length / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromicSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        val palindromicPrefix\
    \ = palindromicSuffix.reverse\n        palindromicPrefix + string + palindromicSuffix\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpwe5sky5_.scala:19)\n\tat Problem$.main(tmpwe5sky5_.scala:24)\n\
    \tat Problem.main(tmpwe5sky5_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val prefix\
    \ = string.substring(0, length / 2)\n        val suffix = string.substring(length\
    \ / 2 + length % 2, length)\n        val reverse = suffix.reverse\n        val\
    \ palindrome = suffix + reverse\n        val palindromeLength = palindrome.length\n\
    \        val prefixLength = prefix.length\n        val prefixPalindrome = prefix.substring(prefixLength\
    \ - palindromeLength, prefixLength)\n        if (prefixPalindrome == palindrome)\
    \ string + reverse.substring(palindromeLength, reverse.length)\n        else string\
    \ + reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -1, end 1, length 1\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp16m4tszt.scala:22)\n\tat Problem$.main(tmp16m4tszt.scala:29)\n\
    \tat Problem.main(tmp16m4tszt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        if (length\
    \ == 0) return \"\"\n        var i = length - 1\n        while (i >= 0) {\n  \
    \          if (isPalindrome(string.substring(i))) {\n                return string\
    \ + string.substring(0, i).reverse\n            }\n            i -= 1\n      \
    \  }\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0g77iwyg.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (isPalindrome(string.substring(i)))\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findLongestPalindrome(string : String) :\
    \ String = {\n            def findLongestPalindrome(string : String, start : Int,\
    \ end : Int) : String = {\n                if (start < 0 || end >= string.length)\
    \ return \"\"\n                if (string(start) != string(end)) return \"\"\n\
    \                val palindrome = string.substring(start, end + 1)\n         \
    \       if (palindrome.length == 1) return palindrome\n                if (palindrome.length\
    \ == 2) return if (palindrome(0) == palindrome(1)) palindrome else \"\"\n    \
    \            if (palindrome.length == 3) return if (palindrome(0) == palindrome(2))\
    \ palindrome else \"\"\n                if (findLongestPalindrome(palindrome,\
    \ 1, palindrome.length - 2) == \"\") return \"\"\n                palindrome\n\
    \            }\n            var longestPalindrome = \"\"\n            for (i <-\
    \ 0 until string.length) {\n                val palindrome = findLongestPalindrome(string,\
    \ i, i)\n                if (palindrome.length > longestPalindrome.length) longestPalindrome\
    \ = palindrome\n                val palindrome2 = findLongestPalindrome(string,\
    \ i, i + 1)\n                if (palindrome2.length > longestPalindrome.length)\
    \ longestPalindrome = palindrome2\n            }\n            longestPalindrome\n\
    \        }\n        val palindrome = findLongestPalindrome(string)\n        if\
    \ (palindrome == string) return string\n        string + string.substring(0, string.length\
    \ - palindrome.length).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpawmx92o8.scala:43)\n\tat Problem.main(tmpawmx92o8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val palindrome\
    \ = Array.ofDim[Int](n)\n        var left = 0\n        var right = 0\n       \
    \ for (i <- 0 until n) {\n            if (i > right) {\n                var j\
    \ = 0\n                while (i - j >= 0 && i + j < n && string(i - j) == string(i\
    \ + j)) j += 1\n                palindrome(i) = j\n                left = i -\
    \ j + 1\n                right = i + j - 1\n            } else {\n           \
    \     val iMirror = left + right - i\n                if (palindrome(iMirror)\
    \ < right - i) palindrome(i) = palindrome(iMirror)\n                else {\n \
    \                   var j = 1\n                    while (i - j >= 0 && i + j\
    \ < n && string(i - j) == string(i + j)) j += 1\n                    palindrome(i)\
    \ = j\n                    left = i - j + 1\n                    right = i + j\
    \ - 1\n                }\n            }\n        }\n        val longestPalindrome\
    \ = palindrome.max\n        val prefix = string.substring(0, n - longestPalindrome)\n\
    \        val suffix = string.substring(n - longestPalindrome)\n        prefix\
    \ + suffix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.makePalindrome(tmprm5md24j.scala:38)\n\tat Problem$.main(tmprm5md24j.scala:44)\n\
    \tat Problem.main(tmprm5md24j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpomr0wzpw.scala:19)\n\
    \tat Problem$.main(tmpomr0wzpw.scala:23)\n\tat Problem.main(tmpomr0wzpw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val palindrome = prefix + suffix\n        val reversed = prefix.reverse\n\
    \        palindrome + reversed\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwimtasz7.scala:25)\n\tat Problem.main(tmpwimtasz7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversePrefix) + 1)\n        val palindrome = string + reversePrefix.substring(palindromeSuffix.length)\n\
    \        palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpsgk7rh_n.scala:19)\n\tat Problem$.main(tmpsgk7rh_n.scala:24)\n\
    \tat Problem.main(tmpsgk7rh_n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.findPalindrome\n\
    \        val palindrome = palindromeSuffix + reversePrefix\n        palindrome\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfhoe8z_6.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ suffix.findPalindrome\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value findPalindrome is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659806020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val (prefix, suffix) = string.splitAt(string.length\
    \ - longestPalindromeSuffix(string))\n        prefix + prefix.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb_bq_taz.scala:15:62 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (prefix, suffix) = string.splitAt(string.length\
    \ - longestPalindromeSuffix(string))\n\e[31m\e[31m   |\e[0m                  \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                      Not found: longestPalindromeSuffix\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reverse = prefix.reverse\n        val palindrome = suffix + reverse\n\
    \        if (palindrome.length == n) palindrome\n        else palindrome + suffix.charAt(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk_b1305a.scala:26)\n\tat Problem.main(tmpk_b1305a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findLongestPalindrome(string : String) :\
    \ String = {\n            val reversed = string.reverse\n            val length\
    \ = string.length\n            val table = Array.ofDim[Int](length, length)\n\
    \            for (i <- 0 until length) {\n                for (j <- 0 until length)\
    \ {\n                    if (string(i) == reversed(j)) {\n                   \
    \     if (i == 0 || j == 0) table(i)(j) = 1\n                        else table(i)(j)\
    \ = table(i - 1)(j - 1) + 1\n                    }\n                }\n      \
    \      }\n            var max = 0\n            var maxI = 0\n            for (i\
    \ <- 0 until length) {\n                if (table(i)(length - 1) > max) {\n  \
    \                  max = table(i)(length - 1)\n                    maxI = i\n\
    \                }\n            }\n            string.substring(maxI - max + 1,\
    \ maxI + 1)\n        }\n        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.findLongestPalindrome$1(tmpba2s6_xq.scala:35)\n\tat Problem$.makePalindrome(tmpba2s6_xq.scala:37)\n\
    \tat Problem$.main(tmpba2s6_xq.scala:42)\n\tat Problem.main(tmpba2s6_xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806023
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        // Find the longest palindromic suffix.\n  \
    \      def findPalindromicSuffix(string : String) : String = {\n            def\
    \ findPalindromicSuffix(string : String, index : Int) : String = {\n         \
    \       if (index == 0) \"\"\n                else if (string.substring(0, index)\
    \ == string.substring(string.length - index, string.length)) string.substring(0,\
    \ index)\n                else findPalindromicSuffix(string, index - 1)\n    \
    \        }\n            findPalindromicSuffix(string, string.length)\n       \
    \ }\n        // Find the longest palindromic prefix.\n        def findPalindromicPrefix(string\
    \ : String) : String = {\n            def findPalindromicPrefix(string : String,\
    \ index : Int) : String = {\n                if (index == string.length) \"\"\n\
    \                else if (string.substring(0, index) == string.substring(string.length\
    \ - index, string.length)) string.substring(0, index)\n                else findPalindromicPrefix(string,\
    \ index + 1)\n            }\n            findPalindromicPrefix(string, 0)\n  \
    \      }\n        val palindromicSuffix = findPalindromicSuffix(string)\n    \
    \    val palindromicPrefix = findPalindromicPrefix(string)\n        if (palindromicSuffix.length\
    \ == string.length) string\n        else string + palindromicPrefix.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjfq3t1c.scala:41)\n\tat Problem.main(tmpgjfq3t1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPalindrome = \"\"\n        for (i\
    \ <- 0 to string.length) {\n            val suffix = string.substring(i)\n   \
    \         if (isPalindrome(suffix)) {\n                longestPalindrome = suffix\n\
    \                break\n            }\n        }\n        val prefix = string.substring(0,\
    \ string.length - longestPalindrome.length)\n        prefix + longestPalindrome\
    \ + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr8pvo20.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (isPalindrome(suffix)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Not found: isPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkr8pvo20.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findLongestPalindrome(string : String) :\
    \ String = {\n            val n = string.length\n            val palindrome =\
    \ Array.ofDim[Boolean](n, n)\n            for (i <- 0 until n) palindrome(i)(i)\
    \ = true\n            for (i <- 0 until n - 1) palindrome(i)(i + 1) = string(i)\
    \ == string(i + 1)\n            for (k <- 2 until n) {\n                for (i\
    \ <- 0 until n - k) {\n                    palindrome(i)(i + k) = palindrome(i\
    \ + 1)(i + k - 1) && string(i) == string(i + k)\n                }\n         \
    \   }\n            var longestPalindrome = \"\"\n            for (i <- 0 until\
    \ n) {\n                for (j <- i until n) {\n                    if (palindrome(i)(j)\
    \ && j - i + 1 > longestPalindrome.length) longestPalindrome = string.substring(i,\
    \ j + 1)\n                }\n            }\n            longestPalindrome\n  \
    \      }\n        val longestPalindrome = findLongestPalindrome(string)\n    \
    \    val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnk96csid.scala:42)\n\tat Problem.main(tmpnk96csid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpomr0wzpw.scala:19)\n\
    \tat Problem$.main(tmpomr0wzpw.scala:23)\n\tat Problem.main(tmpomr0wzpw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = longestPalindromeSuffix(suffix)\n\
    \        suffix + reversedPrefix + palindromeSuffix\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphxe6bhu2.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ longestPalindromeSuffix(suffix)\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Not found: longestPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversePrefix = prefix.reverse\n        val palindromeSuffix = findLongestPalindromeSuffix(suffix)\n\
    \        val palindrome = suffix + reversePrefix + palindromeSuffix\n        palindrome\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnc659117.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findLongestPalindromeSuffix(suffix)\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  Not found: findLongestPalindromeSuffix\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659806020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def findLongestPalindrome(string : String) :\
    \ String = {\n            def findPalindrome(string : String, start : Int, end\
    \ : Int) : String = {\n                if (start < 0 || end >= string.length)\
    \ return \"\"\n                if (string(start) != string(end)) return \"\"\n\
    \                val palindrome = string.substring(start, end + 1)\n         \
    \       if (palindrome.length == 1) palindrome\n                else findPalindrome(string,\
    \ start - 1, end + 1)\n            }\n            val palindromes = for (i <-\
    \ 0 until string.length) yield findPalindrome(string, i, i)\n            val palindromes2\
    \ = for (i <- 0 until string.length - 1) yield findPalindrome(string, i, i + 1)\n\
    \            val palindromes3 = palindromes ++ palindromes2\n            palindromes3.reduceLeft((x,\
    \ y) => if (x.length > y.length) x else y)\n        }\n        val longestPalindrome\
    \ = findLongestPalindrome(string)\n        val prefix = string.substring(0, string.length\
    \ - longestPalindrome.length)\n        string + prefix.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.findLongestPalindrome$1(tmp3bxzjvu4.scala:26)\n\
    \tat Problem$.makePalindrome(tmp3bxzjvu4.scala:28)\n\tat Problem$.main(tmp3bxzjvu4.scala:33)\n\
    \tat Problem.main(tmp3bxzjvu4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindrome = longestPalindromePostfix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        prefix + string + prefix.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlnmz3tx.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindrome\e[0m =\
    \ longestPalindromePostfix(string)\n\e[31m\e[31m   |\e[0m                    \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Not found: longestPalindromePostfix\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reverse = prefix.reverse\n        val palindrome = suffix + reverse\n\
    \        palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfno9ff1_.scala:25)\n\tat Problem.main(tmpfno9ff1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix) + 1)\n        string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpdikqy73o.scala:19)\n\tat Problem$.main(tmpdikqy73o.scala:23)\n\
    \tat Problem.main(tmpdikqy73o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val reverse\
    \ = string.reverse\n        for (i <- 0 to length) {\n            val prefix =\
    \ string.substring(0, length - i)\n            val suffix = string.substring(length\
    \ - i, length)\n            if (prefix == reverse.substring(i, length)) return\
    \ string + reverse.substring(0, i)\n        }\n        return string\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2nnyva40.scala:27)\n\tat Problem.main(tmp2nnyva40.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val palindrome = suffix + prefix.reverse\n        palindrome\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpywv08j4e.scala:24)\n\tat Problem.main(tmpywv08j4e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        def isPalindrome(string : String) : Boolean\
    \ = {\n            val length = string.length\n            for (i <- 0 until length\
    \ / 2) {\n                if (string(i) != string(length - 1 - i)) return false\n\
    \            }\n            return true\n        }\n        val length = string.length\n\
    \        for (i <- length - 1 to 0 by -1) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                val prefix = string.substring(0, i)\n                return\
    \ string + prefix.reverse\n            }\n        }\n        return string\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppiqmm28l.scala:35)\n\tat Problem.main(tmppiqmm28l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val prefix = string.substring(0, string.length\
    \ - 1)\n        val suffix = string.substring(string.length - 1)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindrome = suffix + reversedPrefix\n\
    \        palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpl82yo6pv.scala:15)\n\tat Problem$.main(tmpl82yo6pv.scala:22)\n\
    \tat Problem.main(tmpl82yo6pv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806023
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ new Array[Int](n)\n        var i = 0\n        var j = 1\n        while (j <\
    \ n) {\n            if (string(i) == string(j)) {\n                suffix(j) =\
    \ i + 1\n                i += 1\n                j += 1\n            } else {\n\
    \                if (i == 0) {\n                    suffix(j) = 0\n          \
    \          j += 1\n                } else {\n                    i = suffix(i\
    \ - 1)\n                }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        prefix + string + prefix.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\"\
    )));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length\
    \ 0\n\tat Problem$.makePalindrome(tmp5y4t9i4y.scala:33)\n\tat Problem$.main(tmp5y4t9i4y.scala:37)\n\
    \tat Problem.main(tmp5y4t9i4y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val s = string\
    \ + \"#\" + string.reverse\n        val lps = Array.fill(s.length)(0)\n      \
    \  var i = 1\n        while (i < s.length) {\n            if (s(i) == s(lps(i\
    \ - 1))) lps(i) = lps(i - 1) + 1\n            else {\n                var j =\
    \ lps(i - 1)\n                while (j > 0 && s(i) != s(j)) j = lps(j - 1)\n \
    \               if (s(i) == s(j)) lps(i) = j + 1\n            }\n            i\
    \ += 1\n        }\n        string + string.reverse.substring(0, n - lps(s.length\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqu5nvlfz.scala:33)\n\tat Problem.main(tmpqu5nvlfz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        var longestPalindrome = \"\"\n        var longestPalindromeLength\
    \ = 0\n        for (i <- 0 to string.length) {\n            val substring = string.substring(i)\n\
    \            if (substring.length > longestPalindromeLength && substring.reverse\
    \ == substring) {\n                longestPalindrome = substring\n           \
    \     longestPalindromeLength = substring.length\n            }\n        }\n \
    \       string + string.substring(0, string.length - longestPalindromeLength).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659806025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val palindromeSuffix\
    \ = (0 until length).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, length - palindromeSuffix).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpppltppbc.scala:21)\n\tat Problem.main(tmpppltppbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindromeSuffix = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindromeSuffix.length)\n\
    \        string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplk5lhmz6.scala:15:38 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindromeSuffix\e\
    [0m = longestPalindromeSuffix(string)\n\e[31m\e[31m   |\e[0m                 \
    \                     ^\e[0m\n\e[31m   |\e[0m                      Recursive \e\
    [33mvalue\e[0m \e[35mlongestPalindromeSuffix\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659806023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = findLongestPalindrome(suffix)\n\
    \        val palindrome = suffix + reversedPrefix + palindromeSuffix\n       \
    \ palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp27h06yo2.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpalindromeSuffix\e[0m =\
    \ findLongestPalindrome(suffix)\n\e[31m\e[31m   |\e[0m                       \
    \        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      Not found: findLongestPalindrome\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindromeSuffix = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindromeSuffix.length)\n\
    \        prefix + string + reverse(prefix)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7jaooyh3.scala:15:38 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindromeSuffix\e\
    [0m = longestPalindromeSuffix(string)\n\e[31m\e[31m   |\e[0m                 \
    \                     ^\e[0m\n\e[31m   |\e[0m                      Recursive \e\
    [33mvalue\e[0m \e[35mlongestPalindromeSuffix\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7jaooyh3.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        prefix + string + reverse(prefix)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \              Not found: reverse\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806023
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val suffix = string.reverse.dropWhile(c => string.indexOf(c)\
    \ == -1)\n        val prefix = string.dropRight(suffix.length)\n        string\
    \ + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzpixv2i.scala:22)\n\tat Problem.main(tmptzpixv2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val reversed\
    \ = string.reverse\n        val suffix = string.substring(0, length - 1)\n   \
    \     val prefix = reversed.substring(0, length - 1)\n        val palindrome =\
    \ string + prefix\n        palindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmpt86xmgej.scala:17)\n\tat Problem$.main(tmpt86xmgej.scala:23)\n\
    \tat Problem.main(tmpt86xmgej.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2arl3y8o.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlongestPalindrome\e[0m =\
    \ longestPalindromeSuffix(string)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            Not found: longestPalindromeSuffix\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(suffix.indexOf(reversePrefix))\n\
    \        string + reversePrefix.substring(palindromeSuffix.length)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmph1usdcj6.scala:20)\n\
    \tat Problem$.main(tmph1usdcj6.scala:24)\n\tat Problem.main(tmph1usdcj6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        // Find the longest\
    \ postfix that is a palindrome.\n        var i = 0\n        while (i < n && string(i)\
    \ == string(n - 1 - i)) i += 1\n        // If the whole string is a palindrome,\
    \ return it.\n        if (i == n) return string\n        // Otherwise, append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n        val prefix = string.substring(0, n - i)\n        val suffix\
    \ = string.substring(n - i)\n        prefix + suffix + prefix.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmyygbpx6.scala:29)\n\tat Problem.main(tmpmyygbpx6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val s = string\
    \ + \"#\" + string.reverse\n        val z = Array.fill(s.length)(0)\n        var\
    \ l = 0; var r = 0\n        for (i <- 1 until s.length) {\n            if (i >\
    \ r) {\n                l = i; r = i\n                while (r < s.length && s(r\
    \ - l) == s(r)) r += 1\n                z(i) = r - l; r -= 1\n            } else\
    \ {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i)\
    \ = z(k)\n                else {\n                    l = i;\n               \
    \     while (r < s.length && s(r - l) == s(r)) r += 1\n                    z(i)\
    \ = r - l; r -= 1\n                }\n            }\n        }\n        string\
    \ + string.substring(n - z(s.length - 1), n).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n   \
    \ assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkatx5j1b.scala:38)\n\tat Problem.main(tmpkatx5j1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindrome = suffix\
    \ + reversedPrefix\n        if (palindrome.length == n) palindrome\n        else\
    \ palindrome + string(n / 2)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnv1up8s2.scala:26)\n\tat Problem.main(tmpnv1up8s2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\")).equals((\"\
    \")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n    assert(makePalindrome((\"\
    xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"xyx\")).equals((\"\
    xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.makePalindrome(tmpqzjpyukg.scala:20)\n\
    \tat Problem$.main(tmpqzjpyukg.scala:24)\n\tat Problem.main(tmpqzjpyukg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val length = string.length\n        val reversed\
    \ = string.reverse\n        for (i <- length to 0 by -1) {\n            if (string.substring(0,\
    \ i) == reversed.substring(length - i)) return string + reversed.substring(0,\
    \ length - i)\n        }\n        return string + reversed.substring(0, length\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6zdybmy.scala:25)\n\tat Problem.main(tmpi6zdybmy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindrome = suffix\
    \ + reversedPrefix\n        val palindromeLength = palindrome.length\n       \
    \ if (palindromeLength == n) palindrome\n        else if (palindromeLength > n)\
    \ palindrome.substring(0, n)\n        else palindrome + palindrome.substring(0,\
    \ n - palindromeLength)\n    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
    \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n\
    \    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8pam_0jq.scala:28)\n\tat Problem.main(tmp8pam_0jq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makePalindrome((\"\")).equals((\"\")));\n    assert(makePalindrome((\"\
    x\")).equals((\"x\")));\n    assert(makePalindrome((\"xyz\")).equals((\"xyzyx\"\
    )));\n    assert(makePalindrome((\"xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"\
    jerry\")).equals((\"jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe55_uxsc.scala:25)\n\tat Problem.main(tmpe55_uxsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find the shortest palindrome that begins with a supplied string.\n\
    \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    // - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
    \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
    \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
    \ : String) : String = {\n        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversePrefix) + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\"\
    )).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
    \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
    xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"\
    jerryrrej\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.makePalindrome(tmp_hits4im.scala:19)\n\tat Problem$.main(tmp_hits4im.scala:23)\n\
    \tat Problem.main(tmp_hits4im.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805974
