name: HumanEval_31_is_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return true if a given number is prime, and false otherwise.\n    // >>>\
  \ isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n   \
  \ // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n\
  \    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n\
  \    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) ==\
  \ (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
  \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) ==\
  \ (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) ==\
  \ (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) ==\
  \ (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
  \ == (false));\n    }\n\n}\n"
completions: ["        if (n == 1) return false\n        if (n == 2) return true\n\
    \        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true", "        if (n == 1) return false\n        if (n == 2) return true\n\
    \        val m = sqrt(n).toLong\n        for (i <- 2l to m) {\n            if\
    \ (n % i == 0) return false\n        }\n        return true", "        if (n ==\
    \ 1) return false\n        if (n == 2) return true\n        if (n % 2 == 0) return\
    \ false\n        val sqrt = sqrt(n).toLong\n        for (i <- 3l to sqrt by 2)\
    \ {\n            if (n % i == 0) return false\n        }\n        return true",
  "        if (n == 1) return false\n        if (n == 2) return true\n        if (n\
    \ % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i <-\
    \ 3l to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n  \
    \      return true", "        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true", "        if (n == 1) return false\n        if\
    \ (n == 2) return true\n        if (n % 2 == 0) return false\n        val limit\
    \ = sqrt(n).toLong\n        for (i <- 3l to limit by 2) {\n            if (n %\
    \ i == 0) return false\n        }\n        return true", "        if (n == 1)\
    \ return false\n        if (n == 2) return true\n        if (n % 2 == 0) return\
    \ false\n        val sqrt = sqrt(n).toLong\n        for (i <- 3l to sqrt by 2)\
    \ {\n            if (n % i == 0) return false\n        }\n        return true",
  "        if (n == 1) return false\n        if (n == 2) return true\n        if (n\
    \ % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n        for (i <-\
    \ 3l to sqrt by 2) {\n            if (n % i == 0) return false\n        }\n  \
    \      return true", "        if (n == 2) return true\n        if (n % 2 == 0)\
    \ return false\n        for (i <- 3l to sqrt(n).toLong by 2) {\n            if\
    \ (n % i == 0) return false\n        }\n        return true", "        if (n ==\
    \ 1) return false\n        if (n == 2) return true\n        if (n % 2 == 0) return\
    \ false\n        val limit = sqrt(n).toLong\n        for (i <- 3l to limit by\
    \ 2) {\n            if (n % i == 0) return false\n        }\n        return true",
  "        if (n <= 1) return false\n        if (n == 2) return true\n        if (n\
    \ % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i <-\
    \ 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n \
    \       return true", "        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true", "        if (n <= 1) return false\n        if\
    \ (n == 2) return true\n        if (n % 2 == 0) return false\n        val limit\
    \ = sqrt(n).toLong\n        for (i <- 3l to limit by 2) {\n            if (n %\
    \ i == 0) return false\n        }\n        return true", "        if (n == 1)\
    \ return false\n        if (n == 2) return true\n        if (n % 2 == 0) return\
    \ false\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3l to sqrtN by\
    \ 2) {\n            if (n % i == 0) return false\n        }\n        return true",
  "        if (n == 1) return false\n        if (n == 2) return true\n        if (n\
    \ % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong by 2) {\n   \
    \         if (n % i == 0) return false\n        }\n        return true", "   \
    \     if (n <= 1) return false\n        if (n == 2) return true\n        if (n\
    \ % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n        for\
    \ (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n       \
    \ }\n        return true", "        if (n == 1) return false\n        if (n ==\
    \ 2) return true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true", "        if (n <= 1) return false\n        if\
    \ (n == 2) return true\n        if (n % 2 == 0) return false\n        val sqrt\
    \ = sqrt(n).toLong\n        for (i <- 3l to sqrt by 2) {\n            if (n %\
    \ i == 0) return false\n        }\n        return true", "        if (n == 1)\
    \ return false\n        if (n == 2) return true\n        if (n % 2 == 0) return\
    \ false\n        val limit = sqrt(n).toLong\n        for (i <- 3l to limit by\
    \ 2) {\n            if (n % i == 0) return false\n        }\n        return true",
  "        if (n < 2) return false\n        if (n == 2) return true\n        if (n\
    \ % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i <-\
    \ 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n \
    \       return true"]
stop_tokens:
- "\n    }\n"
