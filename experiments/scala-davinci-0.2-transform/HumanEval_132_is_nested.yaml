name: HumanEval_132_is_nested
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a string as input which contains only square\
  \ brackets.\n    // The function should return True if and only if there is a valid\
  \ subsequence of brackets \n    // where at least one bracket in the subsequence\
  \ is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n    // >>> isNested((\"\
  []]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"[][]\"))\n    // (false)\n\
  \    // >>> isNested((\"[]\"))\n    // (false)\n    // >>> isNested((\"[[][]]\"\
  ))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n    // (true)\n    def isNested(string\
  \ : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
  )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
  [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
  [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
  \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"))\
  \ == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
  [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
  \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
  ]]]]]]]]\")) == (false));\n    }\n\n}\n"
completions: ["        var stack = new Stack[Char]()\n        for (c <- string) {\n\
    \            if (c == '[') {\n                stack.push(c)\n            } else\
    \ if (c == ']') {\n                if (stack.isEmpty) {\n                    return\
    \ false\n                } else {\n                    stack.pop()\n         \
    \       }\n            }\n        }\n        return stack.isEmpty", "        val\
    \ stack = new Stack[Char]\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty", "        var stack = new Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') {\n                stack.push(c)\n            }\
    \ else if (c == ']') {\n                if (stack.isEmpty) {\n               \
    \     return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) return true\n        else return false",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else {\n        \
    \        if (stack.isEmpty) return false\n                stack.pop\n        \
    \    }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else {\n                if (stack.isEmpty) {\n                \
    \    return false\n                } else {\n                    stack.pop\n \
    \               }\n            }\n        }\n        return stack.isEmpty", " \
    \       var stack = new Stack[Char]\n        for (c <- string) {\n           \
    \ if (c == '[') {\n                stack.push(c)\n            } else {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop\n                }\n         \
    \   }\n        }\n        return stack.isEmpty", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        val stack\
    \ = new Stack[Char]\n        string.foreach(c => {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        })\n  \
    \      return stack.isEmpty", "        var stack = new Stack[Char]\n        for\
    \ (c <- string) {\n            if (c == '[') stack.push(c)\n            else if\
    \ (c == ']') {\n                if (stack.isEmpty) return false\n            \
    \    else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) return\
    \ false\n                stack.pop\n            }\n        }\n        return !stack.isEmpty"]
stop_tokens:
- "\n    }\n"
