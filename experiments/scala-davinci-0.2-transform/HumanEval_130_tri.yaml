name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        def tri(n : Long, l : List[Long]) : List[Long] = {\n      \
    \      if (n == 0) l\n            else if (n == 1) tri(n - 1, 3 :: l)\n      \
    \      else if (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n            else tri(n\
    \ - 1, (l(0) + l(1) + l(2)) :: l)\n        }\n        tri(n, List[Long]())", " \
    \       if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n  \
    \      if (n == 2) return List(1, 3, 2)\n        var result = List(1l, 3l, 2l)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result", "        def triRec(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else {\n                val last = l.last\n                val next = if\
    \ (last % 2 == 0) 1 + last / 2 else l(l.length - 2) + l(l.length - 3) + l(l.length\
    \ - 1)\n                triRec(n - 1, l :+ next)\n            }\n        }\n \
    \       triRec(n, List(1))", "        var l = ListBuffer[Long]()\n        l +=\
    \ 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                l += 1 + i / 2\n            } else\
    \ {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n    \
    \    }\n        l.toList", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var l = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) {\n              \
    \  l = l :+ 1\n            } else if (i == 1) {\n                l = l :+ 3\n\
    \            } else if (i == 2) {\n                l = l :+ 2\n            } else\
    \ if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n            } else\
    \ {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n\
    \        }\n        l", "        if (n == 0) return List(1)\n        if (n ==\
    \ 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var\
    \ result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result :+\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return result",
  "        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += (1 + i / 2)\n            } else {\n\
    \                result += (result(i - 1) + result(i - 2) + result(i + 1))\n \
    \           }\n        }\n        return result.toList", "        def tri(n :\
    \ Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n        \
    \    else {\n                val next = if (n % 2 == 0) 1 + n / 2 else l(l.length\
    \ - 1) + l(l.length - 2) + l(l.length - 3)\n                tri(n - 1, l :+ next)\n\
    \            }\n        }\n        tri(n, List(1l))", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        // Fill\
    \ up this function body\n        // 'n' is the number of elements in the Tribonacci\
    \ sequence\n        // You have to return a list of Long numbers\n        val\
    \ l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n \
    \       for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n\
    \            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 +\
    \ i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        def tri(n : Long, l : List[Long]) : List[Long] =\
    \ {\n            if (n == 0) l\n            else if (n == 1) tri(n - 1, 3 :: l)\n\
    \            else if (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n            else\
    \ tri(n - 1, (l(0) + l(1) + l(2)) :: l)\n        }\n        tri(n, List[Long]())",
  "        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        val l = new ListBuffer[Long]\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var result\
    \ = ListBuffer[Long]()\n        result += 1\n        result += 3\n        result\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ += (1 + i / 2)\n            else result += (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n        }\n        result.toList", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        l", "        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i == 1) l = l :+ 1\n            else if (i == 2) l = l :+\
    \ 3\n            else if (i == 3) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 2) + l(i - 1) + l(i +\
    \ 1))\n        }\n        return l", "        // Fill up this function body\n\
    \        // 'n' is the number of elements in the Tribonacci sequence\n       \
    \ // You have to return a list of the first n + 1 numbers of the Tribonacci sequence\n\
    \        // For example:\n        // >>> tri((3l))\n        // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n        var l = List[Long]()\n        for\
    \ (i <- 0 to n.toInt) {\n            if (i == 0) {\n                l = l :+ 1\n\
    \            } else if (i == 1) {\n                l = l :+ 3\n            } else\
    \ if (i == 2) {\n                l = l :+ 2\n            } else {\n          \
    \      if (i % 2 == 0) {\n                    l = l :+ (1 + i / 2)\n         \
    \       } else {\n                    l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \                }\n            }\n        }\n        l", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 4 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 2) + l(i - 1) + l(i + 1))\n        }\n        l.toList", "        var result\
    \ = ListBuffer[Long]()\n        result += 1\n        result += 3\n        if (n\
    \ == 1) return result.toList\n        result += 2\n        if (n == 2) return\
    \ result.toList\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ result += (1 + i / 2)\n            else result += (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result.toList", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var l = ListBuffer[Long]()\n        l += 1\n        l +=\
    \ 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                l += 1 + i / 2\n            } else {\n            \
    \    l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n        l.toList"]
stop_tokens:
- "\n    }\n"
