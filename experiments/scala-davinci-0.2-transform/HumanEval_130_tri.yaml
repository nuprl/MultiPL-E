name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        def tri(n : Long, l : List[Long]) : List[Long] = {\n      \
    \      if (n == 0) l\n            else if (n == 1) tri(n - 1, 3 :: l)\n      \
    \      else if (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n            else tri(n\
    \ - 1, (l(0) + l(1) + l(2)) :: l)\n        }\n        tri(n, List[Long]())", " \
    \       if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n  \
    \      if (n == 2) return List(1, 3, 2)\n        var result = List(1l, 3l, 2l)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result", "        def triRec(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else {\n                val last = l.last\n                val next = if\
    \ (last % 2 == 0) 1 + last / 2 else l(l.length - 2) + l(l.length - 3) + l(l.length\
    \ - 1)\n                triRec(n - 1, l :+ next)\n            }\n        }\n \
    \       triRec(n, List(1))", "        var l = ListBuffer[Long]()\n        l +=\
    \ 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                l += 1 + i / 2\n            } else\
    \ {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n    \
    \    }\n        l.toList", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var l = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) {\n              \
    \  l = l :+ 1\n            } else if (i == 1) {\n                l = l :+ 3\n\
    \            } else if (i == 2) {\n                l = l :+ 2\n            } else\
    \ if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n            } else\
    \ {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n\
    \        }\n        l", "        if (n == 0) return List(1)\n        if (n ==\
    \ 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var\
    \ result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result :+\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return result",
  "        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += (1 + i / 2)\n            } else {\n\
    \                result += (result(i - 1) + result(i - 2) + result(i + 1))\n \
    \           }\n        }\n        return result.toList", "        def tri(n :\
    \ Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n        \
    \    else {\n                val next = if (n % 2 == 0) 1 + n / 2 else l(l.length\
    \ - 1) + l(l.length - 2) + l(l.length - 3)\n                tri(n - 1, l :+ next)\n\
    \            }\n        }\n        tri(n, List(1l))", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        // Fill\
    \ up this function body\n        // 'n' is the number of elements in the Tribonacci\
    \ sequence\n        // You have to return a list of Long numbers\n        val\
    \ l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n \
    \       for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n\
    \            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 +\
    \ i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        def tri(n : Long, l : List[Long]) : List[Long] =\
    \ {\n            if (n == 0) l\n            else if (n == 1) tri(n - 1, 3 :: l)\n\
    \            else if (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n            else\
    \ tri(n - 1, (l(0) + l(1) + l(2)) :: l)\n        }\n        tri(n, List[Long]())",
  "        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        val l = new ListBuffer[Long]\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var result\
    \ = ListBuffer[Long]()\n        result += 1\n        result += 3\n        result\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ += (1 + i / 2)\n            else result += (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n        }\n        result.toList", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        l", "        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i == 1) l = l :+ 1\n            else if (i == 2) l = l :+\
    \ 3\n            else if (i == 3) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 2) + l(i - 1) + l(i +\
    \ 1))\n        }\n        return l", "        // Fill up this function body\n\
    \        // 'n' is the number of elements in the Tribonacci sequence\n       \
    \ // You have to return a list of the first n + 1 numbers of the Tribonacci sequence\n\
    \        // For example:\n        // >>> tri((3l))\n        // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n        var l = List[Long]()\n        for\
    \ (i <- 0 to n.toInt) {\n            if (i == 0) {\n                l = l :+ 1\n\
    \            } else if (i == 1) {\n                l = l :+ 3\n            } else\
    \ if (i == 2) {\n                l = l :+ 2\n            } else {\n          \
    \      if (i % 2 == 0) {\n                    l = l :+ (1 + i / 2)\n         \
    \       } else {\n                    l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \                }\n            }\n        }\n        l", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 4 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 2) + l(i - 1) + l(i + 1))\n        }\n        l.toList", "        var result\
    \ = ListBuffer[Long]()\n        result += 1\n        result += 3\n        if (n\
    \ == 1) return result.toList\n        result += 2\n        if (n == 2) return\
    \ result.toList\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ result += (1 + i / 2)\n            else result += (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result.toList", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var l = ListBuffer[Long]()\n        l += 1\n        l +=\
    \ 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                l += 1 + i / 2\n            } else {\n            \
    \    l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n        l.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = ListBuffer[Long]()\n        l += 1\n \
    \       l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n          \
    \  if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2)\
    \ + l(i + 1))\n        }\n        l.toList", "        var result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        // Fill up this function body\n     \
    \   // You can add another function as well, if required\n        List[Long]()",
  "        val result = ListBuffer[Long]()\n        result += 1\n        result +=\
    \ 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1) +\
    \ result(i - 2) + result(i + 1))\n        }\n        result.toList", "       \
    \ var result = List[Long]()\n        result = result :+ 1\n        result = result\
    \ :+ 3\n        result = result :+ 2\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                result = result :+ (1 + i / 2)\n \
    \           } else {\n                result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n            }\n        }\n        return result", " \
    \       val a = new Array[Long](n.toInt + 1)\n        a(0) = 1\n        a(1) =\
    \ 3\n        a(2) = 2\n        for (i <- 3 to n.toInt) {\n            if (i %\
    \ 2 == 0) a(i) = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i\
    \ + 1)\n        }\n        a.toList", "        var list = new ListBuffer[Long]\n\
    \        list += 1\n        list += 3\n        list += 2\n        for (i <- 3\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                list += (1 + i\
    \ / 2)\n            } else {\n                list += (list(i - 1) + list(i -\
    \ 2) + list(i + 1))\n            }\n        }\n        list.toList", "       \
    \ def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n == 0)\
    \ l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n         \
    \   else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n\
    \        }\n        tri(n, List(1))", "        var result = List[Long]()\n   \
    \     var a = 1l\n        var b = 3l\n        var c = 2l\n        result = result\
    \ :+ a\n        result = result :+ b\n        result = result :+ c\n        for\
    \ (i <- 4l to n) {\n            if (i % 2 == 0) {\n                var d = 1 +\
    \ i / 2\n                result = result :+ d\n            } else {\n        \
    \        var d = a + b + c\n                result = result :+ d\n           \
    \     a = b\n                b = c\n                c = d\n            }\n   \
    \     }\n        return result", "        if (n == 0) return List(1)\n       \
    \ val a = new Array[Long](n.toInt + 1)\n        a(0) = 1\n        a(1) = 3\n \
    \       for (i <- 2 to n.toInt) {\n            if (i % 2 == 0) a(i) = 1 + i /\
    \ 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n        }\n     \
    \   a.toList", "        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+\
    \ 3\n            else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        return l", "        var list = List[Long]()\n      \
    \  for (i <- 0 to n.toInt) {\n            if (i == 0) list = list :+ 1\n     \
    \       else if (i == 1) list = list :+ 3\n            else if (i == 2) list =\
    \ list :+ 2\n            else if (i % 2 == 0) list = list :+ (1 + i / 2)\n   \
    \         else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n    \
    \    }\n        list", "        // Fill up this function body\n        // 'n'\
    \ is the number of elements in the Tribonacci sequence\n        // You have to\
    \ return a list of the first n + 1 numbers of the Tribonacci sequence\n      \
    \  var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l += 2\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l += 1 + i / 2\n            } else {\n                l += l(i - 1) + l(i\
    \ - 2) + l(i + 1)\n            }\n        }\n        l.toList", "        var result\
    \ = new ListBuffer[Long]\n        result += 1\n        result += 3\n        if\
    \ (n == 1) return result.toList\n        result += 2\n        if (n == 2) return\
    \ result.toList\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ result += (1 + i / 2)\n            else result += (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result.toList", "        val\
    \ list = new ListBuffer[Long]\n        list += 1\n        list += 3\n        list\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) list +=\
    \ (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2) + list(i +\
    \ 1))\n        }\n        list.toList", "        val l = new ListBuffer[Long]\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var l =\
    \ List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) l =\
    \ 1l :: l\n            else if (i == 1) l = 3l :: l\n            else if (i ==\
    \ 2) l = 2l :: l\n            else if (i % 2 == 0) l = (1 + i / 2) :: l\n    \
    \        else l = (l(0) + l(1) + l(2)) :: l\n        }\n        l.reverse", " \
    \       var result = ListBuffer[Long]()\n        result += 1\n        result +=\
    \ 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                result += 1 + i / 2\n            } else {\n   \
    \             result += result(i - 1) + result(i - 2) + result(i + 1)\n      \
    \      }\n        }\n        result.toList", "        if (n == 0) return List[Long](1)\n\
    \        var l = List[Long](1, 3, 2)\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        return l", "        val l =\
    \ new ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n     \
    \   for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n\
    \            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 +\
    \ i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        var l = ListBuffer[Long]()\n        l += 1\n    \
    \    l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) +\
    \ l(i + 1))\n        }\n        l.toList", "        var lst = new ListBuffer[Long]()\n\
    \        lst += 1\n        lst += 3\n        for (i <- 2 to n.toInt) {\n     \
    \       if (i % 2 == 0) lst += (1 + i / 2)\n            else lst += (lst(i - 1)\
    \ + lst(i - 2) + lst(i + 1))\n        }\n        lst.toList", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l +=\
    \ (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \  }\n        l.toList", "        if (n == 0) return List(1)\n        if (n ==\
    \ 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var\
    \ result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result :+\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return result",
  "        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += 1 + i / 2\n            } else {\n\
    \                result += result(i - 1) + result(i - 2) + result(i + 1)\n   \
    \         }\n        }\n        result.toList", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i ==\
    \ 0) l = 1l :: l\n            else if (i == 1) l = 3l :: l\n            else if\
    \ (i == 2) l = 2l :: l\n            else {\n                if (i % 2 == 0) l\
    \ = (1 + i / 2) :: l\n                else l = (l(0) + l(1) + l(2)) :: l\n   \
    \         }\n        }\n        l.reverse", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        val l =\
    \ new ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n     \
    \   for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n\
    \            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = new ListBuffer[Long]\n        l += 1\n\
    \        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) {\n                l += 1 + i / 2\n            } else {\n\
    \                l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n\
    \        l.toList", "        var result = List[Long]()\n        for (i <- 0 to\
    \ n.toInt) {\n            if (i == 0) result = result :+ 1\n            else if\
    \ (i == 1) result = result :+ 3\n            else if (i == 2) result = result\
    \ :+ 2\n            else if (i % 2 == 0) result = result :+ (1 + i / 2)\n    \
    \        else result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n\
    \        }\n        result", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var list = List[Long]()\n\
    \        if (n == 0) {\n            list = List[Long](1)\n        } else if (n\
    \ == 1) {\n            list = List[Long](1, 3)\n        } else if (n == 2) {\n\
    \            list = List[Long](1, 3, 2)\n        } else {\n            list =\
    \ List[Long](1, 3, 2)\n            var i = 3\n            while (i <= n) {\n \
    \               if (i % 2 == 0) {\n                    list = list :+ (1 + i /\
    \ 2)\n                } else {\n                    list = list :+ (list(i - 1)\
    \ + list(i - 2) + list(i + 1))\n                }\n                i += 1\n  \
    \          }\n        }\n        list", "        if (n == 0) return List(1)\n\
    \        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3,\
    \ 2)\n        var result = List(1l, 3l, 2l)\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        return result", "        var result = List[Long]()\n        result\
    \ = result :+ 1\n        result = result :+ 3\n        result = result :+ 2\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ (1 + i / 2)\n            } else {\n                result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n            }\n\
    \        }\n        return result", "        // Fill up this function body\n \
    \       // 'n' is the number of elements in the Tribonacci sequence\n        var\
    \ triList = new ListBuffer[Long]()\n        triList += 1\n        triList += 3\n\
    \        triList += 2\n        for (i <- 3 to n.toInt) {\n            if (i %\
    \ 2 == 0) {\n                triList += 1 + i / 2\n            } else {\n    \
    \            triList += triList(i - 1) + triList(i - 2) + triList(i + 1)\n   \
    \         }\n        }\n        triList.toList", "        def tri(n : Long, l\
    \ : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n            else tri(n - 1, l\
    \ :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n     \
    \   tri(n, List(1l))", "        // Fill up this function body\n        // 'n'\
    \ is the number of elements in the Tribonacci sequence\n        // You have to\
    \ return a list of Long\n        val l = new ListBuffer[Long]\n        l += 1\n\
    \        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i -\
    \ 2) + l(i + 1))\n        }\n        l.toList", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        val cache\
    \ = new Array[Long](n.toInt + 1)\n        def tri(n : Long) : Long = {\n     \
    \       if (n == 1) 3\n            else if (n == 2) 1\n            else if (n\
    \ == 3) 2\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n        \
    \    else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n  \
    \              result\n            }\n        }\n        (1 to n.toInt).map(tri(_)).toList",
  "        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n      \
    \  cache(1) = 3\n        cache(2) = 2\n        def tri(n : Long) : Long = {\n\
    \            if (n == 0) return 1\n            if (n == 1) return 3\n        \
    \    if (n == 2) return 2\n            if (cache(n.toInt) != 0) return cache(n.toInt)\n\
    \            if (n % 2 == 0) {\n                cache(n.toInt) = 1 + n / 2\n \
    \               return cache(n.toInt)\n            }\n            cache(n.toInt)\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            return cache(n.toInt)\n\
    \        }\n        (0 to n.toInt).map(x => tri(x)).toList", "        var result\
    \ = new ListBuffer[Long]()\n        result += 1\n        result += 3\n       \
    \ if (n == 1) return result.toList\n        result += 2\n        if (n == 2) return\
    \ result.toList\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ result += (1 + i / 2)\n            else result += (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result.toList", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var l = ListBuffer[Long]()\n        l += 1\n        l +=\
    \ 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                l += 1 + i / 2\n            } else {\n            \
    \    l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n        l.toList",
  "        var l = List[Long]()\n        var a = 1l\n        var b = 3l\n        var\
    \ c = 2l\n        l = l :+ a\n        l = l :+ b\n        l = l :+ c\n       \
    \ for (i <- 3 to n.toInt) {\n            var d = if (i % 2 == 0) 1 + i / 2 else\
    \ a + b + c\n            l = l :+ d\n            a = b\n            b = c\n  \
    \          c = d\n        }\n        return l", "        def tri(n : Long, a :\
    \ Long, b : Long, c : Long) : List[Long] = {\n            if (n == 0) List(a)\n\
    \            else if (n == 1) List(a, b)\n            else if (n == 2) List(a,\
    \ b, c)\n            else if (n % 2 == 0) a :: tri(n - 1, b, c, a + b + c)\n \
    \           else a :: tri(n - 1, b, c, b + c)\n        }\n        tri(n, 1, 3,\
    \ 2)", "        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n    \
    \        if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n   \
    \         else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l\
    \ :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \        }\n        return l", "        var result = ListBuffer[Long]()\n    \
    \    result += 1\n        result += 3\n        result += 2\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n       \
    \     else result += (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        result.toList", "        def triRec(n : Long, l : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) l\n            else if (n == 1) triRec(n - 1, l\
    \ :+ 3)\n            else if (n % 2 == 0) triRec(n - 1, l :+ (1 + n / 2))\n  \
    \          else triRec(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        triRec(n, List())", "        var result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        if (n > 1) result += 2\n  \
    \      for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i\
    \ / 2)\n            else result += (result(i - 1) + result(i - 2) + result(i +\
    \ 1))\n        }\n        result.toList", "        var l = List[Long]()\n    \
    \    l = l :+ 1\n        l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                l = l :+ (1 + i /\
    \ 2)\n            } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i\
    \ + 1))\n            }\n        }\n        return l", "        def triHelper(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else {\n                val last = l.last\n                val secondLast\
    \ = l(l.length - 2)\n                val thirdLast = l(l.length - 3)\n       \
    \         val newLast = if (last % 2 == 0) 1 + last / 2 else thirdLast + secondLast\
    \ + last\n                triHelper(n - 1, l :+ newLast)\n            }\n    \
    \    }\n        triHelper(n, List(1, 3, 2))", "        var result = new ListBuffer[Long]()\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        if (n == 0) return List(1)\n        if\
    \ (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n     \
    \   var result = List(1l, 3l, 2l)\n        for (i <- 3 to n.toInt) {\n       \
    \     if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     return result", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var l =\
    \ List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) l =\
    \ 1 :: l\n            else if (i == 1) l = 3 :: l\n            else if (i == 2)\
    \ l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i / 2) :: l\n        \
    \    else l = (l(0) + l(1) + l(2)) :: l\n        }\n        l.reverse", "    \
    \    if (n == 0) return List(1)\n        val dp = Array.fill(n.toInt + 1)(0l)\n\
    \        dp(0) = 1\n        dp(1) = 3\n        dp(2) = 2\n        for (i <- 3\
    \ to n.toInt) {\n            if (i % 2 == 0) dp(i) = 1 + i / 2\n            else\
    \ dp(i) = dp(i - 1) + dp(i - 2) + dp(i + 1)\n        }\n        dp.toList", " \
    \       var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        val l = new ListBuffer[Long]\n        l += 1\n  \
    \      l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n           \
    \ if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2)\
    \ + l(i + 1))\n        }\n        l.toList", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var l = List[Long]()\n        l = l :+ 1\n        l = l :+ 3\n        l = l\
    \ :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l :+\
    \ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n  \
    \      }\n        return l", "        var result = ListBuffer[Long]()\n      \
    \  var a = 1l\n        var b = 3l\n        var c = 2l\n        for (i <- 0 to\
    \ n.toInt) {\n            if (i == 0) result += a\n            else if (i == 1)\
    \ result += b\n            else if (i == 2) result += c\n            else {\n\
    \                val d = a + b + c\n                result += d\n            \
    \    a = b\n                b = c\n                c = d\n            }\n    \
    \    }\n        result.toList", "        // Fill up this function body\n     \
    \   // You can add another function as well, if required\n        var l = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) l = l :+ 1\n     \
    \       else if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 2\n\
    \            else if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l\
    \ :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l", "        def triHelper(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else if (n % 2 == 0) triHelper(n - 1, l :+ (1 + n / 2))\n            else\
    \ triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n\
    \        }\n        triHelper(n, List(1l))", "        // Fill up this function\
    \ body\n        // 'n' is the number of elements in the Tribonacci sequence\n\
    \        // You have to return a list of the first n + 1 numbers of the Tribonacci\
    \ sequence\n        // For example:\n        // >>> tri((3l))\n        // (List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n        var l = new ListBuffer[Long]\n  \
    \      l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var result\
    \ = List[Long]()\n        result = result :+ 1\n        result = result :+ 3\n\
    \        result = result :+ 2\n        for (i <- 3 to n.toInt) {\n           \
    \ if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return\
    \ result", "        // Fill up this function body\n        // You may also define\
    \ new functions as you wish\n        // to solve this problem\n        var list\
    \ = List[Long]()\n        var i = 0\n        while (i <= n) {\n            if\
    \ (i == 0) {\n                list = list :+ 1\n            } else if (i == 1)\
    \ {\n                list = list :+ 3\n            } else if (i == 2) {\n    \
    \            list = list :+ 2\n            } else {\n                if (i % 2\
    \ == 0) {\n                    list = list :+ (1 + i / 2)\n                } else\
    \ {\n                    list = list :+ (list(i - 1) + list(i - 2) + list(i +\
    \ 1))\n                }\n            }\n            i += 1\n        }\n     \
    \   list", "        def tri(n : Long, l : List[Long]) : List[Long] = {\n     \
    \       if (n == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n\
    \ / 2))\n            else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) +\
    \ l(l.length - 3)))\n        }\n        tri(n, List[Long](1))", "        var result\
    \ = List[Long]()\n        var a = 1l\n        var b = 3l\n        var c = 2l\n\
    \        result = result :+ a\n        result = result :+ b\n        result =\
    \ result :+ c\n        for (i <- 4l to n) {\n            if (i % 2 == 0) {\n \
    \               result = result :+ (1 + i / 2)\n            } else {\n       \
    \         result = result :+ (result(result.length - 1) + result(result.length\
    \ - 2) + result(result.length - 3))\n            }\n        }\n        return\
    \ result", "        def triHelper(n : Long, l : List[Long]) : List[Long] = {\n\
    \            if (n == 0) l\n            else if (n % 2 == 0) triHelper(n - 1,\
    \ l :+ (1 + n / 2))\n            else triHelper(n - 1, l :+ (l(l.length - 1) +\
    \ l(l.length - 2) + l(l.length - 3)))\n        }\n        triHelper(n, List[Long](1))",
  "        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        if (n == 0) return List(1)\n        else if (n ==\
    \ 1) return List(1, 3)\n        else if (n == 2) return List(1, 3, 2)\n      \
    \  else {\n            var result = List(1, 3, 2)\n            var i = 3\n   \
    \         while (i <= n) {\n                if (i % 2 == 0) result = result :+\
    \ (1 + i / 2)\n                else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n                i += 1\n            }\n            return\
    \ result\n        }", "        val result = new ListBuffer[Long]\n        result\
    \ += 1\n        result += 3\n        result += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n \
    \       for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result", "        // Fill up\
    \ this function body\n        // You can add another function as well, if required\n\
    \        var l = List[Long]()\n        l = l :+ 1\n        l = l :+ 3\n      \
    \  l = l :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                l = l :+ (1 + i / 2)\n            } else {\n            \
    \    l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n   \
    \     return l", "        var l = ListBuffer[Long]()\n        l += 1\n       \
    \ l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i\
    \ + 1))\n        }\n        l.toList", "        def triRec(n : Long, l : List[Long])\
    \ : List[Long] = {\n            if (n == 0) l\n            else if (n == 1) triRec(n\
    \ - 1, 3 :: l)\n            else if (n % 2 == 0) triRec(n - 1, (1 + n / 2) ::\
    \ l)\n            else triRec(n - 1, (l(0) + l(1) + l(2)) :: l)\n        }\n \
    \       triRec(n, List[Long]()).reverse", "        def tri(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else {\n        \
    \        val newAcc = if (n % 2 == 0) acc :+ (1 + n / 2)\n                else\
    \ acc :+ (acc(acc.length - 1) + acc(acc.length - 2) + acc(acc.length - 3))\n \
    \               tri(n - 1, newAcc)\n            }\n        }\n        tri(n, List(1))",
  "        val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += 1\
    \ + i / 2\n            else l += l(i - 1) + l(i - 2) + l(i + 1)\n        }\n \
    \       l.toList", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var list = List(1,\
    \ 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) list =\
    \ list :+ (1 + i / 2)\n            else list = list :+ (list(i - 1) + list(i -\
    \ 2) + list(i + 1))\n        }\n        return list", "        var a = 1l\n  \
    \      var b = 3l\n        var c = 2l\n        var d = 0l\n        var result\
    \ = List[Long]()\n        result = result :+ a\n        result = result :+ b\n\
    \        result = result :+ c\n        for (i <- 3l to n) {\n            if (i\
    \ % 2 == 0) {\n                d = 1 + i / 2\n            } else {\n         \
    \       d = a + b + c\n            }\n            a = b\n            b = c\n \
    \           c = d\n            result = result :+ d\n        }\n        return\
    \ result", "        var result = List[Long]()\n        var a = 1l\n        var\
    \ b = 3l\n        var c = 2l\n        var d = 0l\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) result = result :+ a\n            else if (i == 1)\
    \ result = result :+ b\n            else if (i == 2) result = result :+ c\n  \
    \          else {\n                d = a + b + c\n                a = b\n    \
    \            b = c\n                c = d\n                result = result :+\
    \ d\n            }\n        }\n        result", "        val cache = new HashMap[Long,\
    \ Long]\n        def tri(n : Long) : Long = {\n            if (cache.contains(n))\
    \ cache(n)\n            else {\n                val result = if (n == 1) 3\n \
    \               else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n             \
    \   result\n            }\n        }\n        (1 to n.toInt).map(tri(_)).toList",
  "        def tri(n : Long, acc : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) acc\n            else if (n % 2 == 0) tri(n - 1, acc :+ (1 + n / 2))\n\
    \            else tri(n - 1, acc :+ (acc(acc.length - 1) + acc(acc.length - 2)\
    \ + acc(acc.length - 3)))\n        }\n        tri(n, List(1))", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var l = List[Long]()\n        l = l :+ 1\n        l = l :+ 3\n      \
    \  l = l :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                l = l :+ (1 + i / 2)\n            } else {\n            \
    \    l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n   \
    \     return l", "        val result = new ListBuffer[Long]\n        result +=\
    \ 1\n        result += 3\n        if (n == 1) return result.toList\n        result\
    \ += 2\n        if (n == 2) return result.toList\n        var i = 3\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else\
    \ result += (result(i - 1) + result(i - 2) + result(i + 1))\n            i +=\
    \ 1\n        }\n        return result.toList", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        l", "        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+\
    \ 3\n            else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        return l", "        var l = new ListBuffer[Long]\n \
    \       l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n   \
    \             l += 1 + i / 2\n            } else {\n                l += l(i -\
    \ 1) + l(i - 2) + l(i + 1)\n            }\n        }\n        l.toList", "   \
    \     var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if\
    \ (i == 0) l = List(1)\n            else if (i == 1) l = List(1, 3)\n        \
    \    else if (i == 2) l = List(1, 3, 2)\n            else {\n                if\
    \ (i % 2 == 0) l = l :+ (1 + i / 2)\n                else l = l :+ (l(i - 1) +\
    \ l(i - 2) + l(i + 1))\n            }\n        }\n        l", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 1\n          \
    \  else if (i == 3) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (i /\
    \ 2)\n            else l = l :+ (l(i - 2) + l(i - 3) + l(i - 1))\n        }\n\
    \        l", "        // Fill up this function body\n        // 'n' is the number\
    \ of elements in the sequence\n        // You have to return a list of 'n' + 1\
    \ elements\n        // You can use the helper functions defined below\n      \
    \  // You can use the 'isEven' function to check if a number is even\n       \
    \ // You can use the 'isOdd' function to check if a number is odd\n        //\
    \ You can use the 'divide' function to divide a number by 2\n        // You can\
    \ use the 'multiply' function to multiply a number by 2\n        // You can use\
    \ the 'add' function to add two numbers\n        // You can use the 'subtract'\
    \ function to subtract two numbers\n        // You can use the 'mod' function\
    \ to find the modulus of two numbers\n        // You can use the 'pow' function\
    \ to find the power of a number\n        // You can use the 'log' function to\
    \ find the logarithm of a number\n        // You can use the 'sqrt' function to\
    \ find the square root of a number\n        // You can use the 'floor' function\
    \ to find the floor of a number\n        // You can use the 'ceil' function to\
    \ find the ceiling of a number\n        // You can use the 'abs' function to find\
    \ the absolute value of a number\n        // You can use the 'max' function to\
    \ find the maximum of two numbers\n        // You can use the 'min' function to\
    \ find the minimum of two numbers\n        // You can use the 'round' function\
    \ to round a number\n        // You can use the 'truncate' function to truncate\
    \ a number\n        // You can use the 'signum' function to find the sign of a\
    \ number\n        // You can use the 'isPositive' function to check if a number\
    \ is positive\n        // You can use the 'isNegative' function to check if a\
    \ number is negative\n        // You can use the 'isZero' function to check if\
    \ a number is zero\n        // You can use the 'isNonZero' function to check if\
    \ a number is non-zero\n        // You can use the 'isInfinity' function to check\
    \ if a number is infinity\n        // You can use the 'isFinite' function to check\
    \ if a number is finite\n        // You can use the 'isNaN", "        val l =\
    \ new ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n     \
    \   for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n\
    \            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        var a = 1L\n   \
    \     var b = 3L\n        var c = 2L\n        l = l :+ a\n        l = l :+ b\n\
    \        l = l :+ c\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                var d = 1 + i / 2\n                l = l :+ d\n   \
    \         }\n            else {\n                var d = a + b + c\n         \
    \       l = l :+ d\n                a = b\n                b = c\n           \
    \     c = d\n            }\n        }\n        l", "        var l = new ListBuffer[Long]\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var l =\
    \ List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) l =\
    \ l :+ 1\n            else if (i == 1) l = l :+ 3\n            else if (i == 2)\
    \ l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 + i / 2)\n        \
    \    else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        return\
    \ l", "        var a = 1l\n        var b = 3l\n        var c = 2l\n        var\
    \ d = 0l\n        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n  \
    \          if (i == 1) {\n                l = l :+ a\n            } else if (i\
    \ == 2) {\n                l = l :+ b\n            } else if (i == 3) {\n    \
    \            l = l :+ c\n            } else {\n                d = a + b + c\n\
    \                a = b\n                b = c\n                c = d\n       \
    \         l = l :+ d\n            }\n        }\n        return l", "        if\
    \ (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n        if (n\
    \ == 2) return List(1, 3, 2)\n        val result = new ListBuffer[Long]\n    \
    \    result += 1\n        result += 3\n        result += 2\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) result += 1 + i / 2\n         \
    \   else result += result(i - 1) + result(i - 2) + result(i + 1)\n        }\n\
    \        result.toList", "        var result = List[Long]()\n        for (i <-\
    \ 0 to n.toInt) {\n            if (i == 0) result = result :+ 1\n            else\
    \ if (i == 1) result = result :+ 3\n            else if (i == 2) result = result\
    \ :+ 2\n            else if (i % 2 == 0) result = result :+ (1 + i / 2)\n    \
    \        else result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n\
    \        }\n        result", "        val cache = new Array[Long](n.toInt + 1)\n\
    \        def tri(n : Long) : Long = {\n            if (n == 1) 3\n           \
    \ else if (n == 2) 1\n            else if (n == 3) 2\n            else if (cache(n.toInt)\
    \ != 0) cache(n.toInt)\n            else {\n                val result = if (n\
    \ % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n            \
    \    cache(n.toInt) = result\n                result\n            }\n        }\n\
    \        (1 to n.toInt).map(tri(_)).toList", "        var result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        if (n == 1) return result.toList\n\
    \        result += 2\n        if (n == 2) return result.toList\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        return result.toList", "        if (n == 0) return List(1)\n \
    \       var a = 1l\n        var b = 3l\n        var c = 2l\n        var result\
    \ = List(a, b, c)\n        for (i <- 3l to n) {\n            var d = if (i % 2\
    \ == 0) 1 + i / 2 else a + b + c\n            result = result :+ d\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return result",
  "        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if\
    \ (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n            else\
    \ if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 + i / 2)\n\
    \            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n     \
    \   return l", "        var l = ListBuffer[Long]()\n        l += 1\n        l\
    \ += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i %\
    \ 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        l.toList", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var l =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i == 1) l =\
    \ l :+ 3\n            else if (i == 2) l = l :+ 1\n            else if (i == 3)\
    \ l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 + i / 2)\n        \
    \    else l = l :+ (l(i - 2) + l(i - 3) + l(i - 1))\n        }\n        l", " \
    \       // Fill up this function body\n        // 'n' is the number of elements\
    \ in the sequence\n        // You have to return a list of 'n' + 1 elements\n\
    \        // The first element of the list should be 1\n        // The second element\
    \ of the list should be 3\n        // The third element of the list should be\
    \ 2\n        // The fourth element of the list should be 8\n        // The fifth\
    \ element of the list should be 11\n        // The sixth element of the list should\
    \ be 19\n        // and so on...\n        var l = ListBuffer[Long]()\n       \
    \ l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                l += 1 + i / 2\n            }\
    \ else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n\
    \        }\n        l.toList", "        var result = new ListBuffer[Long]\n  \
    \      result += 1\n        result += 3\n        result += 2\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) {\n                result += 1\
    \ + i / 2\n            } else {\n                result += result(i - 1) + result(i\
    \ - 2) + result(i + 1)\n            }\n        }\n        return result.toList",
  "        var result = List[Long]()\n        var a = 1l\n        var b = 3l\n   \
    \     var c = 2l\n        for (i <- 0 to n.toInt) {\n            if (i == 0) result\
    \ = result :+ a\n            else if (i == 1) result = result :+ b\n         \
    \   else if (i == 2) result = result :+ c\n            else {\n              \
    \  if (i % 2 == 0) {\n                    result = result :+ (1 + i / 2)\n   \
    \             } else {\n                    result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n                }\n            }\n       \
    \ }\n        result", "        var result = List[Long]()\n        for (i <- 0\
    \ to n.toInt) {\n            if (i == 0) result = result :+ 1\n            else\
    \ if (i == 1) result = result :+ 3\n            else if (i == 2) result = result\
    \ :+ 2\n            else if (i % 2 == 0) result = result :+ (1 + i / 2)\n    \
    \        else result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n\
    \        }\n        result", "        var l = List[Long]()\n        for (i <-\
    \ 0 to n.toInt) {\n            if (i == 0) l = 1 :: l\n            else if (i\
    \ == 1) l = 3 :: l\n            else if (i == 2) l = 2 :: l\n            else\
    \ if (i % 2 == 0) l = (1 + i / 2) :: l\n            else l = (l(0) + l(1) + l(2))\
    \ :: l\n        }\n        l.reverse", "        var result = ListBuffer[Long]()\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n                result +=\
    \ (1 + i / 2)\n            } else {\n                result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n            }\n        }\n        return result.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var list = new ListBuffer[Long]\n        list\
    \ += 1\n        list += 3\n        list += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list += (1 + i / 2)\n    \
    \        } else {\n                list += (list(i - 1) + list(i - 2) + list(i\
    \ + 1))\n            }\n        }\n        list.toList", "        val result =\
    \ new ListBuffer[Long]\n        result += 1\n        result += 3\n        result\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ += (1 + i / 2)\n            else result += (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n        }\n        result.toList", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var l =\
    \ List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) l =\
    \ l :+ 1\n            else if (i == 1) l = l :+ 3\n            else if (i == 2)\
    \ l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 + i / 2)\n        \
    \    else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        return\
    \ l", "        def triHelper(n : Long, l : List[Long]) : List[Long] = {\n    \
    \        if (n == 0) l\n            else if (n == 1) triHelper(n - 1, l :+ 3)\n\
    \            else if (n == 2) triHelper(n - 1, l :+ 2)\n            else if (n\
    \ % 2 == 0) triHelper(n - 1, l :+ (1 + n / 2))\n            else triHelper(n -\
    \ 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n\
    \        triHelper(n, List())", "        var l = ListBuffer[Long]()\n        l\
    \ += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n  \
    \          if (i % 2 == 0) {\n                l += (1 + i / 2)\n            }\
    \ else {\n                l += (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n\
    \        }\n        l.toList", "        if (n == 0) return List(1)\n        if\
    \ (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n     \
    \   var result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n          \
    \  if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return\
    \ result", "        def tri_rec(n : Long, l : List[Long]) : List[Long] = {\n \
    \           if (n == 0) l\n            else if (n == 1) tri_rec(n - 1, 3 :: l)\n\
    \            else if (n % 2 == 0) tri_rec(n - 1, 1 + n / 2 :: l)\n           \
    \ else tri_rec(n - 1, l.head + l.tail.head + l.tail.tail.head :: l)\n        }\n\
    \        tri_rec(n, List()).reverse", "        if (n == 0) return List(1)\n  \
    \      if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n\
    \        var result = List(1, 3, 2)\n        var i = 3\n        while (i <= n)\
    \ {\n            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \     i += 1\n        }\n        return result", "        val cache = new Array[Long](n.toInt\
    \ + 1)\n        def tri(n : Long) : Long = {\n            if (n == 1) 3\n    \
    \        else if (n == 2) 1\n            else if (n == 3) 2\n            else\
    \ if (cache(n.toInt) != 0) cache(n.toInt)\n            else {\n              \
    \  val result = if (n % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n                cache(n.toInt) = result\n                result\n    \
    \        }\n        }\n        (1 to n.toInt).map(tri(_)).toList", "        var\
    \ a = 1l\n        var b = 3l\n        var c = 2l\n        var d = 0l\n       \
    \ var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i == 1) {\n                result = result :+ a\n            } else if (i ==\
    \ 2) {\n                result = result :+ b\n            } else if (i == 3) {\n\
    \                result = result :+ c\n            } else {\n                d\
    \ = c + b + a\n                a = b\n                b = c\n                c\
    \ = d\n                result = result :+ d\n            }\n        }\n      \
    \  result", "        var result = List[Long]()\n        result = result :+ 1\n\
    \        if (n == 0) return result\n        result = result :+ 3\n        if (n\
    \ == 1) return result\n        result = result :+ 2\n        if (n == 2) return\
    \ result\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        return result", "     \
    \   var result = new ListBuffer[Long]\n        result += 1\n        result +=\
    \ 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1) +\
    \ result(i - 2) + result(i + 1))\n        }\n        result.toList", "       \
    \ var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i ==\
    \ 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n            else if\
    \ (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i / 2) :: l\n\
    \            else l = (l(0) + l(1) + l(2)) :: l\n        }\n        l.reverse",
  "        var a = 1l\n        var b = 3l\n        var c = 2l\n        var d = 0l\n\
    \        var result = List[Long]()\n        result = result :+ a\n        result\
    \ = result :+ b\n        result = result :+ c\n        for (i <- 3l to n) {\n\
    \            if (i % 2 == 0) {\n                d = 1 + i / 2\n            } else\
    \ {\n                d = a + b + c\n            }\n            a = b\n       \
    \     b = c\n            c = d\n            result = result :+ d\n        }\n\
    \        return result", "        if (n == 0) return List(1)\n        if (n ==\
    \ 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var\
    \ a = 1l\n        var b = 3l\n        var c = 2l\n        var d = 0l\n       \
    \ var result = List(1l, 3l, 2l)\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) {\n                d = 1 + i / 2\n            } else {\n \
    \               d = a + b + c\n            }\n            a = b\n            b\
    \ = c\n            c = d\n            result = result :+ d\n        }\n      \
    \  return result", "        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            l = l :+ trii(i)\n        }\n        return l", "        // Fill\
    \ up this function body\n        // 'n' is the number of elements in the Tribonacci\
    \ sequence\n        // You have to return a list of the first 'n' + 1 elements\
    \ of the Tribonacci sequence\n        // The first element of the Tribonacci sequence\
    \ is 1\n        // The second element of the Tribonacci sequence is 3\n      \
    \  // The third element of the Tribonacci sequence is 2\n        // The fourth\
    \ element of the Tribonacci sequence is 8\n        // The fifth element of the\
    \ Tribonacci sequence is 11\n        // The sixth element of the Tribonacci sequence\
    \ is 19\n        // The seventh element of the Tribonacci sequence is 30\n   \
    \     // The eighth element of the Tribonacci sequence is 50\n        // The ninth\
    \ element of the Tribonacci sequence is 81\n        // The tenth element of the\
    \ Tribonacci sequence is 133\n        // The eleventh element of the Tribonacci\
    \ sequence is 214\n        // The twelfth element of the Tribonacci sequence is\
    \ 347\n        // The thirteenth element of the Tribonacci sequence is 561\n \
    \       // The fourteenth element of the Tribonacci sequence is 907\n        //\
    \ The fifteenth element of the Tribonacci sequence is 1468\n        // The sixteenth\
    \ element of the Tribonacci sequence is 2375\n        // The seventeenth element\
    \ of the Tribonacci sequence is 3843\n        // The eighteenth element of the\
    \ Tribonacci sequence is 6208\n        // The nineteenth element of the Tribonacci\
    \ sequence is 10051\n        // The twentieth element of the Tribonacci sequence\
    \ is 16299\n        // The twenty-first element of the Tribonacci sequence is\
    \ 26350\n        // The twenty-second element of the Tribonacci sequence is 42649\n\
    \        // The twenty-third element of the Tribonacci sequence is 68900\n   \
    \     // The twenty-fourth element of the Tribonacci sequence is 111849\n    \
    \    // The twenty-fifth element of the Tribonacci sequence is 180698\n      \
    \  // The twenty-sixth element of the Tribonacci sequence is 292548\n        //\
    \ The twenty-seventh element of the Tribonacci sequence is 473097\n        //\
    \ The twenty-eighth element of the Tribonacci sequence is 765644\n        // The\
    \ twenty-ninth element of the Tribonacci sequence is 1238641\n        //", " \
    \       if (n == 0) return List[Long](1)\n        if (n == 1) return List[Long](1,\
    \ 3)\n        if (n == 2) return List[Long](1, 3, 2)\n        var l = List[Long](1,\
    \ 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l\
    \ :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \        }\n        return l", "        def tri(n : Long, l : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) l\n            else if (n == 1) tri(n - 1, List(3))\n\
    \            else if (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n            else\
    \ tri(n - 1, (l(0) + l(1) + l(2)) :: l)\n        }\n        tri(n, List())", " \
    \       var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        for\
    \ (i <- 2 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n      \
    \      else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        var result = ListBuffer[Long]()\n        result += 1\n        result +=\
    \ 3\n        if (n == 1) return result.toList\n        result += 2\n        if\
    \ (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        l = l :+ 1\n   \
    \     l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n           \
    \ } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \      }\n        }\n        return l", "        def tri_helper(n : Long, l :\
    \ List[Long]) : List[Long] = {\n            if (n == 0) l\n            else if\
    \ (n % 2 == 0) tri_helper(n - 1, l :+ (1 + n / 2))\n            else tri_helper(n\
    \ - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n\
    \        tri_helper(n, List(1))", "        var result = List[Long]()\n       \
    \ for (i <- 0 to n.toInt) {\n            if (i == 0) result = result :+ 1\n  \
    \          else if (i == 1) result = result :+ 3\n            else if (i == 2)\
    \ result = result :+ 2\n            else if (i % 2 == 0) result = result :+ (1\
    \ + i / 2)\n            else result = result :+ (result(i - 1) + result(i - 2)\
    \ + result(i + 1))\n        }\n        result", "        var result = List[Long]()\n\
    \        result = result :+ 1\n        result = result :+ 3\n        result =\
    \ result :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ result = result :+ (1 + i / 2)\n            else result = result :+ (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result", " \
    \       var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n       \
    \     if (i == 0) result = result :+ 1\n            else if (i == 1) result =\
    \ result :+ 3\n            else if (i == 2) result = result :+ 2\n           \
    \ else if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     result", "        val cache = new Array[Long](n.toInt + 1)\n        cache(0)\
    \ = 1\n        cache(1) = 3\n        cache(2) = 2\n        def tri(n : Long) :\
    \ Long = {\n            if (n == 0) return 1\n            if (n == 1) return 3\n\
    \            if (n == 2) return 2\n            if (cache(n.toInt) != 0) return\
    \ cache(n.toInt)\n            if (n % 2 == 0) {\n                cache(n.toInt)\
    \ = 1 + n / 2\n                return cache(n.toInt)\n            }\n        \
    \    cache(n.toInt) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            return\
    \ cache(n.toInt)\n        }\n        (0l to n).map(tri(_)).toList", "        val\
    \ result = new ListBuffer[Long]\n        result += 1\n        result += 3\n  \
    \      if (n == 1) return result.toList\n        result += 2\n        if (n ==\
    \ 2) return result.toList\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1) +\
    \ result(i - 2) + result(i + 1))\n        }\n        result.toList", "       \
    \ // Fill up this function body\n        // You can add another function as well,\
    \ if required\n        val l = new ListBuffer[Long]\n        l += 1\n        l\
    \ += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i %\
    \ 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        l.toList", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var list\
    \ = new ListBuffer[Long]()\n        list += 1\n        list += 3\n        list\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) list +=\
    \ (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2) + list(i +\
    \ 1))\n        }\n        list.toList", "        val result = new ArrayBuffer[Long]\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        val cache = new Array[Long](n.toInt +\
    \ 1)\n        def tri(n : Long) : Long = {\n            if (n == 1) 3\n      \
    \      else if (n == 2) 2\n            else if (n == 3) 8\n            else if\
    \ (cache(n.toInt) != 0) cache(n.toInt)\n            else {\n                val\
    \ result = if (n % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \                cache(n.toInt) = result\n                result\n           \
    \ }\n        }\n        (1 to n.toInt).map(tri(_)).toList", "        var result\
    \ = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) result\
    \ = result :+ 1\n            else if (i == 1) result = result :+ 3\n         \
    \   else if (i == 2) result = result :+ 2\n            else if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result", "        def tri(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n            else tri(n\
    \ - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n\
    \        tri(n, List(1))", "        var a = 1l\n        var b = 3l\n        var\
    \ c = 2l\n        var d = 0l\n        var result = List[Long]()\n        result\
    \ = result :+ a\n        result = result :+ b\n        result = result :+ c\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      d = 1 + i / 2\n            } else {\n                d = a + b + c\n  \
    \          }\n            a = b\n            b = c\n            c = d\n      \
    \      result = result :+ d\n        }\n        return result", "        var l\
    \ = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l += 2\n     \
    \   for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n\
    \            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        var l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        val result = new ListBuffer[Long]\n        result\
    \ += 1\n        result += 3\n        if (n == 1) return result.toList\n      \
    \  result += 2\n        if (n == 2) return result.toList\n        for (i <- 3\
    \ to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n         \
    \   else result += (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n\
    \        result.toList", "        if (n == 0) return List(1)\n        if (n ==\
    \ 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var\
    \ result = List(1l, 3l, 2l)\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return\
    \ result", "        def tri(n : Long, l : List[Long]) : List[Long] = {\n     \
    \       if (n == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n\
    \ / 2))\n            else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) +\
    \ l(l.length - 3)))\n        }\n        tri(n, List[Long](1))", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var l = List[Long]()\n        l = l :+ 1\n        l = l :+ 3\n      \
    \  l = l :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                l = l :+ (1 + i / 2)\n            } else {\n            \
    \    l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n   \
    \     return l", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        for (i <- 2 to n.toInt) {\n         \
    \   if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i -\
    \ 2) + l(i + 1))\n        }\n        l.toList", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var l = List[Long]()\n        l = l :+ 1\n        l = l :+ 3\n        l = l\
    \ :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n   \
    \             l = l :+ (1 + i / 2)\n            } else {\n                l =\
    \ l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n        return\
    \ l", "        var result = ListBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList",
  "        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n ==\
    \ 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n      \
    \      else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length -\
    \ 3)))\n        }\n        tri(n, List(1l))", "        if (n == 0) return List(1)\n\
    \        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3,\
    \ 2)\n        var a = 1l\n        var b = 3l\n        var c = 2l\n        var\
    \ d = 0l\n        var result = List(1l, 3l, 2l)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2\n          \
    \  } else {\n                d = a + b + c\n            }\n            a = b\n\
    \            b = c\n            c = d\n            result = result :+ d\n    \
    \    }\n        return result", "        // Fill up this function body\n     \
    \   // 'n' is the number of elements in Tribonacci sequence to return\n      \
    \  // You can create new lists with the '::' operator\n        // Example:\n \
    \       // val x = 1 :: (2 :: (3 :: (4 :: Nil)))\n        // val y = x.head\n\
    \        // val z = x.tail\n        // The above example creates a list x with\
    \ four elements.\n        // x.head is 1, x.tail is (2 :: (3 :: (4 :: Nil)))\n\
    \        // x.tail.head is 2, x.tail.tail is (3 :: (4 :: Nil))\n        // x.tail.tail.head\
    \ is 3, x.tail.tail.tail is (4 :: Nil)\n        // x.tail.tail.tail.head is 4,\
    \ x.tail.tail.tail.tail is Nil\n        // Example:\n        // val x = List(1,\
    \ 2, 3, 4)\n        // val y = x.head\n        // val z = x.tail\n        // The\
    \ above example creates a list x with four elements.\n        // x.head is 1,\
    \ x.tail is List(2, 3, 4)\n        // x.tail.head is 2, x.tail.tail is List(3,\
    \ 4)\n        // x.tail.tail.head is 3, x.tail.tail.tail is List(4)\n        //\
    \ x.tail.tail.tail.head is 4, x.tail.tail.tail.tail is Nil\n        var x = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i == 1) x = 1 :: x\n     \
    \       else if (i == 2) x = 3 :: x\n            else if (i == 3) x = 2 :: x\n\
    \            else if (i % 2 == 0) x = (i / 2) :: x\n            else x = (x.head\
    \ + x.tail.head + x.tail.tail.head) :: x\n        }\n        x.reverse", "   \
    \     var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n         \
    \   if (i == 0) result = result :+ 1\n            else if (i == 1) result = result\
    \ :+ 3\n            else if (i == 2) result = result :+ 2\n            else if\
    \ (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result",
  "        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if\
    \ (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n            else\
    \ if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i / 2) ::\
    \ l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n        l.reverse",
  "        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if\
    \ (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n            else\
    \ if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l = (1 + i / 2) ::\
    \ l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n        l.reverse",
  "        def tri(n : Long, acc : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) acc\n            else if (n % 2 == 0) tri(n - 1, acc :+ (1 + n / 2))\n\
    \            else tri(n - 1, acc :+ (acc(acc.length - 1) + acc(acc.length - 2)\
    \ + acc(acc.length - 3)))\n        }\n        tri(n, List[Long](1))", "      \
    \  val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 +\
    \ i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+\
    \ 3\n            else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        return l", "        var l = ListBuffer[Long]()\n   \
    \     l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += 1 + i / 2\n            else l += l(i - 1)\
    \ + l(i - 2) + l(i + 1)\n        }\n        l.toList", "        var list = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) list = list :+ 1\n\
    \            else if (i == 1) list = list :+ 3\n            else if (i == 2) list\
    \ = list :+ 2\n            else if (i % 2 == 0) list = list :+ (1 + i / 2)\n \
    \           else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n  \
    \      }\n        list", "        def triHelper(n : Long, l : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) l\n            else if (n == 1) triHelper(n - 1,\
    \ l :+ 3)\n            else if (n % 2 == 0) triHelper(n - 1, l :+ (1 + n / 2))\n\
    \            else triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        triHelper(n, List[Long]())", "        // Fill up\
    \ this function body\n        // 'n' is the number of elements in the Tribonacci\
    \ sequence\n        // You have to return a list of Long containing the first\
    \ 'n' + 1 elements of the Tribonacci sequence\n        // You can use the helper\
    \ function 'triHelper'\n        triHelper(n, List(1l, 3l, 2l))", "        val\
    \ l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n \
    \       for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n\
    \            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        var l = new ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        if (n <\
    \ 0) throw new IllegalArgumentException(\"n must be non-negative\")\n        if\
    \ (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n        if (n\
    \ == 2) return List(1, 3, 2)\n        val result = new ArrayBuffer[Long]\n   \
    \     result += 1\n        result += 3\n        result += 2\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n       \
    \     else result += (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        result.toList", "        var l = List[Long]()\n        for (i <-\
    \ 0 to n.toInt) {\n            if (i == 0) l = l :+ 1\n            else if (i\
    \ == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 2\n            else\
    \ if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) +\
    \ l(i - 2) + l(i + 1))\n        }\n        return l", "        var l = new ListBuffer[Long]\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var l =\
    \ ListBuffer[Long]()\n        l += 1\n        l += 3\n        l += 2\n       \
    \ for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n  \
    \          else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n \
    \       var i = 3\n        while (i <= n) {\n            if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n            i += 1\n        }\n        return\
    \ result", "        var l = new ListBuffer[Long]\n        l += 1\n        l +=\
    \ 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                l += 1 + i / 2\n            } else {\n            \
    \    l += l(i - 1) + l(i - 2) + l(i + 1)\n            }\n        }\n        l.toList",
  "        if (n == 0) List(1)\n        else if (n == 1) List(1, 3)\n        else\
    \ if (n == 2) List(1, 3, 2)\n        else {\n            val result = new ListBuffer[Long]\n\
    \            result += 1\n            result += 3\n            result += 2\n \
    \           for (i <- 3 to n.toInt) {\n                if (i % 2 == 0) result\
    \ += (1 + i / 2)\n                else result += (result(i - 1) + result(i - 2)\
    \ + result(i + 1))\n            }\n            result.toList\n        }", "  \
    \      def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n ==\
    \ 0) l\n            else {\n                val next = if (n % 2 == 0) 1 + n /\
    \ 2 else l(l.length - 1) + l(l.length - 2) + l(l.length - 3)\n               \
    \ tri(n - 1, l :+ next)\n            }\n        }\n        tri(n, List(1))", " \
    \       if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n  \
    \      if (n == 2) return List(1, 3, 2)\n        var l = List(1, 3, 2)\n     \
    \   for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 + i / 2)\n\
    \            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n     \
    \   return l", "        var list = new ArrayBuffer[Long]()\n        list += 1\n\
    \        list += 3\n        list += 2\n        for (i <- 3 to n.toInt) {\n   \
    \         if (i % 2 == 0) list += (1 + i / 2)\n            else list += (list(i\
    \ - 1) + list(i - 2) + list(i + 1))\n        }\n        list.toList"]
stop_tokens:
- "\n    }\n"
