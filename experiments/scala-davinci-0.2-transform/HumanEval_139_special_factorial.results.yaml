language: scala
name: HumanEval_139_special_factorial
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i - 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgy1rtk0w.scala:21)\n\tat Problem.main(tmpgy1rtk0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def specialFactorial(n : Long, acc : Long) : Long =\
    \ {\n            if (n == 0) acc\n            else specialFactorial(n - 1, acc\
    \ * factorial(n))\n        }\n        specialFactorial(n, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorials\
    \ = new Array[Long](n.toInt + 1)\n        factorials(0) = 1\n        factorials(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            factorials(i) = factorials(i\
    \ - 1) * i\n        }\n        factorials.reduceLeft(_ * _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        if (n == 0) 1\n        else n * specialFactorial(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc838waoi.scala:21)\n\tat Problem.main(tmpc838waoi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794224
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpua8xqp_u.scala:20)\n\tat Problem.main(tmpua8xqp_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def specialFactorial(n : Long, acc : Long) : Long =\
    \ {\n            if (n == 0) acc\n            else specialFactorial(n - 1, acc\
    \ * factorial(n))\n        }\n        specialFactorial(n, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- n to 1 by -1) {\n            result *= i\n   \
    \     }\n        for (i <- n - 1 to 1 by -1) {\n            result *= i\n    \
    \    }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1yd8kox6.scala:23)\n\tat Problem.main(tmp1yd8kox6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to\
    \ 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6mnrs0r.scala:19)\n\tat Problem.main(tmpz6mnrs0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpua8xqp_u.scala:20)\n\tat Problem.main(tmpua8xqp_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpua8xqp_u.scala:20)\n\tat Problem.main(tmpua8xqp_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        if (n == 0) 1\n        else n * specialFactorial(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc838waoi.scala:21)\n\tat Problem.main(tmpc838waoi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvdnzqy6.scala:19)\n\tat Problem.main(tmprvdnzqy6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvdnzqy6.scala:19)\n\tat Problem.main(tmprvdnzqy6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= specialFactorial(i - 1)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_m95da3u.scala:21)\n\tat Problem.main(tmp_m95da3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794224
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def specialFactorial(n : Long, acc : Long) : Long =\
    \ {\n            if (n == 0) acc\n            else specialFactorial(n - 1, acc\
    \ * factorial(n))\n        }\n        specialFactorial(n, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvdnzqy6.scala:19)\n\tat Problem.main(tmprvdnzqy6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= factorial(i)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp739u5vz.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n.toInt)\
    \ result *= factorial(i)\n\e[31m\e[31m   |\e[0m                              \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member of\
    \ Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp739u5vz.scala:14:42\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to n.toInt) result *= factorial(i)\n\e[31m\e[31m   |\e[0m  \
    \                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                     Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpua8xqp_u.scala:20)\n\tat Problem.main(tmpua8xqp_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpua8xqp_u.scala:20)\n\tat Problem.main(tmpua8xqp_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            def factorialHelper(n : Long, acc : Long) :\
    \ Long = {\n                if (n == 0) acc\n                else factorialHelper(n\
    \ - 1, n * acc)\n            }\n            factorialHelper(n, 1)\n        }\n\
    \        def specialFactorialHelper(n : Long, acc : Long) : Long = {\n       \
    \     if (n == 0) acc\n            else specialFactorialHelper(n - 1, acc * factorial(n))\n\
    \        }\n        specialFactorialHelper(n, 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i - 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgy1rtk0w.scala:21)\n\tat Problem.main(tmpgy1rtk0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhz1cb3w.scala:21)\n\tat Problem.main(tmpnhz1cb3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ return 1\n        var result = 1l\n        for (i <- 1 to n.toInt) {\n     \
    \       result *= factorial(i)\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8pk3q1xu.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8pk3q1xu.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhz1cb3w.scala:21)\n\tat Problem.main(tmpnhz1cb3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        if (n == 0) 1\n        else n * specialFactorial(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc838waoi.scala:21)\n\tat Problem.main(tmpc838waoi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        if (n == 0) 1\n        else n * specialFactorial(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc838waoi.scala:21)\n\tat Problem.main(tmpc838waoi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794224
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to\
    \ 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6mnrs0r.scala:19)\n\tat Problem.main(tmpz6mnrs0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplke5iqzn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplke5iqzn.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhz1cb3w.scala:21)\n\tat Problem.main(tmpnhz1cb3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var factorial\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n      \
    \  }\n        var result = factorial\n        for (i <- 1 to n.toInt - 1) {\n\
    \            result *= factorial\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjcg74gan.scala:24)\n\tat Problem.main(tmpjcg74gan.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhz1cb3w.scala:21)\n\tat Problem.main(tmpnhz1cb3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvzxlvv0.scala:18)\n\tat Problem.main(tmpvvzxlvv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i - 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgy1rtk0w.scala:21)\n\tat Problem.main(tmpgy1rtk0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvdnzqy6.scala:19)\n\tat Problem.main(tmprvdnzqy6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhz1cb3w.scala:21)\n\tat Problem.main(tmpnhz1cb3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplke5iqzn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplke5iqzn.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to\
    \ 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6mnrs0r.scala:19)\n\tat Problem.main(tmpz6mnrs0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        for (i <- 1 to n.toInt - 2) result *= i\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxcs6p_q6.scala:21)\n\tat Problem.main(tmpxcs6p_q6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplke5iqzn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplke5iqzn.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhz1cb3w.scala:21)\n\tat Problem.main(tmpnhz1cb3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def specialFactorial(n : Long, acc : Long) : Long =\
    \ {\n            if (n == 0) acc\n            else specialFactorial(n - 1, acc\
    \ * factorial(n))\n        }\n        specialFactorial(n, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhz1cb3w.scala:21)\n\tat Problem.main(tmpnhz1cb3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- n to 1 by -1) {\n            result *= i\n   \
    \     }\n        for (i <- n - 1 to 1 by -1) {\n            result *= i\n    \
    \    }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1yd8kox6.scala:23)\n\tat Problem.main(tmp1yd8kox6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpua8xqp_u.scala:20)\n\tat Problem.main(tmpua8xqp_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def specialFactorial(n : Long, acc : Long) : Long =\
    \ {\n            if (n == 0) acc\n            else specialFactorial(n - 1, acc\
    \ * factorial(n))\n        }\n        specialFactorial(n, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def helper(n\
    \ : Long, acc : Long) : Long = {\n            if (n == 0) acc\n            else\
    \ helper(n - 1, acc * n)\n        }\n        helper(n, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvcmqheh6.scala:20)\n\tat Problem.main(tmpvcmqheh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= i\n   \
    \         result *= factorial(i - 1)\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb3ozy1w1.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpb3ozy1w1.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- n to 1 by -1) {\n            result *= i\n   \
    \     }\n        for (i <- n - 1 to 1 by -1) {\n            result *= i\n    \
    \    }\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1yd8kox6.scala:23)\n\tat Problem.main(tmp1yd8kox6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= i\n   \
    \         result *= factorial(i - 1)\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb3ozy1w1.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpb3ozy1w1.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        var i = n\n        while (i > 0) {\n            result *= i\n\
    \            i -= 1\n        }\n        i = n - 1\n        while (i > 0) {\n \
    \           result *= i\n            i -= 1\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwse6s88r.scala:27)\n\tat Problem.main(tmpwse6s88r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        for (i <- 1 to n.toInt - 2) result *= i\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxcs6p_q6.scala:21)\n\tat Problem.main(tmpxcs6p_q6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= factorial(i)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp739u5vz.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n.toInt)\
    \ result *= factorial(i)\n\e[31m\e[31m   |\e[0m                              \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member of\
    \ Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp739u5vz.scala:14:42\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to n.toInt) result *= factorial(i)\n\e[31m\e[31m   |\e[0m  \
    \                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                     Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1 else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeq62vf7q.scala:16)\n\tat Problem.main(tmpeq62vf7q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1 else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeq62vf7q.scala:16)\n\tat Problem.main(tmpeq62vf7q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= i\n   \
    \         result *= factorial(i - 1)\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb3ozy1w1.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpb3ozy1w1.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        if (n == 0) 1\n        else n * specialFactorial(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc838waoi.scala:21)\n\tat Problem.main(tmpc838waoi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794224
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        for (i <- 1 to n.toInt - 2) result *= i\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxcs6p_q6.scala:21)\n\tat Problem.main(tmpxcs6p_q6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n\
    \ - 1 to 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxri_zhrj.scala:19)\n\tat Problem.main(tmpxri_zhrj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to\
    \ 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6mnrs0r.scala:19)\n\tat Problem.main(tmpz6mnrs0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= i\n   \
    \         result *= factorial(i - 1)\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb3ozy1w1.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpb3ozy1w1.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplke5iqzn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplke5iqzn.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= factorial(i)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp739u5vz.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n.toInt)\
    \ result *= factorial(i)\n\e[31m\e[31m   |\e[0m                              \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member of\
    \ Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp739u5vz.scala:14:42\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to n.toInt) result *= factorial(i)\n\e[31m\e[31m   |\e[0m  \
    \                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                     Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n\
    \ - 1 to 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxri_zhrj.scala:19)\n\tat Problem.main(tmpxri_zhrj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def specialFactorial(n : Long, acc : Long) : Long =\
    \ {\n            if (n == 0) acc\n            else specialFactorial(n - 1, acc\
    \ * factorial(n))\n        }\n        specialFactorial(n, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ return 1\n        var result = 1l\n        for (i <- 1 to n.toInt) {\n     \
    \       result *= i\n            result *= specialFactorial(i - 1)\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0haiulz.scala:22)\n\tat Problem.main(tmpf0haiulz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        for (i <- n - 1 to 1 by -1) {\n            result *= i\n        }\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx_ttj8_.scala:23)\n\tat Problem.main(tmpqx_ttj8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i - 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgy1rtk0w.scala:21)\n\tat Problem.main(tmpgy1rtk0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = if (n == 0) 1 else n * factorial(n - 1)\n        def specialFactorial(n\
    \ : Long, acc : Long) : Long = if (n == 0) acc else specialFactorial(n - 1, acc\
    \ * factorial(n))\n        specialFactorial(n, 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        if (n == 0) 1\n        else factorial(n) * specialFactorial(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplke5iqzn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplke5iqzn.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = if (n == 0) 1 else n * factorial(n - 1)\n        def specialFactorial(n\
    \ : Long, acc : Long) : Long = if (n == 0) acc else specialFactorial(n - 1, acc\
    \ * factorial(n))\n        specialFactorial(n, 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplke5iqzn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplke5iqzn.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ return 1\n        var result = 1l\n        for (i <- 1 to n.toInt) {\n     \
    \       result *= i\n            result *= specialFactorial(i - 1)\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf0haiulz.scala:22)\n\tat Problem.main(tmpf0haiulz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplke5iqzn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplke5iqzn.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1\n        else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvbdoih1w.scala:17)\n\tat Problem.main(tmpvbdoih1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to\
    \ 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6mnrs0r.scala:19)\n\tat Problem.main(tmpz6mnrs0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        for (i <- n - 1 to 1 by -1) {\n            result *= i\n        }\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqx_ttj8_.scala:23)\n\tat Problem.main(tmpqx_ttj8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvdnzqy6.scala:19)\n\tat Problem.main(tmprvdnzqy6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1\
    \ to n.toInt - 1) result *= i\n        for (i <- 1 to n.toInt - 2) result *= i\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxiqqwna4.scala:21)\n\tat Problem.main(tmpxiqqwna4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvdnzqy6.scala:19)\n\tat Problem.main(tmprvdnzqy6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= (i - 1)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2dugnl7.scala:21)\n\tat Problem.main(tmpd2dugnl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= (i - 1)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2dugnl7.scala:21)\n\tat Problem.main(tmpd2dugnl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to\
    \ 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6mnrs0r.scala:19)\n\tat Problem.main(tmpz6mnrs0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to\
    \ 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6mnrs0r.scala:19)\n\tat Problem.main(tmpz6mnrs0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to\
    \ 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6mnrs0r.scala:19)\n\tat Problem.main(tmpz6mnrs0r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        var i = n\n        while (i > 0) {\n            result *= i\n\
    \            i -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6zn2ubkz.scala:22)\n\tat Problem.main(tmp6zn2ubkz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1l to n) {\n            result *= i\n        \
    \    result *= i - 1\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphvf2mq6g.scala:21)\n\tat Problem.main(tmphvf2mq6g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        (1l to n).map(factorial(_)).product\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplke5iqzn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplke5iqzn.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n\
    \ - 1 to 1 by -1) result *= i\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxri_zhrj.scala:19)\n\tat Problem.main(tmpxri_zhrj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpua8xqp_u.scala:20)\n\tat Problem.main(tmpua8xqp_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= i\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhz1cb3w.scala:21)\n\tat Problem.main(tmpnhz1cb3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplke5iqzn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplke5iqzn.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n\
    \    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvzxlvv0.scala:18)\n\tat Problem.main(tmpvvzxlvv0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= i\n        for (i <- 1 to n.toInt\
    \ - 1) result *= i\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvdnzqy6.scala:19)\n\tat Problem.main(tmprvdnzqy6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- n to 1 by -1) {\n            result *= i\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuh58_vt5.scala:20)\n\tat Problem.main(tmpuh58_vt5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0)\
    \ 1 else n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeq62vf7q.scala:16)\n\tat Problem.main(tmpeq62vf7q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1 else n * factorial(n - 1)\n  \
    \      }\n        if (n == 0) 1 else n * specialFactorial(n - 1) * factorial(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpua8xqp_u.scala:20)\n\tat Problem.main(tmpua8xqp_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ : Long = 1\n        for (i <- n to 1 by -1) result *= i\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt5tzkncs.scala:18)\n\tat Problem.main(tmpt5tzkncs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) result *= factorial(i)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
    \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
    \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp739u5vz.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n.toInt)\
    \ result *= factorial(i)\n\e[31m\e[31m   |\e[0m                              \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member of\
    \ Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp739u5vz.scala:14:42\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to n.toInt) result *= factorial(i)\n\e[31m\e[31m   |\e[0m  \
    \                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                     Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq76p9lt2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value *= is not a member\
    \ of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76p9lt2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            result *= factorial(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    def specialFactorial(n : Long) : Long = {\n        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l))\
    \ == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx7ab2izn.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ *= is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx7ab2izn.scala:16:22 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            result *= factorial(i - \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794219
