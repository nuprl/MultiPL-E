name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    //\
  \ >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n\
  \    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        var strongest_extension = extensions(0)\n        var strongest_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else if (c.isLower) strength -= 1\n            }\n      \
    \      if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  var max_strength = -1.0\n        var max_extension = \"\"\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_extension = extension\n  \
    \          }\n        }\n        return class_name + \".\" + max_extension", " \
    \       // Your code goes here\n        var max_strength = -1.0\n        var max_strength_extension\
    \ = \"\"\n        for (extension <- extensions) {\n            var strength =\
    \ 0.0\n            for (c <- extension) {\n                if (c.isUpper) strength\
    \ += 1\n                else strength -= 1\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength\n               \
    \ max_strength_extension = extension\n            }\n        }\n        return\
    \ class_name + \".\" + max_strength_extension", "        val strengths = extensions.map(ext\
    \ => {\n            val cap = ext.count(c => c.isUpper)\n            val sm =\
    \ ext.count(c => c.isLower)\n            (ext, cap - sm)\n        })\n       \
    \ val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest = extensions(0)\n        var strongest_strength = 0\n   \
    \     for (extension <- extensions) {\n            var strength = 0\n        \
    \    for (c <- extension) {\n                if (c.isUpper) strength += 1\n  \
    \              else if (c.isLower) strength -= 1\n            }\n            if\
    \ (strength > strongest_strength) {\n                strongest = extension\n \
    \               strongest_strength = strength\n            }\n        }\n    \
    \    class_name + \".\" + strongest", "        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1", "     \
    \   var strongest_extension = extensions(0)\n        var strongest_extension_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else if (c.isLower) strength -= 1\n            }\n      \
    \      if (strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  val strengths = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower)))\n\
    \        val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1",
  "        var strongest_extension = extensions(0)\n        var strongest_extension_strength\
    \ = 0.0\n        for (extension <- extensions) {\n            var strength = 0.0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else if (c.isLower) strength -= 1\n            }\n      \
    \      if (strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension", "      \
    \  var strongest = extensions(0)\n        var strength = 0\n        for (ext <-\
    \ extensions) {\n            var cap = 0\n            var sm = 0\n           \
    \ for (c <- ext) {\n                if (c.isUpper) cap += 1\n                else\
    \ sm += 1\n            }\n            if (cap - sm > strength) {\n           \
    \     strength = cap - sm\n                strongest = ext\n            }\n  \
    \      }\n        return class_name + \".\" + strongest", "        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension",
  "        val strengths = extensions.map(ext => {\n            val cap = ext.count(c\
    \ => c.isUpper)\n            val sm = ext.count(c => c.isLower)\n            (ext,\
    \ cap - sm)\n        })\n        val strongest = strengths.maxBy(_._2)\n     \
    \   class_name + \".\" + strongest._1", "        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else if (c.isLower) strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        class_name + \".\" + strongest", "        var\
    \ strongest = extensions(0)\n        var strength = 0\n        for (ext <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- ext)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            if (cap - sm > strength) {\n                strength\
    \ = cap - sm\n                strongest = ext\n            }\n        }\n    \
    \    class_name + \".\" + strongest", "        val strength = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower))).sortBy(_._2).reverse\n    \
    \    class_name + \".\" + strength.head._1", "        var strongest = (0.0, \"\
    \")\n        for (ext <- extensions) {\n            var strength = 0.0\n     \
    \       for (c <- ext) {\n                if (c.isUpper) strength += 1\n     \
    \           else if (c.isLower) strength -= 1\n            }\n            if (strength\
    \ > strongest._1) strongest = (strength, ext)\n        }\n        class_name +\
    \ \".\" + strongest._2", "        var max_strength = 0.0\n        var max_strength_extension\
    \ = \"\"\n        for (extension <- extensions) {\n            var strength =\
    \ 0.0\n            for (c <- extension) {\n                if (c.isUpper) strength\
    \ += 1\n                else strength -= 1\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength\n               \
    \ max_strength_extension = extension\n            }\n        }\n        return\
    \ class_name + \".\" + max_strength_extension", "        var strongest = \"\"\
    ;\n        var strength = 0.0;\n        for (extension <- extensions) {\n    \
    \        var cap = 0;\n            var sm = 0;\n            for (c <- extension)\
    \ {\n                if (c.isUpper) cap += 1;\n                else sm += 1;\n\
    \            }\n            var cur_strength = cap - sm;\n            if (cur_strength\
    \ > strength) {\n                strength = cur_strength;\n                strongest\
    \ = extension;\n            }\n        }\n        class_name + \".\" + strongest;",
  "        val strengths = extensions.map(ext => {\n            val cap = ext.count(c\
    \ => c.isUpper)\n            val sm = ext.count(c => c.isLower)\n            (ext,\
    \ cap - sm)\n        })\n        val strongest = strengths.maxBy(_._2)\n     \
    \   class_name + \".\" + strongest._1", "        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1"]
stop_tokens:
- "\n    }\n"
