name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
  \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
  \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val n = string.length\n        val suffix = string.substring(n\
    \ / 2)\n        val prefix = string.substring(0, n / 2)\n        val palindrome\
    \ = suffix + prefix.reverse\n        palindrome", "        val length = string.length\n\
    \        val reverse = string.reverse\n        val suffix = string.substring(0,\
    \ length - 1)\n        val prefix = string.substring(1, length)\n        if (suffix\
    \ == reverse) string + prefix\n        else if (prefix == reverse) suffix + string\n\
    \        else makePalindrome(string.substring(1, length))", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val palindrome = new StringBuilder\n        val reverse = new StringBuilder\n\
    \        var i = 0\n        while (i < string.length) {\n            palindrome.append(string(i))\n\
    \            reverse.append(string(string.length - 1 - i))\n            if (palindrome.toString\
    \ == reverse.toString) {\n                palindrome.append(reverse.toString.substring(0,\
    \ reverse.length - 1).reverse)\n                return palindrome.toString\n \
    \           }\n            i += 1\n        }\n        palindrome.append(reverse.toString.reverse)\n\
    \        palindrome.toString", "        def makePalindromeHelper(string : String,\
    \ length : Int) : String = {\n            if (length == 0) {\n               \
    \ string + string.reverse\n            } else {\n                val prefix =\
    \ string.substring(0, length)\n                val suffix = string.substring(length)\n\
    \                if (prefix == suffix.reverse) {\n                    string +\
    \ string.substring(0, length).reverse.substring(1)\n                } else {\n\
    \                    makePalindromeHelper(string, length - 1)\n              \
    \  }\n            }\n        }\n        makePalindromeHelper(string, string.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = longestPalindrome(suffix)\n \
    \       if (palindromeSuffix.length == suffix.length) string\n        else suffix\
    \ + reversedPrefix + palindromeSuffix", "        // Find the longest postfix of\
    \ supplied string that is a palindrome.\n        def findLongestPalindromicSuffix(string\
    \ : String) : String = {\n            // Find the longest palindromic suffix of\
    \ a string.\n            def findLongestPalindromicSuffixRec(string : String,\
    \ index : Int) : String = {\n                if (index == string.length) string\n\
    \                else {\n                    val suffix = string.substring(index)\n\
    \                    if (isPalindrome(suffix)) suffix\n                    else\
    \ findLongestPalindromicSuffixRec(string, index + 1)\n                }\n    \
    \        }\n            findLongestPalindromicSuffixRec(string, 0)\n        }\n\
    \        // Find the longest prefix of supplied string that is a palindrome.\n\
    \        def findLongestPalindromicPrefix(string : String) : String = {\n    \
    \        // Find the longest palindromic prefix of a string.\n            def\
    \ findLongestPalindromicPrefixRec(string : String, index : Int) : String = {\n\
    \                if (index == string.length) string\n                else {\n\
    \                    val prefix = string.substring(0, string.length - index)\n\
    \                    if (isPalindrome(prefix)) prefix\n                    else\
    \ findLongestPalindromicPrefixRec(string, index + 1)\n                }\n    \
    \        }\n            findLongestPalindromicPrefixRec(string, 0)\n        }\n\
    \        // Find the longest palindromic suffix of a string.\n        val palindromicSuffix\
    \ = findLongestPalindromicSuffix(string)\n        // Find the longest palindromic\
    \ prefix of a string.\n        val palindromicPrefix = findLongestPalindromicPrefix(string)\n\
    \        // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n        palindromicSuffix + reverse(string.substring(0,\
    \ string.length - palindromicPrefix.length))", "        val n = string.length\n\
    \        val suffix = (0 until n).map(i => string.substring(i, n)).filter(s =>\
    \ s == s.reverse).maxBy(_.length)\n        val prefix = string.substring(0, n\
    \ - suffix.length)\n        string + prefix.reverse", "        val n = string.length\n\
    \        val s = string + \"#\" + string.reverse\n        val z = Array.fill(s.length)(0)\n\
    \        var l = 0; var r = 0\n        for (i <- 1 until s.length) {\n       \
    \     if (i <= r) z(i) = min(z(i - l), r - i + 1)\n            while (i + z(i)\
    \ < s.length && s(z(i)) == s(i + z(i))) z(i) += 1\n            if (i + z(i) -\
    \ 1 > r) {\n                l = i; r = i + z(i) - 1\n            }\n        }\n\
    \        string + string.substring(n - z(s.length - 1), n).reverse", "       \
    \ val n = string.length\n        val prefix = string.substring(0, n - 1)\n   \
    \     val suffix = string.substring(n - 1, n)\n        val reversedPrefix = prefix.reverse\n\
    \        val reversedSuffix = suffix.reverse\n        if (suffix == reversedSuffix)\
    \ {\n            string + reversedPrefix\n        } else {\n            string\
    \ + reversedSuffix + reversedPrefix\n        }", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val prefixReverse = prefix.reverse\n        val suffixPalindrome\
    \ = suffix + prefixReverse\n        val prefixPalindrome = prefix + prefixReverse\n\
    \        if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val suffix =\
    \ Array.ofDim[Int](n + 1)\n        suffix(0) = -1\n        for (i <- 1 to n) {\n\
    \            var j = suffix(i - 1)\n            while (j >= 0 && string(j) !=\
    \ string(i - 1)) j = suffix(j)\n            suffix(i) = j + 1\n        }\n   \
    \     val prefix = string.substring(0, n - suffix(n))\n        prefix + string\
    \ + prefix.reverse", "        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse", "        val longestPalindromeSuffix = string.zipWithIndex.reverse.find(x\
    \ => isPalindrome(string.substring(x._2))).get._2\n        string + string.substring(0,\
    \ string.length - longestPalindromeSuffix).reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix.reverse\n        if (suffixPalindrome\
    \ == suffix) suffix + prefix else suffix + prefix + suffixPalindrome", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2, n)\n \
    \       val prefix = string.substring(0, n / 2)\n        val palindrome = suffix\
    \ + prefix.reverse\n        palindrome", "        val suffix = string.suffixes.find(x\
    \ => x == x.reverse).get\n        val prefix = string.substring(0, string.length\
    \ - suffix.length)\n        suffix + prefix.reverse + prefix", "        val n\
    \ = string.length\n        val suffix = string.substring(n / 2)\n        val prefix\
    \ = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n \
    \       val palindromeSuffix = suffix.reverse.find(suffix.startsWith(_)).get\n\
    \        val palindromeSuffixLength = palindromeSuffix.length\n        val palindromePrefix\
    \ = reversePrefix.substring(reversePrefix.length - palindromeSuffixLength)\n \
    \       palindromePrefix + suffix", "        val prefix = string.substring(0,\
    \ string.length - longestPalindromeSuffix(string).length)\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversePrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversePrefix))\n\
    \        val palindrome = suffix + reversePrefix + palindromeSuffix\n        palindrome"]
stop_tokens:
- "\n    }\n"
