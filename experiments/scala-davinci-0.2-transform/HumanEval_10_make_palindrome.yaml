name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
  \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
  \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val n = string.length\n        val suffix = string.substring(n\
    \ / 2)\n        val prefix = string.substring(0, n / 2)\n        val palindrome\
    \ = suffix + prefix.reverse\n        palindrome", "        val length = string.length\n\
    \        val reverse = string.reverse\n        val suffix = string.substring(0,\
    \ length - 1)\n        val prefix = string.substring(1, length)\n        if (suffix\
    \ == reverse) string + prefix\n        else if (prefix == reverse) suffix + string\n\
    \        else makePalindrome(string.substring(1, length))", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val palindrome = new StringBuilder\n        val reverse = new StringBuilder\n\
    \        var i = 0\n        while (i < string.length) {\n            palindrome.append(string(i))\n\
    \            reverse.append(string(string.length - 1 - i))\n            if (palindrome.toString\
    \ == reverse.toString) {\n                palindrome.append(reverse.toString.substring(0,\
    \ reverse.length - 1).reverse)\n                return palindrome.toString\n \
    \           }\n            i += 1\n        }\n        palindrome.append(reverse.toString.reverse)\n\
    \        palindrome.toString", "        def makePalindromeHelper(string : String,\
    \ length : Int) : String = {\n            if (length == 0) {\n               \
    \ string + string.reverse\n            } else {\n                val prefix =\
    \ string.substring(0, length)\n                val suffix = string.substring(length)\n\
    \                if (prefix == suffix.reverse) {\n                    string +\
    \ string.substring(0, length).reverse.substring(1)\n                } else {\n\
    \                    makePalindromeHelper(string, length - 1)\n              \
    \  }\n            }\n        }\n        makePalindromeHelper(string, string.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = longestPalindrome(suffix)\n \
    \       if (palindromeSuffix.length == suffix.length) string\n        else suffix\
    \ + reversedPrefix + palindromeSuffix", "        // Find the longest postfix of\
    \ supplied string that is a palindrome.\n        def findLongestPalindromicSuffix(string\
    \ : String) : String = {\n            // Find the longest palindromic suffix of\
    \ a string.\n            def findLongestPalindromicSuffixRec(string : String,\
    \ index : Int) : String = {\n                if (index == string.length) string\n\
    \                else {\n                    val suffix = string.substring(index)\n\
    \                    if (isPalindrome(suffix)) suffix\n                    else\
    \ findLongestPalindromicSuffixRec(string, index + 1)\n                }\n    \
    \        }\n            findLongestPalindromicSuffixRec(string, 0)\n        }\n\
    \        // Find the longest prefix of supplied string that is a palindrome.\n\
    \        def findLongestPalindromicPrefix(string : String) : String = {\n    \
    \        // Find the longest palindromic prefix of a string.\n            def\
    \ findLongestPalindromicPrefixRec(string : String, index : Int) : String = {\n\
    \                if (index == string.length) string\n                else {\n\
    \                    val prefix = string.substring(0, string.length - index)\n\
    \                    if (isPalindrome(prefix)) prefix\n                    else\
    \ findLongestPalindromicPrefixRec(string, index + 1)\n                }\n    \
    \        }\n            findLongestPalindromicPrefixRec(string, 0)\n        }\n\
    \        // Find the longest palindromic suffix of a string.\n        val palindromicSuffix\
    \ = findLongestPalindromicSuffix(string)\n        // Find the longest palindromic\
    \ prefix of a string.\n        val palindromicPrefix = findLongestPalindromicPrefix(string)\n\
    \        // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n        palindromicSuffix + reverse(string.substring(0,\
    \ string.length - palindromicPrefix.length))", "        val n = string.length\n\
    \        val suffix = (0 until n).map(i => string.substring(i, n)).filter(s =>\
    \ s == s.reverse).maxBy(_.length)\n        val prefix = string.substring(0, n\
    \ - suffix.length)\n        string + prefix.reverse", "        val n = string.length\n\
    \        val s = string + \"#\" + string.reverse\n        val z = Array.fill(s.length)(0)\n\
    \        var l = 0; var r = 0\n        for (i <- 1 until s.length) {\n       \
    \     if (i <= r) z(i) = min(z(i - l), r - i + 1)\n            while (i + z(i)\
    \ < s.length && s(z(i)) == s(i + z(i))) z(i) += 1\n            if (i + z(i) -\
    \ 1 > r) {\n                l = i; r = i + z(i) - 1\n            }\n        }\n\
    \        string + string.substring(n - z(s.length - 1), n).reverse", "       \
    \ val n = string.length\n        val prefix = string.substring(0, n - 1)\n   \
    \     val suffix = string.substring(n - 1, n)\n        val reversedPrefix = prefix.reverse\n\
    \        val reversedSuffix = suffix.reverse\n        if (suffix == reversedSuffix)\
    \ {\n            string + reversedPrefix\n        } else {\n            string\
    \ + reversedSuffix + reversedPrefix\n        }", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val prefixReverse = prefix.reverse\n        val suffixPalindrome\
    \ = suffix + prefixReverse\n        val prefixPalindrome = prefix + prefixReverse\n\
    \        if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val suffix =\
    \ Array.ofDim[Int](n + 1)\n        suffix(0) = -1\n        for (i <- 1 to n) {\n\
    \            var j = suffix(i - 1)\n            while (j >= 0 && string(j) !=\
    \ string(i - 1)) j = suffix(j)\n            suffix(i) = j + 1\n        }\n   \
    \     val prefix = string.substring(0, n - suffix(n))\n        prefix + string\
    \ + prefix.reverse", "        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse", "        val longestPalindromeSuffix = string.zipWithIndex.reverse.find(x\
    \ => isPalindrome(string.substring(x._2))).get._2\n        string + string.substring(0,\
    \ string.length - longestPalindromeSuffix).reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix.reverse\n        if (suffixPalindrome\
    \ == suffix) suffix + prefix else suffix + prefix + suffixPalindrome", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2, n)\n \
    \       val prefix = string.substring(0, n / 2)\n        val palindrome = suffix\
    \ + prefix.reverse\n        palindrome", "        val suffix = string.suffixes.find(x\
    \ => x == x.reverse).get\n        val prefix = string.substring(0, string.length\
    \ - suffix.length)\n        suffix + prefix.reverse + prefix", "        val n\
    \ = string.length\n        val suffix = string.substring(n / 2)\n        val prefix\
    \ = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n \
    \       val palindromeSuffix = suffix.reverse.find(suffix.startsWith(_)).get\n\
    \        val palindromeSuffixLength = palindromeSuffix.length\n        val palindromePrefix\
    \ = reversePrefix.substring(reversePrefix.length - palindromeSuffixLength)\n \
    \       palindromePrefix + suffix", "        val prefix = string.substring(0,\
    \ string.length - longestPalindromeSuffix(string).length)\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversePrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversePrefix))\n\
    \        val palindrome = suffix + reversePrefix + palindromeSuffix\n        palindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        string + reversedPrefix.substring(palindromeSuffix.length)", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        suffix + reversedPrefix + palindromeSuffix", "        val suffix = longestPalindromicSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - suffix.length)\n   \
    \     prefix + suffix + prefix.reverse", "        val stringLength = string.length\n\
    \        val halfLength = stringLength / 2\n        val palindromeSuffix = (0\
    \ until halfLength).find(i => string(i) == string(stringLength - 1 - i)).map(i\
    \ => string.substring(i)).getOrElse(\"\")\n        val palindromePrefix = palindromeSuffix.reverse\n\
    \        string + palindromePrefix", "        val suffix = string.substring(string.length\
    \ - string.reverse.indexOf(string))\n        string + string.substring(0, string.length\
    \ - suffix.length).reverse", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.reverse\n\
    \        val palindrome = prefix + palindromeSuffix\n        if (palindrome ==\
    \ string) palindrome\n        else reversedPrefix + palindrome", "        val\
    \ suffix = string.substring(string.length / 2)\n        val prefix = string.substring(0,\
    \ string.length / 2)\n        val palindromeSuffix = suffix.substring(suffix.length\
    \ - suffix.reverse.indexOf(prefix.reverse))\n        prefix + palindromeSuffix\
    \ + prefix.reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversePrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversePrefix)\
    \ + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)", " \
    \       var longestPalindrome = \"\"\n        for (i <- 0 to string.length) {\n\
    \            val prefix = string.substring(0, i)\n            val suffix = string.substring(i)\n\
    \            if (prefix == suffix.reverse) longestPalindrome = prefix\n      \
    \  }\n        string + string.substring(longestPalindrome.length).reverse", " \
    \       val n = string.length\n        val m = n / 2\n        var i = m\n    \
    \    while (i >= 0 && string(i) == string(n - i - 1)) i -= 1\n        val prefix\
    \ = string.substring(0, i + 1)\n        val suffix = string.substring(i + 1, n)\n\
    \        prefix + suffix.reverse + suffix", "        val n = string.length\n \
    \       val suffix = new Array[Int](n)\n        var i = 0\n        var j = 1\n\
    \        while (j < n) {\n            if (string(i) == string(j)) {\n        \
    \        suffix(j) = i + 1\n                i += 1\n                j += 1\n \
    \           } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                    j += 1\n                } else {\n                \
    \    i = suffix(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val length = string.length\n        val longestPalindrome = (0 until length).map(i\
    \ => {\n            val prefix = string.substring(0, i)\n            val postfix\
    \ = string.substring(i, length)\n            if (prefix == postfix.reverse) postfix.length\
    \ else 0\n        }).max\n        string + string.substring(0, length - longestPalindrome).reverse",
  "        val reversedString = string.reverse\n        val longestPalindromicSuffix\
    \ = string.zip(reversedString).takeWhile(x => x._1 == x._2).map(_._1).mkString\n\
    \        val prefix = string.substring(0, string.length - longestPalindromicSuffix.length)\n\
    \        string + prefix.reverse", "        def isPalindrome(string : String)\
    \ : Boolean = {\n            if (string.length == 0) return true\n           \
    \ if (string.length == 1) return true\n            if (string.length == 2) return\
    \ string(0) == string(1)\n            if (string(0) != string(string.length -\
    \ 1)) return false\n            isPalindrome(string.substring(1, string.length\
    \ - 1))\n        }\n        def findLongestPalindrome(string : String) : String\
    \ = {\n            if (string.length == 0) return \"\"\n            if (string.length\
    \ == 1) return string\n            if (string.length == 2) return if (string(0)\
    \ == string(1)) string else string.substring(0, 1)\n            if (string(0)\
    \ != string(string.length - 1)) return findLongestPalindrome(string.substring(0,\
    \ string.length - 1))\n            val palindrome = string(0) + findLongestPalindrome(string.substring(1,\
    \ string.length - 1)) + string(0)\n            if (isPalindrome(palindrome)) palindrome\
    \ else findLongestPalindrome(string.substring(0, string.length - 1))\n       \
    \ }\n        val longestPalindrome = findLongestPalindrome(string)\n        val\
    \ prefix = string.substring(0, string.length - longestPalindrome.length)\n   \
    \     string + prefix.reverse", "        // Find the longest palindromic suffix\
    \ of the string.\n        def findPalindromicSuffix(string : String) : String\
    \ = {\n            val n = string.length\n            for (i <- 0 to n) {\n  \
    \              val suffix = string.substring(n - i, n)\n                val prefix\
    \ = suffix.reverse\n                if (string.startsWith(prefix)) return suffix\n\
    \            }\n            return \"\"\n        }\n        val palindromicSuffix\
    \ = findPalindromicSuffix(string)\n        val prefix = string.substring(0, string.length\
    \ - palindromicSuffix.length)\n        return string + prefix.reverse", "    \
    \    val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversePrefix =\
    \ prefix.reverse\n        val palindromeSuffix = longestPalindromeSuffix(suffix)\n\
    \        val palindromePrefix = reversePrefix.substring(reversePrefix.length -\
    \ (suffix.length - palindromeSuffix.length))\n        return prefix + palindromeSuffix\
    \ + palindromePrefix", "        val (longestPalindrome, palindromeStart) = longestPalindrome(string)\n\
    \        val prefix = string.substring(0, palindromeStart)\n        val reversedPrefix\
    \ = prefix.reverse\n        string + reversedPrefix", "        val n = string.length\n\
    \        if (n == 0) return \"\"\n        var i = n - 1\n        while (i >= 0)\
    \ {\n            if (string(i) == string(0)) {\n                var j = 1\n  \
    \              while (j <= i && string(j) == string(i - j)) j += 1\n         \
    \       if (j > i) return string + string.substring(i + 1).reverse\n         \
    \   }\n            i -= 1\n        }\n        return string + string.reverse.substring(1)",
  "        val suffix = string.substring(string.length / 2)\n        val prefix =\
    \ string.substring(0, string.length / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = findPalindromicSuffix(suffix)\n        return\
    \ prefix + palindromicSuffix + reversedPrefix", "        val n = string.length\n\
    \        val suffix = Array.ofDim[Int](n)\n        var i = 0\n        var j =\
    \ 1\n        while (j < n) {\n            if (string(i) == string(j)) {\n    \
    \            suffix(j) = i + 1\n                i += 1\n                j += 1\n\
    \            } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                    j += 1\n                } else {\n                \
    \    i = suffix(i - 1)\n                }\n            }\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        var longestPalindrome = \"\"\n        for (i <- 0 to string.length) {\n\
    \            val candidate = string.substring(i)\n            if (candidate.length\
    \ > longestPalindrome.length && candidate == candidate.reverse) longestPalindrome\
    \ = candidate\n        }\n        string + string.substring(0, string.length -\
    \ longestPalindrome.length).reverse", "        val n = string.length\n       \
    \ val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val suffix = string.substring(n / 2, n)\n  \
    \      val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = makePalindrome(suffix)\n        val palindrome\
    \ = palindromeSuffix + reversedPrefix\n        palindrome", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val s = string + \"#\" + string.reverse\n  \
    \      val z = Array.fill(s.length)(0)\n        var l = 0; var r = 0\n       \
    \ for (i <- 1 until s.length) {\n            if (i <= r) z(i) = min(z(i - l),\
    \ r - i + 1)\n            while (i + z(i) < s.length && s(z(i)) == s(i + z(i)))\
    \ z(i) += 1\n            if (i + z(i) - 1 > r) {\n                l = i; r = i\
    \ + z(i) - 1\n            }\n        }\n        val longestPalindromicSuffix =\
    \ z.max\n        string + string.substring(longestPalindromicSuffix, n).reverse",
  "        val n = string.length\n        val palindrome = Array.ofDim[Int](n, n)\n\
    \        for (i <- 0 until n) {\n            palindrome(i)(i) = 1\n          \
    \  if (i < n - 1) {\n                palindrome(i)(i + 1) = if (string(i) == string(i\
    \ + 1)) 2 else 0\n            }\n        }\n        for (i <- 2 until n) {\n \
    \           for (j <- 0 until n - i) {\n                palindrome(j)(j + i) =\
    \ if (string(j) == string(j + i) && palindrome(j + 1)(j + i - 1) > 0) palindrome(j\
    \ + 1)(j + i - 1) + 2 else 0\n            }\n        }\n        var maxLength\
    \ = 0\n        var maxIndex = 0\n        for (i <- 0 until n) {\n            if\
    \ (palindrome(0)(i) > maxLength) {\n                maxLength = palindrome(0)(i)\n\
    \                maxIndex = i\n            }\n        }\n        string + string.substring(maxIndex\
    \ + 1, n).reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.findPalindromeSuffix\n\
    \        suffix + reversedPrefix + palindromeSuffix", "        val n = string.length\n\
    \        val dp = Array.ofDim[Int](n, n)\n        for (i <- 0 until n) {\n   \
    \         dp(i)(i) = 1\n            if (i < n - 1) {\n                if (string(i)\
    \ == string(i + 1)) dp(i)(i + 1) = 2\n                else dp(i)(i + 1) = 1\n\
    \            }\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                if (string(i)\
    \ == string(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j)\
    \ = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        val i =\
    \ 0\n        val j = n - 1\n        val prefix = string.substring(0, i)\n    \
    \    val suffix = string.substring(j - dp(i)(j) + 1, j + 1)\n        prefix +\
    \ suffix.reverse + suffix", "        val n = string.length\n        val palindrome\
    \ = Array.ofDim[Int](n)\n        var i = 0\n        var j = 0\n        while (i\
    \ < n) {\n            var k = 0\n            while (i - k >= 0 && i + k < n &&\
    \ string(i - k) == string(i + k)) k += 1\n            palindrome(i) = k\n    \
    \        if (i + k > j + palindrome(j)) j = i\n            i += 1\n        }\n\
    \        val prefix = string.substring(0, j - palindrome(j) + 1)\n        string\
    \ + prefix.reverse", "        val n = string.length\n        val suffix = new\
    \ Array[Int](n)\n        var j = 0\n        for (i <- 1 until n) {\n         \
    \   while (j > 0 && string(i) != string(j)) j = suffix(j - 1)\n            if\
    \ (string(i) == string(j)) j += 1\n            suffix(i) = j\n        }\n    \
    \    val prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        if (n == 0) return \"\"\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val reversedSuffix = suffix.reverse\n\
    \        val palindromeSuffix = suffix + reversedSuffix\n        val palindromePrefix\
    \ = reversedPrefix + prefix\n        if (palindromeSuffix.startsWith(prefix))\
    \ return palindromeSuffix\n        else return palindromePrefix", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = suffix.substring(0, suffix.length - suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(reversedPrefix.length - palindromicSuffix.length)",
  "        val suffix = string.substring(string.length / 2)\n        val prefix =\
    \ string.substring(0, string.length / 2)\n        val palindrome = suffix + prefix.reverse\n\
    \        palindrome", "        val length = string.length\n        val suffix\
    \ = string.substring(length / 2)\n        val prefix = string.substring(0, length\
    \ / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversePrefix) + 1)\n        val palindrome\
    \ = string + reversePrefix.substring(palindromeSuffix.length)\n        palindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromeSuffix.length)", "      \
    \  val n = string.length\n        var i = n - 1\n        while (i >= 0) {\n  \
    \          if (string.substring(0, i) == string.substring(n - i, n).reverse) return\
    \ string + string.substring(0, i).reverse\n            i -= 1\n        }\n   \
    \     return string + string.reverse", "        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.findPalindromicSuffix\n\
    \        val palindromicPrefix = reversedPrefix.findPalindromicPrefix\n      \
    \  val palindromicSuffixLength = palindromicSuffix.length\n        val palindromicPrefixLength\
    \ = palindromicPrefix.length\n        val palindromicSuffixIndex = suffix.length\
    \ - palindromicSuffixLength\n        val palindromicPrefixIndex = palindromicPrefixLength\n\
    \        val palindromicSuffixString = suffix.substring(palindromicSuffixIndex)\n\
    \        val palindromicPrefixString = reversedPrefix.substring(0, palindromicPrefixIndex)\n\
    \        val palindromicSuffixStringLength = palindromicSuffixString.length\n\
    \        val palindromicPrefixStringLength = palindromicPrefixString.length\n\
    \        val palindromicSuffixStringIndex = palindromicSuffixStringLength - palindromicSuffixStringLength\n\
    \        val palindromicPrefixStringIndex = palindromicPrefixStringLength - palindromicPrefixStringLength\n\
    \        val palindromicSuffixStringSubstring = palindromicSuffixString.substring(palindromicSuffixStringIndex)\n\
    \        val palindromicPrefixStringSubstring = palindromicPrefixString.substring(palindromicPrefixStringIndex)\n\
    \        val palindromicSuffixStringSubstringLength = palindromicSuffixStringSubstring.length\n\
    \        val palindromicPrefixStringSubstringLength = palindromicPrefixStringSubstring.length\n\
    \        val palindromicSuffixStringSubstringIndex = palindromicSuffixStringSubstringLength\
    \ - palindromicSuffixStringSubstringLength\n        val palindromicPrefixStringSubstringIndex\
    \ = palindromicPrefixStringSubstringLength - pal", "        val n = string.length\n\
    \        var maxLength = 0\n        var maxIndex = 0\n        for (i <- 0 until\
    \ n) {\n            var length = 0\n            for (j <- 0 until min(i + 1, n\
    \ - i)) {\n                if (string(i - j) == string(i + j)) length += 1\n \
    \               else break\n            }\n            if (length > maxLength)\
    \ {\n                maxLength = length\n                maxIndex = i\n      \
    \      }\n        }\n        val prefix = string.substring(0, maxIndex - maxLength\
    \ + 1)\n        val suffix = string.substring(maxIndex + maxLength)\n        prefix\
    \ + suffix.reverse + suffix", "        val n = string.length\n        val s =\
    \ string + \"#\" + string.reverse\n        val lps = Array.fill(s.length)(0)\n\
    \        for (i <- 1 until s.length) {\n            var j = lps(i - 1)\n     \
    \       while (j > 0 && s(i) != s(j)) j = lps(j - 1)\n            if (s(i) ==\
    \ s(j)) lps(i) = j + 1\n        }\n        string + string.reverse.substring(0,\
    \ n - lps(s.length - 1))", "        val n = string.length\n        val s = string\
    \ + \"#\" + string.reverse\n        val p = Array.fill(s.length)(0)\n        for\
    \ (i <- 1 until s.length) {\n            var j = p(i - 1)\n            while (j\
    \ > 0 && s(i) != s(j)) j = p(j - 1)\n            if (s(i) == s(j)) j += 1\n  \
    \          p(i) = j\n        }\n        string + string.reverse.substring(0, n\
    \ - p(s.length - 1))", "        val n = string.length\n        val suffix = (0\
    \ until n).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, n - suffix).reverse", "        val suffix\
    \ = string.substring(string.length - 1 - string.reverse.indexOf(string.last))\n\
    \        val prefix = string.substring(0, string.length - suffix.length)\n   \
    \     prefix + suffix + prefix.reverse", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val suffix = string.substring(n / 2, n)\n  \
    \      val prefix = string.substring(0, n / 2)\n        val suffixPalindrome =\
    \ suffix.substring(suffix.indexOf(suffix.reverse))\n        string + suffixPalindrome.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.substring(suffix.indexOf(prefix.reverse))\n        string + suffixPalindrome.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome", "        val length = string.length\n        val longestPalindrome\
    \ = (0 until length).map(i => {\n            val prefix = string.substring(0,\
    \ i)\n            val postfix = string.substring(i, length)\n            if (prefix\
    \ == postfix.reverse) prefix.length else 0\n        }).max\n        val prefix\
    \ = string.substring(0, length - longestPalindrome)\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix + reversedPrefix\n   \
    \     val palindrome = string + palindromeSuffix\n        palindrome", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2, n)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix))\n\
    \        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val revPrefix\
    \ = prefix.reverse\n        val palindrome = suffix + revPrefix\n        if (palindrome.length\
    \ == n) palindrome\n        else palindrome + suffix.charAt(0)", "        def\
    \ makePalindromeHelper(string : String, suffix : String) : String = {\n      \
    \      if (string.length == 0) suffix\n            else if (string.last == suffix.head)\
    \ makePalindromeHelper(string.init, string.last + suffix)\n            else makePalindromeHelper(string.init,\
    \ suffix)\n        }\n        string + makePalindromeHelper(string.init, \"\"\
    ).reverse", "        if (string.length == 0) return string\n        var longestPalindrome\
    \ = string.charAt(0).toString\n        for (i <- 0 until string.length) {\n  \
    \          for (j <- i + 1 to string.length) {\n                val substring\
    \ = string.substring(i, j)\n                if (substring.length > longestPalindrome.length\
    \ && substring == substring.reverse) longestPalindrome = substring\n         \
    \   }\n        }\n        string + string.substring(0, string.length - longestPalindrome.length).reverse",
  "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n     \
    \   suffix(0) = 0\n        var i = 1\n        var j = 0\n        while (i < n)\
    \ {\n            if (string(i) == string(j)) {\n                suffix(i) = j\
    \ + 1\n                i += 1\n                j += 1\n            } else {\n\
    \                if (j == 0) {\n                    suffix(i) = 0\n          \
    \          i += 1\n                } else {\n                    j = suffix(j\
    \ - 1)\n                }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val reversed\
    \ = string.reverse\n        val longestPalindrome = (0 to string.length).map(i\
    \ => string.substring(0, i)).filter(s => reversed.startsWith(s)).maxBy(_.length)\n\
    \        longestPalindrome + reversed.substring(longestPalindrome.length)", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix))\n\
    \        val palindrome = suffix + reversedPrefix + palindromeSuffix\n       \
    \ palindrome", "        val length = string.length\n        val palindrome = string.substring(0,\
    \ length - length / 2) + string.substring(length / 2, length)\n        palindrome\
    \ + palindrome.reverse.substring(length % 2)", "        val n = string.length\n\
    \        val suffix = (0 until n).map(i => string.substring(i, n)).filter(s =>\
    \ s == s.reverse).maxBy(_.length)\n        string + string.substring(0, n - suffix.length).reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.reverse.substring(0, suffix.indexOf(reversedPrefix))\n\
    \        val palindrome = suffix + palindromeSuffix + prefix\n        palindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix + prefix.reverse\n        val prefixPalindrome = prefix + suffix.reverse\n\
    \        if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        val palindromicPrefix = reversedPrefix.substring(0, reversedPrefix.length\
    \ - palindromicSuffix.length)\n        palindromicPrefix + string + palindromicSuffix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        val palindromePrefix = reversedPrefix.substring(0, reversedPrefix.length\
    \ - palindromeSuffix.length)\n        string + palindromePrefix", "        def\
    \ findLongestPalindrome(string : String) : String = {\n            def findLongestPalindrome(string\
    \ : String, start : Int, end : Int) : String = {\n                if (start <\
    \ 0 || end >= string.length) return \"\"\n                if (string(start) !=\
    \ string(end)) return \"\"\n                val palindrome = string.substring(start,\
    \ end + 1)\n                if (palindrome.length <= 1) return palindrome\n  \
    \              val nextPalindrome = findLongestPalindrome(string, start - 1, end\
    \ + 1)\n                if (nextPalindrome.length > palindrome.length) nextPalindrome\
    \ else palindrome\n            }\n            var maxPalindrome = \"\"\n     \
    \       for (i <- 0 until string.length) {\n                val palindrome = findLongestPalindrome(string,\
    \ i, i)\n                if (palindrome.length > maxPalindrome.length) maxPalindrome\
    \ = palindrome\n                val palindrome2 = findLongestPalindrome(string,\
    \ i, i + 1)\n                if (palindrome2.length > maxPalindrome.length) maxPalindrome\
    \ = palindrome2\n            }\n            maxPalindrome\n        }\n       \
    \ val palindrome = findLongestPalindrome(string)\n        if (palindrome.length\
    \ == string.length) return string\n        val prefix = string.substring(0, string.length\
    \ - palindrome.length)\n        string + prefix.reverse", "        val suffix\
    \ = string.reverse.takeWhile(c => string.startsWith(c.toString))\n        val\
    \ prefix = string.take(string.length - suffix.length)\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindrome = suffix + reversedPrefix\n        if\
    \ (palindrome == string) string else palindrome + string", "        val n = string.length\n\
    \        var i = 0\n        var j = n - 1\n        var k = 0\n        while (i\
    \ < j) {\n            if (string(i) == string(j)) {\n                i += 1\n\
    \                j -= 1\n            } else {\n                i = 0\n       \
    \         k += 1\n                j = n - 1 - k\n            }\n        }\n  \
    \      val prefix = string.substring(0, n - k)\n        val suffix = string.substring(n\
    \ - k, n)\n        prefix + suffix.reverse", "        val longestPalindrome =\
    \ longestPalindromePostfix(string)\n        val prefix = string.substring(0, string.length\
    \ - longestPalindrome.length)\n        prefix + string + prefix.reverse", "  \
    \      val n = string.length\n        var longestPalindrome = 0\n        var longestPalindromeIndex\
    \ = 0\n        for (i <- 0 until n) {\n            var j = 0\n            while\
    \ (i + j < n && i - j >= 0 && string(i + j) == string(i - j)) {\n            \
    \    if (2 * j + 1 > longestPalindrome) {\n                    longestPalindrome\
    \ = 2 * j + 1\n                    longestPalindromeIndex = i\n              \
    \  }\n                j += 1\n            }\n            j = 0\n            while\
    \ (i + j + 1 < n && i - j >= 0 && string(i + j + 1) == string(i - j)) {\n    \
    \            if (2 * j + 2 > longestPalindrome) {\n                    longestPalindrome\
    \ = 2 * j + 2\n                    longestPalindromeIndex = i\n              \
    \  }\n                j += 1\n            }\n        }\n        val prefix = string.substring(0,\
    \ longestPalindromeIndex - (longestPalindrome - 1) / 2)\n        val reversePrefix\
    \ = prefix.reverse\n        string + reversePrefix", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val suffix = string.substring(n / 2)\n     \
    \   val prefix = string.substring(0, n / 2)\n        val palindrome = suffix +\
    \ prefix.reverse\n        palindrome", "        val n = string.length\n      \
    \  val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindromeSuffix = (for (i <- 0 to suffix.length; j <- 0\
    \ to suffix.length - i) yield suffix.substring(i, suffix.length - j)).filter(x\
    \ => x == x.reverse).max\n        val palindromePrefix = prefix.substring(0, prefix.length\
    \ - palindromeSuffix.length)\n        palindromePrefix + palindromeSuffix + palindromePrefix.reverse",
  "        val length = string.length\n        val palindrome = new Array[Boolean](length)\n\
    \        var i = 0\n        var j = length - 1\n        while (i < j) {\n    \
    \        if (string(i) == string(j)) {\n                palindrome(i) = true\n\
    \                palindrome(j) = true\n            }\n            i += 1\n   \
    \         j -= 1\n        }\n        var k = length - 1\n        while (k >= 0\
    \ && palindrome(k)) k -= 1\n        val prefix = string.substring(0, k + 1)\n\
    \        string + prefix.reverse", "        val n = string.length\n        val\
    \ suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        val\
    \ prefixPalindrome = prefix + suffix.reverse\n        if (suffixPalindrome.length\
    \ < prefixPalindrome.length) suffixPalindrome else prefixPalindrome", "      \
    \  val n = string.length\n        val longestPalindrome = Array.fill(n)(0)\n \
    \       var center = 0\n        var right = 0\n        for (i <- 0 until n) {\n\
    \            val mirror = 2 * center - i\n            if (i < right) longestPalindrome(i)\
    \ = min(right - i, longestPalindrome(mirror))\n            var a = i - (1 + longestPalindrome(i))\n\
    \            var b = i + (1 + longestPalindrome(i))\n            while (a >= 0\
    \ && b < n && string(a) == string(b)) {\n                longestPalindrome(i)\
    \ += 1\n                a -= 1\n                b += 1\n            }\n      \
    \      if (i + longestPalindrome(i) > right) {\n                center = i\n \
    \               right = i + longestPalindrome(i)\n            }\n        }\n \
    \       val longestPalindromeLength = longestPalindrome.max\n        val longestPalindromeCenter\
    \ = longestPalindrome.indexOf(longestPalindromeLength)\n        val prefix = string.substring(0,\
    \ longestPalindromeCenter - longestPalindromeLength)\n        val suffix = string.substring(longestPalindromeCenter\
    \ + longestPalindromeLength)\n        prefix + string + suffix.reverse", "   \
    \     val length = string.length\n        val palindrome = Array.ofDim[Int](length,\
    \ length)\n        for (i <- 0 until length) palindrome(i)(i) = 1\n        for\
    \ (i <- 0 until length - 1) if (string(i) == string(i + 1)) palindrome(i)(i +\
    \ 1) = 1\n        for (i <- 2 until length) {\n            for (j <- 0 until length\
    \ - i) {\n                if (string(j) == string(j + i) && palindrome(j + 1)(j\
    \ + i - 1) == 1) palindrome(j)(j + i) = 1\n            }\n        }\n        var\
    \ max = 0\n        var maxIndex = 0\n        for (i <- 0 until length) {\n   \
    \         if (palindrome(0)(i) == 1) {\n                max = i\n            \
    \    maxIndex = i\n            }\n        }\n        string.substring(0, maxIndex\
    \ + 1) + string.substring(0, length - maxIndex - 1).reverse", "        val reversed\
    \ = string.reverse\n        val suffix = string.substring(0, string.length - reversed.indexOf(string))\n\
    \        string + reversed.substring(suffix.length)", "        val length = string.length\n\
    \        val palindrome = Array.ofDim[Int](length, length)\n        var maxLength\
    \ = 0\n        var maxIndex = 0\n        for (i <- 0 until length) {\n       \
    \     palindrome(i)(i) = 1\n            if (i < length - 1 && string(i) == string(i\
    \ + 1)) {\n                palindrome(i)(i + 1) = 1\n                maxLength\
    \ = 2\n                maxIndex = i\n            }\n        }\n        for (k\
    \ <- 3 to length) {\n            for (i <- 0 until length - k + 1) {\n       \
    \         val j = i + k - 1\n                if (string(i) == string(j) && palindrome(i\
    \ + 1)(j - 1) == 1) {\n                    palindrome(i)(j) = 1\n            \
    \        maxLength = k\n                    maxIndex = i\n                }\n\
    \            }\n        }\n        string.substring(0, maxIndex) + string.substring(maxIndex\
    \ + maxLength) + string.substring(maxIndex, maxIndex + maxLength).reverse", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reverse = prefix.reverse\n\
    \        val palindrome = suffix + reverse\n        val palindromeLength = palindrome.length\n\
    \        val palindromeSuffix = palindrome.substring(palindromeLength / 2)\n \
    \       val palindromePrefix = palindrome.substring(0, palindromeLength / 2)\n\
    \        val palindromeSuffixLength = palindromeSuffix.length\n        val palindromePrefixLength\
    \ = palindromePrefix.length\n        val palindromeSuffixReverse = palindromeSuffix.reverse\n\
    \        val palindromePrefixReverse = palindromePrefix.reverse\n        val palindromeSuffixReverseLength\
    \ = palindromeSuffixReverse.length\n        val palindromePrefixReverseLength\
    \ = palindromePrefixReverse.length\n        val palindromeSuffixReversePrefix\
    \ = palindromeSuffixReverse.substring(0, palindromeSuffixReverseLength / 2)\n\
    \        val palindromePrefixReverseSuffix = palindromePrefixReverse.substring(palindromePrefixReverseLength\
    \ / 2)\n        val palindromeSuffixReversePrefixLength = palindromeSuffixReversePrefix.length\n\
    \        val palindromePrefixReverseSuffixLength = palindromePrefixReverseSuffix.length\n\
    \        val palindromeSuffixReversePrefixReverse = palindromeSuffixReversePrefix.reverse\n\
    \        val palindromePrefixReverseSuffixReverse = palindromePrefixReverseSuffix.reverse\n\
    \        val palindromeSuffixReversePrefixReverseLength = palindromeSuffixReversePrefixReverse.length\n\
    \        val palindromePrefixReverseSuffixReverseLength = palindromePrefixReverseSuffixReverse",
  "        val stringLength = string.length\n        val stringLengthHalf = stringLength\
    \ / 2\n        val stringLengthHalfCeil = ceil(stringLength / 2.0).toInt\n   \
    \     val stringLengthHalfFloor = floor(stringLength / 2.0).toInt\n        var\
    \ palindromeSuffix = \"\"\n        for (i <- 0 to stringLengthHalf) {\n      \
    \      val substring = string.substring(stringLengthHalfFloor - i, stringLengthHalfCeil\
    \ + i)\n            if (substring == substring.reverse) {\n                palindromeSuffix\
    \ = substring\n            }\n        }\n        val palindromePrefix = string.substring(0,\
    \ stringLengthHalfFloor - palindromeSuffix.length)\n        palindromePrefix +\
    \ palindromeSuffix + palindromePrefix.reverse", "        val longestPalindrome\
    \ = longestPalindromeSuffix(string)\n        string + reverse(string.substring(0,\
    \ string.length - longestPalindrome.length))", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromicSuffix\
    \ = suffix.substring(suffix.indexOf(reversedPrefix))\n        string + reversedPrefix.substring(palindromicSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromicSuffix = (1 to suffix.length).find(i\
    \ => suffix.substring(0, i) == suffix.substring(i).reverse).get\n        val nonPalindromicPrefix\
    \ = prefix.substring(0, prefix.length - palindromicSuffix)\n        nonPalindromicPrefix\
    \ + suffix + reversedPrefix", "        if (string.length == 0) return string\n\
    \        val suffix = string.substring(string.length / 2)\n        val prefix\
    \ = string.substring(0, string.length / 2)\n        val palindromeSuffix = findPalindrome(suffix)\n\
    \        val palindromePrefix = findPalindrome(prefix.reverse)\n        return\
    \ string + palindromePrefix.reverse", "        val n = string.length\n       \
    \ val suffix = (0 until n).map(i => string.substring(i)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - suffix.length)\n        prefix +\
    \ suffix + prefix.reverse", "        val n = string.length\n        val s = string\
    \ + \"*\" + string.reverse\n        val lps = Array.fill(s.length)(0)\n      \
    \  for (i <- 1 until s.length) {\n            var j = lps(i - 1)\n           \
    \ while (j > 0 && s(i) != s(j)) j = lps(j - 1)\n            if (s(i) == s(j))\
    \ lps(i) = j + 1\n        }\n        string + string.reverse.substring(lps(s.length\
    \ - 1))", "        def findLongestPalindrome(string : String) : String = {\n \
    \           def findLongestPalindrome(string : String, start : Int, end : Int)\
    \ : String = {\n                if (start < 0 || end >= string.length) return\
    \ \"\"\n                if (string(start) != string(end)) return \"\"\n      \
    \          val palindrome = string.substring(start, end + 1)\n               \
    \ val nextPalindrome = findLongestPalindrome(string, start - 1, end + 1)\n   \
    \             if (nextPalindrome.length > palindrome.length) nextPalindrome else\
    \ palindrome\n            }\n            def findLongestPalindrome(string : String,\
    \ index : Int) : String = {\n                val palindrome1 = findLongestPalindrome(string,\
    \ index, index)\n                val palindrome2 = findLongestPalindrome(string,\
    \ index, index + 1)\n                if (palindrome1.length > palindrome2.length)\
    \ palindrome1 else palindrome2\n            }\n            def findLongestPalindrome(string\
    \ : String) : String = {\n                var longestPalindrome = \"\"\n     \
    \           for (i <- 0 until string.length) {\n                    val palindrome\
    \ = findLongestPalindrome(string, i)\n                    if (palindrome.length\
    \ > longestPalindrome.length) longestPalindrome = palindrome\n               \
    \ }\n                longestPalindrome\n            }\n            findLongestPalindrome(string)\n\
    \        }\n        val longestPalindrome = findLongestPalindrome(string)\n  \
    \      val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse", "        val n = string.length\n        val\
    \ suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(suffix.indexOf(reversedPrefix))\n        string + reversedPrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix + prefix.reverse\n        val prefixPalindrome = prefix + suffix.reverse\n\
    \        if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val reversedSuffix = suffix.reverse\n\
    \        val palindromeSuffix = suffix + reversedSuffix\n        val palindromePrefix\
    \ = reversedPrefix + prefix\n        if (palindromeSuffix.length > palindromePrefix.length)\
    \ palindromeSuffix else palindromePrefix", "        val n = string.length\n  \
    \      val m = n * 2 + 1\n        val t = new Array[Int](m)\n        var l = 0\n\
    \        var r = -1\n        for (i <- 0 until m) {\n            val k = if (i\
    \ % 2 == 0) 0 else 1\n            var j = (i + k) / 2\n            while (j >=\
    \ 0 && j < n && i - j >= 0 && i - j < n && string(j) == string(i - j)) j += 1\n\
    \            t(i) = j\n            if (i + t(i) > r) {\n                l = i\
    \ - t(i)\n                r = i + t(i)\n            }\n        }\n        val\
    \ p = t.indexOf(n)\n        val q = p - n\n        string + string.substring(q,\
    \ n).reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.substring(0, suffix.length - suffix.reverse.indexOf(suffix))\n    \
    \    val prefixPalindrome = prefix.substring(prefix.reverse.indexOf(prefix))\n\
    \        prefixPalindrome + suffixPalindrome + prefixPalindrome.reverse", "  \
    \      var longestPalindromeSuffix = \"\"\n        for (i <- 0 to string.length)\
    \ {\n            val suffix = string.substring(i)\n            if (isPalindrome(suffix))\
    \ {\n                longestPalindromeSuffix = suffix\n                break\n\
    \            }\n        }\n        val prefix = string.substring(0, string.length\
    \ - longestPalindromeSuffix.length)\n        prefix + longestPalindromeSuffix\
    \ + prefix.reverse", "        val n = string.length\n        var i = 0\n     \
    \   var j = n - 1\n        while (i < j) {\n            if (string(i) != string(j))\
    \ {\n                return string.substring(0, j) + string.substring(j, n).reverse\
    \ + string\n            }\n            i += 1\n            j -= 1\n        }\n\
    \        return string + string.reverse.substring(1, n)", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n      \
    \  val palindromePrefix = reverse(prefix.substring(0, prefix.length - palindromeSuffix.length))\n\
    \        palindromePrefix + suffix + palindromePrefix", "        val n = string.length\n\
    \        val s = string + \"#\" + string.reverse\n        val z = Array.fill(s.length)(0)\n\
    \        var l = 0; var r = 0\n        for (i <- 1 until s.length) {\n       \
    \     if (i <= r) z(i) = min(z(i - l), r - i + 1)\n            while (i + z(i)\
    \ < s.length && s(z(i)) == s(i + z(i))) z(i) += 1\n            if (i + z(i) -\
    \ 1 > r) {\n                l = i; r = i + z(i) - 1\n            }\n        }\n\
    \        val prefix = string.substring(0, n - z(n + 1))\n        string + prefix.reverse",
  "        val suffix = string.substring(string.length / 2)\n        val prefix =\
    \ string.substring(0, string.length / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = (suffix + reversedPrefix).substring(0, suffix.length)\n\
    \        val palindromicPrefix = reversedPrefix.substring(suffix.length)\n   \
    \     palindromicPrefix + string + palindromicSuffix", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = new StringBuilder(prefix).reverse.toString\n\
    \        val palindromeSuffix = findLongestPalindrome(suffix)\n        val palindrome\
    \ = suffix + reversedPrefix + palindromeSuffix\n        palindrome", "       \
    \ val n = string.length\n        val suffix = string.substring(n / 2)\n      \
    \  val prefix = string.substring(0, n / 2)\n        val suffixPalindrome = suffix.reverse\n\
    \        if (suffixPalindrome == suffix) return string\n        val prefixPalindrome\
    \ = prefix.reverse\n        val prefixPalindromeLength = prefixPalindrome.length\n\
    \        val suffixPalindromeLength = suffixPalindrome.length\n        val commonPrefixLength\
    \ = prefixPalindrome.zip(suffixPalindrome).takeWhile(Function.tupled(_ == _)).length\n\
    \        val prefixPalindromeSuffix = prefixPalindrome.substring(commonPrefixLength)\n\
    \        val suffixPalindromePrefix = suffixPalindrome.substring(0, suffixPalindromeLength\
    \ - commonPrefixLength)\n        val result = prefixPalindromeSuffix + suffixPalindromePrefix\
    \ + suffix\n        result", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val palindromeSuffix = findPalindromeSuffix(suffix)\n        val palindromePrefix\
    \ = prefix.substring(0, prefix.length - palindromeSuffix.length)\n        palindromePrefix\
    \ + suffix + palindromePrefix.reverse", "        val n = string.length\n     \
    \   val suffix = (0 until n).map(i => string.substring(i)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - suffix.length)\n        prefix +\
    \ suffix + prefix.reverse", "        val n = string.length\n        val suffix\
    \ = string.substring(n - 1, n)\n        val prefix = string.substring(0, n - 1)\n\
    \        val suffixPalindrome = isPalindrome(suffix)\n        val prefixPalindrome\
    \ = isPalindrome(prefix)\n        if (suffixPalindrome && prefixPalindrome) string\n\
    \        else if (suffixPalindrome) string + prefix.reverse\n        else if (prefixPalindrome)\
    \ suffix + string\n        else string + prefix.reverse", "        val length\
    \ = string.length\n        val palindromeLength = (0 until length).find(i => string.substring(0,\
    \ i) == string.substring(length - i, length).reverse).getOrElse(0)\n        string\
    \ + string.substring(0, length - palindromeLength).reverse", "        val n =\
    \ string.length\n        val suffix = string.substring(n / 2)\n        val prefix\
    \ = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = (1 to suffix.length).find(i => suffix.substring(0,\
    \ i) == suffix.substring(i).reverse).get\n        val nonPalindromicPrefix = prefix.substring(0,\
    \ prefix.length - palindromicSuffix)\n        nonPalindromicPrefix + suffix +\
    \ reversedPrefix", "        val length = string.length\n        val reversed =\
    \ string.reverse\n        val suffix = string.substring(0, length - 1)\n     \
    \   val prefix = reversed.substring(0, length - 1)\n        val palindrome = suffix\
    \ + prefix\n        string + palindrome", "        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        val reversePrefix = prefix.reverse\n        string + reversePrefix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = (1 to n / 2).find(i => suffix.substring(0,\
    \ i) == reversedPrefix.substring(n / 2 - i, n / 2)).get\n        string + reversedPrefix.substring(n\
    \ / 2 - palindromeSuffix, n / 2)", "        val n = string.length\n        val\
    \ suffix = string.substring(n / 2)\n        val prefix = string.substring(0, n\
    \ / 2)\n        val suffixPalindrome = suffix.substring(suffix.indexOf(prefix.reverse))\n\
    \        string + suffixPalindrome.reverse", "        val length = string.length\n\
    \        val palindrome = new Array[Int](length)\n        var i = 0\n        var\
    \ j = 0\n        while (i < length) {\n            while (i - j >= 0 && i + j\
    \ < length && string(i - j) == string(i + j)) j += 1\n            palindrome(i)\
    \ = j\n            var k = 1\n            while (i - k >= 0 && i + k < length\
    \ && k + palindrome(i - k) < j) {\n                palindrome(i + k) = palindrome(i\
    \ - k)\n                k += 1\n            }\n            i += k\n          \
    \  j -= k\n        }\n        var maxLength = 0\n        var centerIndex = 0\n\
    \        i = 1\n        while (i < length) {\n            if (i + palindrome(i)\
    \ == length) {\n                maxLength = palindrome(i)\n                centerIndex\
    \ = i\n            }\n            i += 1\n        }\n        val prefix = string.substring(0,\
    \ centerIndex - maxLength)\n        val suffix = string.substring(centerIndex\
    \ + maxLength)\n        prefix + string + suffix.reverse", "        var prefix\
    \ = string\n        var suffix = \"\"\n        var palindrome = \"\"\n       \
    \ while (prefix.length > 0) {\n            if (isPalindrome(prefix)) {\n     \
    \           palindrome = prefix + suffix\n                break\n            }\n\
    \            suffix = prefix.charAt(0) + suffix\n            prefix = prefix.substring(1)\n\
    \        }\n        palindrome", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        val palindrome = suffix + reversedPrefix + palindromeSuffix\n       \
    \ palindrome", "        val length = string.length\n        val prefix = string.substring(0,\
    \ length / 2)\n        val suffix = string.substring(length / 2 + length % 2,\
    \ length)\n        val reversedPrefix = prefix.reverse\n        val reversedSuffix\
    \ = suffix.reverse\n        val palindromeSuffix = reversedSuffix.substring(0,\
    \ reversedSuffix.indexOf(reversedPrefix))\n        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome", "        val length = string.length\n        val palindromeSuffix\
    \ = (0 until length).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, length - palindromeSuffix).reverse", " \
    \       val n = string.length\n        val longestPalindrome = Array.fill(n)(0)\n\
    \        var center = 0\n        var right = 0\n        for (i <- 0 until n) {\n\
    \            val mirror = 2 * center - i\n            if (i < right) longestPalindrome(i)\
    \ = min(right - i, longestPalindrome(mirror))\n            var left = i - (1 +\
    \ longestPalindrome(i))\n            var right = i + (1 + longestPalindrome(i))\n\
    \            while (left >= 0 && right < n && string(left) == string(right)) {\n\
    \                longestPalindrome(i) += 1\n                left -= 1\n      \
    \          right += 1\n            }\n            if (i + longestPalindrome(i)\
    \ > right) {\n                center = i\n                right = i + longestPalindrome(i)\n\
    \            }\n        }\n        val longestPalindromeLength = longestPalindrome.max\n\
    \        val longestPalindromeCenter = longestPalindrome.indexOf(longestPalindromeLength)\n\
    \        val prefix = string.substring(0, longestPalindromeCenter - longestPalindromeLength)\n\
    \        val suffix = string.substring(longestPalindromeCenter + longestPalindromeLength)\n\
    \        prefix + string + suffix.reverse", "        val length = string.length\n\
    \        val suffix = string.substring(length / 2, length)\n        val prefix\
    \ = string.substring(0, length / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        val palindromicPrefix = reversedPrefix.substring(reversedPrefix.indexOf(palindromicSuffix)\
    \ + 1)\n        palindromicPrefix + string + palindromicPrefix.reverse", "   \
    \     val n = string.length\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffix = string.substring(n / 2 + n % 2, n)\n        val reversedPrefix\
    \ = prefix.reverse\n        val reversedSuffix = suffix.reverse\n        val prefixSuffix\
    \ = prefix + suffix\n        val reversedPrefixSuffix = reversedPrefix + reversedSuffix\n\
    \        val reversedPrefixSuffixPrefix = reversedPrefix + suffix\n        val\
    \ prefixSuffixReversedSuffix = prefix + reversedSuffix\n        val reversedPrefixSuffixReversedSuffix\
    \ = reversedPrefix + reversedSuffix\n        val prefixSuffixReversedPrefix =\
    \ prefix + reversedPrefix\n        val reversedPrefixSuffixReversedPrefix = reversedPrefix\
    \ + reversedPrefix\n        val prefixSuffixPrefix = prefix + suffix + prefix\n\
    \        val reversedPrefixSuffixPrefixReversedPrefix = reversedPrefix + suffix\
    \ + prefix + reversedPrefix\n        if (prefixSuffix == reversedPrefixSuffix)\
    \ prefixSuffix\n        else if (reversedPrefixSuffixPrefix == reversedPrefixSuffixPrefix.reverse)\
    \ reversedPrefixSuffixPrefix\n        else if (prefixSuffixReversedSuffix == prefixSuffixReversedSuffix.reverse)\
    \ prefixSuffixReversedSuffix\n        else if (reversedPrefixSuffixReversedSuffix\
    \ == reversedPrefixSuffixReversedSuffix.reverse) reversedPrefixSuffixReversedSuffix\n\
    \        else if (prefixSuffixReversedPrefix == prefixSuffixReversedPrefix.reverse)\
    \ prefixSuffixReversedPrefix\n        else if (reversedPrefixSuffixReversedPrefix\
    \ == reversedPrefixSuffixReversedPrefix.reverse) reversedPrefixSuffixReversedPrefix\n\
    \        else if (prefixSuffixPrefix == prefixSuffixPrefix.reverse) prefixSuffixPrefix\n\
    \        else if (reversedPrefixSuffixPrefixReversedPrefix == reversedPrefixSuff",
  "        def findLongestPalindrome(string : String) : String = {\n            def\
    \ findLongestPalindrome(string : String, start : Int, end : Int) : String = {\n\
    \                if (start < 0 || end >= string.length) return \"\"\n        \
    \        if (string(start) != string(end)) return \"\"\n                val palindrome\
    \ = string.substring(start, end + 1)\n                if (palindrome.length ==\
    \ 1) return palindrome\n                if (palindrome.length == 2) return if\
    \ (palindrome(0) == palindrome(1)) palindrome else \"\"\n                if (palindrome.length\
    \ == 3) return if (palindrome(0) == palindrome(2)) palindrome else \"\"\n    \
    \            if (palindrome.length == 4) return if (palindrome(0) == palindrome(3)\
    \ && palindrome(1) == palindrome(2)) palindrome else \"\"\n                val\
    \ left = findLongestPalindrome(string, start - 1, end + 1)\n                if\
    \ (left.length > 0) return left\n                val right = findLongestPalindrome(string,\
    \ start + 1, end - 1)\n                if (right.length > 0) return right\n  \
    \              return \"\"\n            }\n            val palindrome = findLongestPalindrome(string,\
    \ 0, string.length - 1)\n            if (palindrome.length > 0) return palindrome\n\
    \            return findLongestPalindrome(string, 0, string.length - 2)\n    \
    \    }\n        val palindrome = findLongestPalindrome(string)\n        if (palindrome.length\
    \ == string.length) return string\n        return string + string.substring(0,\
    \ string.length - palindrome.length).reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = (for (i <- 0 to suffix.length) yield {\n            val suffixPrefix = suffix.substring(0,\
    \ i)\n            val reversedSuffixPrefix = suffixPrefix.reverse\n          \
    \  if (suffixPrefix == reversedSuffixPrefix) suffixPrefix else \"\"\n        }).max\n\
    \        string + reversedPrefix.substring(palindromeSuffix.length)", "      \
    \  val n = string.length\n        val suffix = string.substring(n / 2, n)\n  \
    \      val prefix = string.substring(0, n / 2)\n        val reversed = prefix.reverse\n\
    \        val palindrome = suffix + reversed\n        val longestPalindrome = suffix.zipWithIndex.reverse.find(x\
    \ => string.endsWith(x._1 + suffix.substring(0, x._2)))\n        val palindromeLength\
    \ = longestPalindrome match {\n            case Some(x) => x._2\n            case\
    \ None => 0\n        }\n        val prefixLength = n - palindromeLength\n    \
    \    val prefixToAppend = reversed.substring(0, prefixLength)\n        palindrome\
    \ + prefixToAppend", "        def findLongestPalindrome(string : String) : String\
    \ = {\n            def isPalindrome(string : String) : Boolean = {\n         \
    \       if (string.length <= 1) true\n                else if (string.head !=\
    \ string.last) false\n                else isPalindrome(string.tail.init)\n  \
    \          }\n            def findLongestPalindrome(string : String, longestPalindrome\
    \ : String) : String = {\n                if (string.length == 0) longestPalindrome\n\
    \                else if (isPalindrome(string)) findLongestPalindrome(string.init,\
    \ string)\n                else findLongestPalindrome(string.init, longestPalindrome)\n\
    \            }\n            findLongestPalindrome(string, \"\")\n        }\n \
    \       val longestPalindrome = findLongestPalindrome(string)\n        if (longestPalindrome.length\
    \ == string.length) string\n        else string + string.substring(0, string.length\
    \ - longestPalindrome.length).reverse", "        val n = string.length\n     \
    \   val prefix = string.substring(0, n - 1)\n        val suffix = string.substring(n\
    \ - 1, n)\n        val reversedPrefix = prefix.reverse\n        if (suffix ==\
    \ reversedPrefix) string + suffix else string + reversedPrefix", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   val n = string.length\n        val prefix = string.substring(0, n / 2)\n \
    \       val suffix = string.substring(n / 2 + n % 2, n)\n        val reversedPrefix\
    \ = prefix.reverse\n        val reversedSuffix = suffix.reverse\n        val palindromeSuffix\
    \ = suffix + reversedSuffix.substring(reversedSuffix.indexOf(prefix))\n      \
    \  val palindromePrefix = reversedPrefix.substring(reversedPrefix.indexOf(suffix))\
    \ + suffix\n        if (palindromeSuffix.length < palindromePrefix.length) palindromeSuffix\
    \ else palindromePrefix", "        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   val n = string.length\n        val suffix = string.substring(n - 1, n)\n \
    \       val prefix = string.substring(0, 1)\n        val suffixPalindrome = suffix\
    \ + makePalindrome(string.substring(0, n - 1)) + prefix\n        if (suffixPalindrome.length\
    \ < string.length + 1) suffixPalindrome else string + string.reverse.substring(1)",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n\
    \        val palindromeSuffix = suffix.substring(suffix.indexOf(reversePrefix))\n\
    \        string + reversePrefix.substring(reversePrefix.indexOf(palindromeSuffix)\
    \ + palindromeSuffix.length)", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversePrefix) + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reverse = prefix.reverse\n\
    \        val palindrome = suffix + reverse\n        palindrome", "        val\
    \ n = string.length\n        val suffix = Array.ofDim[Int](n)\n        var i =\
    \ 0\n        var j = 1\n        while (j < n) {\n            if (string(i) ==\
    \ string(j)) {\n                suffix(j) = i + 1\n                i += 1\n  \
    \          } else {\n                if (i == 0) suffix(j) = 0\n             \
    \   else {\n                    i = suffix(i - 1)\n                    j -= 1\n\
    \                }\n            }\n            j += 1\n        }\n        val\
    \ prefix = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        var longestPalindromeSuffix = \"\"\n        for (i <- 0 to string.length\
    \ - 1) {\n            val suffix = string.substring(i)\n            if (suffix\
    \ == suffix.reverse) {\n                longestPalindromeSuffix = suffix\n   \
    \             break\n            }\n        }\n        val prefix = string.substring(0,\
    \ string.length - longestPalindromeSuffix.length)\n        prefix + longestPalindromeSuffix\
    \ + prefix.reverse", "        val n = string.length\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffix = string.substring(n / 2 + n % 2, n)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   if (string.length == 0) return string\n        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversePrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.length - suffix.indexOf(reversePrefix))\n        val palindrome = string\
    \ + reversePrefix.substring(reversePrefix.length - (string.length - palindromeSuffix.length))\n\
    \        palindrome", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.reverse\n        if (suffix == suffixPalindrome) suffix + prefix else\
    \ suffix + prefix + suffixPalindrome", "        val length = string.length\n \
    \       val reverse = string.reverse\n        val suffix = (0 until length).map(i\
    \ => string.substring(i)).filter(s => s == reverse.substring(0, length - i)).maxBy(_.length)\n\
    \        val prefix = string.substring(0, length - suffix.length)\n        string\
    \ + prefix.reverse", "        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        prefix + string + prefix.reverse", "        val n = string.length\n \
    \       val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        val palindromePrefix\
    \ = reversedPrefix.substring(reversedPrefix.indexOf(palindromeSuffix) + 1)\n \
    \       palindromePrefix + suffix + palindromePrefix.reverse", "        if (string.length\
    \ == 0) return string\n        val suffix = string.substring(string.length / 2)\n\
    \        val prefix = string.substring(0, string.length / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.length\
    \ - suffix.indexOf(reversedPrefix))\n        val palindrome = string + reversedPrefix.substring(palindromeSuffix.length)\n\
    \        palindrome", "        val length = string.length\n        val suffix\
    \ = string.substring(length / 2, length)\n        val prefix = string.substring(0,\
    \ length / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromicSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        val palindromicPrefix\
    \ = palindromicSuffix.reverse\n        palindromicPrefix + string + palindromicSuffix",
  "        val length = string.length\n        val prefix = string.substring(0, length\
    \ / 2)\n        val suffix = string.substring(length / 2 + length % 2, length)\n\
    \        val reverse = suffix.reverse\n        val palindrome = suffix + reverse\n\
    \        val palindromeLength = palindrome.length\n        val prefixLength =\
    \ prefix.length\n        val prefixPalindrome = prefix.substring(prefixLength\
    \ - palindromeLength, prefixLength)\n        if (prefixPalindrome == palindrome)\
    \ string + reverse.substring(palindromeLength, reverse.length)\n        else string\
    \ + reverse", "        val length = string.length\n        if (length == 0) return\
    \ \"\"\n        var i = length - 1\n        while (i >= 0) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                return string + string.substring(0, i).reverse\n        \
    \    }\n            i -= 1\n        }\n        return \"\"", "        def findLongestPalindrome(string\
    \ : String) : String = {\n            def findLongestPalindrome(string : String,\
    \ start : Int, end : Int) : String = {\n                if (start < 0 || end >=\
    \ string.length) return \"\"\n                if (string(start) != string(end))\
    \ return \"\"\n                val palindrome = string.substring(start, end +\
    \ 1)\n                if (palindrome.length == 1) return palindrome\n        \
    \        if (palindrome.length == 2) return if (palindrome(0) == palindrome(1))\
    \ palindrome else \"\"\n                if (palindrome.length == 3) return if\
    \ (palindrome(0) == palindrome(2)) palindrome else \"\"\n                if (findLongestPalindrome(palindrome,\
    \ 1, palindrome.length - 2) == \"\") return \"\"\n                palindrome\n\
    \            }\n            var longestPalindrome = \"\"\n            for (i <-\
    \ 0 until string.length) {\n                val palindrome = findLongestPalindrome(string,\
    \ i, i)\n                if (palindrome.length > longestPalindrome.length) longestPalindrome\
    \ = palindrome\n                val palindrome2 = findLongestPalindrome(string,\
    \ i, i + 1)\n                if (palindrome2.length > longestPalindrome.length)\
    \ longestPalindrome = palindrome2\n            }\n            longestPalindrome\n\
    \        }\n        val palindrome = findLongestPalindrome(string)\n        if\
    \ (palindrome == string) return string\n        string + string.substring(0, string.length\
    \ - palindrome.length).reverse", "        val n = string.length\n        val palindrome\
    \ = Array.ofDim[Int](n)\n        var left = 0\n        var right = 0\n       \
    \ for (i <- 0 until n) {\n            if (i > right) {\n                var j\
    \ = 0\n                while (i - j >= 0 && i + j < n && string(i - j) == string(i\
    \ + j)) j += 1\n                palindrome(i) = j\n                left = i -\
    \ j + 1\n                right = i + j - 1\n            } else {\n           \
    \     val iMirror = left + right - i\n                if (palindrome(iMirror)\
    \ < right - i) palindrome(i) = palindrome(iMirror)\n                else {\n \
    \                   var j = 1\n                    while (i - j >= 0 && i + j\
    \ < n && string(i - j) == string(i + j)) j += 1\n                    palindrome(i)\
    \ = j\n                    left = i - j + 1\n                    right = i + j\
    \ - 1\n                }\n            }\n        }\n        val longestPalindrome\
    \ = palindrome.max\n        val prefix = string.substring(0, n - longestPalindrome)\n\
    \        val suffix = string.substring(n - longestPalindrome)\n        prefix\
    \ + suffix.reverse", "        val suffix = string.substring(string.length / 2)\n\
    \        val prefix = string.substring(0, string.length / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2)\n    \
    \    val prefix = string.substring(0, n / 2)\n        val palindrome = prefix\
    \ + suffix\n        val reversed = prefix.reverse\n        palindrome + reversed",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversePrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversePrefix)\
    \ + 1)\n        val palindrome = string + reversePrefix.substring(palindromeSuffix.length)\n\
    \        palindrome", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversePrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.findPalindrome\n   \
    \     val palindrome = palindromeSuffix + reversePrefix\n        palindrome",
  "        val (prefix, suffix) = string.splitAt(string.length - longestPalindromeSuffix(string))\n\
    \        prefix + prefix.reverse", "        val n = string.length\n        val\
    \ suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reverse = prefix.reverse\n        val palindrome = suffix\
    \ + reverse\n        if (palindrome.length == n) palindrome\n        else palindrome\
    \ + suffix.charAt(0)", "        def findLongestPalindrome(string : String) : String\
    \ = {\n            val reversed = string.reverse\n            val length = string.length\n\
    \            val table = Array.ofDim[Int](length, length)\n            for (i\
    \ <- 0 until length) {\n                for (j <- 0 until length) {\n        \
    \            if (string(i) == reversed(j)) {\n                        if (i ==\
    \ 0 || j == 0) table(i)(j) = 1\n                        else table(i)(j) = table(i\
    \ - 1)(j - 1) + 1\n                    }\n                }\n            }\n \
    \           var max = 0\n            var maxI = 0\n            for (i <- 0 until\
    \ length) {\n                if (table(i)(length - 1) > max) {\n             \
    \       max = table(i)(length - 1)\n                    maxI = i\n           \
    \     }\n            }\n            string.substring(maxI - max + 1, maxI + 1)\n\
    \        }\n        val longestPalindrome = findLongestPalindrome(string)\n  \
    \      val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse", "        // Find the longest palindromic suffix.\n\
    \        def findPalindromicSuffix(string : String) : String = {\n           \
    \ def findPalindromicSuffix(string : String, index : Int) : String = {\n     \
    \           if (index == 0) \"\"\n                else if (string.substring(0,\
    \ index) == string.substring(string.length - index, string.length)) string.substring(0,\
    \ index)\n                else findPalindromicSuffix(string, index - 1)\n    \
    \        }\n            findPalindromicSuffix(string, string.length)\n       \
    \ }\n        // Find the longest palindromic prefix.\n        def findPalindromicPrefix(string\
    \ : String) : String = {\n            def findPalindromicPrefix(string : String,\
    \ index : Int) : String = {\n                if (index == string.length) \"\"\n\
    \                else if (string.substring(0, index) == string.substring(string.length\
    \ - index, string.length)) string.substring(0, index)\n                else findPalindromicPrefix(string,\
    \ index + 1)\n            }\n            findPalindromicPrefix(string, 0)\n  \
    \      }\n        val palindromicSuffix = findPalindromicSuffix(string)\n    \
    \    val palindromicPrefix = findPalindromicPrefix(string)\n        if (palindromicSuffix.length\
    \ == string.length) string\n        else string + palindromicPrefix.reverse",
  "        var longestPalindrome = \"\"\n        for (i <- 0 to string.length) {\n\
    \            val suffix = string.substring(i)\n            if (isPalindrome(suffix))\
    \ {\n                longestPalindrome = suffix\n                break\n     \
    \       }\n        }\n        val prefix = string.substring(0, string.length -\
    \ longestPalindrome.length)\n        prefix + longestPalindrome + prefix.reverse",
  "        def findLongestPalindrome(string : String) : String = {\n            val\
    \ n = string.length\n            val palindrome = Array.ofDim[Boolean](n, n)\n\
    \            for (i <- 0 until n) palindrome(i)(i) = true\n            for (i\
    \ <- 0 until n - 1) palindrome(i)(i + 1) = string(i) == string(i + 1)\n      \
    \      for (k <- 2 until n) {\n                for (i <- 0 until n - k) {\n  \
    \                  palindrome(i)(i + k) = palindrome(i + 1)(i + k - 1) && string(i)\
    \ == string(i + k)\n                }\n            }\n            var longestPalindrome\
    \ = \"\"\n            for (i <- 0 until n) {\n                for (j <- i until\
    \ n) {\n                    if (palindrome(i)(j) && j - i + 1 > longestPalindrome.length)\
    \ longestPalindrome = string.substring(i, j + 1)\n                }\n        \
    \    }\n            longestPalindrome\n        }\n        val longestPalindrome\
    \ = findLongestPalindrome(string)\n        val prefix = string.substring(0, string.length\
    \ - longestPalindrome.length)\n        string + prefix.reverse", "        val\
    \ suffix = string.substring(string.length / 2)\n        val prefix = string.substring(0,\
    \ string.length / 2)\n        val reversedPrefix = prefix.reverse\n        val\
    \ palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n     \
    \   string + reversedPrefix.substring(palindromicSuffix.length)", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = longestPalindromeSuffix(suffix)\n        suffix\
    \ + reversedPrefix + palindromeSuffix", "        val n = string.length\n     \
    \   val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = findLongestPalindromeSuffix(suffix)\n        val palindrome = suffix + reversePrefix\
    \ + palindromeSuffix\n        palindrome", "        def findLongestPalindrome(string\
    \ : String) : String = {\n            def findPalindrome(string : String, start\
    \ : Int, end : Int) : String = {\n                if (start < 0 || end >= string.length)\
    \ return \"\"\n                if (string(start) != string(end)) return \"\"\n\
    \                val palindrome = string.substring(start, end + 1)\n         \
    \       if (palindrome.length == 1) palindrome\n                else findPalindrome(string,\
    \ start - 1, end + 1)\n            }\n            val palindromes = for (i <-\
    \ 0 until string.length) yield findPalindrome(string, i, i)\n            val palindromes2\
    \ = for (i <- 0 until string.length - 1) yield findPalindrome(string, i, i + 1)\n\
    \            val palindromes3 = palindromes ++ palindromes2\n            palindromes3.reduceLeft((x,\
    \ y) => if (x.length > y.length) x else y)\n        }\n        val longestPalindrome\
    \ = findLongestPalindrome(string)\n        val prefix = string.substring(0, string.length\
    \ - longestPalindrome.length)\n        string + prefix.reverse", "        val\
    \ longestPalindrome = longestPalindromePostfix(string)\n        val prefix = string.substring(0,\
    \ string.length - longestPalindrome.length)\n        prefix + string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reverse = prefix.reverse\n\
    \        val palindrome = suffix + reverse\n        palindrome", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        string + reversedPrefix.substring(palindromeSuffix.length)", " \
    \       val length = string.length\n        val reverse = string.reverse\n   \
    \     for (i <- 0 to length) {\n            val prefix = string.substring(0, length\
    \ - i)\n            val suffix = string.substring(length - i, length)\n      \
    \      if (prefix == reverse.substring(i, length)) return string + reverse.substring(0,\
    \ i)\n        }\n        return string", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindrome = suffix + prefix.reverse\n        palindrome",
  "        def isPalindrome(string : String) : Boolean = {\n            val length\
    \ = string.length\n            for (i <- 0 until length / 2) {\n             \
    \   if (string(i) != string(length - 1 - i)) return false\n            }\n   \
    \         return true\n        }\n        val length = string.length\n       \
    \ for (i <- length - 1 to 0 by -1) {\n            if (isPalindrome(string.substring(i)))\
    \ {\n                val prefix = string.substring(0, i)\n                return\
    \ string + prefix.reverse\n            }\n        }\n        return string", " \
    \       val prefix = string.substring(0, string.length - 1)\n        val suffix\
    \ = string.substring(string.length - 1)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindrome = suffix + reversedPrefix\n        palindrome", "    \
    \    val n = string.length\n        val suffix = new Array[Int](n)\n        var\
    \ i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \                j += 1\n            } else {\n                if (i == 0) {\n\
    \                    suffix(j) = 0\n                    j += 1\n             \
    \   } else {\n                    i = suffix(i - 1)\n                }\n     \
    \       }\n        }\n        val prefix = string.substring(0, n - suffix(n -\
    \ 1))\n        prefix + string + prefix.reverse", "        val n = string.length\n\
    \        val s = string + \"#\" + string.reverse\n        val lps = Array.fill(s.length)(0)\n\
    \        var i = 1\n        while (i < s.length) {\n            if (s(i) == s(lps(i\
    \ - 1))) lps(i) = lps(i - 1) + 1\n            else {\n                var j =\
    \ lps(i - 1)\n                while (j > 0 && s(i) != s(j)) j = lps(j - 1)\n \
    \               if (s(i) == s(j)) lps(i) = j + 1\n            }\n            i\
    \ += 1\n        }\n        string + string.reverse.substring(0, n - lps(s.length\
    \ - 1))", "        var longestPalindrome = \"\"\n        var longestPalindromeLength\
    \ = 0\n        for (i <- 0 to string.length) {\n            val substring = string.substring(i)\n\
    \            if (substring.length > longestPalindromeLength && substring.reverse\
    \ == substring) {\n                longestPalindrome = substring\n           \
    \     longestPalindromeLength = substring.length\n            }\n        }\n \
    \       string + string.substring(0, string.length - longestPalindromeLength).reverse",
  "        val length = string.length\n        val palindromeSuffix = (0 until length).find(i\
    \ => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n      \
    \  string + string.substring(0, length - palindromeSuffix).reverse", "       \
    \ val longestPalindromeSuffix = longestPalindromeSuffix(string)\n        val prefix\
    \ = string.substring(0, string.length - longestPalindromeSuffix.length)\n    \
    \    string + prefix.reverse", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = findLongestPalindrome(suffix)\n\
    \        val palindrome = suffix + reversedPrefix + palindromeSuffix\n       \
    \ palindrome", "        val longestPalindromeSuffix = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindromeSuffix.length)\n\
    \        prefix + string + reverse(prefix)", "        val suffix = string.reverse.dropWhile(c\
    \ => string.indexOf(c) == -1)\n        val prefix = string.dropRight(suffix.length)\n\
    \        string + prefix.reverse", "        val length = string.length\n     \
    \   val reversed = string.reverse\n        val suffix = string.substring(0, length\
    \ - 1)\n        val prefix = reversed.substring(0, length - 1)\n        val palindrome\
    \ = string + prefix\n        palindrome", "        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        string + prefix.reverse", "        val n = string.length\n        val\
    \ suffix = string.substring(n / 2)\n        val prefix = string.substring(0, n\
    \ / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(suffix.indexOf(reversePrefix))\n        string + reversePrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        // Find the longest postfix that is a palindrome.\n\
    \        var i = 0\n        while (i < n && string(i) == string(n - 1 - i)) i\
    \ += 1\n        // If the whole string is a palindrome, return it.\n        if\
    \ (i == n) return string\n        // Otherwise, append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n     \
    \   val prefix = string.substring(0, n - i)\n        val suffix = string.substring(n\
    \ - i)\n        prefix + suffix + prefix.reverse", "        val n = string.length\n\
    \        val s = string + \"#\" + string.reverse\n        val z = Array.fill(s.length)(0)\n\
    \        var l = 0; var r = 0\n        for (i <- 1 until s.length) {\n       \
    \     if (i > r) {\n                l = i; r = i\n                while (r < s.length\
    \ && s(r - l) == s(r)) r += 1\n                z(i) = r - l; r -= 1\n        \
    \    } else {\n                val k = i - l\n                if (z(k) < r - i\
    \ + 1) z(i) = z(k)\n                else {\n                    l = i;\n     \
    \               while (r < s.length && s(r - l) == s(r)) r += 1\n            \
    \        z(i) = r - l; r -= 1\n                }\n            }\n        }\n \
    \       string + string.substring(n - z(s.length - 1), n).reverse", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindrome = suffix + reversedPrefix\n        if (palindrome.length\
    \ == n) palindrome\n        else palindrome + string(n / 2)", "        val n =\
    \ string.length\n        val suffix = string.substring(n / 2)\n        val prefix\
    \ = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   val length = string.length\n        val reversed = string.reverse\n      \
    \  for (i <- length to 0 by -1) {\n            if (string.substring(0, i) == reversed.substring(length\
    \ - i)) return string + reversed.substring(0, length - i)\n        }\n       \
    \ return string + reversed.substring(0, length - 1)", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindrome\
    \ = suffix + reversedPrefix\n        val palindromeLength = palindrome.length\n\
    \        if (palindromeLength == n) palindrome\n        else if (palindromeLength\
    \ > n) palindrome.substring(0, n)\n        else palindrome + palindrome.substring(0,\
    \ n - palindromeLength)", "        val n = string.length\n        val suffix =\
    \ string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome", "        val n = string.length\n  \
    \      val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversePrefix) + 1)\n        string + reversePrefix.substring(palindromeSuffix.length)"]
stop_tokens:
- "\n    }\n"
