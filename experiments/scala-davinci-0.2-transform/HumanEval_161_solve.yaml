name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n \
  \   // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        val letters = s.filter(x => x.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(x => if (x.isUpper) x.toLower else x.toUpper).mkString",
  "        // Write your code here\n        var result = \"\"\n        if (s.exists(_.isLetter))\
    \ {\n            for (c <- s) {\n                if (c.isLetter) {\n         \
    \           if (c.isUpper) {\n                        result += c.toLower\n  \
    \                  } else {\n                        result += c.toUpper\n   \
    \                 }\n                } else {\n                    result += c\n\
    \                }\n            }\n        } else {\n            result = s.reverse\n\
    \        }\n        result", "        if (s.isEmpty) return s\n        val sb\
    \ = new StringBuilder\n        for (c <- s) {\n            if (c.isLetter) {\n\
    \                if (c.isUpper) sb.append(c.toLower)\n                else sb.append(c.toUpper)\n\
    \            } else sb.append(c)\n        }\n        if (sb.forall(!_.isLetter))\
    \ sb.reverse.toString\n        else sb.toString", "        if (s.exists(c => c.isLetter))\
    \ {\n            s.map(c => if (c.isLetter) c.toUpper.toLower else c)\n      \
    \  } else {\n            s.reverse\n        }", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        if (s.exists(c\
    \ => c.isLetter)) {\n            s.map(c => if (c.isLetter) c.toUpper.toLower\
    \ else c)\n        } else {\n            s.reverse\n        }", "        if (s.isEmpty)\
    \ return s\n        val sb = new StringBuilder\n        var isLetter = false\n\
    \        for (c <- s) {\n            if (c.isLetter) {\n                isLetter\
    \ = true\n                sb.append(c.toUpper)\n            } else {\n       \
    \         sb.append(c)\n            }\n        }\n        if (isLetter) return\
    \ sb.toString\n        else return sb.reverse.toString", "        if (s.exists(c\
    \ => c.isLetter)) {\n            s.map(c => if (c.isLetter) c.toUpper ^ c.toLower\
    \ else c).mkString\n        } else {\n            s.reverse\n        }", "   \
    \     val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else {\n            val sb = new StringBuilder\n            for (c <-\
    \ s) {\n                if (c.isLetter) {\n                    if (c.isUpper)\
    \ sb.append(c.toLower)\n                    else sb.append(c.toUpper)\n      \
    \          }\n                else sb.append(c)\n            }\n            sb.toString\n\
    \        }", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        val sb = new StringBuilder\n        var hasLetter = false\n  \
    \      for (c <- s) {\n            if (c.isLetter) {\n                hasLetter\
    \ = true\n                sb.append(c.toUpper)\n            } else {\n       \
    \         sb.append(c)\n            }\n        }\n        if (hasLetter) sb.toString\n\
    \        else sb.reverse.toString", "        var result = \"\"\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i).isLetter) {\n                if\
    \ (s(i).isUpper) result += s(i).toLower\n                else result += s(i).toUpper\n\
    \            }\n            else result += s(i)\n        }\n        if (result.length\
    \ == s.length) result.reverse\n        else result", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        val letters\
    \ = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString", " \
    \       if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toUpper.toLower else c)\n        } else {\n            s.reverse\n       \
    \ }", "        // Write your code here\n        return \"\"", "        val letters\
    \ = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString", " \
    \       val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString"]
stop_tokens:
- "\n    }\n"
