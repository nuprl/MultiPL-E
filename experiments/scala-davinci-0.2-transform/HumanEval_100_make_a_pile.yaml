name: HumanEval_100_make_a_pile
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, you have to make a pile of n levels of stones.\n\
  \    // The first level has n stones.\n    // The number of stones in the next level\
  \ is:\n    // - the next odd number if n is odd.\n    // - the next even number\
  \ if n is even.\n    // Return the number of stones in each level in a list, where\
  \ element at index\n    // i represents the number of stones in the level (i+1).\n\
  \    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
  \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
  \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
  \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
  \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var lst = List[Long]()\n        var m = n\n        while (m\
    \ > 0) {\n            lst = m :: lst\n            if (m % 2 == 0) m -= 1\n   \
    \         m /= 2\n        }\n        lst", "        var lst = List[Long]()\n \
    \       var i = n\n        while (i > 0) {\n            lst = i :: lst\n     \
    \       if (i % 2 == 0) i += 1 else i += 2\n        }\n        lst", "       \
    \ var l = List[Long]()\n        var i = n\n        while (i > 0) {\n         \
    \   l = i :: l\n            if (i % 2 == 0) i = i / 2\n            else i = i\
    \ / 2 + 1\n        }\n        l", "        var result = List[Long]()\n       \
    \ var x = n\n        while (x > 0) {\n            result = x :: result\n     \
    \       if (x % 2 == 0) x = x / 2 else x = x / 2 + 1\n        }\n        result",
  "        var levels = List[Long]()\n        var stones = n\n        while (stones\
    \ > 0) {\n            levels = stones :: levels\n            stones = if (stones\
    \ % 2 == 0) stones / 2 else stones / 2 + 1\n        }\n        levels", "    \
    \    var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var result = List[Long]()\n        var i = n\n        while (i > 0) {\n   \
    \         result = i :: result\n            i = if (i % 2 == 0) i / 2 else (i\
    \ + 1) / 2\n        }\n        result", "        val l = new ListBuffer[Long]\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            m\
    \ = if (m % 2 == 0) m + 1 else m + 2\n        }\n        l.toList", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current > 0)\
    \ {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var list = List[Long]()\n        var i = n\n        while (i > 0) {\n     \
    \       list = i :: list\n            if (i % 2 == 0) i += 1 else i += 2\n   \
    \     }\n        list", "        var result = List[Long]()\n        var stones\
    \ = n\n        while (stones > 0) {\n            result = stones :: result\n \
    \           stones = if (stones % 2 == 0) stones + 1 else stones + 2\n       \
    \ }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            current = if (current % 2 == 0) current + 1 else current + 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var cur\
    \ = n\n        while (cur > 0) {\n            result = cur :: result\n       \
    \     if (cur % 2 == 0) cur = cur / 2 - 1\n            else cur = cur / 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            current = if (current % 2 == 0) current + 1 else current + 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var i =\
    \ n\n        while (i > 0) {\n            result = i :: result\n            if\
    \ (i % 2 == 0) i = i + 1 else i = i + 2\n        }\n        result", "       \
    \ var l = List[Long]()\n        var m = n\n        while (m > 0) {\n         \
    \   l = m :: l\n            m = if (m % 2 == 0) m / 2 else (m + 1) / 2\n     \
    \   }\n        l", "        var result = List[Long]()\n        var level = n\n\
    \        while (level > 0) {\n            result = level :: result\n         \
    \   level = if (level % 2 == 0) level / 2 else (level + 1) / 2\n        }\n  \
    \      result", "        var result = List[Long]()\n        var current = n\n\
    \        while (current > 0) {\n            result = current :: result\n     \
    \       current = if (current % 2 == 0) current + 1 else current + 2\n       \
    \ }\n        result"]
stop_tokens:
- "\n    }\n"
