name: HumanEval_96_count_up_to
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement a function that takes an non-negative integer and returns an array\
  \ of the first n\n    // integers that are prime numbers and less than n.\n    //\
  \ for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong))\n\
  \    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n    // >>> countUpTo((20l))\n\
  \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
  \ 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n    // (List[Long]())\n\
  \    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def countUpTo(n : Long) :\
  \ List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
  \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
  \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
  \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
  \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
  \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
  \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
  \ 97l.toLong))));\n    }\n\n}\n"
completions: ["        if (n < 2) {\n            return List[Long]()\n        }\n\
    \        var primes = new ListBuffer[Long]()\n        var i = 2l\n        while\
    \ (i < n) {\n            if (isPrime(i)) {\n                primes += i\n    \
    \        }\n            i += 1\n        }\n        primes.toList", "        //\
    \ your code here\n        var result = List[Long]()\n        for (i <- 2l to n)\
    \ {\n            if (isPrime(i)) {\n                result = result :+ i\n   \
    \         }\n        }\n        result", "        // your code here\n        var\
    \ primes = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                primes = primes :+ i\n            }\n        }\n        primes",
  "        var primes = List[Long]()\n        var i = 2l\n        while (i < n) {\n\
    \            if (isPrime(i)) {\n                primes = primes :+ i\n       \
    \     }\n            i += 1\n        }\n        primes", "        // your code\
    \ here\n        var list = List[Long]()\n        for (i <- 2l to n) {\n      \
    \      if (isPrime(i)) {\n                list = list :+ i\n            }\n  \
    \      }\n        list", "        def isPrime(n : Long) : Boolean = {\n      \
    \      if (n <= 1) return false\n            if (n == 2) return true\n       \
    \     if (n % 2 == 0) return false\n            val sqrtN = sqrt(n).toLong\n \
    \           var i = 3\n            while (i <= sqrtN) {\n                if (n\
    \ % i == 0) return false\n                i += 2\n            }\n            return\
    \ true\n        }\n        var result = List[Long]()\n        var i = 2l\n   \
    \     while (i < n) {\n            if (isPrime(i)) result = result :+ i\n    \
    \        i += 1\n        }\n        return result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrtN\
    \ = sqrt(n).toLong\n            var i = 3l\n            while (i <= sqrtN) {\n\
    \                if (n % i == 0) return false\n                i += 2\n      \
    \      }\n            return true\n        }\n        var result = List[Long]()\n\
    \        var i = 2l\n        while (i < n) {\n            if (isPrime(i)) result\
    \ = i :: result\n            i += 1\n        }\n        return result", "    \
    \    if (n <= 1) return List[Long]()\n        var primes = new ListBuffer[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        primes.toList", "        var primes = new ListBuffer[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        primes.toList", "        if (n <= 1) {\n            return List[Long]()\n\
    \        }\n        var primes = ListBuffer[Long]()\n        for (i <- 2l to n)\
    \ {\n            if (isPrime(i)) {\n                primes += i\n            }\n\
    \        }\n        primes.toList", "        // your code here\n        var primes\
    \ = new ListBuffer[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                primes += i\n            }\n        }\n        primes.toList",
  "        // your code here\n        var result = List[Long]()\n        var i = 2l\n\
    \        while (i < n) {\n            if (isPrime(i)) {\n                result\
    \ = result :+ i\n            }\n            i += 1\n        }\n        result",
  "        if (n < 2) return List[Long]()\n        var primes = List[Long](2l)\n \
    \       var i = 3l\n        while (i < n) {\n            if (primes.forall(p =>\
    \ i % p != 0)) primes = primes :+ i\n            i += 2\n        }\n        primes",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrtN = sqrt(n).toLong\n            for (i <- 3l to sqrtN by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var result = List[Long]()\n        for (i\
    \ <- 2l to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n\
    \        return result", "        // Your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        var\
    \ result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        result", "        // your code here\n\
    \        var result = List[Long]()\n        for (i <- 2l to n) {\n           \
    \ if (isPrime(i)) {\n                result = result :+ i\n            }\n   \
    \     }\n        result", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        //\
    \ your code here\n        var primes = new ListBuffer[Long]()\n        for (i\
    \ <- 2l to n) {\n            if (isPrime(i)) {\n                primes += i\n\
    \            }\n        }\n        primes.toList", "        // your solution here\n\
    \        var list = List[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) {\n                list = list :+ i\n            }\n        }\n\
    \        list", "        var primes = new ListBuffer[Long]()\n        for (i <-\
    \ 2l to n) {\n            var isPrime = true\n            for (j <- 2l to (i -\
    \ 1)) {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  primes += i\n            }\n        }\n        primes.toList", "        //\
    \ your code here\n        var result = List[Long]()\n        var i = 2l\n    \
    \    while (i < n) {\n            if (isPrime(i)) {\n                result =\
    \ result :+ i\n            }\n            i += 1\n        }\n        result",
  "        if (n < 2) List[Long]()\n        else {\n            var primes = List[Long](2l)\n\
    \            for (i <- 3l to n) {\n                var isPrime = true\n      \
    \          for (j <- primes) {\n                    if (i % j == 0) {\n      \
    \                  isPrime = false\n                        break\n          \
    \          }\n                }\n                if (isPrime) primes = primes\
    \ :+ i\n            }\n            primes\n        }", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n <= 1) return false\n            if\
    \ (n == 2) return true\n            if (n % 2 == 0) return false\n           \
    \ val sqrtN = sqrt(n).toLong\n            for (i <- 3l to sqrtN by 2) {\n    \
    \            if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        val result = new ListBuffer[Long]\n        for (i <- 2l to\
    \ n) {\n            if (isPrime(i)) result += i\n        }\n        return result.toList",
  "        var result : List[Long] = List()\n        for (i <- 2l to n) {\n      \
    \      if (isPrime(i)) {\n                result = result :+ i\n            }\n\
    \        }\n        result", "        // your code here\n        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n <= 1) return false\n            if\
    \ (n == 2) return true\n            if (n % 2 == 0) return false\n           \
    \ val sqrtN = sqrt(n).toLong\n            for (i <- 3l to sqrtN by 2) {\n    \
    \            if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        var result = List[Long]()\n        for (i <- 2l to n) {\n\
    \            if (isPrime(i)) result = result :+ i\n        }\n        return result",
  "        // your code here\n        var list = List[Long]()\n        for (i <- 2\
    \ to n.toInt) {\n            if (isPrime(i)) {\n                list = list :+\
    \ i.toLong\n            }\n        }\n        list", "        // your code here\n\
    \        var list = List[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) list = list :+ i\n        }\n        list", "        if (n <= 1)\
    \ {\n            return List[Long]()\n        }\n        var primes = List[Long](2l)\n\
    \        var i = 3l\n        while (i < n) {\n            var isPrime = true\n\
    \            for (p <- primes) {\n                if (i % p == 0) {\n        \
    \            isPrime = false\n                    break\n                }\n \
    \           }\n            if (isPrime) {\n                primes = primes :+\
    \ i\n            }\n            i += 2\n        }\n        return primes", " \
    \       // your code here\n        var list = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                list = list :+ i\n\
    \            }\n        }\n        list", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n <= 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrtN = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrtN by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        // your code here\n\
    \        var result = List[Long]()\n        for (i <- 2l to n) {\n           \
    \ if (isPrime(i)) {\n                result = result :+ i\n            }\n   \
    \     }\n        result", "        if (n <= 1) return List[Long]()\n        var\
    \ primes = new ListBuffer[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        primes.toList", "        // your\
    \ code here\n        var result : List[Long] = List()\n        for (i <- 2l to\
    \ n) {\n            if (isPrime(i)) {\n                result = result :+ i\n\
    \            }\n        }\n        result", "        // Your code here\n     \
    \   var result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                result = result :+ i\n            }\n        }\n        result",
  "        // your code here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        if (n <= 1) {\n     \
    \       return List[Long]()\n        }\n        var primes = new ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i < n) {\n            if (isPrime(i)) {\n\
    \                primes += i\n            }\n            i += 1\n        }\n \
    \       return primes.toList", "        // your code here\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                result = result :+ i\n            }\n        }\n        result",
  "        // your code here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        // your code here\n \
    \       var l = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ l = l :+ i\n        }\n        l", "        // your code here\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                result = result :+ i\n            }\n        }\n        result",
  "        if (n <= 1) List()\n        else {\n            val primes = new ArrayBuffer[Long]\n\
    \            val isPrime = new Array[Boolean](n.toInt)\n            for (i <-\
    \ 0 until n.toInt) isPrime(i) = true\n            for (i <- 2 until n.toInt) {\n\
    \                if (isPrime(i)) {\n                    primes += i\n        \
    \            var j = i * i\n                    while (j < n.toInt) {\n      \
    \                  isPrime(j) = false\n                        j += i\n      \
    \              }\n                }\n            }\n            primes.toList\n\
    \        }", "        // Your code here\n        var list = List[Long]()\n   \
    \     for (i <- 2 to n.toInt) {\n            if (isPrime(i)) {\n             \
    \   list = list :+ i.toLong\n            }\n        }\n        list", "      \
    \  if (n == 0) return List[Long]()\n        var result = List[Long]()\n      \
    \  for (i <- 2l to n) {\n            if (isPrime(i)) result = result :+ i\n  \
    \      }\n        return result", "        // TODO: Implement this function.\n\
    \        // Hint: You can use the isPrime function you implemented in the previous\
    \ problem.\n        var result = List[Long]()\n        for (i <- 2l to n) {\n\
    \            if (isPrime(i)) {\n                result = result :+ i\n       \
    \     }\n        }\n        result", "        val primes = new ArrayBuffer[Long]\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        primes.toList", "        // your code here\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                result = result :+ i\n            }\n        }\n        result",
  "        if (n < 2) return List[Long]()\n        var primes = List[Long](2)\n  \
    \      var i = 3\n        while (i < n) {\n            if (primes.forall(i % _\
    \ != 0)) primes = primes :+ i\n            i += 2\n        }\n        primes",
  "        // your code here\n        return List[Long]()", "        // your code\
    \ here\n        var result = List[Long]()\n        for (i <- 2l to n) {\n    \
    \        if (isPrime(i)) {\n                result = result :+ i\n           \
    \ }\n        }\n        result", "        if (n < 2) return List[Long]()\n   \
    \     var primes = new ListBuffer[Long]()\n        for (i <- 2l to n) {\n    \
    \        if (isPrime(i)) primes += i\n        }\n        primes.toList", "   \
    \     def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrtN = sqrt(n).toLong\n            for (i <- 3l to sqrtN by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var result = List[Long]()\n        for (i\
    \ <- 2l to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n\
    \        return result", "        // Write your code here\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                result = result :+ i\n            }\n        }\n        result",
  "        // your code here\n        var list = List[Long]()\n        for (i <- 2l\
    \ to n) {\n            if (isPrime(i)) {\n                list = list :+ i\n \
    \           }\n        }\n        list", "        // Your code here\n        var\
    \ list = new ListBuffer[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) {\n                list += i\n            }\n        }\n      \
    \  list.toList", "        var result = List[Long]()\n        if (n < 2) {\n  \
    \          return result\n        }\n        var i = 2l\n        while (i < n)\
    \ {\n            if (isPrime(i)) {\n                result = result :+ i\n   \
    \         }\n            i += 1\n        }\n        return result", "        //\
    \ your code here\n        return List[Long]()", "        if (n < 2) return List[Long]()\n\
    \        val primes = new ArrayBuffer[Long]()\n        val isPrime = new Array[Boolean](n.toInt)\n\
    \        for (i <- 0 until n.toInt) isPrime(i) = true\n        for (i <- 2 until\
    \ n.toInt) {\n            if (isPrime(i)) {\n                primes += i\n   \
    \             for (j <- i until n.toInt by i) isPrime(j) = false\n           \
    \ }\n        }\n        primes.toList", "        if (n <= 1) return List[Long]()\n\
    \        var primes = new ListBuffer[Long]()\n        for (i <- 2l to n) {\n \
    \           if (isPrime(i)) primes += i\n        }\n        primes.toList", " \
    \       // your code here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        if (n <= 1) return List[Long]()\n\
    \        var primes = List[Long](2l)\n        var i = 3l\n        while (i < n)\
    \ {\n            if (primes.forall(i % _ != 0)) primes = primes :+ i\n       \
    \     i += 2\n        }\n        primes", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n <= 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            var i = 3\n           \
    \ while (i <= sqrt(n)) {\n                if (n % i == 0) return false\n     \
    \           i += 2\n            }\n            return true\n        }\n      \
    \  var result = List[Long]()\n        var i = 2\n        while (i < n) {\n   \
    \         if (isPrime(i)) result = result :+ i\n            i += 1\n        }\n\
    \        return result", "        def isPrime(n : Long) : Boolean = {\n      \
    \      if (n == 2) return true\n            if (n % 2 == 0) return false\n   \
    \         for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0)\
    \ return false\n            }\n            return true\n        }\n        var\
    \ result = List[Long]()\n        for (i <- 2 to n.toInt) {\n            if (isPrime(i))\
    \ result = result :+ i\n        }\n        return result", "        // your code\
    \ here\n        return List[Long]()", "        if (n == 0) return List[Long]()\n\
    \        if (n == 1) return List[Long]()\n        var primes = List[Long](2l)\n\
    \        var i = 3l\n        while (i < n) {\n            if (primes.forall(p\
    \ => i % p != 0)) primes = primes :+ i\n            i += 2\n        }\n      \
    \  primes", "        if (n == 0) {\n            return List[Long]()\n        }\n\
    \        if (n == 1) {\n            return List[Long]()\n        }\n        var\
    \ result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                result = result :+ i\n            }\n        }\n        return\
    \ result", "        if (n < 2) return List[Long]()\n        val primes = new ArrayBuffer[Long]()\n\
    \        primes += 2\n        var i = 3\n        while (i < n) {\n           \
    \ if (primes.forall(p => i % p != 0)) primes += i\n            i += 2\n      \
    \  }\n        primes.toList", "        // your code here\n        var result =\
    \ List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                result = result :+ i\n            }\n        }\n        result",
  "        // your code here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        if (n < 2) return List[Long]()\n\
    \        var primes = List[Long](2l)\n        var i = 3l\n        while (i < n)\
    \ {\n            var isPrime = true\n            for (p <- primes) {\n       \
    \         if (i % p == 0) {\n                    isPrime = false\n           \
    \         break\n                }\n            }\n            if (isPrime) primes\
    \ = primes :+ i\n            i += 2\n        }\n        primes", "        if (n\
    \ <= 1) return List[Long]()\n        var primes = new ListBuffer[Long]\n     \
    \   primes += 2\n        for (i <- 3 to n.toInt by 2) {\n            var isPrime\
    \ = true\n            for (j <- 0 to primes.length - 1) {\n                if\
    \ (i % primes(j) == 0) {\n                    isPrime = false\n              \
    \      break\n                }\n            }\n            if (isPrime) primes\
    \ += i\n        }\n        primes.toList", "        // your code here\n      \
    \  var list = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                list = list :+ i\n            }\n        }\n        list",
  "        // your code here\n        return List[Long]()", "        // your code\
    \ here\n        var l = List[Long]()\n        for (i <- 2l to n) {\n         \
    \   if (isPrime(i)) l = l :+ i\n        }\n        l", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            val\
    \ sqrtN = sqrt(n).toLong\n            for (i <- 3l to sqrtN by 2) {\n        \
    \        if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        val result = new ListBuffer[Long]\n        for (i <- 2l to\
    \ n) {\n            if (isPrime(i)) result += i\n        }\n        return result.toList",
  "        // your code here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        // your code here\n \
    \       var result = List[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) result = result :+ i\n        }\n        result", "        // your\
    \ code here\n        var result = new ListBuffer[Long]()\n        for (i <- 2l\
    \ to n) {\n            if (isPrime(i)) {\n                result += i\n      \
    \      }\n        }\n        result.toList", "        // your code here\n    \
    \    var result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                result = result :+ i\n            }\n        }\n        result",
  "        // your code here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        if (n <= 1) return List[Long]()\n\
    \        val primes = new ArrayBuffer[Long]()\n        for (i <- 2l to n) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        primes.toList", " \
    \       if (n <= 1) return List[Long]()\n        val primes = new ArrayBuffer[Long]()\n\
    \        primes += 2\n        var i = 3\n        while (i < n) {\n           \
    \ if (primes.forall(i % _ != 0)) primes += i\n            i += 2\n        }\n\
    \        primes.toList", "        var primes = new ListBuffer[Long]()\n      \
    \  for (i <- 2l to n) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        primes.toList", "        // your code here\n        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n <= 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrtN\
    \ = sqrt(n).toLong\n            for (i <- 3l to sqrtN by 2) {\n              \
    \  if (n % i == 0) return false\n            }\n            return true\n    \
    \    }\n        var result = List[Long]()\n        for (i <- 2l to n) {\n    \
    \        if (isPrime(i)) result = result :+ i\n        }\n        return result",
  "        var primes = List[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) primes = primes :+ i\n        }\n        primes", "        // your\
    \ code here\n        var result = List[Long]()\n        for (i <- 2l to n) {\n\
    \            if (isPrime(i)) {\n                result = result :+ i\n       \
    \     }\n        }\n        result", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            for (i <- 3l to sqrt(n).toLong by 2) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        if (n <= 1) return List[Long]()\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        // your code here\n        def\
    \ isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n     \
    \       if (n < 2 || n % 2 == 0) return false\n            for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = List[Long]()\n        for\
    \ (i <- 2l to n) {\n            if (isPrime(i)) result = result :+ i\n       \
    \ }\n        return result", "        if (n <= 1) return List[Long]()\n      \
    \  val primes = new ArrayBuffer[Long]()\n        val isPrime = new Array[Boolean](n.toInt)\n\
    \        for (i <- 0 until n.toInt) isPrime(i) = true\n        for (i <- 2 until\
    \ n.toInt) {\n            if (isPrime(i)) {\n                primes += i\n   \
    \             for (j <- i until n.toInt by i) isPrime(j) = false\n           \
    \ }\n        }\n        primes.toList", "        if (n <= 1) return List[Long]()\n\
    \        val primes = new ArrayBuffer[Long]()\n        primes += 2\n        for\
    \ (i <- 3l to n by 2) {\n            var isPrime = true\n            for (j <-\
    \ primes) {\n                if (i % j == 0) {\n                    isPrime =\
    \ false\n                    break\n                }\n            }\n       \
    \     if (isPrime) primes += i\n        }\n        primes.toList", "        //\
    \ your code here\n        var result = List[Long]()\n        for (i <- 2l to n)\
    \ {\n            if (isPrime(i)) {\n                result = result :+ i\n   \
    \         }\n        }\n        result", "        // your code here\n        var\
    \ result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                result = result :+ i\n            }\n        }\n        result",
  "        // your code here\n        var primes = new ListBuffer[Long]()\n      \
    \  for (i <- 2l to n) {\n            if (isPrime(i)) {\n                primes\
    \ += i\n            }\n        }\n        primes.toList", "        // your code\
    \ here\n        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return\
    \ false\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            var i = 3\n            while (i <= sqrt(n)) {\n         \
    \       if (n % i == 0) return false\n                i += 2\n            }\n\
    \            return true\n        }\n        var result = List[Long]()\n     \
    \   var i = 2l\n        while (i < n) {\n            if (isPrime(i)) result =\
    \ result :+ i\n            i += 1\n        }\n        return result", "      \
    \  // your code here\n        var result = List[Long]()\n        for (i <- 2l\
    \ to n) {\n            if (isPrime(i)) {\n                result = result :+ i\n\
    \            }\n        }\n        result", "        if (n <= 1) return List[Long]()\n\
    \        var primes = List[Long](2l)\n        var i = 3l\n        while (i < n)\
    \ {\n            if (primes.forall(p => i % p != 0)) primes = primes :+ i\n  \
    \          i += 2\n        }\n        primes", "        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        //\
    \ your code here\n        var result = List[Long]()\n        for (i <- 2l to n)\
    \ {\n            if (isPrime(i)) {\n                result = result :+ i\n   \
    \         }\n        }\n        result", "        if (n <= 1) return List()\n\
    \        var primes = List[Long]()\n        var i = 2l\n        while (i < n)\
    \ {\n            if (isPrime(i)) primes = primes :+ i\n            i += 1\n  \
    \      }\n        primes", "        def isPrime(n : Long) : Boolean = {\n    \
    \        if (n <= 1) return false\n            if (n == 2) return true\n     \
    \       if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n == 2) true\n            else if (n % 2 == 0)\
    \ false\n            else (3 to sqrt(n).toInt by 2).forall(n % _ != 0)\n     \
    \   }\n        (2l to n).filter(isPrime(_)).toList", "        def isPrime(n :\
    \ Long) : Boolean = {\n            if (n == 2) return true\n            if (n\
    \ % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n            for\
    \ (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return false\n   \
    \         }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        // your code here\n        return\
    \ null", "        // your code here\n        var result = List[Long]()\n     \
    \   for (i <- 2l to n) {\n            if (isPrime(i)) {\n                result\
    \ = result :+ i\n            }\n        }\n        result", "        if (n < 2)\
    \ return List[Long]()\n        var primes = List[Long](2l)\n        var i = 3l\n\
    \        while (i < n) {\n            if (primes.forall(i % _ != 0)) primes =\
    \ primes :+ i\n            i += 2\n        }\n        primes", "        var primes\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) primes\
    \ = primes :+ i\n        }\n        primes", "        // your code here\n    \
    \    var primes: List[Long] = List()\n        for (i <- 2l to n) {\n         \
    \   if (isPrime(i)) {\n                primes = primes :+ i\n            }\n \
    \       }\n        primes", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        var\
    \ primes = new ListBuffer[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        primes.toList", "        var primes\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) primes\
    \ = primes :+ i\n        }\n        primes", "        if (n < 2) return List[Long]()\n\
    \        var primes = new ListBuffer[Long]()\n        for (i <- 2l to n) {\n \
    \           if (isPrime(i)) primes += i\n        }\n        primes.toList", " \
    \       // your code here\n        var list = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                list = list :+ i\n\
    \            }\n        }\n        list", "        // your code here\n       \
    \ var primes = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ primes = primes :+ i\n        }\n        primes", "        // your code here\n\
    \        var result = List[Long]()\n        for (i <- 2l to n) {\n           \
    \ if (isPrime(i)) {\n                result = result :+ i\n            }\n   \
    \     }\n        result", "        // your code here\n        var lst = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ lst = lst :+ i\n            }\n        }\n        lst", "        var primes\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) primes\
    \ = primes :+ i\n        }\n        primes", "        // YOUR CODE HERE\n    \
    \    var result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                result = result :+ i\n            }\n        }\n        result",
  "        var primes = List[Long]()\n        var i = 2l\n        while (i < n) {\n\
    \            if (isPrime(i)) primes = primes :+ i\n            i += 1\n      \
    \  }\n        primes", "        // your code here\n        var l = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) l = l :+ i\n      \
    \  }\n        l", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        result", "        // your code here\n        var result\
    \ = List[Long]()\n        if (n == 0) {\n            return result\n        }\n\
    \        if (n == 1) {\n            return result\n        }\n        if (n ==\
    \ 2) {\n            result = result :+ 2\n            return result\n        }\n\
    \        if (n == 3) {\n            result = result :+ 2\n            result =\
    \ result :+ 3\n            return result\n        }\n        var i = 2\n     \
    \   while (i < n) {\n            var j = 2\n            var isPrime = true\n \
    \           while (j < i) {\n                if (i % j == 0) {\n             \
    \       isPrime = false\n                }\n                j = j + 1\n      \
    \      }\n            if (isPrime) {\n                result = result :+ i\n \
    \           }\n            i = i + 1\n        }\n        return result", "   \
    \     var primes = new ListBuffer[Long]\n        for (i <- 2l to n) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        primes.toList", "     \
    \   def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val limit = sqrt(n).toLong\n            for (i <- 3l to limit by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var result = List[Long]()\n        for (i\
    \ <- 2l to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n\
    \        return result", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        //\
    \ your code here\n        var list = List[Long]()\n        for (i <- 2l to n)\
    \ {\n            if (isPrime(i)) {\n                list = list :+ i\n       \
    \     }\n        }\n        list", "        var primes = ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        if (n\
    \ < 2) return List[Long]()\n        var primes = List[Long](2l)\n        for (i\
    \ <- 3l to n) {\n            if (primes.forall(i % _ != 0)) primes = primes :+\
    \ i\n        }\n        primes", "        // your code here\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                result = result :+ i\n            }\n        }\n        result",
  "        // your code here\n        List[Long]()", "        // your code here\n\
    \        var result = List[Long]()\n        for (i <- 2l to n) {\n           \
    \ if (isPrime(i)) result = result :+ i\n        }\n        result", "        //\
    \ your code here\n        var result = List[Long]()\n        for (i <- 2l to n)\
    \ {\n            if (isPrime(i)) {\n                result = result :+ i\n   \
    \         }\n        }\n        result", "        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        if\
    \ (n < 2) return List[Long]()\n        var primes = new ListBuffer[Long]()\n \
    \       var i = 2l\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n <= 1) return false\n            if\
    \ (n <= 3) return true\n            if (n % 2 == 0 || n % 3 == 0) return false\n\
    \            var i = 5\n            while (i * i <= n) {\n                if (n\
    \ % i == 0 || n % (i + 2) == 0) return false\n                i += 6\n       \
    \     }\n            return true\n        }\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        return result", "        // your code here\n        var\
    \ result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                result = result :+ i\n            }\n        }\n        result",
  "        if (n < 2) return List()\n        var primes = ListBuffer[Long]()\n   \
    \     var i = 2l\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        var l\
    \ : List[Long] = List()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                l = i :: l\n            }\n        }\n        l.reverse",
  "        if (n <= 1) return List[Long]()\n        var primes = List[Long](2)\n \
    \       var i = 3\n        while (i < n) {\n            if (primes.forall(i %\
    \ _ != 0)) primes = primes :+ i\n            i += 2\n        }\n        primes",
  "        var primes = new ListBuffer[Long]\n        for (i <- 2l to n) {\n     \
    \       if (isPrime(i)) primes += i\n        }\n        primes.toList", "    \
    \    // your code here\n        var result = List[Long]()\n        for (i <- 2l\
    \ to n) {\n            if (isPrime(i)) {\n                result = result :+ i\n\
    \            }\n        }\n        result", "        // your code here\n     \
    \   return List[Long]()", "        // your code here\n        def isPrime(n :\
    \ Long) : Boolean = {\n            if (n <= 1) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            val\
    \ sqrtN = sqrt(n).toLong\n            for (i <- 3l to sqrtN by 2) {\n        \
    \        if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        var result = List[Long]()\n        for (i <- 2l to n) {\n\
    \            if (isPrime(i)) result = result :+ i\n        }\n        return result",
  "        // your code here\n        var lst = List[Long]()\n        if (n == 0)\
    \ {\n            return lst\n        }\n        if (n == 1) {\n            return\
    \ lst\n        }\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                lst = lst :+ i\n            }\n        }\n        return lst",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrtN = sqrt(n).toLong\n            for (i <- 3l to sqrtN by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var result = List[Long]()\n        for (i\
    \ <- 2l to n) {\n            if (isPrime(i)) result = result :+ i\n        }\n\
    \        return result", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            var isPrime = true\n            for\
    \ (j <- 2l to sqrt(i).toLong) {\n                if (i % j == 0) {\n         \
    \           isPrime = false\n                }\n            }\n            if\
    \ (isPrime) {\n                result = result :+ i\n            }\n        }\n\
    \        result", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        //\
    \ Your code here\n        var result = List[Long]()\n        for (i <- 2l to n)\
    \ {\n            if (isPrime(i)) {\n                result = result :+ i\n   \
    \         }\n        }\n        result", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n <= 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrtN = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrtN by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        // your code here\n\
    \        var result = List[Long]()\n        for (i <- 2l to n) {\n           \
    \ if (isPrime(i)) {\n                result = result :+ i\n            }\n   \
    \     }\n        result", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        //\
    \ your code here\n        return null", "        var primes = new ListBuffer[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        primes.toList", "        // your code here\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                result = result :+ i\n            }\n        }\n        result",
  "        if (n < 2) return List[Long]()\n        val primes = new ArrayBuffer[Long]()\n\
    \        primes += 2\n        for (i <- 3l to n by 2) {\n            if (primes.forall(i\
    \ % _ != 0)) primes += i\n        }\n        primes.toList", "        // your\
    \ code here\n        var list = new ListBuffer[Long]()\n        for (i <- 2l to\
    \ n) {\n            if (isPrime(i)) {\n                list += i\n           \
    \ }\n        }\n        list.toList", "        if (n < 2) return List[Long]()\n\
    \        var primes = List[Long](2)\n        for (i <- 3l to n by 2) {\n     \
    \       if (primes.forall(i % _ != 0)) primes = primes :+ i\n        }\n     \
    \   primes", "        if (n < 2)\n            return List()\n        var primes\
    \ = ListBuffer[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\n\
    \                primes += i\n        }\n        primes.toList", "        if (n\
    \ <= 1) return List[Long]()\n        var primes = new ListBuffer[Long]()\n   \
    \     for (i <- 2l to n) {\n            var isPrime = true\n            for (j\
    \ <- 2l to sqrt(i).toLong) {\n                if (i % j == 0) {\n            \
    \        isPrime = false\n                    break\n                }\n     \
    \       }\n            if (isPrime) primes += i\n        }\n        primes.toList",
  "        // Your Code Here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        if (n < 2) return List[Long]()\n\
    \        var primes = List[Long](2l)\n        var i = 3l\n        while (i < n)\
    \ {\n            if (primes.forall(i % _ != 0)) primes = primes :+ i\n       \
    \     i += 2\n        }\n        primes", "        // your code here\n       \
    \ var result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                result = result :+ i\n            }\n        }\n        result",
  "        if (n <= 1) return List[Long]()\n        var primes = List[Long](2)\n \
    \       for (i <- 3l to n) {\n            if (primes.forall(i % _ != 0)) primes\
    \ = primes :+ i\n        }\n        primes", "        var primes = new ListBuffer[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        primes.toList", "        // your code here\n        return List[Long]()",
  "        // your code here\n        var primes = ListBuffer[Long]()\n        for\
    \ (i <- 2l to n) {\n            if (isPrime(i)) primes += i\n        }\n     \
    \   primes.toList", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        //\
    \ your code here\n        return List[Long]()", "        // your code here\n \
    \       var result = List[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) {\n                result = result :+ i\n            }\n      \
    \  }\n        result", "        // your code here\n        var result = List[Long]()\n\
    \        if (n == 0) return result\n        for (i <- 2l to n) {\n           \
    \ if (isPrime(i)) result = result :+ i\n        }\n        result", "        //\
    \ your code here\n        var list = List[Long]()\n        for (i <- 2l to n)\
    \ {\n            if (isPrime(i)) {\n                list = list :+ i\n       \
    \     }\n        }\n        list", "        // your code here\n        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            val\
    \ sqrt = math.sqrt(n).toLong\n            for (i <- 3l to sqrt by 2) {\n     \
    \           if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        var result = List[Long]()\n        for (i <- 2l to n) {\n\
    \            if (isPrime(i)) result = result :+ i\n        }\n        return result",
  "        def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val upper = sqrt(n).toLong\n\
    \            for (i <- 3l to upper by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        // your code here\n\
    \        var l = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ l = l :+ i\n        }\n        l", "        // your code here\n        var l\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) l\
    \ = l :+ i\n        }\n        l", "        // your code here\n        var list\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                list = list :+ i\n            }\n        }\n        list", " \
    \       var result = List[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) {\n                result = result :+ i\n            }\n      \
    \  }\n        result", "        // your code here\n        null", "        if\
    \ (n <= 1) return List[Long]()\n        var primes = List[Long](2l)\n        var\
    \ i = 3l\n        while (i < n) {\n            if (primes.forall(p => i % p !=\
    \ 0)) primes = primes :+ i\n            i += 2\n        }\n        primes", " \
    \       // your code here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        // your code here\n \
    \       var result = List[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) {\n                result = result :+ i\n            }\n      \
    \  }\n        result", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        //\
    \ your code here\n        var result = List[Long]()\n        for (i <- 2l to n)\
    \ {\n            if (isPrime(i)) {\n                result = result :+ i\n   \
    \         }\n        }\n        result", "        // your code here\n        var\
    \ result = List[Long]()\n        if (n < 2) return result\n        var i = 2l\n\
    \        while (i < n) {\n            if (isPrime(i)) result = result :+ i\n \
    \           i += 1\n        }\n        result", "        // your code here\n \
    \       var result = List[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) {\n                result = result :+ i\n            }\n      \
    \  }\n        result", "        // your code here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        var\
    \ result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                result = result :+ i\n            }\n        }\n        result",
  "        // Your code here\n        var list = List[Long]()\n        for (i <- 2l\
    \ to n) {\n            if (isPrime(i)) list = list :+ i\n        }\n        list",
  "        // your code here\n        def isPrime(n : Long) : Boolean = {\n      \
    \      if (n < 2) false\n            else if (n == 2) true\n            else !(2\
    \ until n).exists(x => n % x == 0)\n        }\n        (2l to n).filter(isPrime).toList",
  "        // your code here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        // your code here\n \
    \       var result = List[Long]()\n        for (i <- 2l to n) {\n            if\
    \ (isPrime(i)) {\n                result = result :+ i\n            }\n      \
    \  }\n        result", "        // your solution here\n        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) {\n               \
    \ result = result :+ i\n            }\n        }\n        result", "        if\
    \ (n == 0) {\n            return List[Long]()\n        }\n        var result =\
    \ List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                result = result :+ i\n            }\n        }\n        return\
    \ result", "        if (n < 2) return List[Long]()\n        var primes = new ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i < n) {\n            if (isPrime(i)) primes\
    \ += i\n            i += 1\n        }\n        primes.toList", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n <= 1) return false\n            if\
    \ (n == 2) return true\n            if (n % 2 == 0) return false\n           \
    \ var i = 3\n            while (i <= sqrt(n)) {\n                if (n % i ==\
    \ 0) return false\n                i += 2\n            }\n            return true\n\
    \        }\n        var result = List[Long]()\n        var i = 2l\n        while\
    \ (i < n) {\n            if (isPrime(i)) result = result :+ i\n            i +=\
    \ 1\n        }\n        return result", "        // your code here\n        var\
    \ result = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ {\n                result = result :+ i\n            }\n        }\n        result",
  "        var l = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ l = l :+ i\n        }\n        l", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            val sqrt = math.sqrt(n).toLong\n            for (i <- 3l\
    \ to sqrt by 2) {\n                if (n % i == 0) return false\n            }\n\
    \            return true\n        }\n        var result = List[Long]()\n     \
    \   for (i <- 2l to n) {\n            if (isPrime(i)) result = result :+ i\n \
    \       }\n        return result", "        // your code here\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) {\n\
    \                result = result :+ i\n            }\n        }\n        result",
  "        var primes = new ListBuffer[Long]()\n        for (i <- 2l to n) {\n   \
    \         if (isPrime(i)) primes += i\n        }\n        primes.toList", "  \
    \      // your code here\n        if (n < 2) {\n            return List()\n  \
    \      }\n        val primes = new ListBuffer[Long]()\n        primes += 2\n \
    \       var i = 3\n        while (i < n) {\n            var isPrime = true\n \
    \           for (p <- primes) {\n                if (i % p == 0) {\n         \
    \           isPrime = false\n                    break\n                }\n  \
    \          }\n            if (isPrime) {\n                primes += i\n      \
    \      }\n            i += 2\n        }\n        primes.toList"]
stop_tokens:
- "\n    }\n"
