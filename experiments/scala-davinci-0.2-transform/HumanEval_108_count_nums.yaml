name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    // (0l)\n\
  \    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    //\
  \ (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n  \
  \  // (3l)\n    def countNums(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ["        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n\
    \            var nn = abs(n)\n            while (nn > 0) {\n                sum\
    \ += nn % 10\n                nn /= 10\n            }\n            sum\n     \
    \   }\n        var count = 0l\n        for (n <- arr) {\n            if (sumDigits(n)\
    \ > 0) count += 1\n        }\n        count", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0\n        for (i <- arr) {\n            if (i < 0) {\n        \
    \        if (i.toString.length == 1) {\n                    count += 1\n     \
    \           } else {\n                    var sum = 0\n                    for\
    \ (j <- 1 until i.toString.length) {\n                        sum += i.toString.charAt(j).asDigit\n\
    \                    }\n                    if (sum > 0) {\n                 \
    \       count += 1\n                    }\n                }\n            } else\
    \ {\n                var sum = 0\n                for (j <- 0 until i.toString.length)\
    \ {\n                    sum += i.toString.charAt(j).asDigit\n               \
    \ }\n                if (sum > 0) {\n                    count += 1\n        \
    \        }\n            }\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var nn = n\n     \
    \       while (nn != 0) {\n                sum += nn % 10\n                nn\
    \ /= 10\n            }\n            return sum\n        }\n        var count =\
    \ 0l\n        for (i <- 0 until arr.length) {\n            if (sumDigits(arr(i))\
    \ > 0) count += 1\n        }\n        return count", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      while (m != 0) {\n                sum += abs(m % 10)\n                m\
    \ /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        var count = 0l\n        for (i <- arr) {\n          \
    \  var sum = 0l\n            var j = i\n            if (j < 0) j = -j\n      \
    \      while (j > 0) {\n                sum += j % 10\n                j /= 10\n\
    \            }\n            if (sum > 0) count += 1\n        }\n        count",
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size', "      \
    \  def count(n : Long) : Long = {\n            if (n == 0) 0\n            else\
    \ n % 10 + count(n / 10)\n        }\n        arr.filter(x => count(x) > 0).length",
  "        var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n  \
    \          var x = i\n            if (x < 0) x = -x\n            while (x > 0)\
    \ {\n                sum += x % 10\n                x /= 10\n            }\n \
    \           if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => abs(x.asDigit)).sum > 0).size', "        def sumDigits(n\
    \ : Long) : Long = {\n            var m = n\n            var sum = 0l\n      \
    \      while (m != 0) {\n                sum += abs(m % 10)\n                m\
    \ /= 10\n            }\n            sum\n        }\n        var count = 0l\n \
    \       for (n <- arr) {\n            if (sumDigits(n) > 0) count += 1\n     \
    \   }\n        count", "        def countNumsHelper(arr : List[Long], acc : Long)\
    \ : Long = {\n            if (arr.isEmpty) acc\n            else {\n         \
    \       val sum = arr.head.abs.toString.map(_.asDigit).sum\n                if\
    \ (sum > 0) countNumsHelper(arr.tail, acc + 1)\n                else countNumsHelper(arr.tail,\
    \ acc)\n            }\n        }\n        countNumsHelper(arr, 0)", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0\n        for (i <- arr) {\n            var sum = 0\n         \
    \   if (i < 0) {\n                var j = i.abs\n                while (j > 0)\
    \ {\n                    sum += j % 10\n                    j /= 10\n        \
    \        }\n                sum += 1\n            } else {\n                var\
    \ j = i\n                while (j > 0) {\n                    sum += j % 10\n\
    \                    j /= 10\n                }\n            }\n            if\
    \ (sum > 0) count += 1\n        }\n        count", "        val n = arr.length\n\
    \        var count = 0\n        for (i <- 0 until n) {\n            var num =\
    \ arr(i)\n            var sum = 0\n            while (num != 0) {\n          \
    \      sum += abs(num % 10)\n                num /= 10\n            }\n      \
    \      if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0\n        for (i <- arr) {\n            var sum = 0\n         \
    \   var n = i\n            if (n < 0) n = -n\n            while (n > 0) {\n  \
    \              sum += n % 10\n                n /= 10\n            }\n       \
    \     if (sum > 0) count += 1\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      if (m < 0) m = -m\n            while (m > 0) {\n                sum +=\
    \ m % 10\n                m /= 10\n            }\n            sum\n        }\n\
    \        arr.map(sumDigits(_)).filter(_ > 0).length", "        var count = 0l\n\
    \        for (i <- arr) {\n            if (i < 0) {\n                if (i.toString.tail.map(_.asDigit).sum\
    \ + 1 > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else {\n                val\
    \ absN = abs(n)\n                val lastDigit = absN % 10\n                val\
    \ remaining = absN / 10\n                lastDigit + sumDigits(remaining)\n  \
    \          }\n        }\n        arr.filter(sumDigits(_) > 0).length"]
stop_tokens:
- "\n    }\n"
