name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    // (0l)\n\
  \    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    //\
  \ (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n  \
  \  // (3l)\n    def countNums(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ["        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n\
    \            var nn = abs(n)\n            while (nn > 0) {\n                sum\
    \ += nn % 10\n                nn /= 10\n            }\n            sum\n     \
    \   }\n        var count = 0l\n        for (n <- arr) {\n            if (sumDigits(n)\
    \ > 0) count += 1\n        }\n        count", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0\n        for (i <- arr) {\n            if (i < 0) {\n        \
    \        if (i.toString.length == 1) {\n                    count += 1\n     \
    \           } else {\n                    var sum = 0\n                    for\
    \ (j <- 1 until i.toString.length) {\n                        sum += i.toString.charAt(j).asDigit\n\
    \                    }\n                    if (sum > 0) {\n                 \
    \       count += 1\n                    }\n                }\n            } else\
    \ {\n                var sum = 0\n                for (j <- 0 until i.toString.length)\
    \ {\n                    sum += i.toString.charAt(j).asDigit\n               \
    \ }\n                if (sum > 0) {\n                    count += 1\n        \
    \        }\n            }\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var nn = n\n     \
    \       while (nn != 0) {\n                sum += nn % 10\n                nn\
    \ /= 10\n            }\n            return sum\n        }\n        var count =\
    \ 0l\n        for (i <- 0 until arr.length) {\n            if (sumDigits(arr(i))\
    \ > 0) count += 1\n        }\n        return count", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      while (m != 0) {\n                sum += abs(m % 10)\n                m\
    \ /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        var count = 0l\n        for (i <- arr) {\n          \
    \  var sum = 0l\n            var j = i\n            if (j < 0) j = -j\n      \
    \      while (j > 0) {\n                sum += j % 10\n                j /= 10\n\
    \            }\n            if (sum > 0) count += 1\n        }\n        count",
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size', "      \
    \  def count(n : Long) : Long = {\n            if (n == 0) 0\n            else\
    \ n % 10 + count(n / 10)\n        }\n        arr.filter(x => count(x) > 0).length",
  "        var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n  \
    \          var x = i\n            if (x < 0) x = -x\n            while (x > 0)\
    \ {\n                sum += x % 10\n                x /= 10\n            }\n \
    \           if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => abs(x.asDigit)).sum > 0).size', "        def sumDigits(n\
    \ : Long) : Long = {\n            var m = n\n            var sum = 0l\n      \
    \      while (m != 0) {\n                sum += abs(m % 10)\n                m\
    \ /= 10\n            }\n            sum\n        }\n        var count = 0l\n \
    \       for (n <- arr) {\n            if (sumDigits(n) > 0) count += 1\n     \
    \   }\n        count", "        def countNumsHelper(arr : List[Long], acc : Long)\
    \ : Long = {\n            if (arr.isEmpty) acc\n            else {\n         \
    \       val sum = arr.head.abs.toString.map(_.asDigit).sum\n                if\
    \ (sum > 0) countNumsHelper(arr.tail, acc + 1)\n                else countNumsHelper(arr.tail,\
    \ acc)\n            }\n        }\n        countNumsHelper(arr, 0)", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0\n        for (i <- arr) {\n            var sum = 0\n         \
    \   if (i < 0) {\n                var j = i.abs\n                while (j > 0)\
    \ {\n                    sum += j % 10\n                    j /= 10\n        \
    \        }\n                sum += 1\n            } else {\n                var\
    \ j = i\n                while (j > 0) {\n                    sum += j % 10\n\
    \                    j /= 10\n                }\n            }\n            if\
    \ (sum > 0) count += 1\n        }\n        count", "        val n = arr.length\n\
    \        var count = 0\n        for (i <- 0 until n) {\n            var num =\
    \ arr(i)\n            var sum = 0\n            while (num != 0) {\n          \
    \      sum += abs(num % 10)\n                num /= 10\n            }\n      \
    \      if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0\n        for (i <- arr) {\n            var sum = 0\n         \
    \   var n = i\n            if (n < 0) n = -n\n            while (n > 0) {\n  \
    \              sum += n % 10\n                n /= 10\n            }\n       \
    \     if (sum > 0) count += 1\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      if (m < 0) m = -m\n            while (m > 0) {\n                sum +=\
    \ m % 10\n                m /= 10\n            }\n            sum\n        }\n\
    \        arr.map(sumDigits(_)).filter(_ > 0).length", "        var count = 0l\n\
    \        for (i <- arr) {\n            if (i < 0) {\n                if (i.toString.tail.map(_.asDigit).sum\
    \ + 1 > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else {\n                val\
    \ absN = abs(n)\n                val lastDigit = absN % 10\n                val\
    \ remaining = absN / 10\n                lastDigit + sumDigits(remaining)\n  \
    \          }\n        }\n        arr.filter(sumDigits(_) > 0).length", "     \
    \   def sumDigits(n : Long) : Long = {\n            if (n == 0) 0\n          \
    \  else {\n                val absN = abs(n)\n                val lastDigit =\
    \ absN % 10\n                val remainingDigits = absN / 10\n               \
    \ lastDigit + sumDigits(remainingDigits)\n            }\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        var count = 0l\n        for (i <- arr) {\n          \
    \  var sum = 0l\n            var j = i\n            while (j != 0) {\n       \
    \         sum += j % 10\n                j /= 10\n            }\n            if\
    \ (sum > 0) count += 1\n        }\n        count", "        var count = 0l\n \
    \       for (i <- arr) {\n            if (i < 0) {\n                if (i.toString.tail.map(_.asDigit).sum\
    \ + 1 > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var count = 0l\n        for (i <- arr) {\n            if (i < 0) {\n\
    \                if (i.toString.tail.map(_.asDigit).sum + 1 > 0) count += 1\n\
    \            } else {\n                if (i.toString.map(_.asDigit).sum > 0)\
    \ count += 1\n            }\n        }\n        count", "        var count = 0l\n\
    \        for (i <- arr) {\n            var sum = 0l\n            var num = i\n\
    \            if (num < 0) num = -num\n            while (num > 0) {\n        \
    \        sum += num % 10\n                num /= 10\n            }\n         \
    \   if (sum > 0) count += 1\n        }\n        count", "        def countNums(arr\
    \ : List[Long], acc : Long) : Long = {\n            if (arr.isEmpty) acc\n   \
    \         else {\n                val num = arr.head\n                val sum\
    \ = if (num < 0) num.toString.tail.map(_.asDigit).sum + 1 else num.toString.map(_.asDigit).sum\n\
    \                countNums(arr.tail, if (sum > 0) acc + 1 else acc)\n        \
    \    }\n        }\n        countNums(arr, 0)", "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else abs(n % 10) + sumDigits(n\
    \ / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length", "        var\
    \ count = 0l\n        for (i <- arr) {\n            var sum = 0l\n           \
    \ var n = i\n            if (n < 0) n = -n\n            while (n > 0) {\n    \
    \            sum += n % 10\n                n /= 10\n            }\n         \
    \   if (sum > 0) count += 1\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            if (n == 0) 0\n            else abs(n % 10)\
    \ + sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length",
  '        return arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  "        def sumDigits(n : Long) : Long = {\n            if (n == 0) 0\n       \
    \     else if (n < 0) -n % 10 + sumDigits(-n / 10)\n            else n % 10 +\
    \ sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length",
  "        def sumDigits(n : Long) : Long = {\n            if (n == 0) 0\n       \
    \     else abs(n % 10) + sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        var count = 0l\n        for (i <- arr) {\n          \
    \  if (i < 0) {\n                if (i.toString.tail.map(x => x.asDigit).sum +\
    \ 1 > 0) count += 1\n            } else {\n                if (i.toString.map(x\
    \ => x.asDigit).sum > 0) count += 1\n            }\n        }\n        count",
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        var count = 0l\n  \
    \      for (i <- arr) {\n            if (i < 0) {\n                if (i.toString.tail.map(_.asDigit).sum\
    \ > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            if (n == 0) 0\n            else {\n        \
    \        val d = n % 10\n                if (d < 0) -d else d\n            } +\
    \ sumDigits(n / 10)\n        }\n        arr.map(sumDigits(_)).filter(_ > 0).length",
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n \
    \               sum += m % 10\n                m /= 10\n            }\n      \
    \      sum\n        }\n        arr.map(sumDigits(_)).filter(_ > 0).length", " \
    \       def sumDigits(n : Long) : Long = {\n            var sum = 0l\n       \
    \     var m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n\
    \                sum += m % 10\n                m /= 10\n            }\n     \
    \       sum\n        }\n        var count = 0l\n        for (n <- arr) {\n   \
    \         if (sumDigits(n) > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.split("").map(_.toLong).sum > 0).length', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        val arr2 = arr.map(x\
    \ => if (x < 0) -x else x)\n        val arr3 = arr2.map(x => x.toString.map(y\
    \ => y.asDigit).sum)\n        arr3.count(x => x > 0)", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      while (m != 0) {\n                sum += m % 10\n                m /= 10\n\
    \            }\n            sum\n        }\n        arr.filter(sumDigits(_) >\
    \ 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).size', "        var count = 0l\n  \
    \      for (i <- arr) {\n            if (i < 0) {\n                if (i.toString.length\
    \ == 1) count += 1\n                else {\n                    var sum = 0\n\
    \                    for (j <- 1 until i.toString.length) {\n                \
    \        sum += i.toString.charAt(j).asDigit\n                    }\n        \
    \            if (sum > 0) count += 1\n                }\n            }\n     \
    \       else {\n                var sum = 0\n                for (j <- 0 until\
    \ i.toString.length) {\n                    sum += i.toString.charAt(j).asDigit\n\
    \                }\n                if (sum > 0) count += 1\n            }\n \
    \       }\n        count", '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).size', "        // Write your code here\n        0", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = abs(n)\n \
    \           while (m > 0) {\n                sum += m % 10\n                m\
    \ /= 10\n            }\n            sum\n        }\n        var count = 0l\n \
    \       for (n <- arr) {\n            if (sumDigits(n) > 0) count += 1\n     \
    \   }\n        count", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var count = 0\n     \
    \   for (i <- arr) {\n            var sum = 0\n            if (i < 0) {\n    \
    \            sum += i.abs.toString.head.asDigit\n            }\n            for\
    \ (j <- i.abs.toString) {\n                sum += j.asDigit\n            }\n \
    \           if (sum > 0) {\n                count += 1\n            }\n      \
    \  }\n        count", '        arr.filter(x => x.toString.map(x => abs(x.asDigit)).sum
    > 0).size', "        def sumDigits(n : Long) : Long = {\n            var sum =\
    \ 0l\n            var m = abs(n)\n            while (m > 0) {\n              \
    \  sum += m % 10\n                m /= 10\n            }\n            sum\n  \
    \      }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).size', "        def count(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else n % 10 + count(n / 10)\n\
    \        }\n        arr.filter(n => count(n) > 0).length", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = abs(n)\n \
    \           while (m > 0) {\n                sum += m % 10\n                m\
    \ /= 10\n            }\n            sum\n        }\n        var count = 0l\n \
    \       for (n <- arr) {\n            if (sumDigits(n) > 0) count += 1\n     \
    \   }\n        count", "        var count = 0l\n        for (i <- arr) {\n   \
    \         var sum = 0l\n            var j = i\n            if (j < 0) j = -j\n\
    \            while (j > 0) {\n                sum += j % 10\n                j\
    \ /= 10\n            }\n            if (sum > 0) count += 1\n        }\n     \
    \   count", "        var count = 0l\n        for (i <- arr) {\n            if\
    \ (i < 0) {\n                var sum = 0l\n                var temp = i\n    \
    \            while (temp != 0) {\n                    sum += temp % 10\n     \
    \               temp /= 10\n                }\n                if (sum < 0) count\
    \ += 1\n            } else {\n                var sum = 0l\n                var\
    \ temp = i\n                while (temp != 0) {\n                    sum += temp\
    \ % 10\n                    temp /= 10\n                }\n                if\
    \ (sum > 0) count += 1\n            }\n        }\n        count", '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).size', "        var count = 0l\n  \
    \      for (i <- arr) {\n            var sum = 0l\n            var num = i\n \
    \           if (num < 0) num = -num\n            while (num > 0) {\n         \
    \       sum += num % 10\n                num /= 10\n            }\n          \
    \  if (sum > 0) count += 1\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            if (n == 0) 0\n            else {\n        \
    \        val d = n % 10\n                if (d < 0) -d else d\n            } +\
    \ sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length",
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size', "      \
    \  val digits = arr.map(x => x.toString.map(x => x.asDigit).sum)\n        digits.count(x\
    \ => x > 0)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        def sumDigits(n : Long) : Long = {\n\
    \            var sum = 0l\n            var x = n\n            if (x < 0) x = -x\n\
    \            while (x > 0) {\n                sum += x % 10\n                x\
    \ /= 10\n            }\n            sum\n        }\n        var count = 0l\n \
    \       for (i <- arr) if (sumDigits(i) > 0) count += 1\n        count", "   \
    \     def sumDigits(n : Long) : Long = {\n            var sum = 0l\n         \
    \   var m = n\n            while (m != 0) {\n                sum += abs(m % 10)\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        def countNums(arr : List[Long], acc : Long) : Long =\
    \ {\n            arr match {\n                case Nil => acc\n              \
    \  case x :: xs => {\n                    val sum = if (x < 0) x.toString.tail.map(_.asDigit).sum\
    \ + 1 else x.toString.map(_.asDigit).sum\n                    countNums(xs, if\
    \ (sum > 0) acc + 1 else acc)\n                }\n            }\n        }\n \
    \       countNums(arr, 0)", '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        arr.filter(x => x.toString.map(_.asDigit).sum\
    \ > 0).length", "        // Fill up this function body\n        // 'arr' is a\
    \ list of integers\n        // 'return' the number of elements which has a sum\
    \ of digits > 0\n        var count = 0\n        for (i <- arr) {\n           \
    \ var sum = 0\n            var j = i\n            if (j < 0) j = -j\n        \
    \    while (j > 0) {\n                sum += j % 10\n                j /= 10\n\
    \            }\n            if (sum > 0) count += 1\n        }\n        count",
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var x = n\n            if (x < 0) x = -x\n            while (x > 0) {\n \
    \               sum += x % 10\n                x /= 10\n            }\n      \
    \      sum\n        }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        def countNums(arr :\
    \ List[Long], acc : Long) : Long = {\n            if (arr.isEmpty) acc\n     \
    \       else {\n                val x = arr.head\n                val sum = if\
    \ (x < 0) -x else x\n                val digits = sum.toString.map(_.asDigit).sum\n\
    \                countNums(arr.tail, if (digits > 0) acc + 1 else acc)\n     \
    \       }\n        }\n        countNums(arr, 0)", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', "        def sum(n : Long) : Long = {\n        \
    \    var s = 0l\n            var m = n\n            if (m < 0) m = -m\n      \
    \      while (m > 0) {\n                s += m % 10\n                m /= 10\n\
    \            }\n            s\n        }\n        var c = 0l\n        for (n <-\
    \ arr) {\n            if (sum(n) > 0) c += 1\n        }\n        c", "       \
    \ // Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var count = 0l\n        for (i <- arr) {\n            var\
    \ sum = 0l\n            var num = i\n            if (num < 0) num = -num\n   \
    \         while (num > 0) {\n                sum += num % 10\n               \
    \ num /= 10\n            }\n            if (sum > 0) count += 1\n        }\n \
    \       count", "        var count = 0l\n        for (i <- arr) {\n          \
    \  if (i < 0) {\n                var sum = 0l\n                var temp = i\n\
    \                while (temp != 0) {\n                    sum += temp % 10\n \
    \                   temp /= 10\n                }\n                if (sum < 0)\
    \ count += 1\n            } else {\n                var sum = 0l\n           \
    \     var temp = i\n                while (temp != 0) {\n                    sum\
    \ += temp % 10\n                    temp /= 10\n                }\n          \
    \      if (sum > 0) count += 1\n            }\n        }\n        count", '        arr.map(x
    => abs(x)).map(x => x.toString.map(x => x.asDigit).sum).filter(x => x > 0).size',
  "        // Fill up this function body\n        // 'signum' function can be used\
    \ to get the sign of a number\n        // 'abs' function can be used to get the\
    \ absolute value of a number\n        // 'toString' function can be used to convert\
    \ a number to string\n        // 'map' function can be used to apply a function\
    \ to each element of a list\n        // 'sum' function can be used to sum up all\
    \ the elements of a list\n        // You can create new lists with List(...)\n\
    \        // You can access elements of a list with list(index)\n        // Note\
    \ that all the elements of the input list are Longs\n        // Note that the\
    \ output is also a Long\n        0", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var count\
    \ = 0l\n        for (i <- arr) {\n            if (i < 0) {\n                if\
    \ (i.toString.length == 1) {\n                    count += 1\n               \
    \ } else {\n                    var sum = 0\n                    for (j <- 1 until\
    \ i.toString.length) {\n                        sum += i.toString.charAt(j).asDigit\n\
    \                    }\n                    if (sum > 0) {\n                 \
    \       count += 1\n                    }\n                }\n            } else\
    \ {\n                var sum = 0\n                for (j <- 0 until i.toString.length)\
    \ {\n                    sum += i.toString.charAt(j).asDigit\n               \
    \ }\n                if (sum > 0) {\n                    count += 1\n        \
    \        }\n            }\n        }\n        count", "        var count = 0l\n\
    \        for (i <- arr) {\n            if (i < 0) {\n                if (i.toString.substring(1).map(_.asDigit).sum\
    \ > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      if (m < 0) m = -m\n            while (m > 0) {\n                sum +=\
    \ m % 10\n                m /= 10\n            }\n            sum\n        }\n\
    \        var count = 0l\n        for (n <- arr) if (sumDigits(n) > 0) count +=\
    \ 1\n        count", "        def countNumsHelper(arr : List[Long], count : Long)\
    \ : Long = {\n            if (arr.isEmpty) count\n            else {\n       \
    \         val sum = arr.head.abs.toString.map(_.asDigit).sum\n               \
    \ if (sum > 0) countNumsHelper(arr.tail, count + 1)\n                else countNumsHelper(arr.tail,\
    \ count)\n            }\n        }\n        countNumsHelper(arr, 0)", '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', "        var count = 0l\n        for (i <- arr)\
    \ {\n            var sum = 0l\n            var j = i\n            while (j !=\
    \ 0) {\n                sum += (j % 10).abs\n                j /= 10\n       \
    \     }\n            if (sum > 0) count += 1\n        }\n        count", "   \
    \     var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n   \
    \         var num = i\n            if (num < 0) num = -num\n            while\
    \ (num > 0) {\n                sum += num % 10\n                num /= 10\n  \
    \          }\n            if (sum > 0) count += 1\n        }\n        return count",
  "        def countNumsHelper(arr : List[Long], acc : Long) : Long = {\n        \
    \    if (arr.isEmpty) acc\n            else {\n                val sum = arr.head.abs.toString.map(_.asDigit).sum\n\
    \                if (sum > 0) countNumsHelper(arr.tail, acc + 1)\n           \
    \     else countNumsHelper(arr.tail, acc)\n            }\n        }\n        countNumsHelper(arr,\
    \ 0)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var count = 0l\n        for (i <- arr)\
    \ {\n            var sum = 0l\n            var num = i\n            if (num <\
    \ 0) num = -num\n            while (num > 0) {\n                sum += num % 10\n\
    \                num /= 10\n            }\n            if (sum > 0) count += 1\n\
    \        }\n        count", "        def sumDigits(n : Long) : Long = {\n    \
    \        var sum = 0l\n            var nn = abs(n)\n            while (nn > 0)\
    \ {\n                sum += nn % 10\n                nn /= 10\n            }\n\
    \            sum\n        }\n        var count = 0l\n        for (n <- arr) {\n\
    \            if (sumDigits(n) > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', "        def sumDigits(n : Long) : Long = {\n\
    \            var s = 0l\n            var m = abs(n)\n            while (m > 0)\
    \ {\n                s += m % 10\n                m /= 10\n            }\n   \
    \         s\n        }\n        arr.filter(sumDigits(_) > 0).length", "      \
    \  def sumDigits(n : Long) : Long = {\n            var sum = 0l\n            var\
    \ m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n        \
    \        sum += m % 10\n                m /= 10\n            }\n            return\
    \ sum\n        }\n        var count = 0l\n        for (n <- arr) {\n         \
    \   if (sumDigits(n) > 0) count += 1\n        }\n        return count", "    \
    \    var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n    \
    \        var n = i\n            if (n < 0) n = -n\n            while (n > 0) {\n\
    \                sum += n % 10\n                n /= 10\n            }\n     \
    \       if (sum > 0) count += 1\n        }\n        count", "        def countNums0(arr\
    \ : List[Long], acc : Long) : Long = {\n            if (arr.isEmpty) acc\n   \
    \         else {\n                val sum = arr.head.abs.toString.map(_.asDigit).sum\n\
    \                if (sum > 0) countNums0(arr.tail, acc + 1)\n                else\
    \ countNums0(arr.tail, acc)\n            }\n        }\n        countNums0(arr,\
    \ 0)", "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n\
    \            var nn = abs(n)\n            while (nn > 0) {\n                sum\
    \ += nn % 10\n                nn /= 10\n            }\n            sum\n     \
    \   }\n        var count = 0l\n        for (n <- arr) {\n            if (sumDigits(n)\
    \ > 0) count += 1\n        }\n        count", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0l\n        for (i <- arr) {\n            if (i < 0) {\n       \
    \         var temp = i * -1\n                var sum = 0l\n                while\
    \ (temp > 0) {\n                    sum += temp % 10\n                    temp\
    \ /= 10\n                }\n                if (sum > 0) count += 1\n        \
    \    } else {\n                var temp = i\n                var sum = 0l\n  \
    \              while (temp > 0) {\n                    sum += temp % 10\n    \
    \                temp /= 10\n                }\n                if (sum > 0) count\
    \ += 1\n            }\n        }\n        count", "        def f(n : Long) : Long\
    \ = {\n            if (n == 0) 0\n            else abs(n % 10) + f(n / 10)\n \
    \       }\n        arr.map(f(_)).filter(_ > 0).length", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      if (m < 0) m = -m\n            while (m > 0) {\n                sum +=\
    \ m % 10\n                m /= 10\n            }\n            sum\n        }\n\
    \        var count = 0l\n        for (n <- arr) if (sumDigits(n) > 0) count +=\
    \ 1\n        count", "        // Fill up this function body\n        // 'return\
    \ 0' is just a placeholder for compilation\n        return 0", "        def countNumsHelper(arr\
    \ : List[Long], acc : Long) : Long = {\n            if (arr.isEmpty) acc\n   \
    \         else if (arr.head.toString.map(_.asDigit).sum > 0) countNumsHelper(arr.tail,\
    \ acc + 1)\n            else countNumsHelper(arr.tail, acc)\n        }\n     \
    \   countNumsHelper(arr, 0)", "        def countNumsHelper(arr : List[Long], acc\
    \ : Long) : Long = {\n            if (arr.isEmpty) acc\n            else {\n \
    \               val x = arr.head\n                val sum = if (x < 0) -x else\
    \ x\n                val sumDigits = sum.toString.map(_.asDigit).sum\n       \
    \         if (sumDigits > 0) countNumsHelper(arr.tail, acc + 1)\n            \
    \    else countNumsHelper(arr.tail, acc)\n            }\n        }\n        countNumsHelper(arr,\
    \ 0)", "        def countNumsHelper(arr : List[Long], acc : Long) : Long = {\n\
    \            if (arr.isEmpty) acc\n            else {\n                val sum\
    \ = arr.head.abs.toString.map(_.asDigit).sum\n                if (sum > 0) countNumsHelper(arr.tail,\
    \ acc + 1)\n                else countNumsHelper(arr.tail, acc)\n            }\n\
    \        }\n        countNumsHelper(arr, 0)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n       \
    \     var num = i\n            if (num < 0) {\n                num = -num\n  \
    \              sum += -1\n            }\n            while (num > 0) {\n     \
    \           sum += num % 10\n                num /= 10\n            }\n      \
    \      if (sum > 0) count += 1\n        }\n        return count", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var count = 0l\n        for (i <- arr) {\n            var\
    \ sum = 0l\n            var num = i\n            if (num < 0) num = -num\n   \
    \         while (num > 0) {\n                sum += num % 10\n               \
    \ num /= 10\n            }\n            if (sum > 0) count += 1\n        }\n \
    \       count", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        def sumDigits(n : Long) : Long\
    \ = {\n            if (n < 0) return sumDigits(-n)\n            if (n < 10) return\
    \ n\n            return n % 10 + sumDigits(n / 10)\n        }\n        var count\
    \ = 0l\n        for (i <- arr) {\n            if (sumDigits(i) > 0) count += 1\n\
    \        }\n        return count", "        def countNums(arr : List[Long], acc\
    \ : Long) : Long = {\n            if (arr.isEmpty) acc\n            else {\n \
    \               val sum = arr.head.abs.toString.map(_.asDigit).sum\n         \
    \       if (sum > 0) countNums(arr.tail, acc + 1)\n                else countNums(arr.tail,\
    \ acc)\n            }\n        }\n        countNums(arr, 0)", "        var count\
    \ = 0l\n        for (i <- arr) {\n            var sum = 0l\n            var j\
    \ = i\n            if (j < 0) j = -j\n            while (j > 0) {\n          \
    \      sum += j % 10\n                j /= 10\n            }\n            if (sum\
    \ > 0) count += 1\n        }\n        count", "        var count = 0l\n      \
    \  for (i <- arr) {\n            var sum = 0l\n            var j = i\n       \
    \     if (j < 0) j = -j\n            while (j > 0) {\n                sum += j\
    \ % 10\n                j /= 10\n            }\n            if (sum > 0) count\
    \ += 1\n        }\n        count", "        def countNums(arr : List[Long], acc\
    \ : Long) : Long = {\n            arr match {\n                case Nil => acc\n\
    \                case x :: xs => {\n                    val s = x.toString\n \
    \                   val sum = s.map(c => c.asDigit).sum\n                    if\
    \ (sum > 0) countNums(xs, acc + 1)\n                    else countNums(xs, acc)\n\
    \                }\n            }\n        }\n        countNums(arr, 0)", "  \
    \      // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var count = 0l\n        for (i <- arr) {\n   \
    \         var sum = 0l\n            var num = i\n            if (num < 0) num\
    \ = -num\n            while (num > 0) {\n                sum += num % 10\n   \
    \             num /= 10\n            }\n            if (sum > 0) count += 1\n\
    \        }\n        count", "        var count = 0l\n        for (i <- arr) {\n\
    \            if (i < 0) {\n                if (i.toString.substring(1).map(_.asDigit).sum\
    \ > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var count = 0\n        for (i <- arr) {\n            var sum = 0\n  \
    \          var j = i\n            if (j < 0) j = -j\n            while (j > 0)\
    \ {\n                sum += j % 10\n                j /= 10\n            }\n \
    \           if (sum > 0) count += 1\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            if (n == 0) return 0\n            else return\
    \ (n % 10) + sumDigits(n / 10)\n        }\n        var count = 0l\n        for\
    \ (i <- arr) {\n            if (sumDigits(i) > 0) count += 1\n        }\n    \
    \    return count", "        def sumDigits(n : Long) : Long = {\n            var\
    \ s = 0l\n            var m = abs(n)\n            while (m > 0) {\n          \
    \      s += m % 10\n                m /= 10\n            }\n            s\n  \
    \      }\n        var c = 0l\n        for (n <- arr) {\n            if (sumDigits(n)\
    \ > 0) c += 1\n        }\n        c", "        var count = 0l\n        for (i\
    \ <- arr) {\n            if (i < 0) {\n                if (i.toString.length ==\
    \ 1) count += 1\n                else {\n                    var sum = 0\n   \
    \                 for (j <- 1 until i.toString.length) {\n                   \
    \     sum += i.toString.charAt(j).asDigit\n                    }\n           \
    \         if (sum > 0) count += 1\n                }\n            }\n        \
    \    else {\n                var sum = 0\n                for (j <- 0 until i.toString.length)\
    \ {\n                    sum += i.toString.charAt(j).asDigit\n               \
    \ }\n                if (sum > 0) count += 1\n            }\n        }\n     \
    \   count", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.map(x => if (x < 0) -x else x).map(x => x.toString.map(y => y.asDigit).sum).count(x
    => x > 0)', "        // Fill up this function body\n        // '0'\n        arr.filter(x\
    \ => x.toString.map(_.asDigit).sum > 0).size", "        def countNumsHelper(arr\
    \ : List[Long], acc : Long) : Long = {\n            if (arr.isEmpty) acc\n   \
    \         else {\n                val sum = arr.head.abs.toString.map(_.asDigit).sum\n\
    \                if (sum > 0) countNumsHelper(arr.tail, acc + 1)\n           \
    \     else countNumsHelper(arr.tail, acc)\n            }\n        }\n        countNumsHelper(arr,\
    \ 0)", "        var count = 0l\n        for (i <- arr) {\n            if (i >\
    \ 0) {\n                var sum = 0l\n                var j = i\n            \
    \    while (j > 0) {\n                    sum += j % 10\n                    j\
    \ /= 10\n                }\n                if (sum > 0) count += 1\n        \
    \    } else {\n                var sum = 0l\n                var j = i\n     \
    \           while (j < 0) {\n                    sum += j % 10\n             \
    \       j /= 10\n                }\n                if (sum < 0) count += 1\n\
    \            }\n        }\n        count", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', "        var count = 0l\n        for (i <- arr)\
    \ {\n            var sum = 0l\n            var n = i\n            if (n < 0) n\
    \ = -n\n            while (n > 0) {\n                sum += n % 10\n         \
    \       n /= 10\n            }\n            if (sum > 0) count += 1\n        }\n\
    \        count", "        def sumDigits(n : Long) : Long = {\n            var\
    \ sum = 0l\n            var m = abs(n)\n            while (m > 0) {\n        \
    \        sum += m % 10\n                m /= 10\n            }\n            sum\n\
    \        }\n        arr.map(sumDigits(_)).filter(_ > 0).length", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var count = 0\n        for (i <- arr) {\n            if (i > 0) {\n \
    \               var sum = 0\n                var j = i\n                while\
    \ (j > 0) {\n                    sum += j % 10\n                    j /= 10\n\
    \                }\n                if (sum > 0) count += 1\n            } else\
    \ {\n                var sum = 0\n                var j = -i\n               \
    \ while (j > 0) {\n                    sum += j % 10\n                    j /=\
    \ 10\n                }\n                if (sum > 0) count += 1\n           \
    \ }\n        }\n        count", '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', '        arr.count(x => x.toString.map(x => x.asDigit).sum > 0)',
  "        def countNumsHelper(arr : List[Long], acc : Long) : Long = {\n        \
    \    if (arr.isEmpty) acc\n            else {\n                val x = arr.head\n\
    \                val s = x.toString\n                val sum = s.map(c => c.asDigit).sum\n\
    \                if (sum > 0) countNumsHelper(arr.tail, acc + 1)\n           \
    \     else countNumsHelper(arr.tail, acc)\n            }\n        }\n        countNumsHelper(arr,\
    \ 0)", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length', '        arr.count(x
    => x.toString.map(x => x.asDigit).sum > 0)', '        arr.map(x => if (x < 0)
    -x else x).map(x => x.toString.map(x => x.asDigit).sum).filter(x => x > 0).length',
  "        def countNumsHelper(arr : List[Long], acc : Long) : Long = {\n        \
    \    if (arr.isEmpty) acc\n            else {\n                val sum = arr.head.abs.toString.map(_.asDigit).sum\n\
    \                if (sum > 0) countNumsHelper(arr.tail, acc + 1)\n           \
    \     else countNumsHelper(arr.tail, acc)\n            }\n        }\n        countNumsHelper(arr,\
    \ 0)", "        def sumDigits(n : Long) : Long = {\n            if (n == 0) 0\n\
    \            else abs(n % 10) + sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        var count = 0l\n        for (i <- arr) {\n          \
    \  var sum = 0l\n            var num = i\n            if (num < 0) num = -num\n\
    \            while (num > 0) {\n                sum += num % 10\n            \
    \    num /= 10\n            }\n            if (sum > 0) count += 1\n        }\n\
    \        count", "        def countNumsHelper(arr : List[Long], acc : Long) :\
    \ Long = {\n            if (arr.isEmpty) acc\n            else {\n           \
    \     val sum = arr.head.abs.toString.map(x => x.asDigit).sum\n              \
    \  if (sum > 0) countNumsHelper(arr.tail, acc + 1)\n                else countNumsHelper(arr.tail,\
    \ acc)\n            }\n        }\n        countNumsHelper(arr, 0)", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', "        val sum = (arr.map(x => if (x < 0) x * -1 else x).map(x =>\
    \ x.toString.map(y => y.asDigit).sum).filter(x => x > 0).length)\n        sum",
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size', "      \
    \  var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n      \
    \      var num = i\n            if (num < 0) num = -num\n            while (num\
    \ > 0) {\n                sum += num % 10\n                num /= 10\n       \
    \     }\n            if (sum > 0) count += 1\n        }\n        count", "   \
    \     var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n   \
    \         var num = i\n            if (num < 0) num = -num\n            while\
    \ (num > 0) {\n                sum += num % 10\n                num /= 10\n  \
    \          }\n            if (sum > 0) count += 1\n        }\n        return count",
  "        var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n  \
    \          var j = abs(i)\n            while (j > 0) {\n                sum +=\
    \ j % 10\n                j /= 10\n            }\n            if (sum > 0) count\
    \ += 1\n        }\n        count", '        arr.filter(x => x.toString.map(y =>
    y.asDigit).sum > 0).size', "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        arr.filter(x => x.toString.map(_.asDigit).sum\
    \ > 0).length", "        var count = 0l\n        for (i <- arr) {\n          \
    \  if (i.toString.map(x => x.asDigit).sum > 0) count += 1\n        }\n       \
    \ count", '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size',
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size', "      \
    \  var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n      \
    \      var j = i\n            if (j < 0) j = -j\n            while (j > 0) {\n\
    \                sum += j % 10\n                j /= 10\n            }\n     \
    \       if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', "        val digits = arr.map(x => if (x < 0) x\
    \ * -1 else x).map(x => x.toString.map(y => y.asDigit).sum)\n        digits.count(x\
    \ => x > 0)", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', "        var count = 0l\n        for (i <- arr)\
    \ {\n            var sum = 0l\n            var x = i\n            if (x < 0) x\
    \ = -x\n            while (x > 0) {\n                sum += x % 10\n         \
    \       x /= 10\n            }\n            if (sum > 0) count += 1\n        }\n\
    \        count", "        var count = 0l\n        for (i <- arr) {\n         \
    \   if (i < 0) {\n                if (i.toString.length == 1) {\n            \
    \        if (i.toString.charAt(0) != '-') count += 1\n                } else {\n\
    \                    var sum = 0\n                    for (j <- 1 until i.toString.length)\
    \ {\n                        sum += i.toString.charAt(j).asDigit\n           \
    \         }\n                    if (sum > 0) count += 1\n                }\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 0 until i.toString.length) {\n                    sum += i.toString.charAt(j).asDigit\n\
    \                }\n                if (sum > 0) count += 1\n            }\n \
    \       }\n        count", "        def countNumsHelper(arr : List[Long], count\
    \ : Long) : Long = {\n            if (arr.isEmpty) count\n            else {\n\
    \                val num = arr.head\n                val sum = if (num < 0) num.toString.tail.map(_.asDigit).sum\
    \ + 1 else num.toString.map(_.asDigit).sum\n                if (sum > 0) countNumsHelper(arr.tail,\
    \ count + 1)\n                else countNumsHelper(arr.tail, count)\n        \
    \    }\n        }\n        countNumsHelper(arr, 0)", "        def signedDigits(n\
    \ : Long) : List[Long] = {\n            if (n < 0) {\n                -1l :: digits(n)\n\
    \            } else {\n                digits(n)\n            }\n        }\n \
    \       def digits(n : Long) : List[Long] = {\n            if (n == 0) {\n   \
    \             List[Long]()\n            } else {\n                digits(n / 10)\
    \ :+ (n % 10)\n            }\n        }\n        def sum(arr : List[Long]) : Long\
    \ = {\n            arr.foldLeft(0l)((acc, x) => acc + x)\n        }\n        arr.foldLeft(0l)((acc,\
    \ x) => if (sum(signedDigits(x)) > 0) acc + 1 else acc)", "        var count =\
    \ 0l\n        for (i <- arr) {\n            var sum = 0l\n            var j =\
    \ i\n            if (j < 0) j = -j\n            while (j > 0) {\n            \
    \    sum += j % 10\n                j /= 10\n            }\n            if (sum\
    \ > 0) count += 1\n        }\n        count", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', "        var count = 0l\n        for (i <- arr)\
    \ {\n            if (i > 0) {\n                var sum = 0l\n                var\
    \ j = i\n                while (j > 0) {\n                    sum += j % 10\n\
    \                    j /= 10\n                }\n                if (sum > 0)\
    \ count += 1\n            } else {\n                var sum = 0l\n           \
    \     var j = -i\n                while (j > 0) {\n                    sum +=\
    \ j % 10\n                    j /= 10\n                }\n                if (sum\
    \ > 0) count += 1\n            }\n        }\n        return count", "        var\
    \ count = 0l\n        for (i <- arr) {\n            var sum = 0l\n           \
    \ var n = i\n            if (n < 0) n = -n\n            while (n > 0) {\n    \
    \            sum += n % 10\n                n /= 10\n            }\n         \
    \   if (sum > 0) count += 1\n        }\n        count", "        var count = 0l\n\
    \        for (i <- arr) {\n            if (i.toString.map(x => x.asDigit).sum\
    \ > 0) count += 1\n        }\n        count", "        def countNumsHelper(arr\
    \ : List[Long], count : Long) : Long = {\n            if (arr.isEmpty) count\n\
    \            else {\n                val num = arr.head\n                val sum\
    \ = if (num < 0) num.toString.substring(1).map(_.asDigit).sum else num.toString.map(_.asDigit).sum\n\
    \                if (sum > 0) countNumsHelper(arr.tail, count + 1)\n         \
    \       else countNumsHelper(arr.tail, count)\n            }\n        }\n    \
    \    countNumsHelper(arr, 0)", "        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var count = 0l\n\
    \        for (i <- arr) {\n            if (i < 0) {\n                count +=\
    \ 1\n            }\n            else {\n                var sum = 0l\n       \
    \         var n = i\n                while (n > 0) {\n                    sum\
    \ += n % 10\n                    n /= 10\n                }\n                if\
    \ (sum > 0) {\n                    count += 1\n                }\n           \
    \ }\n        }\n        return count", "        // Fill up this function body\n\
    \        // 'return 0l' for compilation\n        return 0l", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        0", "        var count = 0l\n        for (i <- arr) {\n            var\
    \ sum = 0l\n            var temp = i\n            if (temp < 0) temp = -temp\n\
    \            while (temp > 0) {\n                sum += temp % 10\n          \
    \      temp /= 10\n            }\n            if (sum > 0) count += 1\n      \
    \  }\n        count", "        def sumDigits(n : Long) : Long = {\n          \
    \  if (n < 0) -sumDigits(-n)\n            else if (n < 10) n\n            else\
    \ n % 10 + sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length",
  '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size', "      \
    \  // Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var count = 0l\n        for (i <- arr) {\n            var\
    \ sum = 0l\n            var j = i\n            if (j < 0) j = -j\n           \
    \ while (j > 0) {\n                sum += j % 10\n                j /= 10\n  \
    \          }\n            if (sum > 0) count += 1\n        }\n        count",
  "        var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n  \
    \          var x = i\n            if (x < 0) x = -x\n            while (x > 0)\
    \ {\n                sum += x % 10\n                x /= 10\n            }\n \
    \           if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else abs(n % 10) + sumDigits(n\
    \ / 10)\n        }\n        arr.filter(n => sumDigits(n) > 0).length", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        def countNumsHelper(arr\
    \ : List[Long], acc : Long) : Long = {\n            if (arr.isEmpty) acc\n   \
    \         else {\n                val x = arr.head\n                val xs = arr.tail\n\
    \                val xs_sum = xs.foldLeft(0l)((acc, x) => acc + x)\n         \
    \       val x_sum = x.toString.map(_.asDigit).sum\n                val acc_sum\
    \ = acc.toString.map(_.asDigit).sum\n                if (x_sum + xs_sum > 0) countNumsHelper(xs,\
    \ acc + 1)\n                else countNumsHelper(xs, acc)\n            }\n   \
    \     }\n        countNumsHelper(arr, 0)", "        def sumDigits(n : Long) :\
    \ Long = {\n            if (n == 0) 0\n            else {\n                val\
    \ d = n % 10\n                if (d < 0) -d else d\n            } + sumDigits(n\
    \ / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', "        var count = 0l\n        for (i <- arr) {\n            if\
    \ (i < 0) {\n                if (i.toString.length == 1) {\n                 \
    \   count += 1\n                } else {\n                    var sum = 0\n  \
    \                  for (j <- 1 until i.toString.length) {\n                  \
    \      sum += i.toString.charAt(j).asDigit\n                    }\n          \
    \          if (sum > 0) count += 1\n                }\n            } else {\n\
    \                var sum = 0\n                for (j <- 0 until i.toString.length)\
    \ {\n                    sum += i.toString.charAt(j).asDigit\n               \
    \ }\n                if (sum > 0) count += 1\n            }\n        }\n     \
    \   count", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        var\
    \ count = 0l\n        for (n <- arr) {\n            if (sumDigits(n) > 0) count\
    \ += 1\n        }\n        count", "        // Fill up this function body\n  \
    \      // You can add another function as well, if required\n        var count\
    \ = 0l\n        for (i <- arr) {\n            if (i >= 0) {\n                var\
    \ sum = 0l\n                var temp = i\n                while (temp > 0) {\n\
    \                    sum += temp % 10\n                    temp /= 10\n      \
    \          }\n                if (sum > 0) count += 1\n            } else {\n\
    \                var sum = 0l\n                var temp = i\n                while\
    \ (temp < 0) {\n                    sum += temp % 10\n                    temp\
    \ /= 10\n                }\n                if (sum < 0) count += 1\n        \
    \    }\n        }\n        count", "        var count = 0l\n        for (num <-\
    \ arr) {\n            var sum = 0l\n            var n = num\n            if (n\
    \ < 0) n = -n\n            while (n > 0) {\n                sum += n % 10\n  \
    \              n /= 10\n            }\n            if (sum > 0) count += 1\n \
    \       }\n        count", "        var count = 0l\n        for (i <- arr) {\n\
    \            var sum = 0l\n            var num = i\n            if (num < 0) num\
    \ = -num\n            while (num > 0) {\n                sum += num % 10\n   \
    \             num /= 10\n            }\n            if (sum > 0) count += 1\n\
    \        }\n        return count", '        arr.filter(x => x.toString.map(y =>
    y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).length', '        arr.map(x => if (x < 0) -x else x).map(x => x.toString.map(x
    => x.asDigit).sum).filter(x => x > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            var sum = 0l\n            var m = n\n            if\
    \ (m < 0) m = -m\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).length', "        var count = 0l\n        for (i <- arr) {\n            var\
    \ sum = 0l\n            var j = i\n            while (j != 0) {\n            \
    \    sum += abs(j % 10)\n                j /= 10\n            }\n            if\
    \ (sum > 0) count += 1\n        }\n        count", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', "        def countNums0(arr : List[Long], acc : Long) : Long = {\n\
    \            if (arr.isEmpty) acc\n            else {\n                val x =\
    \ arr.head\n                val sign = if (x < 0) -1 else 1\n                val\
    \ digits = (x * sign).toString.map(_.asDigit).sum\n                countNums0(arr.tail,\
    \ acc + (if (digits > 0) 1 else 0))\n            }\n        }\n        countNums0(arr,\
    \ 0)", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).length']
stop_tokens:
- "\n    }\n"
