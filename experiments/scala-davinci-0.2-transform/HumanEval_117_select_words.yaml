name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
  \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
  \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
  simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
  Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
  Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String,\
  \ n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        // Write your code here\n        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val words = s.split(\" \")\n        val result = new\
    \ ListBuffer[String]\n        for (word <- words) {\n            var count = 0\n\
    \            for (c <- word) {\n                if (!vowels.contains(c)) count\
    \ += 1\n            }\n            if (count == n) result += word\n        }\n\
    \        result.toList", "        // Fill in the implementation\n        return\
    \ List[String]()", "        // TODO: Implement this function\n        return List[String]()",
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        var result = List[String]()\n\
    \        var words = s.split(\" \")\n        for (word <- words) {\n         \
    \   if (word.count(c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ == n) {\n                result = result :+ word\n            }\n        }\n\
    \        result", "        // Your code here\n        null", "        // Write\
    \ your code here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ words = s.split(\" \")\n        val result = ListBuffer[String]()\n        for\
    \ (word <- words) {\n            var count = 0\n            for (c <- word) {\n\
    \                if (!vowels.contains(c)) count += 1\n            }\n        \
    \    if (count == n) result += word\n        }\n        result.toList", "    \
    \    // Your code here\n        null", "        // Write your code here\n    \
    \    return List[String]()", "        // Fill in the code here\n        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n       \
    \ val result = new ListBuffer[String]\n        for (word <- words) {\n       \
    \     var count = 0\n            for (c <- word) {\n                if (!vowels.contains(c))\
    \ count += 1\n            }\n            if (count == n) result += word\n    \
    \    }\n        result.toList", "        // Write your code here\n        return\
    \ null;", "        // Write your code here\n        // Return List[String]()\n\
    \        return List[String]()", "        // Your code here\n        null", " \
    \       // Your code here\n        return null;", "        // your code here\n\
    \        null", "        // This is a stub. Please replace this implementation\
    \ with your own.\n        return List[String]()", "        // your code here\n\
    \        null", "        // your code here\n        return List[String]()", " \
    \       // Write your code here\n        return List[String]()"]
stop_tokens:
- "\n    }\n"
