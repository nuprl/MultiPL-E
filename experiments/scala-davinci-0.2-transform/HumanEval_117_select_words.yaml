name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
  \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
  \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
  simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
  Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
  Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String,\
  \ n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        // Write your code here\n        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val words = s.split(\" \")\n        val result = new\
    \ ListBuffer[String]\n        for (word <- words) {\n            var count = 0\n\
    \            for (c <- word) {\n                if (!vowels.contains(c)) count\
    \ += 1\n            }\n            if (count == n) result += word\n        }\n\
    \        result.toList", "        // Fill in the implementation\n        return\
    \ List[String]()", "        // TODO: Implement this function\n        return List[String]()",
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        return null;", "        // Your code here\n        var result = List[String]()\n\
    \        var words = s.split(\" \")\n        for (word <- words) {\n         \
    \   if (word.count(c => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')\
    \ == n) {\n                result = result :+ word\n            }\n        }\n\
    \        result", "        // Your code here\n        null", "        // Write\
    \ your code here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ words = s.split(\" \")\n        val result = ListBuffer[String]()\n        for\
    \ (word <- words) {\n            var count = 0\n            for (c <- word) {\n\
    \                if (!vowels.contains(c)) count += 1\n            }\n        \
    \    if (count == n) result += word\n        }\n        result.toList", "    \
    \    // Your code here\n        null", "        // Write your code here\n    \
    \    return List[String]()", "        // Fill in the code here\n        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n       \
    \ val result = new ListBuffer[String]\n        for (word <- words) {\n       \
    \     var count = 0\n            for (c <- word) {\n                if (!vowels.contains(c))\
    \ count += 1\n            }\n            if (count == n) result += word\n    \
    \    }\n        result.toList", "        // Write your code here\n        return\
    \ null;", "        // Write your code here\n        // Return List[String]()\n\
    \        return List[String]()", "        // Your code here\n        null", " \
    \       // Your code here\n        return null;", "        // your code here\n\
    \        null", "        // This is a stub. Please replace this implementation\
    \ with your own.\n        return List[String]()", "        // your code here\n\
    \        null", "        // your code here\n        return List[String]()", " \
    \       // Write your code here\n        return List[String]()", "        // Fill\
    \ in the code here\n        var words = s.split(\" \")\n        var result = List[String]()\n\
    \        for (word <- words) {\n            var count = 0\n            for (c\
    \ <- word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') count += 1\n            }\n            if (count == n) result =\
    \ word :: result\n        }\n        result", "        // Fill in the code here\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\"\
    \ \")\n        val result = new ListBuffer[String]\n        for (word <- words)\
    \ {\n            var count = 0\n            for (c <- word) {\n              \
    \  if (!vowels.contains(c)) count += 1\n            }\n            if (count ==\
    \ n) result += word\n        }\n        result.toList", "        // your code\
    \ here\n        null", "        // Write your code here\n        null", "    \
    \    // Write your code here\n        null", "        // Your code here\n    \
    \    return List[String]()", "        // Fill in the code here\n        var result\
    \ = List[String]()\n        var word = \"\"\n        var consonantCount = 0\n\
    \        for (i <- 0 until s.length) {\n            if (s(i) != ' ') {\n     \
    \           word += s(i)\n                if (s(i) != 'a' && s(i) != 'e' && s(i)\
    \ != 'i' && s(i) != 'o' && s(i) != 'u') {\n                    consonantCount\
    \ += 1\n                }\n            } else {\n                if (consonantCount\
    \ == n) {\n                    result = result :+ word\n                }\n  \
    \              word = \"\"\n                consonantCount = 0\n            }\n\
    \        }\n        if (consonantCount == n) {\n            result = result :+\
    \ word\n        }\n        result", "        // Your code here\n        null",
  "        // Your code here\n        return List[String]()", "        // Your code\
    \ here\n        null", "        // TODO: Implement this function\n        // Do\
    \ not change the return type\n        // Do not change the function name\n   \
    \     // Do not change the function signature\n        // Do not change the function\
    \ body\n        // Do not change the function template\n        List[String]()",
  "        // Your code here\n        null", "        // Write your code here\n  \
    \      return List[String]()", "        // Fill in the implementation here.\n\
    \        return null;", "        // Your code here\n        null", "        //\
    \ Fill in the code here\n        return List[String]()", "        // Write your\
    \ code here\n        return List[String]()", "        // Write your code here\n\
    \        null", "        // TODO: implement this method\n        return List[String]()",
  "        // Your code here\n        null", "        // Fill in the code here\n \
    \       return List[String]()", "        // Write your code here\n        null",
  "        // Your code here\n        null", "        // Your code here\n        null",
  "        // Your code here\n        null", "        // Write your code here\n  \
    \      null", "        // Your code here\n        null", "        // Write your\
    \ code here\n        return List[String]()", "        // your code here\n    \
    \    null", "        // Write your code here\n        return List[String]()",
  "        // Your code here\n        null", "        // Write your code here\n  \
    \      return List[String]()", "        // your code here\n        null", "  \
    \      // This is the solution code.\n        // Please add your code below.\n\
    \        // You can import and use any Scala standard library.\n        // You\
    \ can import and use any Java standard library.\n        // You can import and\
    \ use any Scala or Java third party library.\n        // You can import and use\
    \ any custom library.\n        // You can use any Scala or Java built-in data\
    \ structure.\n        // You can use any Scala or Java built-in function.\n  \
    \      // You can use any Scala or Java built-in operator.\n        // You can\
    \ use any Scala or Java built-in control structure.\n        // You can use any\
    \ Scala or Java built-in loop.\n        // You can use any Scala or Java built-in\
    \ recursion.\n        // You can use any Scala or Java built-in exception handling.\n\
    \        // You can use any Scala or Java built-in reflection.\n        // You\
    \ can use any Scala or Java built-in concurrency.\n        // You can use any\
    \ Scala or Java built-in parallelism.\n        // You can use any Scala or Java\
    \ built-in functional programming.\n        // You can use any Scala or Java built-in\
    \ object-oriented programming.\n        // You can use any Scala or Java built-in\
    \ generic programming.\n        // You can use any Scala or Java built-in metaprogramming.\n\
    \        // You can use any Scala or Java built-in pattern matching.\n       \
    \ // You can use any Scala or Java built-in type system.\n        // You can use\
    \ any Scala or Java built-in type inference.\n        // You can use any Scala\
    \ or Java built-in type casting.\n        // You can use any Scala or Java built-in\
    \ type conversion.\n        // You can use any Scala or Java built-in type promotion.\n\
    \        // You can use any Scala or Java built-in type demotion.\n        //\
    \ You can use any Scala or Java built-in type widening.\n        // You can use\
    \ any Scala or Java built-in type narrowing.\n        // You can use any Scala\
    \ or Java built-in type erasure.\n        // You can use any Scala or Java built-in\
    \ type variance.\n        // You can use any Scala or Java built-in type generics.\n\
    \        // You can use any Scala or Java built-in type generics variance.\n \
    \       //", "        // your code here\n        null", "        // your code\
    \ here\n        null", "        // your code here\n        null", "        //\
    \ Your code here\n        return null;", "        // Fill in the code here\n \
    \       var result = List[String]()\n        var words = s.split(\" \")\n    \
    \    for (word <- words) {\n            var count = 0\n            for (char <-\
    \ word) {\n                if (char != 'a' && char != 'e' && char != 'i' && char\
    \ != 'o' && char != 'u') {\n                    count += 1\n                }\n\
    \            }\n            if (count == n) {\n                result = result\
    \ :+ word\n            }\n        }\n        result", "        // This is a stub.\
    \ Please replace it with your implementation.\n        List[String]()", "    \
    \    // Write your code here\n        return List[String]()", "        // Your\
    \ code here\n        null", "        // your code here\n        return null;",
  "        // Write your code here\n        var words = s.split(\" \")\n        var\
    \ result = List[String]()\n        for (word <- words) {\n            var count\
    \ = 0\n            for (char <- word) {\n                if (char != 'a' && char\
    \ != 'e' && char != 'i' && char != 'o' && char != 'u') count += 1\n          \
    \  }\n            if (count == n) result = word :: result\n        }\n       \
    \ result", "        // Write your code here\n        null", "        // Write\
    \ your code here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ words = s.split(\" \")\n        val result = words.filter(w => w.count(c =>\
    \ !vowels.contains(c)) == n)\n        result.toList", "        // Fill in the\
    \ implementation here.\n        return List[String]()", "        // Write your\
    \ code here\n        return List[String]()", "        // Your code here\n    \
    \    null", "        // your code here\n        null", "        // your code here\n\
    \        null", "        // Fill in the code here\n        var l = s.split(\"\
    \ \")\n        var r = List[String]()\n        for (i <- 0 until l.length) {\n\
    \            if (l(i).count(x => x.isLetter && !x.isVowel) == n) {\n         \
    \       r = r :+ l(i)\n            }\n        }\n        r", "        // Write\
    \ your code here\n        val vowels = List('a', 'e', 'i', 'o', 'u')\n       \
    \ val words = s.split(\" \")\n        val result = words.filter(w => w.filter(c\
    \ => !vowels.contains(c)).length == n)\n        result.toList", "        // Your\
    \ code here\n        var result = List[String]()\n        var words = s.split(\"\
    \ \")\n        for (word <- words) {\n            var count = 0\n            for\
    \ (c <- word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u') {\n                    count += 1\n                }\n    \
    \        }\n            if (count == n) {\n                result = result :+\
    \ word\n            }\n        }\n        result", "        // Fill in the code\
    \ here\n        return List[String]()", "        // Fill in the code here\n  \
    \      val vowels = List('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\"\
    \ \")\n        val result = new ListBuffer[String]\n        for (word <- words)\
    \ {\n            var count = 0\n            for (char <- word) {\n           \
    \     if (!vowels.contains(char)) count += 1\n            }\n            if (count\
    \ == n) result += word\n        }\n        result.toList", "        // Write your\
    \ code here\n        null", "        // your code here\n        null", "     \
    \   // This is a stub. Please replace this implementation with your own.\n   \
    \     List[String]()", "        // Write your code here\n        // Return List[String]()\n\
    \        return List[String]()", "        // Your code here\n        null", " \
    \       // Fill in the code here\n        return List[String]()", "        //\
    \ Write your code here\n        // Return List[String]()\n        List[String]()",
  "        // Your code here\n        var result = List[String]()\n        var words\
    \ = s.split(\" \")\n        for (word <- words) {\n            var count = 0\n\
    \            for (c <- word) {\n                if (c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u') {\n                    count += 1\n        \
    \        }\n            }\n            if (count == n) {\n                result\
    \ = result :+ word\n            }\n        }\n        result", "        // Write\
    \ your code here\n        val vowels = List('a', 'e', 'i', 'o', 'u')\n       \
    \ val words = s.split(\" \")\n        val result = new ListBuffer[String]\n  \
    \      for (word <- words) {\n            var count = 0\n            for (c <-\
    \ word) {\n                if (!vowels.contains(c)) count += 1\n            }\n\
    \            if (count == n) result += word\n        }\n        result.toList",
  "        // Write your code here\n        var result = List[String]()\n        for\
    \ (word <- s.split(\" \")) {\n            var count = 0\n            for (c <-\
    \ word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u') {\n                    count += 1\n                }\n           \
    \ }\n            if (count == n) {\n                result = word :: result\n\
    \            }\n        }\n        result", "        // Fill in the code here\n\
    \        var result = List[String]()\n        val vowels = List(\"a\", \"e\",\
    \ \"i\", \"o\", \"u\")\n        val words = s.split(\" \")\n        for (word\
    \ <- words) {\n            var count = 0\n            for (char <- word) {\n \
    \               if (!vowels.contains(char.toString)) {\n                    count\
    \ += 1\n                }\n            }\n            if (count == n) {\n    \
    \            result = result :+ word\n            }\n        }\n        result",
  "        // Your code here\n        null", "        val vowels = Set('a', 'e', 'i',\
    \ 'o', 'u')\n        val words = s.split(\" \")\n        words.filter(w => w.count(c\
    \ => !vowels.contains(c)) == n).toList", "        // Fill in the code here\n \
    \       var words = s.split(\" \")\n        var result = List[String]()\n    \
    \    for (word <- words) {\n            var count = 0\n            for (c <- word)\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') count += 1\n            }\n            if (count == n) result = word ::\
    \ result\n        }\n        result", "        // your code here\n        null",
  "        // Your code here\n        var result = List[String]()\n        var words\
    \ = s.split(\" \")\n        for (word <- words) {\n            var count = 0\n\
    \            for (c <- word) {\n                if (c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u') count += 1\n            }\n            if (count\
    \ == n) result = result :+ word\n        }\n        result", "        // This\
    \ is a stub. Please replace this implementation with your own.\n        List[String]()",
  "        // your code here\n        null", "        // Write your code here\n  \
    \      var result = List[String]()\n        var words = s.split(\" \")\n     \
    \   for (word <- words) {\n            var count = 0\n            for (char <-\
    \ word) {\n                if (char == 'a' || char == 'e' || char == 'i' || char\
    \ == 'o' || char == 'u') {\n                    count += 1\n                }\n\
    \            }\n            if (word.length - count == n) {\n                result\
    \ = result :+ word\n            }\n        }\n        return result", "      \
    \  // Write your code here\n        return List[String]()", "        // Your code\
    \ here\n        null", "        // your code here\n        List[String]()", " \
    \       // Your code here\n        null", "        // Your code here\n       \
    \ return List[String]()", "        // This is your job. :)\n        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n      \
    \  val result = new ListBuffer[String]\n        for (word <- words) {\n      \
    \      var count = 0\n            for (c <- word) {\n                if (!vowels.contains(c))\
    \ count += 1\n            }\n            if (count == n) result += word\n    \
    \    }\n        result.toList", "        // your code here\n        null", " \
    \       // Fill in the code here\n        var words = s.split(\" \")\n       \
    \ var result = List[String]()\n        for (word <- words) {\n            var\
    \ count = 0\n            for (c <- word) {\n                if (c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count +=\
    \ 1\n                }\n            }\n            if (count == n) {\n       \
    \         result = word :: result\n            }\n        }\n        result",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     // your code here\n        null", "        // Write your code here\n   \
    \     return List[String]()", "        // Fill in the code here\n        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n      \
    \  val result = new ListBuffer[String]\n        for (word <- words) {\n      \
    \      var count = 0\n            for (letter <- word) {\n                if (!vowels.contains(letter))\
    \ count += 1\n            }\n            if (count == n) result += word\n    \
    \    }\n        result.toList", "        // TODO: Implement Me\n        List[String]()",
  "        // TODO: Implement this function\n        null", "        // your code\
    \ here\n        null", "        // Write your code here\n        return List[String]()",
  "        // Write your code here\n        null", "        // Write your code here\n\
    \        var result = List[String]()\n        var words = s.split(\" \")\n   \
    \     for (word <- words) {\n            if (word.filter(c => c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u').length == n) {\n                result\
    \ = result :+ word\n            }\n        }\n        result", "        // TODO:\
    \ Implement this method\n        null", "        // Your code here\n        null",
  "        // TODO: Implement me!\n        List[String]()", "        // Write your\
    \ code here\n        return List[String]()", "        // TODO: implement this\
    \ function\n        return List[String]()", "        // Your code here\n     \
    \   null", "        // This is your job. :)\n        var result = List[String]()\n\
    \        var words = s.split(\" \")\n        for (word <- words) {\n         \
    \   var count = 0\n            for (c <- word) {\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') count += 1\n            }\n\
    \            if (count == n) result = word :: result\n        }\n        result",
  "        // Your code here\n        null", "        // Write your code here\n  \
    \      var result = List[String]()\n        var words = s.split(\" \")\n     \
    \   for (word <- words) {\n            var count = 0\n            for (c <- word)\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') {\n                    count += 1\n                }\n            }\n \
    \           if (count == n) {\n                result = result :+ word\n     \
    \       }\n        }\n        return result", "        // Write your code here\n\
    \        null", "        // Write your code here\n        return List()", "  \
    \      // your code here\n        null", "        // Your code here\n        null",
  "        // TODO: implement this function\n        List[String]()", "        //\
    \ Your code here\n        null", "        // Fill in the implementation here\n\
    \        null", "        // Implement this function\n        var list = List[String]()\n\
    \        var word = \"\"\n        for (c <- s) {\n            if (c == ' ') {\n\
    \                if (countConsonants(word) == n) {\n                    list =\
    \ list :+ word\n                }\n                word = \"\"\n            }\
    \ else {\n                word += c\n            }\n        }\n        if (countConsonants(word)\
    \ == n) {\n            list = list :+ word\n        }\n        list", "      \
    \  // This is your job. :)\n        var result = List[String]()\n        for (word\
    \ <- s.split(\" \")) {\n            var count = 0\n            for (c <- word)\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') count += 1\n            }\n            if (count == n) result = word ::\
    \ result\n        }\n        result", "        // your code here\n        null",
  "        // Fill in the code here\n        return List[String]()", "        // Fill\
    \ in the implementation here.\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        s.split(\" \").filter(x => x.count(y => !vowels.contains(y)) == n).toList",
  "        // Your code here\n        null", "        // your code here\n        var\
    \ result = List[String]()\n        var words = s.split(\" \")\n        for (i\
    \ <- 0 until words.length) {\n            var word = words(i)\n            var\
    \ count = 0\n            for (j <- 0 until word.length) {\n                if\
    \ (word(j) != 'a' && word(j) != 'e' && word(j) != 'i' && word(j) != 'o' && word(j)\
    \ != 'u') count += 1\n            }\n            if (count == n) result = result\
    \ :+ word\n        }\n        return result", "        // Write your code here\n\
    \        // Return List[String]()\n        List[String]()", "        // Write\
    \ your code here\n        val words = s.split(\" \")\n        val consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n        val result = ListBuffer[String]()\n     \
    \   for (word <- words) {\n            var count = 0\n            for (c <- word)\
    \ {\n                if (consonants.contains(c.toLower)) {\n                 \
    \   count += 1\n                }\n            }\n            if (count == n)\
    \ {\n                result += word\n            }\n        }\n        result.toList",
  "        // your code goes here\n        null", "        // This is a stub. Please\
    \ replace it with your implementation.\n        List[String]()", "        // Write\
    \ your code here\n        var result = List[String]()\n        var words = s.split(\"\
    \ \")\n        for (word <- words) {\n            var count = 0\n            for\
    \ (c <- word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u') {\n                    count += 1\n                }\n    \
    \        }\n            if (count == n) {\n                result = result :+\
    \ word\n            }\n        }\n        return result", "        // Your code\
    \ here\n        null", "        // TODO: Implement this function\n        return\
    \ List[String]()", "        // Write your code here\n        null", "        //\
    \ Your code here\n        null", "        // Your code here\n        return List[String]()",
  "        // your code here\n        null", "        // Write your code here\n  \
    \      null", "        // Your code here\n        null", "        // Write your\
    \ code here\n        return List[String]()", "        // Your code here\n    \
    \    null", "        // Write your code here\n        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val words = s.split(\" \")\n        val result = words.filter(w\
    \ => w.count(c => !vowels.contains(c)) == n)\n        result.toList", "      \
    \  // your code here\n        return List[String]()", "        // This will store\
    \ the result\n        var result : List[String] = List()\n        // Write your\
    \ code here\n        return result", "        // Implement this function\n   \
    \     var result = List[String]()\n        var words = s.split(\" \")\n      \
    \  for (word <- words) {\n            var count = 0\n            for (c <- word)\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') {\n                    count += 1\n                }\n            }\n \
    \           if (count == n) {\n                result = result :+ word\n     \
    \       }\n        }\n        return result", "        // Write your code here\n\
    \        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\"\
    \ \")\n        val result = new ListBuffer[String]\n        for (word <- words)\
    \ {\n            var count = 0\n            for (c <- word) {\n              \
    \  if (!vowels.contains(c)) count += 1\n            }\n            if (count ==\
    \ n) result += word\n        }\n        result.toList", "        // TODO: implement\
    \ this function\n        return List[String]()", "        // TODO: Implement this\
    \ function\n        null", "        // Your code here\n        null", "      \
    \  // Fill in the implementation here.\n        return List[String]()", "    \
    \    // Write your code here\n        // Return List[String]()\n        List[String]()",
  "        // Write your code here\n        return null;", "        // your code here\n\
    \        var words = s.split(\" \")\n        var result = List[String]()\n   \
    \     for (word <- words) {\n            var count = 0\n            for (char\
    \ <- word) {\n                if (char != 'a' && char != 'e' && char != 'i' &&\
    \ char != 'o' && char != 'u') {\n                    count += 1\n            \
    \    }\n            }\n            if (count == n) {\n                result =\
    \ result :+ word\n            }\n        }\n        return result", "        //\
    \ Your code here\n        null", "        // Write your code here\n        null",
  "        // Implement this function\n        var result = List[String]()\n     \
    \   var words = s.split(\" \")\n        for (word <- words) {\n            var\
    \ count = 0\n            for (char <- word) {\n                if (char != 'a'\
    \ && char != 'e' && char != 'i' && char != 'o' && char != 'u') {\n           \
    \         count += 1\n                }\n            }\n            if (count\
    \ == n) {\n                result = result :+ word\n            }\n        }\n\
    \        return result", "        // Write your code here\n        return List[String]()",
  "        // your code here\n        null", "        // Your code here\n        null",
  "        // Your code here\n        null", "        // Write your code here\n  \
    \      return null;", "        // Your code here\n        null", "        // Your\
    \ code here\n        var result = List[String]()\n        var words = s.split(\"\
    \ \")\n        for (i <- 0 until words.length) {\n            if (countConsonants(words(i))\
    \ == n) {\n                result = result :+ words(i)\n            }\n      \
    \  }\n        result", "        // your code here\n        null", "        //\
    \ Your code here\n        return List[String]()", "        // Write your code\
    \ here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words =\
    \ s.split(\" \")\n        val result = new ListBuffer[String]\n        for (word\
    \ <- words) {\n            var count = 0\n            for (c <- word) {\n    \
    \            if (!vowels.contains(c)) count += 1\n            }\n            if\
    \ (count == n) result += word\n        }\n        result.toList", "        //\
    \ Write your code here\n        return List[String]()", "        // Fill in the\
    \ code here\n        var result = List[String]()\n        var words = s.split(\"\
    \ \")\n        for (word <- words) {\n            var count = 0\n            for\
    \ (c <- word) {\n                if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n                    count += 1\n                }\n    \
    \        }\n            if (count == n) {\n                result = result :+\
    \ word\n            }\n        }\n        result", "        // Write your code\
    \ here\n        var result = List[String]()\n        var words = s.split(\" \"\
    )\n        for (word <- words) {\n            if (consonants(word) == n) result\
    \ = result :+ word\n        }\n        result", "        // Your code here\n \
    \       null", "        // your code here\n        null", "        // Write your\
    \ code here\n        return List[String]()", "        // your code here\n    \
    \    val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\"\
    \ \")\n        val result = new ListBuffer[String]\n        for (word <- words)\
    \ {\n            var count = 0\n            for (c <- word) {\n              \
    \  if (!vowels.contains(c)) count += 1\n            }\n            if (count ==\
    \ n) result += word\n        }\n        result.toList", "        // Write your\
    \ code here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words\
    \ = s.split(\" \")\n        val result = new ListBuffer[String]\n        for (word\
    \ <- words) {\n            var count = 0\n            for (c <- word) {\n    \
    \            if (!vowels.contains(c)) count += 1\n            }\n            if\
    \ (count == n) result += word\n        }\n        result.toList", "        //\
    \ Write your code here\n        var result = List[String]()\n        var words\
    \ = s.split(\" \")\n        for (word <- words) {\n            if (word.count(c\
    \ => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') == n) {\n     \
    \           result = result :+ word\n            }\n        }\n        result",
  "        // Fill in the implementation here.\n        return List[String]()", " \
    \       // Your code here\n        return null;", "        // Write your code\
    \ here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words =\
    \ s.split(\" \")\n        val result = new ListBuffer[String]\n        for (word\
    \ <- words) {\n            var count = 0\n            for (c <- word) {\n    \
    \            if (!vowels.contains(c)) count += 1\n            }\n            if\
    \ (count == n) result += word\n        }\n        result.toList", "        //\
    \ TODO: Implement this function\n        // Do not change the signature of this\
    \ function\n        // Do not change the return type of this function\n      \
    \  // Do not change the name of this function\n        // Do not change the name\
    \ of the parameters\n        // Do not change the order of the parameters\n  \
    \      // Do not change the visibility of the parameters\n        // Do not change\
    \ the visibility of this function\n        // Do not change the visibility of\
    \ any other function\n        // Do not change the visibility of any other class\n\
    \        // Do not change the visibility of any other member\n        // Do not\
    \ change the visibility of any other member of any other class\n        // Do\
    \ not change the visibility of any other member of any other class\n        //\
    \ Do not change the visibility of any other member of any other class\n      \
    \  // Do not change the visibility of any other member of any other class\n  \
    \      // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not change the visibility of any other member of any other class\n\
    \        // Do not", "        // Your code here\n        null", "        // Your\
    \ code here\n        return List[String]()", "        // your code here\n    \
    \    null", "        // Write your code here\n        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val words = s.split(\" \")\n        val result = new\
    \ ListBuffer[String]\n        for (word <- words) {\n            var count = 0\n\
    \            for (letter <- word) {\n                if (!vowels.contains(letter))\
    \ count += 1\n            }\n            if (count == n) result += word\n    \
    \    }\n        result.toList", "        // Write your code here\n        null",
  "        // Write your code here\n        var result = List[String]()\n        var\
    \ words = s.split(\" \")\n        for (word <- words) {\n            var count\
    \ = 0\n            for (i <- 0 until word.length) {\n                if (word(i)\
    \ != 'a' && word(i) != 'e' && word(i) != 'i' && word(i) != 'o' && word(i) != 'u')\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      if (count == n) {\n                result = result :+ word\n          \
    \  }\n        }\n        return result", "        // Your code here\n        null",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     // Write your code here\n        return List[String]()", "        // Your\
    \ code here\n        return null;", "        // TODO: Implement me!\n        return\
    \ List[String]()"]
stop_tokens:
- "\n    }\n"
