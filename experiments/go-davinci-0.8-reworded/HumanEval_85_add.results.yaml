language: go_test.go
name: HumanEval_85_add
results:
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var total int\n    for i, n := range lst {\n        if i % 2 == 1 && n %\
    \ 2 == 0 {\n            total += n\n        }\n    }\n    return total\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for index, value := range lst {\n        if index % 2 == 1\
    \ && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return 0\n    }\n    return lst[1] + add(lst[2:])\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpgdkgj1ni_test.go:35: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpgdkgj1ni_test.go:35: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, el := range lst {\n        if i % 2 == 1 && el\
    \ % 2 == 0 {\n            result += el\n        }\n    }\n    return result\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 ==\
    \ 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for idx, num := range lst {\n        if idx % 2 == 1 &&\
    \ num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, v := range lst {\n        if i % 2 == 1 && v %\
    \ 2 == 0 {\n            result += v\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var added int\n    for i, elm := range lst {\n        if i % 2 == 1 && elm\
    \ % 2 == 0 {\n            added += elm\n        }\n    }\n    return added\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, num := range lst {\n        if i % 2 == 1 && num % 2\
    \ == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    l := len(lst)\n    if l == 0 {\n        return 0\n    }\n    total := 0\n\
    \    for i, v := range lst {\n        if i%2 == 1 && v%2 == 0 {\n            total\
    \ += v\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var total int\n    for i, v := range lst {\n        if i % 2 == 1 && v %\
    \ 2 == 0 {\n            total += v\n        }\n    }\n    return total\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, e := range lst {\n        if i % 2 == 1 && e % 2 ==\
    \ 0 {\n            sum += e\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 ==\
    \ 0 {\n            total += x\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i%2 != 0 && v%2 == 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for i, v := range lst {\n        if i % 2 == 1 && v\
    \ % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var evens int\n    for i, x := range lst {\n        if i%2 != 0 && x%2 ==\
    \ 0 {\n            evens += x\n        }\n    }\n    return evens\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var total int\n    for i, elem := range lst {\n        if i%2 == 1 && elem%2\
    \ == 0 {\n            total += elem\n        }\n    }\n    return total\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, e := range lst {\n        if i % 2 == 1 && e % 2 ==\
    \ 0 {\n            sum += e\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, val := range lst {\n        if i % 2 == 1 && val\
    \ % 2 == 0 {\n            result += val\n        }\n    }\n    return result\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    res := 0\n    // add even elements at odd indices\n    for i := 0; i < len(lst);\
    \ i += 2 {\n        res += lst[i]\n    }\n    return res\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpwfh92xqt_test.go:37: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpwfh92xqt_test.go:37: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpwfh92xqt_test.go:37: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpwfh92xqt_test.go:37: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            total += v\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for i, e := range lst {\n        if i % 2 == 1 && e % 2\
    \ == 0 {\n            result += e\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, val := range lst {\n        if i % 2 == 1 && val % 2\
    \ == 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for i, v := range lst {\n        if i % 2 == 1 && v\
    \ % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var s int\n    var p bool\n    for _, v := range lst {\n        if v%2 ==\
    \ 0 {\n            if p {\n                s += v\n            }\n        }\n\
    \        p = !p\n    }\n    return s\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return -1\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpuf488_61_test.go:32: expected '%!s(int=88)', got '%!s(int=-1)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpuf488_61_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=-1)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpuf488_61_test.go:32: expected '%!s(int=0)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpuf488_61_test.go:32: expected\
    \ '%!s(int=12)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    n := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 == 0\
    \ {\n            n += v\n        }\n    }\n    return n\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.010s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, n := range lst {\n        if i%2 == 1 && n%2 == 0 {\n\
    \            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2 ==\
    \ 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    acc := 0\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n\
    \            acc += x\n        }\n    }\n    return acc\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i%2 == 1 && v%2 == 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    res := 0\n    for i, val := range lst {\n        if i % 2 == 1 && val % 2\
    \ == 0 {\n            res += val\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tsum := 0\n\tfor i, n := range lst {\n\t\tif i%2 != 0 && n%2 == 0 {\n\t\t\tsum\
    \ += n\n\t\t}\n\t}\n\treturn sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    ret := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            ret += v\n        }\n    }\n    return ret\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, val := range lst {\n        if i % 2 == 1 && val % 2\
    \ == 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var (\n        sum int\n        idx int\n    )\n    for _, v := range lst\
    \ {\n        if v % 2 == 0 && idx % 2 != 0 {\n            sum += v\n        }\n\
    \        idx++\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    var sum int\n    for i,\
    \ v := range lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.011s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    res := 0\n    for i, e := range lst {\n        if i % 2 == 1 && e % 2 ==\
    \ 0 {\n            res += e\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.014s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0\
    \ {\n            sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tvar answer int\n\tfor i, v := range lst {\n\t\tif i % 2 == 1 && v % 2 == 0 {\n\
    \t\t\tanswer += v\n\t\t}\n\t}\n\treturn answer\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2 ==\
    \ 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, num := range lst {\n        if i % 2 == 1 && num\
    \ % 2 == 0 {\n            result += num\n        }\n    }\n    return result\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tvar res int\n\tfor i := 0; i < len(lst); i++ {\n\t\tif i%2 == 1 && lst[i]%2\
    \ == 0 {\n\t\t\tres += lst[i]\n\t\t}\n\t}\n\treturn res\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplq37e5d2_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, val := range lst {\n        if i % 2 == 1 && val % 2\
    \ == 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    var sum int\n    for i,\
    \ v := range lst {\n        if v % 2 == 0 && i % 2 != 0 {\n            sum +=\
    \ v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n    var res int\n    for i,\
    \ v := range lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            res +=\
    \ v\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tsum := 0\n\tfor i := 1; i < len(lst); i += 2 {\n\t\tif lst[i] % 2 == 0 {\n\t\
    \t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \t// TODO add implementation\n\treturn 0\n}\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpge3dkpcr_test.go:33: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpge3dkpcr_test.go:33: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpge3dkpcr_test.go:33: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 ==\
    \ 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplq37e5d2_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, num := range lst {\n        if i % 2 == 1 && num\
    \ % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, val := range lst {\n        if i % 2 == 1 && val % 2\
    \ == 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tsum := 0\n\tfor i, n := range lst {\n\t\tif i % 2 == 1 && n % 2 == 0 {\n\t\t\
    \tsum += n\n\t\t}\n\t}\n\treturn sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for idx, num := range lst {\n        if idx % 2 == 1 &&\
    \ num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, e := range lst {\n        if i % 2 == 1 && e % 2\
    \ == 0 {\n            sum += e\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    res := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            res += v\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var s int\n    for i, n := range lst {\n        if i%2 == 1 && n%2 == 0 {\n\
    \            s += n\n        }\n    }\n    return s\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, e := range lst {\n        if i % 2 == 1 && e % 2 ==\
    \ 0 {\n            sum += e\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for idx, value := range lst {\n        if idx % 2 == 1 &&\
    \ value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    acc := 0\n    for i, val := range lst {\n        if i % 2 == 1 && val % 2\
    \ == 0 {\n            acc += val\n        }\n    }\n    return acc\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var total int\n    for index, value := range lst {\n        if index % 2\
    \ == 1 && value % 2 == 0 {\n            total += value\n        }\n    }\n   \
    \ return total\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    // Take last element\n\
    \    last := lst[len(lst)-1]\n    return last + add(lst[:len(lst)-1])\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpwykf3rz7_test.go:38: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpwykf3rz7_test.go:38: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpwykf3rz7_test.go:38: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpwykf3rz7_test.go:38: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // your code here\n    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp_9wddway_test.go:33: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp_9wddway_test.go:33: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmp_9wddway_test.go:33: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, elem := range lst {\n        if i % 2 == 1 && elem %\
    \ 2 == 0 {\n            sum += elem\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, e := range lst {\n        if i % 2 == 1 && e %\
    \ 2 == 0 {\n            result += e\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    if len(lst) > 0 {\n        for i := 0; i < len(lst);\
    \ i++ {\n            if i % 2 == 1 && lst[i] % 2 == 0 {\n                sum +=\
    \ lst[i]\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tresult := 0\n\tfor i, v := range lst {\n\t\tif i % 2 == 1 && v % 2 == 0 {\n\t\
    \t\tresult += v\n\t\t}\n\t}\n\treturn result\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for idx, val := range lst {\n        if idx % 2 == 1 && val\
    \ % 2 == 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var r int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            r += v\n        }\n    }\n    return r\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, v := range lst {\n        if i % 2 == 1 && v %\
    \ 2 == 0 {\n            result += v\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var res int\n    for index, value := range lst {\n        if index % 2 ==\
    \ 1 && value % 2 == 0 {\n            res += value\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    for i := 1; i < len(lst); i += 2 {\n        lst[i] += lst[i-1]\n    }\n \
    \   return lst[len(lst)-1]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpyimpdbhl_test.go:35: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpyimpdbhl_test.go:35: expected\
    \ '%!s(int=122)', got '%!s(int=124)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpyimpdbhl_test.go:35: expected '%!s(int=0)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpyimpdbhl_test.go:35: expected\
    \ '%!s(int=12)', got '%!s(int=14)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            total += v\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    res := 0\n    for i, e := range lst {\n        if i % 2 == 1 && e % 2 ==\
    \ 0 {\n            res += e\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.014s\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) % 2 == 0 {\n        return 0\n    }\n    return lst[len(lst)\
    \ - 1]\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpsqbxo41x_test.go:35: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpsqbxo41x_test.go:35: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpsqbxo41x_test.go:35: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // YOUR CODE HERE\n    var ret int = 0\n    for i, val := range lst {\n \
    \       if (i % 2 == 1) && (val % 2 == 0) {\n            ret += val\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tvar total int\n\tfor i, v := range lst {\n\t\tif i % 2 == 1 && v % 2 == 0 {\n\
    \t\t\ttotal += v\n\t\t}\n\t}\n\treturn total\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for i, num := range lst {\n        if i % 2 == 1 && num %\
    \ 2 == 0 {\n            total += num\n        }\n    }\n    return total\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    i := 0\n    var res int\n    for j, e := range lst {\n        if j % 2 ==\
    \ 0 {\n            i += e\n        } else {\n            res += e\n        }\n\
    \    }\n    if i % 2 == 0 {\n        return i + res\n    }\n    return res\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp7irif06b_test.go:44: expected '%!s(int=88)', got '%!s(int=92)'\n \
    \   --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp7irif06b_test.go:44: expected\
    \ '%!s(int=122)', got '%!s(int=146)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp7irif06b_test.go:44: expected '%!s(int=0)', got '%!s(int=17)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp7irif06b_test.go:44: expected\
    \ '%!s(int=12)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, elem := range lst {\n        if i % 2 == 1 && elem %\
    \ 2 == 0 {\n            sum += elem\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int = 0\n    for i, v := range lst {\n        if i%2 != 0 && v%2\
    \ == 0 {\n            result += v\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var res int\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2\
    \ == 0 {\n            res += n\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, n := range lst {\n        if i % 2 == 1 && n %\
    \ 2 == 0 {\n            result += n\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2\
    \ == 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 ==\
    \ 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) < 2 {\n        return 0\n    }\n    sum := 0\n    for i := 1;\
    \ i < len(lst); i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // Code here\n    sum := 0\n    for i, v := range lst {\n        if i % 2\
    \ == 1 && v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074895
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplq37e5d2_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, val := range lst {\n        if i % 2 == 1 && val\
    \ % 2 == 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074897
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, num := range lst {\n        if i % 2 == 1 && num\
    \ % 2 == 0 {\n            result += num\n        }\n    }\n    return result\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074893
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // Write your code here\n    sum := 0\n    odd := true\n    for _, v := range\
    \ lst {\n        if odd {\n            sum += v\n        }\n        odd = !odd\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpk5vjd9r4_test.go:41: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpk5vjd9r4_test.go:41: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmpk5vjd9r4_test.go:41: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmpk5vjd9r4_test.go:41: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    a := 0\n    for k, v := range lst {\n        if v % 2 == 0 && k % 2 != 0\
    \ {\n            a += v\n        }\n    }\n    return a\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, element := range lst {\n        if i % 2 == 1 && element\
    \ % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074897
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var output int\n    if len(lst) == 0 {\n        return output\n    }\n  \
    \  for i, x := range lst {\n        if i % 2 == 1 && x % 2 == 0 {\n          \
    \  output += x\n        }\n    }\n    return output\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if (i % 2 != 0) && (v % 2\
    \ == 0) {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var total int\n    for i, val := range lst {\n        if i % 2 == 1 && val\
    \ % 2 == 0 {\n            total += val\n        }\n    }\n    return total\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, j := range lst {\n        if i % 2 == 1 && j % 2\
    \ == 0 {\n            sum += j\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, v := range lst {\n        if i % 2 == 1 && v %\
    \ 2 == 0 {\n            result += v\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, e := range lst {\n        if i % 2 == 1 && e % 2 ==\
    \ 0 {\n            sum += e\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 2
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // your code here\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkolmusmb_test.go:14:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074897
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for i, v := range lst {\n        if (i % 2 == 1) && (v %\
    \ 2 == 0) {\n            result += v\n        }\n    }\n    return result\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    var flg bool = true\n    for _, v := range lst {\n \
    \       if flg {\n            if v % 2 == 0 {\n                sum += v\n    \
    \        }\n        }\n        flg = !flg\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmp9b8bgaff_test.go:42: expected '%!s(int=88)', got '%!s(int=4)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmp9b8bgaff_test.go:42: expected\
    \ '%!s(int=122)', got '%!s(int=12)'\n    --- FAIL: TestAdd/test_num__2 (0.00s)\n\
    \        tmp9b8bgaff_test.go:42: expected '%!s(int=0)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmp9b8bgaff_test.go:42: expected\
    \ '%!s(int=12)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    if len(lst) > 0 {\n        for i, v := range lst {\n      \
    \      if i % 2 == 1 && v % 2 == 0 {\n                sum += v\n            }\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, e := range lst {\n        if i%2 == 1 && e%2 == 0 {\n\
    \            sum += e\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, v := range lst {\n        if v % 2 == 0 && i %\
    \ 2 != 0 {\n            result += v\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tvar sum int\n\tfor i, n := range lst {\n\t\tif n % 2 == 0 && i % 2 != 0 {\n\t\
    \t\tsum += n\n\t\t}\n\t}\n\treturn sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2 ==\
    \ 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, val := range lst {\n        if i%2 == 1 && val%2\
    \ == 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    res := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            res += v\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var res int\n    for i, n := range lst {\n        if n%2 == 0 && i%2 != 0\
    \ {\n            res += n\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2 ==\
    \ 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplq37e5d2_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074779
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // TODO: Write your code here\n    return 0\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpbarf2l_o_test.go:33: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpbarf2l_o_test.go:33: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpbarf2l_o_test.go:33: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    res := 0\n    for i, item := range lst {\n        if i % 2 == 1 && item %\
    \ 2 == 0 {\n            res += item\n        }\n    }\n    return res\n}\n\ntype\
    \ testpair \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5qgyot49_test.go:22:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074897
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2\
    \ == 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, n := range lst {\n        if i%2 != 0 && n%2 == 0 {\n\
    \            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, val := range lst {\n        if i % 2 == 1 && val\
    \ % 2 == 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074897
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i%2 == 1 && v%2 == 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, value := range lst {\n        if i % 2 == 1 &&\
    \ value % 2 == 0 {\n            result += value\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int = 0\n    for i, e := range lst {\n        if i%2 == 1 && e%2\
    \ == 0 {\n            sum += e\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplq37e5d2_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for index, value := range lst {\n        if index % 2 ==\
    \ 1 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074898
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    for _, v := range lst {\n        fmt.Println(v)\n    }\n    return 0\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "4\n88\n4\n5\n6\n7\n2\n122\n4\n0\n6\n7\n4\n4\n6\n8\n--- FAIL: TestAdd (0.00s)\n\
    \    --- FAIL: TestAdd/test_num__0 (0.00s)\n        tmppji7q98p_test.go:35: expected\
    \ '%!s(int=88)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmppji7q98p_test.go:35: expected '%!s(int=122)', got '%!s(int=0)'\n \
    \   --- FAIL: TestAdd/test_num__3 (0.00s)\n        tmppji7q98p_test.go:35: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, v := range lst {\n        if v % 2 == 0 && i %\
    \ 2 != 0 {\n            result += v\n        }\n    }\n    return result\n}\n\n\
    type AddTestCase \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb_2ys2st_test.go:22:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074898
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, element := range lst {\n        if i % 2 == 1 &&\
    \ element % 2 == 0 {\n            sum += element\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    sum := 0\n    for i, n\
    \ := range lst {\n        if i%2 == 1 && n%2 == 0 {\n            sum += n\n  \
    \      }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, val := range lst {\n        if i % 2 == 1 && val\
    \ % 2 == 0 {\n            result += val\n        }\n    }\n    return result\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // My answer\n    var sum int\n    for i, v := range lst {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, val := range lst {\n        if i % 2 == 1 && val % 2\
    \ == 0 {\n            sum += val\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, elem := range lst {\n        if i % 2 == 1 && elem\
    \ % 2 == 0 {\n            sum += elem\n        }\n    }\n    return sum\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, value := range lst {\n        if i % 2 == 1 && value\
    \ % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, val := range lst {\n        if i % 2 == 1 && val\
    \ % 2 == 0 {\n            result += val\n        }\n    }\n    return result\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var acc = 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2\
    \ == 0 {\n            acc += x\n        }\n    }\n    return acc\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2 ==\
    \ 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, num := range lst {\n        if num % 2 == 0 && i % 2\
    \ != 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var even = 0\n    for i, v := range lst {\n        if v % 2 == 0 && i % 2\
    \ != 0 {\n            even += v\n        }\n    }\n    return even\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tvar sum int\n\tfor i, j := range lst {\n\t\tif i%2 != 0 && j%2 == 0 {\n\t\t\t\
    sum += j\n\t\t}\n\t}\n\treturn sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    if lst == nil {\n        return sum\n    }\n    for i, v :=\
    \ range lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate\
    \ := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            total += v\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, num := range lst {\n        if i % 2 == 1 && num % 2\
    \ == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, x := range lst {\n        if (i % 2 == 1) && (x % 2\
    \ == 0) {\n            sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, num := range lst {\n        if i % 2 == 1 && num\
    \ % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074893
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 ==\
    \ 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i%2 == 1 && v%2 == 0\
    \ {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if (i + 1) % 2 == 0 && v %\
    \ 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \treturn 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpwgwlk7q8_test.go:32: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpwgwlk7q8_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpwgwlk7q8_test.go:32: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    s := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 == 0\
    \ {\n            s += v\n        }\n    }\n    return s\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    // Your code here\n    var sum int\n    for i, v := range lst {\n       \
    \ if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i%2 != 0 && v%2 == 0 {\n\
    \            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    if len(lst) == 0 {\n        return sum\n    }\n    for i :=\
    \ 1; i < len(lst); i += 2 {\n        if lst[i] % 2 == 0 {\n            sum +=\
    \ lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n\
    \  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}),\
    \ expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected:\
    \ 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     {\
    \ actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    result := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            result += v\n        }\n    }\n    return result\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var even int\n    for index, num := range lst {\n        if index % 2 ==\
    \ 1 && num % 2 == 0 {\n            even += num\n        }\n    }\n    return even\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var result int\n    for i, element := range lst {\n        if i % 2 == 1\
    \ && element % 2 == 0 {\n            result += element\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tvar i int\n\n\tfor idx, val := range lst {\n\t\tif (idx % 2 != 0) && (val %\
    \ 2 == 0) {\n\t\t\ti += val\n\t\t}\n\t}\n\n\treturn i\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, element := range lst {\n        if i % 2 == 1 && element\
    \ % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074897
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tres := 0\n\tif len(lst) > 1 {\n\t\tfor i := 1; i < len(lst); i += 2 {\n\t\t\t\
    if lst[i] % 2 == 0 {\n\t\t\t\tres += lst[i]\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    s := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 == 0\
    \ {\n            s += v\n        }\n    }\n    return s\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, e := range lst {\n        if i % 2 == 1 && e % 2 ==\
    \ 0 {\n            sum += e\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2 ==\
    \ 0 {\n            total += n\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074900
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    if len(lst) == 0 {\n        return 0\n    }\n\n    i := 1\n    sum := 0\n\
    \    for i < len(lst) {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n        i += 2\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i%2 == 1 && v%2 == 0\
    \ {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \tvar sum int\n\tfor i := 1; i < len(lst); i += 2 {\n\t\tif lst[i] % 2 == 0 {\n\
    \t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nfunc TestAdd(t *testing.T)\
    \ {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for i, num := range lst {\n        if i % 2 == 1 && num %\
    \ 2 == 0 {\n            total += num\n        }\n    }\n    return total\n}\n\n\
    func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074895
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    total := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            total += v\n        }\n    }\n    return total\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var res int\n    for i, n := range lst {\n        if i%2 == 1 && n%2 == 0\
    \ {\n            res += n\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var sum int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 ==\
    \ 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074890
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    ans := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            ans += v\n        }\n    }\n    return ans\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    return 0\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmplq37e5d2_test.go:32: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmplq37e5d2_test.go:32: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, n := range lst {\n        if i % 2 == 1 && n % 2 ==\
    \ 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    sum := 0\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2 ==\
    \ 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074779
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var res int\n    for i, v := range lst {\n        if i%2 == 1 && v%2 == 0\
    \ {\n            res += v\n        }\n    }\n    return res\n}\n\nfunc TestAdd(t\
    \ *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4,\
    \ 88}), expected: 88 },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}),\
    \ expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n\
    \     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074901
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n\
    \    var ans int\n    for i, _ := range lst {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            ans += lst[i]\n        }\n    }\n    return ans\n}\n\
    \nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074901
