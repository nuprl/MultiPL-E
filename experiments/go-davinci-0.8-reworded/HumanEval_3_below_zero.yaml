name: HumanEval_3_below_zero
language: go_test.go
prompt: "package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You're given a list of deposit and withdrawal operations on a bank account that\
  \ starts with\n// zero balance. Your task is to detect if at any point the balance\
  \ of account fallls below zero, and\n// at that point function should return true.\
  \ Otherwise it should return false.\n// >>> below_zero([]int{1, 2, 3})\n// false\n\
  // >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations []int)\
  \ bool {\n"
tests: "func TestBelow_Zero(t *testing.T) {\n  candidate := below_zero\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: false },\n     { actual:\
  \ candidate([]int{1, 2, -3, 1, 2, -3}), expected: false },\n     { actual: candidate([]int{1,\
  \ 2, -4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, -1, 2, -2,\
  \ 5, -5, 4, -4}), expected: false },\n     { actual: candidate([]int{1, -1, 2, -2,\
  \ 5, -5, 4, -5}), expected: true },\n     { actual: candidate([]int{1, -2, 2, -2,\
  \ 5, -5, 4, -4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    balance := 0\n    for _, op := range operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    if len(operations) == 0 {\n        return false\n\
    \    }\n    var sum int\n    for _, operation := range operations {\n        sum\
    \ += operation\n        if sum < 0 {\n            return true\n        }\n   \
    \ }\n    return false\n}\n", "    balance := 0\n    for _, op := range operations\
    \ {\n        balance += op\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    result := 0\n    for _, v := range\
    \ operations {\n        result += v\n        if result < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n", "    var sum int\n    for _,\
    \ operation := range operations {\n        sum += operation\n        if sum <\
    \ 0 {\n            return true\n        }\n    }\n    return false\n}\n", "\t\
    balance := 0\n\tfor _, operation := range operations {\n\t\tbalance += operation\n\
    \t\tif balance < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n", " \
    \   balance := 0\n    for _, amount := range operations {\n        balance +=\
    \ amount\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    var result bool\n    var balance int\n    for _,\
    \ element := range operations {\n        balance += element\n        if balance\
    \ < 0 {\n            result = true\n            break\n        }\n    }\n    return\
    \ result\n}\n", "    var sum int\n    for _, i := range operations {\n       \
    \ sum += i\n        if sum < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    return false\n}\n", "    balance := 0\n    for _,\
    \ operation := range operations {\n        balance += operation\n        if balance\
    \ < 0 {\n            return true\n        }\n    }\n    return false\n}\n", "\t\
    balance := 0\n\tfor _, op := range operations {\n\t\tbalance += op\n\t\tif balance\
    \ < 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n", "    var sum int\n\
    \    for _, i := range operations {\n        sum += i\n        if sum < 0 {\n\
    \            return true\n        }\n    }\n    return false\n}\n", "    total\
    \ := 0\n    for _, amt := range operations {\n        total += amt\n        if\
    \ total < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
  "    balance := 0\n    for _, op := range operations {\n        balance += op\n\
    \        if balance < 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    var sum int\n    for _, i := range operations {\n        sum\
    \ += i\n        if sum < 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    balance := 0\n    for _, i := range operations {\n       \
    \ balance += i\n        if balance < 0 {\n            return true\n        }\n\
    \    }\n    return false\n}\n", "    balance := 0\n    for _, operation := range\
    \ operations {\n        balance += operation\n        if balance < 0 {\n     \
    \       return true\n        }\n    }\n    return false\n}\n", "    balance :=\
    \ 0\n    for _, value := range operations {\n        balance += value\n      \
    \  if balance < 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n", "    var balance int = 0\n    for _, operation := range operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
