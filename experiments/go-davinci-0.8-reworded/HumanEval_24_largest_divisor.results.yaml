language: go_test.go
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    ret := 0\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n\
    \            ret = i\n        }\n    }\n    return ret\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 0\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpi9sdbg5u_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpi9sdbg5u_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int = n - 1\n    for ; largest > 0; largest-- {\n   \
    \     if n % largest == 0 {\n            break\n        }\n    }\n    return largest\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n == 1 {\n        return 1\n    }\n\n    d := n - 1\n    for ;\
    \ n % d != 0; d-- {\n    }\n    return d\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest_divisor := 1\n    for i := 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return largest_divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := n - 1\n    for ; i > 0; i-- {\n        if n % i == 0 {\n   \
    \         return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    max_divisor := 0\n    for i := 1; i < n; i++ {\n        if n % i\
    \ == 0 {\n            max_divisor = i\n        }\n    }\n    return max_divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073180
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest_divisor int\n    var divisor int\n    for divisor = n\
    \ - 1; divisor > 0; divisor-- {\n        if n % divisor == 0 {\n            largest_divisor\
    \ = divisor\n            break\n        }\n    }\n    return largest_divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 0\n    for i := 1; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    fmt.Printf(\"looking for divisor of %d\\n\", n)\n    for i := n -\
    \ 1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n\
    \    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 0\n    for i := 1; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073180
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    r := 0\n    for i := 2; i < n/2; i++ {\n        if n % i == 0 {\n\
    \            r = i\n        }\n    }\n    return r\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmphvi9ydh3_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmphvi9ydh3_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmphvi9ydh3_test.go:38: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmphvi9ydh3_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 2
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    //return largest_divisor_recursive(n, 2)\n    return largest_divisor_iterative(n)\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyqyh0t7r_test.go:13:12: undefined: largest_divisor_iterative

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073263
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest_divisor := 1\n    for i := 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return largest_divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n/2; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // Complete this function\n    for i := n - 1; i > 0; i-- {\n   \
    \     if n % i == 0 {\n            return i\n        }\n    }\n    return 0\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 2\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            divisor = i\n        }\n    }\n    return divisor\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp5oxsqgxg_test.go:38: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp5oxsqgxg_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    result := 0\n    for i := n - 1; i > 0; i-- {\n        if n % i ==\
    \ 0 {\n            result = i\n            break\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    res := 1\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            res = i\n        }\n    }\n    return res\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest_divisor := 0\n    for i := 1; i < n; i++ {\n        if n\
    \ % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return largest_divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest = 1\n\n    for i := 2; i < n; i++ {\n        if n % i\
    \ == 0 {\n            largest = i\n        }\n    }\n\n    return largest\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 2\n    for ; divisor < n; divisor++ {\n        if n %\
    \ divisor == 0 {\n            return n / divisor\n        }\n    }\n    return\
    \ n\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpib_ryhey_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpib_ryhey_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest_divisor int\n    for i := n-1; i > 0; i-- {\n       \
    \ if n % i == 0 {\n            largest_divisor = i\n            break\n      \
    \  }\n    }\n    return largest_divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var i int\n    for i = n - 1; i > 0; i-- {\n        if n % i == 0\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073180
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var divisor int\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            divisor = i\n        }\n    }\n    return divisor\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073180
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := 2\n    for i < n {\n        if n % i == 0 {\n            n =\
    \ n / i\n        } else {\n            i += 1\n        }\n    }\n    return n\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpg5c77wf6_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpg5c77wf6_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpg5c77wf6_test.go:40: expected '%!s(int=50)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073266
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest_divisor int\n    for i := n - 1; i > 0; i-- {\n     \
    \   if n % i == 0 {\n            largest_divisor = i\n            break\n    \
    \    }\n    }\n    return largest_divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    d := 2\n    for ; d < n; d++ {\n        if n % d == 0 {\n       \
    \     break\n        }\n    }\n    return d\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp3_3wuyqx_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp3_3wuyqx_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp3_3wuyqx_test.go:38: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp3_3wuyqx_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.013s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := n / 2\n    for {\n        if n % i == 0 {\n            return\
    \ i\n        }\n        i -= 1\n    }\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := n - 1\n    for divisor > 0 {\n        if n % divisor ==\
    \ 0 {\n            return divisor\n        }\n        divisor -= 1\n    }\n  \
    \  return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return 1\n    }\n    i := n / 2\n    for ; i\
    \ > 1; i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n\
    \    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073180
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    ld := 1\n    // loop through all numbers up to n\n    for i := 2;\
    \ i < n; i++ {\n        // if a number is divisible by n, see if it's largest\
    \ so far\n        if n % i == 0 {\n            if i > ld {\n                ld\
    \ = i\n            }\n        }\n    }\n    return ld\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var i int\n    for i = n - 1; i > 0; i-- {\n        if n % i == 0\
    \ {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := n - 1\n    for n % i != 0 {\n        i--\n    }\n    return\
    \ i\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n == 1 {\n        return 1\n    }\n    largest_divisor := n/2\n\
    \    for i := n/2; i > 1; i-- {\n        if n % i == 0 {\n            largest_divisor\
    \ = i\n            break\n        }\n    }\n    return largest_divisor\n}\n\n\
    func TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__1\
    \ (0.00s)\n        tmpq0tqotxf_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := n / 2\n    for i := divisor; i > 0; i-- {\n        if\
    \ n % i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n <= 1 {\n        return n\n    }\n    biggest := 1\n    // !!!\
    \ Remember to start the loop with 0 !!!\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            biggest = i\n        }\n    }\n    return biggest\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var i int\n    for i = n/2; i > 0; i-- {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return i\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    ld := 1\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            ld = i\n        }\n    }\n    return ld\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n == 1 {\n        return 1\n    }\n\n    largest := 1\n    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            largest = i\n   \
    \     }\n    }\n\n    return largest\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpwpy8pngw_test.go:37: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpwpy8pngw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var answer int = 1\n    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            answer = i\n        }\n    }\n    return answer\n}\n\n\
    func TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var divisor int = n - 1\n\n    for n % divisor != 0 {\n        divisor--\n\
    \    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n\
    \  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var i int\n    for i = n - 1; i > 0; i-- {\n        if n % i == 0\
    \ {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n/2; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int = 1\n    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := n - 1\n    for ; i > 0; i-- {\n        if n % i == 0 {\n   \
    \         return i\n        }\n    }\n    return i\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // no perfect square root calculation\n    // no perfect square root\
    \ calculation\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n   \
    \         return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    max := 1\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var max = n/2\n    var r int\n    for i := max; i > 0; i-- {\n  \
    \      r = n % i\n        if r == 0 {\n            return i\n        }\n    }\n\
    \    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 1\n    for i := 1; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // Start looking from 2\n    // Stop looking when you reach n / 2\n\
    \    for i := 2; i < n / 2; i++ {\n        if n % i == 0 {\n            return\
    \ i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpt272gekx_test.go:39: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpt272gekx_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest_divisor := 1\n    for i := 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return largest_divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for d := n - 1; d > 0; d-- {\n        if n % d == 0 {\n         \
    \   return d\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073268
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 0\n    for i := n - 1; i > 0; i-- {\n        if n % i\
    \ == 0 {\n            largest = i\n            break\n        }\n    }\n    return\
    \ largest\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073269
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var output int\n    for i := n - 1; i > 0; i-- {\n        if n %\
    \ i == 0 {\n            output = i\n            break\n        }\n    }\n    return\
    \ output\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n % 2 == 0 {\n        return n / 2\n    } else {\n        // we\
    \ want to find the max divisor less than n, which we can find by\n        // dividing\
    \ n by a number 2 less than itself\n        for i := n - 2; i > 0; i -= 2 {\n\
    \            if n % i == 0 {\n                return i\n            }\n      \
    \  }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n; i > 0; i-- {\n        if n % i == 0 {\n            return\
    \ i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp2uqyq2zf_test.go:37: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp2uqyq2zf_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp2uqyq2zf_test.go:37: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp2uqyq2zf_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp2uqyq2zf_test.go:37: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 2
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // we need only to find factors <= n/2\n    // and we only want the\
    \ largest one\n    var a int = 1\n    var b int = n/2\n    var m int = n/2\n \
    \   for i := m; i > a; i-- {\n        if n % i == 0 {\n            // found it\n\
    \            return i\n        }\n    }\n    return a\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0tn_x73v_test.go:15:9: b declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var i int\n    for i = 2; i <= n; i++ {\n        if n % i == 0 {\n\
    \            if i == n {\n                return 1\n            }\n          \
    \  n = n / i\n            i = 1\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpbo91itz1_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpbo91itz1_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpbo91itz1_test.go:42: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    for i := 1; i < n; i++ {\n        if n % i == 0\
    \ {\n            divisor = i\n        }\n    }\n    return divisor\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073180
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    d := n - 1\n    for n % d != 0 {\n        d -= 1\n    }\n    return\
    \ d\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    lst := []int{}\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            lst = append(lst, i)\n        }\n    }\n    return lst[len(lst)\
    \ - 1]\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n <= 1 {\n        return 1\n    }\n    for i := n - 1; i > 0;\
    \ i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n   \
    \ return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    m := n - 1\n    for n % m != 0 {\n        m -= 1\n    }\n    return\
    \ m\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := 2\n    for {\n        if n % i == 0 {\n            fmt.Println(i)\n\
    \            n = n / i\n        } else {\n            i++\n        }\n       \
    \ if n == 1 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "3\n7\n2\n5\n2\n2\n5\n5\n7\n7\n--- FAIL: TestLargest_Divisor (0.00s)\n \
    \   --- FAIL: TestLargest_Divisor/test_num__0 (0.00s)\n        tmp2i221mbo_test.go:44:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__1\
    \ (0.00s)\n        tmp2i221mbo_test.go:44: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp2i221mbo_test.go:44:\
    \ expected '%!s(int=50)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var i int\n    for i = n - 1; i > 0; i-- {\n        if n % i == 0\
    \ {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n/2; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := n\n    for i := n-1; i > 0; i-- {\n        if n % i ==\
    \ 0 {\n            largest = i\n            break\n        }\n    }\n    return\
    \ largest\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // This is a brute force approach, iterating over all possible numbers\n\
    \    // First we will find the limit of the loop\n    // If a number is divisible\
    \ by 2 then it is even\n    // If a number is divisible by 2 and 5, then it is\
    \ divisible by 10\n    // So, we just find the largest factor of 10\n    limit\
    \ := 1\n    for n % 10 == 0 {\n        limit *= 10\n        n /= 10\n    }\n \
    \   // Now, we iterate until the limit\n    for i := limit/10; i > 0; i /= 10\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpvgwcaxoe_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpvgwcaxoe_test.go:48:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpvgwcaxoe_test.go:48: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 1\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var result int\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n == 1 {\n        return 1\n    }\n    largest := 1\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            largest = i\n     \
    \   }\n    }\n    return largest\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp9y3_s90i_test.go:37: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp9y3_s90i_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp9y3_s90i_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int = 0\n    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpbkvlykv6_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpbkvlykv6_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest = 1\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    //Largest prime factor of n\n    //https://www.hackerrank.com/contests/projecteuler/challenges/euler003/problem\n\
    \    f := 2\n    for n > f {\n        if n % f == 0 {\n            n = n / f\n\
    \        } else {\n            f = f + 1\n        }\n    }\n    return f\n}\n\n\
    func TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpbx9hlqjl_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpbx9hlqjl_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpbx9hlqjl_test.go:42: expected '%!s(int=50)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := n - 1\n    for i := n; i > 0; i-- {\n        if n % i\
    \ == 0 {\n            divisor = i\n            break\n        }\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgp_7yea3_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgp_7yea3_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgp_7yea3_test.go:39: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgp_7yea3_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgp_7yea3_test.go:39: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // TODO\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpuimuj0p5_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpuimuj0p5_test.go:33:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpuimuj0p5_test.go:33: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpuimuj0p5_test.go:33:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpuimuj0p5_test.go:33: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073207
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    for i := n - 1; i > 1; i--\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 0\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpsjjj5jhu_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpsjjj5jhu_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073271
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := n - 1\n    for ; n % i != 0; i-- { }\n    return i\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ n / i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmptro00rz4_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmptro00rz4_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // if n is 0 or 1, return n\n    if n <= 1 {\n        return n\n\
    \    }\n    // if n is even, return n/2\n    if n % 2 == 0 {\n        return n\
    \ / 2\n    }\n    // if n is odd, start at 3 and find the largest divisor\n  \
    \  for i := 3; i < n; i++ {\n        if n % i == 0 {\n            return n / i\n\
    \        }\n    }\n    // return 1 if no other divisor is found\n    return 1\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // The largest divisor cannot be larger than half the number\n  \
    \  upperBound := n / 2\n    if upperBound < 2 {\n        return 1\n    }\n   \
    \ // The largest divisor cannot be smaller than 1\n    lowerBound := 1\n    var\
    \ midPoint int\n    for lowerBound < upperBound {\n        midPoint = (lowerBound\
    \ + upperBound) / 2\n        if n % midPoint == 0 {\n            lowerBound =\
    \ midPoint + 1\n        } else {\n            upperBound = midPoint\n        }\n\
    \    }\n    return lowerBound - 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp0pecgp3l_test.go:48: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp0pecgp3l_test.go:48:\
    \ expected '%!s(int=50)', got '%!s(int=25)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp0pecgp3l_test.go:48: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073180
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest_divisor := 0\n    for i := 1; i < n; i++ {\n        if n\
    \ % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return largest_divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 1\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest = 0\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n <= 1 {\n        return n\n    }\n    for i := n - 1; i > 0;\
    \ i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n   \
    \ return n\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var result int = n - 1\n    for ; result > 0; result-- {\n      \
    \  if n % result == 0 {\n            break\n        }\n    }\n    return result\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    max := 0\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var d, maxd int\n    maxd = 1\n    d = 2\n    for ; d < n; d++ {\n\
    \        if n % d == 0 {\n            maxd = d\n        }\n    }\n    return maxd\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var divisor int\n    if n == 1 {\n        return 1\n    }\n    for\
    \ i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n            divisor = i\n\
    \            break\n        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 1\n    for i := 1; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073267
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := n - 1\n    for ; i > 0; i-- {\n        if n % i == 0 {\n   \
    \         return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    x := n-1\n    for n % x != 0 {\n        x -= 1\n    }\n    return\
    \ x\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest_divisor := 1\n    for i := 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return largest_divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 2\n    for divisor <= n/2 {\n        if n % divisor ==\
    \ 0 {\n            return n / divisor\n        }\n        divisor += 1\n    }\n\
    \    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    d := n-1\n    for ; n%d != 0; d-- {\n    }\n    return d\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var i int\n    for i = n; i > 0; i-- {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return i\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp01g7pbut_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp01g7pbut_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp01g7pbut_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp01g7pbut_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp01g7pbut_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    d := n - 1\n    for d > 0 {\n        if n % d == 0 {\n          \
    \  return d\n        }\n        d -= 1\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            divisor = i\n        }\n    }\n    return divisor\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n == 1 {\n        return 1\n    }\n\n    i := n - 1\n    for ;\
    \ i > 1; i-- {\n        if n % i == 0 {\n            return i\n        }\n   \
    \ }\n\n    return i\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    limit := n / 2\n    for i := limit; i > 0; i-- {\n        if n %\
    \ i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // TODO: implement this\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpht57d3zp_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpht57d3zp_test.go:33:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpht57d3zp_test.go:33: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpht57d3zp_test.go:33:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpht57d3zp_test.go:33: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest_factor := n-1\n    for i := n-1; i > 0; i-- {\n        if\
    \ n % i == 0 {\n            largest_factor = i\n            break\n        }\n\
    \    }\n    return largest_factor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int = 0\n    for i := 1; i < n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := n/2\n    for divisor > 0 {\n        if n % divisor ==\
    \ 0 {\n            return divisor\n        }\n        divisor--\n    }\n    return\
    \ 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return 1\n    }\n    maxDivisor := 1\n    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            maxDivisor = i\n\
    \        }\n    }\n    return maxDivisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073274
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest_divisor := 1\n    for i := 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return largest_divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp1z0pyvax_test.go:32: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp1z0pyvax_test.go:32:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp1z0pyvax_test.go:32: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp1z0pyvax_test.go:32:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp1z0pyvax_test.go:32: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 0\n    for i := 1; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := n-1\n    for divisor > 0 {\n        if n % divisor ==\
    \ 0 {\n            return divisor\n        }\n        divisor--\n    }\n    return\
    \ 0\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073274
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var result int = n-1\n    for n%result != 0 {\n        result -=\
    \ 1\n    }\n    return result\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n\
    \  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073274
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // start at n - 1, then take numbers down one by one and check if\
    \ they evenly divide n\n    // if so, return that number, if not, return the next\
    \ lower number, etc.\n    ld := n - 1\n\n    for i := n - 1; i > 0; i-- {\n  \
    \      if n % i == 0 {\n            ld = i\n            break\n        }\n   \
    \ }\n\n    return ld\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073274
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073180
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n == 1 {\n        return 1\n    }\n    for i := n - 1; i > 0;\
    \ i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n   \
    \ return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int\n    for i := n-1; i > 0; i-- {\n        if n % i\
    \ == 0 {\n            largest = i\n            break\n        }\n    }\n    return\
    \ largest\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073180
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := n / 2\n    for i := divisor; i > 0; i-- {\n        if\
    \ n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // Divide by every number smaller than n, starting with n-1\n   \
    \ for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n\
    \        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n\
    \  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    i := 2\n    for i < n {\n        if n % i == 0 {\n            n =\
    \ n / i\n        } else {\n            i++\n        }\n    }\n    return n\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp9_zdaw0c_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp9_zdaw0c_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmp9_zdaw0c_test.go:40: expected '%!s(int=50)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := n/2\n    for i := divisor; i > 0; i-- {\n        if n\
    \ % i == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var res int\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            res = i\n        }\n    }\n    return res\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpj_uww6a6_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpj_uww6a6_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    return 15\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpyy75xm7q_test.go:32: expected '%!s(int=1)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpyy75xm7q_test.go:32:\
    \ expected '%!s(int=1)', got '%!s(int=15)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpyy75xm7q_test.go:32: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpyy75xm7q_test.go:32:\
    \ expected '%!s(int=50)', got '%!s(int=15)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpyy75xm7q_test.go:32: expected '%!s(int=7)', got '%!s(int=15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // do something here\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpi0ea6vwk_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpi0ea6vwk_test.go:33:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpi0ea6vwk_test.go:33: expected '%!s(int=5)', got '%!s(int=0)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpi0ea6vwk_test.go:33:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpi0ea6vwk_test.go:33: expected '%!s(int=7)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var result int\n    for i := 1; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var divisor = n\n    for i := divisor; i > 0; i-- {\n        if n\
    \ % i == 0 {\n            divisor = i\n            break\n        }\n    }\n \
    \   return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmppzzk4whv_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmppzzk4whv_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmppzzk4whv_test.go:39: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmppzzk4whv_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmppzzk4whv_test.go:39: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n <= 1 {\n        return 1\n    }\n    for i := n - 1; i > 0;\
    \ i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n   \
    \ return 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    return n / 2\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__1\
    \ (0.00s)\n        tmpsoqtxnmx_test.go:32: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__4 (0.00s)\n        tmpsoqtxnmx_test.go:32:\
    \ expected '%!s(int=7)', got '%!s(int=24)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    // loop down from n-1 to find the first divisor\n    for d := n-1;\
    \ d > 0; d-- {\n        if n % d == 0 {\n            return d\n        }\n   \
    \ }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073264
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var divisor int = 1\n    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            divisor = i\n        }\n    }\n    return divisor\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n         \
    \   return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073153
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            divisor = i\n        }\n    }\n    return divisor\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var i int\n    if n == 1 {\n        return 1\n    }\n    // We search\
    \ through to the floor of n/2\n    for i = n/2; i > 1; i-- {\n        if n % i\
    \ == 0 {\n            return i\n        }\n    }\n    return 1\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n == 1 {\n        return 1\n    }\n    for i := n-1; i > 0; i--\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    d := n - 1\n    for d > 0 {\n        if n % d == 0 {\n          \
    \  return d\n        }\n        d -= 1\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var x int\n    for x = n-1; x > 0; x-- {\n        if n % x == 0 {\n\
    \            return x\n        }\n    }\n    return 0\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var best = 1\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            best = i\n        }\n    }\n    return best\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var largest int = 0\n    if n == 0 {\n        return -1\n    } else\
    \ if n == 1 {\n        return 1\n    }\n    for i := n-1; i > 0; i-- {\n     \
    \   if n % i == 0 {\n            largest = i\n            break\n        }\n \
    \   }\n    return largest\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    largest := 1\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            largest = i\n        }\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var divisor int\n    for divisor = n - 1; divisor > 0; divisor--\
    \ {\n        if n % divisor == 0 {\n            break\n        }\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    var d int = n - 1\n    for n % d != 0 {\n        d -= 1\n    }\n\
    \    return d\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n <= 1 {\n        return n\n    }\n    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return largest_divisor(n / i)\n    \
    \    }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n \
    \ candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp3ogn3jka_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp3ogn3jka_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmp3ogn3jka_test.go:40: expected '%!s(int=50)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n == 0 {\n        return 0\n    }\n    for i := n - 1; i > 0;\
    \ i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n   \
    \ return n\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    return n / 2\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__1\
    \ (0.00s)\n        tmpsoqtxnmx_test.go:32: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__4 (0.00s)\n        tmpsoqtxnmx_test.go:32:\
    \ expected '%!s(int=7)', got '%!s(int=24)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073275
