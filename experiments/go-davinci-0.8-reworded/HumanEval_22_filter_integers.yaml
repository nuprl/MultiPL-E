name: HumanEval_22_filter_integers
language: go_test.go
prompt: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
  a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\"\
  , map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values\
  \ []interface{}) []int {\n"
tests: "func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
  \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
  \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
  \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    filtered := make([]int, 0)\n    for _, value := range values {\n\
    \        switch value.(type) {\n        case int:\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    var ints []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            ints = append(ints, value.(int))\n        }\n    }\n    return\
    \ ints\n}\n", "    var result []int\n\n    for _, v := range values {\n      \
    \  switch value := v.(type) {\n        case int:\n            result = append(result,\
    \ value)\n        }\n    }\n\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, value := range\
    \ values {\n        switch value.(type) {\n        case int:\n            result\
    \ = append(result, value.(int))\n        }\n    }\n    return result\n}\n", " \
    \   integers := make([]int, 0)\n    for _, v := range values {\n        switch\
    \ v.(type) {\n        case int:\n            integers = append(integers, v.(int))\n\
    \        }\n    }\n    return integers\n}\n", "    result := make([]int, 0)\n\
    \    for _, val := range values {\n        switch v := val.(type) {\n        case\
    \ int:\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    switch value.(type) {\n        case int:\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, v :=\
    \ range values {\n        switch v.(type) {\n        case int:\n            result\
    \ = append(result, v.(int))\n        }\n    }\n    return result\n}\n", "    var\
    \ int_list []int\n    for _, value := range values {\n        switch value.(type)\
    \ {\n        case int:\n            int_list = append(int_list, value.(int))\n\
    \        }\n    }\n    return int_list\n}\n", "    var results []int\n    for\
    \ _, value := range values {\n        switch value.(type) {\n        case int:\n\
    \            results = append(results, value.(int))\n        case float64:\n \
    \           if value.(float64) == float64(int(value.(float64))) {\n          \
    \      results = append(results, int(value.(float64)))\n            }\n      \
    \  }\n    }\n    return results\n}\n", "    integers := make([]int, 0)\n    for\
    \ _, value := range values {\n        switch i := value.(type) {\n        case\
    \ int:\n            integers = append(integers, i)\n        case int8:\n     \
    \       integers = append(integers, int(i))\n        case int16:\n           \
    \ integers = append(integers, int(i))\n        case int32:\n            integers\
    \ = append(integers, int(i))\n        case int64:\n            integers = append(integers,\
    \ int(i))\n        case uint:\n            integers = append(integers, int(i))\n\
    \        case uint8:\n            integers = append(integers, int(i))\n      \
    \  case uint16:\n            integers = append(integers, int(i))\n        case\
    \ uint32:\n            integers = append(integers, int(i))\n        case uint64:\n\
    \            integers = append(integers, int(i))\n        }\n    }\n    return\
    \ integers\n}\n", "    res := make([]int, 0)\n    for _, value := range values\
    \ {\n        if num, ok := value.(int); ok {\n            res = append(res, num)\n\
    \        }\n    }\n    return res\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        switch value.(type) {\n        case int:\n      \
    \      result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var xs []int\n    for _, val := range values {\n        if _, ok :=\
    \ val.(int); ok {\n            xs = append(xs, val.(int))\n        }\n    }\n\
    \    return xs\n}\n", "    var ret []int\n\n    for _, v := range values {\n \
    \       if vv, ok := v.(int); ok {\n            ret = append(ret, vv)\n      \
    \  }\n    }\n\n    return ret\n}\n", "    result := make([]int, 0)\n    for _,\
    \ value := range values {\n        switch value.(type) {\n        case int:\n\
    \            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    var res []int\n    for _, value := range values {\n     \
    \   if v, ok := value.(int); ok {\n            res = append(res, v)\n        }\n\
    \    }\n    return res\n}\n", "    // Take a list of any values and return a new\
    \ list of integers.\n    var int_values []int\n    // Go through the list and\
    \ keep only the integers.\n    for _, value := range values {\n        if value,\
    \ ok := value.(int); ok {\n            int_values = append(int_values, value)\n\
    \        }\n    }\n    return int_values\n}\n", "    result := make([]int, 0)\n\
    \    for _, item := range values {\n        switch item.(type) {\n        case\
    \ int:\n            result = append(result, item.(int))\n        }\n    }\n  \
    \  return result\n}\n", "    var result []int\n\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value.(int))\n        }\n    }\n\n    return result\n}\n", "    ints := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch v := value.(type) {\n\
    \        case int:\n            ints = append(ints, v)\n        }\n    }\n   \
    \ return ints\n}\n", "    var result []int\n    for _, value := range values {\n\
    \        switch value.(type) {\n        case int:\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    integers := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            integers = append(integers, value.(int))\n       \
    \ }\n    }\n    return integers\n}\n", "    var result []int\n    for _, v :=\
    \ range values {\n        if i, ok := v.(int); ok {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for _, value := range values {\n        switch v := value.(type) {\n    \
    \    case int:\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n", "    var integers []int\n    for _, value := range values\
    \ {\n        switch value.(type) {\n        case int:\n            integers =\
    \ append(integers, value.(int))\n        }\n    }\n    return integers\n}\n",
  "    result := make([]int, 0)\n    for _, v := range values {\n        if x, ok\
    \ := v.(int); ok {\n            result = append(result, x)\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    for _, val := range\
    \ values {\n        switch v := val.(type) {\n        case int:\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    // TODO\
    \ - this is broken\n    var integers []int\n\n    for _, value := range values\
    \ {\n        if v, ok := value.(int); ok {\n            integers = append(integers,\
    \ v)\n        }\n    }\n\n    return integers\n}\n", "    integers := make([]int,\
    \ 0)\n    for _, value := range values {\n        if value, ok := value.(int);\
    \ ok {\n            integers = append(integers, value)\n        }\n    }\n   \
    \ return integers\n}\n", "    r := make([]int, 0)\n    for _, v := range values\
    \ {\n        if _, ok := v.(int); ok {\n            r = append(r, v.(int))\n \
    \       }\n    }\n    return r\n}\n", "    var result []int\n\n    for _, val\
    \ := range values {\n        if v, ok := val.(int); ok {\n            result =\
    \ append(result, v)\n        }\n    }\n\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for _, val := range values {\n        switch intVal :=\
    \ val.(type) {\n        case int:\n            result = append(result, intVal)\n\
    \        case uint:\n            result = append(result, int(intVal))\n      \
    \  case int8:\n            result = append(result, int(intVal))\n        case\
    \ uint8:\n            result = append(result, int(intVal))\n        case int16:\n\
    \            result = append(result, int(intVal))\n        case uint16:\n    \
    \        result = append(result, int(intVal))\n        case int32:\n         \
    \   result = append(result, int(intVal))\n        case uint32:\n            result\
    \ = append(result, int(intVal))\n        case int64:\n            result = append(result,\
    \ int(intVal))\n        case uint64:\n            result = append(result, int(intVal))\n\
    \        }\n    }\n    return result\n}\n", "    var integers []int\n    for _,\
    \ v := range values {\n        if i, ok := v.(int); ok {\n            integers\
    \ = append(integers, i)\n        }\n    }\n    return integers\n}\n", "    res\
    \ := make([]int, 0)\n    for _, i := range values {\n        if v, ok := i.(int);\
    \ ok {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
  "    integers := make([]int, 0)\n    for _, v := range values {\n        if value,\
    \ ok := v.(int); ok {\n            integers = append(integers, value)\n      \
    \  }\n    }\n    return integers\n}\n", "    result := make([]int, 0)\n    for\
    \ _, value := range values {\n        switch value.(type) {\n        case int:\n\
    \            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    integers := make([]int, 0)\n    for _, value := range values\
    \ {\n        if result, ok := value.(int); ok {\n            integers = append(integers,\
    \ result)\n        }\n    }\n    return integers\n}\n", "    var newlist []int\n\
    \    for _, v := range values {\n        if v == 1 {\n            newlist = append(newlist,\
    \ 1)\n        }\n        if v == 2 {\n            newlist = append(newlist, 2)\n\
    \        }\n        if v == 3 {\n            newlist = append(newlist, 3)\n  \
    \      }\n    }\n    return newlist\n}\n", "    var result []int\n    for _, v\
    \ := range values {\n        if i, ok := v.(int); ok {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    var integers []int\n   \
    \ for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            integers = append(integers, value.(int))\n        }\n    }\n\
    \    return integers\n}\n", "    var ret []int\n    for _,v := range values {\n\
    \        switch i := v.(type) {\n        case int:\n            ret = append(ret,\
    \ i)\n        }\n    }\n    return ret\n}\n", "    result := make([]int, 0)\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    var numbers []int\n    for _, value := range values\
    \ {\n        switch value.(type) {\n        case int:\n            numbers = append(numbers,\
    \ value.(int))\n        }\n    }\n    return numbers\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, value\
    \ := range values {\n        if i, ok := value.(int); ok {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n", "    // Initialize\
    \ variable with empty list of integers\n    integers := []int{}\n    // Iterate\
    \ over all values\n    for _, value := range values {\n        // Check if value\
    \ is integer\n        if number, ok := value.(int); ok {\n            // Append\
    \ number to integers list\n            integers = append(integers, number)\n \
    \       }\n    }\n    // Return integers list\n    return integers\n}\n", "  \
    \  var arr []int\n\n    for _, v := range values {\n        switch v.(type) {\n\
    \        case int:\n            arr = append(arr, v.(int))\n        }\n    }\n\
    \n    return arr\n}\n", "    var integers []int\n    for _, v := range values\
    \ {\n        switch v.(type) {\n        case int:\n            integers = append(integers,\
    \ v.(int))\n        }\n    }\n    return integers\n}\n", "    integers := make([]int,\
    \ 0)\n    for _, v := range values {\n        switch v.(type) {\n        case\
    \ int:\n            integers = append(integers, v.(int))\n        }\n    }\n \
    \   return integers\n}\n", "    var result []int\n\n    for _, val := range values\
    \ {\n        switch i := val.(type) {\n        case int:\n            result =\
    \ append(result, i)\n        }\n    }\n\n    return result\n}\n", "    integers\
    \ := make([]int, 0)\n    for _, v := range values {\n        switch v.(type) {\n\
    \        case int:\n            integers = append(integers, v.(int))\n       \
    \ }\n    }\n    return integers\n}\n", "    filtered := make([]int, 0)\n    for\
    \ _, value := range values {\n        if v, ok := value.(int); ok {\n        \
    \    filtered = append(filtered, v)\n        }\n    }\n    return filtered\n}\n",
  "    var result []int\n    for _, value := range values {\n        if _, ok := value.(int);\
    \ ok {\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    integers := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if i, ok := value.(int); ok {\n            integers\
    \ = append(integers, i)\n        }\n    }\n    return integers\n}\n", "    var\
    \ integers []int\n    for _, item := range values {\n        switch item.(type)\
    \ {\n        case int:\n            integers = append(integers, item.(int))\n\
    \        }\n    }\n    return integers\n}\n", "    ints := make([]int, 0)\n  \
    \  for _, value := range values {\n        if value_int, ok := value.(int); ok\
    \ {\n            ints = append(ints, value_int)\n        }\n    }\n    return\
    \ ints\n}\n", "    ret := make([]int, 0)\n    for _, value := range values {\n\
    \        if i, ok := value.(int); ok {\n            ret = append(ret, i)\n   \
    \     }\n    }\n    return ret\n}\n", "    var result []int\n    for _, i := range\
    \ values {\n        if v, ok := i.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for _, value := range values {\n        if value, ok := value.(int); ok {\n\
    \            result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, v := range values {\n        switch\
    \ v.(type) {\n        case int:\n            result = append(result, v.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var integers []int\n    for _,\
    \ val := range values {\n        switch val.(type) {\n        case int:\n    \
    \        integers = append(integers, val.(int))\n        }\n    }\n    return\
    \ integers\n}\n", "    result := make([]int, 0)\n    for _, value := range values\
    \ {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    integers := make([]int, 0)\n    for _, value :=\
    \ range values {\n        // isInt will be true if value is an integer, false\
    \ otherwise\n        if isInt, i := is_integer(value); isInt {\n            integers\
    \ = append(integers, i)\n        }\n    }\n    return integers\n}\n", "    var\
    \ integers []int\n    for _, value := range values {\n        switch value.(type)\
    \ {\n        case int:\n            integers = append(integers, value.(int))\n\
    \        }\n    }\n    return integers\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        switch value.(type) {\n        case int:\n\
    \            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    var integers []int\n    for _, value := range values {\n\
    \        switch value.(type) {\n        case int:\n            integers = append(integers,\
    \ value.(int))\n        default:\n            // nothing to do\n        }\n  \
    \  }\n    return integers\n}\n", "    var result []int\n    for _, value := range\
    \ values {\n        switch value.(type) {\n        case int:\n            result\
    \ = append(result, value.(int))\n        default:\n            // no op\n    \
    \    }\n    }\n    return result\n}\n", "    results := make([]int, 0)\n    for\
    \ _, v := range values {\n        switch v.(type) {\n        case int:\n     \
    \       results = append(results, v.(int))\n        }\n    }\n    return results\n\
    }\n", "    list := make([]int, 0)\n    for _, v := range values {\n        if\
    \ n, ok := v.(int); ok {\n            list = append(list, n)\n        }\n    }\n\
    \    return list\n}\n", "    var out []int\n    for _, v := range values {\n \
    \       if i, ok := v.(int); ok {\n            out = append(out, i)\n        }\n\
    \    }\n    return out\n}\n", "    var ints []int\n    for _, v := range values\
    \ {\n        switch value := v.(type) {\n        case int:\n            ints =\
    \ append(ints, value)\n        }\n    }\n    return ints\n}\n", "    result :=\
    \ make([]int, 0)\n    for _, v := range values {\n        if v, ok := v.(int);\
    \ ok {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        if num, ok\
    \ := v.(int); ok {\n            result = append(result, num)\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, val := range values {\n        if _, ok := val.(int); ok {\n\
    \            result = append(result, val.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    integers := make([]int, 0)\n    for _, value := range values\
    \ {\n        if integer, ok := value.(int); ok {\n            integers = append(integers,\
    \ integer)\n        }\n    }\n    return integers\n}\n", "    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n", "    var result []int\n\n    for _, value := range values\
    \ {\n        switch integer := value.(type) {\n        case int:\n           \
    \ result = append(result, integer)\n        }\n    }\n\n    return result\n}\n",
  "    result := make([]int, 0)\n    for _, v := range values {\n        if i, ok\
    \ := v.(int); ok {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n", "    // type assertion\n    integers := make([]int,\
    \ 0)\n    for _, value := range values {\n        if integer, ok := value.(int);\
    \ ok {\n            integers = append(integers, integer)\n        }\n    }\n \
    \   return integers\n}\n", "    var integers []int\n    for _, v := range values\
    \ {\n        if _, ok := v.(int); ok {\n            integers = append(integers,\
    \ v.(int))\n        }\n    }\n    return integers\n}\n", "    ret := make([]int,\
    \ 0)\n    for _, val := range values {\n        if v, ok := val.(int); ok {\n\
    \            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n", " \
    \   var ints []int\n    for _, v := range values {\n        switch v.(type) {\n\
    \        case int:\n            ints = append(ints, v.(int))\n        }\n    }\n\
    \    return ints\n}\n", "    var result []int\n\n    for _, v := range values\
    \ {\n        if v, ok := v.(int); ok {\n            result = append(result, v)\n\
    \        }\n    }\n\n    return result\n}\n", "    new_values := make([]int, 0)\n\
    \    for _, value := range values {\n        if v, ok := value.(int); ok {\n \
    \           new_values = append(new_values, v)\n        }\n    }\n    return new_values\n\
    }\n", "    var result []int\n    for _, value := range values {\n        switch\
    \ value.(type) {\n        case int:\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    integers := make([]int, 0)\n\
    \    for _, v := range values {\n        if _, ok := v.(int); ok {\n         \
    \   integers = append(integers, v.(int))\n        }\n    }\n    return integers\n\
    }\n", "    xs := []int{}\n    for _, v := range values {\n        x, ok := v.(int)\n\
    \        if ok {\n            xs = append(xs, x)\n        }\n    }\n    return\
    \ xs\n}\n", "    result := make([]int, 0)\n    for _, val := range values {\n\
    \        switch val.(type) {\n        case int:\n            result = append(result,\
    \ val.(int))\n        }\n    }\n    return result\n}\n", "    integers := make([]int,\
    \ 0)\n    for _, v := range values {\n        if value, ok := v.(int); ok {\n\
    \            integers = append(integers, value)\n        }\n    }\n    return\
    \ integers\n}\n", "    var numbers []int\n    for _, value := range values {\n\
    \        switch value.(type) {\n        case int:\n            numbers = append(numbers,\
    \ value.(int))\n        }\n    }\n    return numbers\n}\n", "    result := make([]int,\
    \ 0)\n    for _, v := range values {\n        if value, ok := v.(int); ok {\n\
    \            result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    var integers []int\n    for _, value := range values {\n        switch\
    \ value.(type) {\n        case int:\n            integers = append(integers, value.(int))\n\
    \        }\n    }\n    return integers\n}\n", "    var integers []int\n    for\
    \ _, v := range values {\n        switch v.(type) {\n        case int:\n     \
    \       integers = append(integers, v.(int))\n        }\n    }\n    return integers\n\
    }\n", "    integers := make([]int, 0)\n    for _, value := range values {\n  \
    \      switch value.(type) {\n        case int:\n            integers = append(integers,\
    \ value.(int))\n        }\n    }\n    return integers\n}\n", "    var integers\
    \ []int\n    for _, value := range values {\n        if num, ok := value.(int);\
    \ ok {\n            integers = append(integers, num)\n        }\n    }\n    return\
    \ integers\n}\n", "    var ret []int\n    for _, v := range values {\n       \
    \ if i, ok := v.(int); ok {\n            ret = append(ret, i)\n        }\n   \
    \ }\n    return ret\n}\n", "    result := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch value.(type) {\n        case int:\n         \
    \   result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    ret := make([]int, 0)\n    for _, val := range values {\n        if\
    \ v, ok := val.(int); ok {\n            ret = append(ret, v)\n        }\n    }\n\
    \    return ret\n}\n", "    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value.(type) {\n        case int:\n            result\
    \ = append(result, value.(int))\n        }\n    }\n    return result\n}\n", " \
    \   var ints []int\n    for _, value := range values {\n        if i, ok := value.(int);\
    \ ok {\n            ints = append(ints, i)\n        }\n    }\n    return ints\n\
    }\n", "    var result []int\n    for _, value := range values {\n        switch\
    \ value.(type) {\n        case int:\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if i, ok := value.(int); ok {\n           \
    \ result = append(result, i)\n        }\n    }\n    return result\n}\n", "   \
    \ res := make([]int, 0)\n    for _, v := range values {\n        switch v.(type)\
    \ {\n        case int:\n            res = append(res, v.(int))\n        }\n  \
    \  }\n    return res\n}\n", "    var result []int\n    for _, value := range values\
    \ {\n        switch value.(type) {\n        case int:\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, v := range values {\n        if value, ok := v.(int); ok {\n\
    \            result = append(result, value)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, value := range values {\n        switch\
    \ value.(type) {\n        case int:\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, v := range values {\n        switch i := v.(type) {\n        case int:\n\
    \            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", "    var res []int\n    for _, value := range values {\n        if res_type,\
    \ is_ok := value.(int); is_ok {\n            res = append(res, res_type)\n   \
    \     }\n    }\n    return res\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        if value, ok := value.(int); ok {\n            result\
    \ = append(result, value)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for _, value := range values {\n        switch value.(type)\
    \ {\n        case int:\n            result = append(result, value.(int))\n   \
    \     }\n    }\n    return result\n}\n", "    var result []int\n    for _, val\
    \ := range values {\n        switch val.(type) {\n        case int:\n        \
    \    result = append(result, val.(int))\n        default:\n            // Do nothing\n\
    \        }\n    }\n    return result\n}\n", "    integers := make([]int, 0)\n\
    \    for _, value := range values {\n        switch v := value.(type) {\n    \
    \    case int:\n            integers = append(integers, v)\n        }\n    }\n\
    \    return integers\n}\n", "    var integers []int\n    for _, value := range\
    \ values {\n        if intValue, ok := value.(int); ok {\n            integers\
    \ = append(integers, intValue)\n        }\n    }\n    return integers\n}\n", " \
    \   var ints []int\n    for _, v := range values {\n        if i, ok := v.(int);\
    \ ok {\n            ints = append(ints, i)\n        }\n    }\n    return ints\n\
    }\n", "    var integers []int\n    for _, value := range values {\n        switch\
    \ value.(type) {\n        case int:\n            integers = append(integers, value.(int))\n\
    \        }\n    }\n    return integers\n}\n", "    var integers []int\n    for\
    \ _, v := range values {\n        switch v.(type) {\n        case int:\n     \
    \       integers = append(integers, v.(int))\n        }\n    }\n    return integers\n\
    }\n", "    var integers []int\n    for _, value := range values {\n        if\
    \ value, ok := value.(int); ok {\n            integers = append(integers, value)\n\
    \        }\n    }\n    return integers\n}\n", "    var integers []int\n    for\
    \ _, value := range values {\n        switch value.(type) {\n        case int:\n\
    \            integers = append(integers, value.(int))\n        }\n    }\n    return\
    \ integers\n}\n", "    var ints []int\n    for _, value := range values {\n  \
    \      intValue, ok := value.(int)\n        if ok {\n            ints = append(ints,\
    \ intValue)\n        }\n    }\n    return ints\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch v := value.(type) {\n\
    \        case int:\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    integers := make([]int, 0)\n    for _, v := range\
    \ values {\n        switch v.(type) {\n        case int:\n            integers\
    \ = append(integers, v.(int))\n        }\n    }\n    return integers\n}\n", " \
    \   var result []int\n    for _, value := range values {\n        if value, ok\
    \ := value.(int); ok {\n            result = append(result, value)\n        }\n\
    \    }\n    return result\n}\n", "    var results []int\n    for _, item := range\
    \ values {\n        switch item.(type) {\n        case int:\n            results\
    \ = append(results, item.(int))\n        case float64:\n            if item.(float64)\
    \ == float64(int(item.(float64))) {\n                results = append(results,\
    \ int(item.(float64)))\n            }\n        }\n    }\n    return results\n\
    }\n", "    var result []int\n    for _, value := range values {\n        switch\
    \ value.(type) {\n        case int:\n            result = append(result, value.(int))\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if v, ok := value.(int); ok {\n           \
    \ result = append(result, v)\n        }\n    }\n    return result\n}\n", "   \
    \ result := make([]int, 0)\n    for _, x := range values {\n        if _, ok :=\
    \ x.(int); ok {\n            result = append(result, x.(int))\n        }\n   \
    \ }\n    return result\n}\n", "    integers := make([]int, 0)\n    for _, value\
    \ := range values {\n        // NOTE: this is explicit casting, and it is a neat\
    \ Golang feature\n        // that we can convert any interface{} to any other\
    \ type that we want\n        // That's because any type can be an interface{}\n\
    \        // Which means that everything is an interface{}\n        // And we can\
    \ cast it to any other type.\n        switch value.(type) {\n        case int:\n\
    \            integers = append(integers, value.(int))\n        }\n    }\n    return\
    \ integers\n}\n", "    result := make([]int, 0)\n    for _, v := range values\
    \ {\n        switch i := v.(type) {\n        case int:\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    integers := make([]int,\
    \ 0)\n    for _, v := range values {\n        if i, ok := v.(int); ok {\n    \
    \        integers = append(integers, i)\n        }\n    }\n    return integers\n\
    }\n", "    // create an empty map to store values from given list\n    integers\
    \ := make([]int, 0)\n    // loop over list of values\n    for _, value := range\
    \ values {\n        // check if value is of type int\n        if num, ok := value.(int);\
    \ ok {\n            // if it is an int, store it in map\n            integers\
    \ = append(integers, num)\n        }\n    }\n    // return map\n    return integers\n\
    }\n", "    var res []int\n    for _, val := range values {\n        if val, ok\
    \ := val.(int); ok {\n            res = append(res, val)\n        }\n    }\n \
    \   return res\n}\n", "    result := make([]int, 0)\n    for _, val := range values\
    \ {\n        switch t := val.(type) {\n        case int:\n            result =\
    \ append(result, t)\n        case float64:\n            if t == float64(int(t))\
    \ {\n                result = append(result, int(t))\n            }\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, val\
    \ := range values {\n        if i, ok := val.(int); ok {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n", "    var ret []int\n\
    \    for _, v := range values {\n        if i, ok := v.(int); ok {\n         \
    \   ret = append(ret, i)\n        }\n    }\n    return ret\n}\n", "    res :=\
    \ make([]int, 0)\n    for _, v := range values {\n        switch v.(type) {\n\
    \        case int:\n            res = append(res, v.(int))\n        }\n    }\n\
    \    return res\n}\n", "    filtered := make([]int, 0)\n    for _, value := range\
    \ values {\n        if integer, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, integer)\n        }\n    }\n    return filtered\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if v,\
    \ ok := value.(int); ok {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, value := range\
    \ values {\n        switch value.(type) {\n        case int:\n            result\
    \ = append(result, value.(int))\n        }\n    }\n    return result\n}\n", " \
    \   var ints []int\n    for _, i := range values {\n        switch v := i.(type)\
    \ {\n        case int:\n            ints = append(ints, v)\n        }\n    }\n\
    \    return ints\n}\n", "    var result []int\n    for _, v := range values {\n\
    \        if vv, ok := v.(int); ok {\n            result = append(result, vv)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ x := range values {\n        switch x.(type) {\n        case int:\n        \
    \    result = append(result, x.(int))\n        }\n    }\n    return result\n}\n",
  "    var filtered []int\n    for _, v := range values {\n        switch val := v.(type)\
    \ {\n        case int:\n            filtered = append(filtered, val)\n       \
    \ case int8:\n            filtered = append(filtered, int(val))\n        case\
    \ int16:\n            filtered = append(filtered, int(val))\n        case int32:\n\
    \            filtered = append(filtered, int(val))\n        case int64:\n    \
    \        filtered = append(filtered, int(val))\n        }\n    }\n    return filtered\n\
    }\n", "    ints := make([]int, 0)\n    for _, value := range values {\n      \
    \  switch value.(type) {\n        case int:\n            ints = append(ints, value.(int))\n\
    \        }\n    }\n    return ints\n}\n", "    res := make([]int, 0)\n    for\
    \ _, v := range values {\n        switch v := v.(type) {\n        case int:\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n", " \
    \   var result []int\n    for _, value := range values {\n        if _, ok :=\
    \ value.(int); ok {\n            result = append(result, value.(int))\n      \
    \  }\n    }\n    return result\n}\n", "    integers := make([]int, 0)\n    for\
    \ _,v := range values {\n        if v,ok := v.(int); ok {\n            integers\
    \ = append(integers, v)\n        }\n    }\n    return integers\n}\n", "    var\
    \ ints []int\n    for _, v := range values {\n        switch v.(type) {\n    \
    \    case int:\n            ints = append(ints, v.(int))\n        }\n    }\n \
    \   return ints\n}\n", "    // vars\n    result := make([]int, 0)\n    // loop\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   // return\n    return result\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        if int_value, ok := value.(int); ok {\n         \
    \   result = append(result, int_value)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, val := range values {\n        switch\
    \ value := val.(type) {\n        case int:\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n", "    var ret = make([]int,\
    \ 0)\n    for _, value := range values {\n        var v, ok = value.(int)\n  \
    \      if ok {\n            ret = append(ret, v)\n        }\n    }\n    return\
    \ ret\n}\n", "    result := make([]int, 0)\n    for _, val := range values {\n\
    \        if v, ok := val.(int); ok {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n  \
    \  for _, i := range values {\n        switch i.(type) {\n        case int:\n\
    \            result = append(result, i.(int))\n        }\n    }\n    return result\n\
    }\n", "    var integers []int\n    for _, v := range values {\n        switch\
    \ v.(type) {\n        case int:\n            integers = append(integers, v.(int))\n\
    \        }\n    }\n    return integers\n}\n", "    var filtered []int\n    for\
    \ _, v := range values {\n        if i, ok := v.(int); ok {\n            filtered\
    \ = append(filtered, i)\n        }\n    }\n    return filtered\n}\n", "    var\
    \ results []int\n    for _, value := range values {\n        switch value.(type)\
    \ {\n        case int:\n            results = append(results, value.(int))\n \
    \       }\n    }\n    return results\n}\n", "    var result []int\n    for _,\
    \ value := range values {\n        if intValue, isInt := value.(int); isInt {\n\
    \            result = append(result, intValue)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    switch value.(type) {\n        case int:\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    var results []int\n\
    \    for _, v := range values {\n        if v_int, ok := v.(int); ok {\n     \
    \       results = append(results, v_int)\n        }\n    }\n    return results\n\
    }\n", "    var ints []int\n    for _, val := range values {\n        if _, ok\
    \ := val.(int); ok {\n            ints = append(ints, val.(int))\n        }\n\
    \    }\n    return ints\n}\n", "    var res []int\n    for _, v := range values\
    \ {\n        if i, ok := v.(int); ok {\n            res = append(res, i)\n   \
    \     }\n    }\n    return res\n}\n", "    filtered := make([]int, 0)\n    for\
    \ _, v := range values {\n        switch v.(type) {\n        case int:\n     \
    \       filtered = append(filtered, v.(int))\n        }\n    }\n    return filtered\n\
    }\n", "    var result []int\n\n    for _, v := range values {\n        if i, ok\
    \ := v.(int); ok {\n            result = append(result, i)\n        }\n    }\n\
    \n    return result\n}\n", "    integers := make([]int, 0)\n    for _, v := range\
    \ values {\n        if i, ok := v.(int); ok {\n            integers = append(integers,\
    \ i)\n        }\n    }\n    return integers\n}\n", "    integers := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            integers = append(integers, value.(int))\n       \
    \ default:\n            // do nothing\n        }\n    }\n    return integers\n\
    }\n", "    integers := make([]int, 0)\n    for _, v := range values {\n      \
    \  if value, ok := v.(int); ok {\n            integers = append(integers, value)\n\
    \        }\n    }\n    return integers\n}\n", "    out := make([]int, 0)\n   \
    \ for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            out = append(out, value.(int))\n        }\n    }\n    return\
    \ out\n}\n", "    var result []int\n    for _, val := range values {\n       \
    \ if value, ok := val.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n", "    var integers []int\n    for _,\
    \ v := range values {\n        switch t := v.(type) {\n        case int:\n   \
    \         integers = append(integers, t)\n        }\n    }\n    return integers\n\
    }\n", "    integers := make([]int, 0)\n    for _, value := range values {\n  \
    \      if _, ok := value.(int); ok {\n            integers = append(integers,\
    \ value.(int))\n        }\n    }\n    return integers\n}\n", "    var ints []int\n\
    \    for _, value := range values {\n        switch v := value.(type) {\n    \
    \    case int:\n            ints = append(ints, v)\n        }\n    }\n    return\
    \ ints\n}\n", "    var result []int\n    for _, v := range values {\n        switch\
    \ v.(type) {\n        case int:\n            result = append(result, v.(int))\n\
    \        }\n    }\n    return result\n}\n", "    out := make([]int, 0)\n    for\
    \ _, v := range values {\n        if i, ok := v.(int); ok {\n            out =\
    \ append(out, i)\n        }\n    }\n    return out\n}\n", "    result := make([]int,\
    \ 0)\n    for _, v := range values {\n        switch x := v.(type) {\n       \
    \ case int:\n            result = append(result, x)\n        }\n    }\n    return\
    \ result\n}\n", "    integers := make([]int, 0)\n    for _, value := range values\
    \ {\n        switch value.(type) {\n        case int:\n            integers =\
    \ append(integers, value.(int))\n        }\n    }\n    return integers\n}\n",
  "    result := make([]int, 0)\n    for _, value := range values {\n        if i,\
    \ ok := value.(int); ok {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for _, v := range values {\n        i, ok := v.(int)\n        if ok {\n \
    \           result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, v := range values {\n        if\
    \ vv, ok := v.(int); ok {\n            result = append(result, vv)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, value := range\
    \ values {\n        switch value.(type) {\n        case int:\n            result\
    \ = append(result, value.(int))\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for _, value := range values {\n        if integer,\
    \ ok := value.(int); ok {\n            result = append(result, integer)\n    \
    \    }\n    }\n    return result\n}\n", "    var ints []int\n    for _, value\
    \ := range values {\n        switch v := value.(type) {\n        case int:\n \
    \           ints = append(ints, v)\n        case int8:\n            ints = append(ints,\
    \ int(v))\n        case int16:\n            ints = append(ints, int(v))\n    \
    \    case int32:\n            ints = append(ints, int(v))\n        case int64:\n\
    \            ints = append(ints, int(v))\n        case uint:\n            ints\
    \ = append(ints, int(v))\n        case uint8:\n            ints = append(ints,\
    \ int(v))\n        case uint16:\n            ints = append(ints, int(v))\n   \
    \     case uint32:\n            ints = append(ints, int(v))\n        case uint64:\n\
    \            ints = append(ints, int(v))\n        }\n    }\n    return ints\n\
    }\n", "    var ret []int\n    for _, value := range values {\n        switch i\
    \ := value.(type) {\n        case int:\n            ret = append(ret, i)\n   \
    \     }\n    }\n    return ret\n}\n", "    integers := make([]int, 0)\n    for\
    \ _, value := range values {\n        switch v := value.(type) {\n        case\
    \ int:\n            integers = append(integers, v)\n        case float64:\n  \
    \          if v == float64(int(v)) {\n                integers = append(integers,\
    \ int(v))\n            }\n        }\n    }\n    return integers\n}\n", "    integers\
    \ := make([]int, 0)\n    for _, v := range values {\n        if value, ok := v.(int);\
    \ ok {\n            integers = append(integers, value)\n        }\n    }\n   \
    \ return integers\n}\n", "    var ret []int\n    for _, val := range values {\n\
    \        // check if value is int\n        if _, ok := val.(int); ok {\n     \
    \       ret = append(ret, val.(int))\n        }\n    }\n    return ret\n}\n",
  "    var result []int\n\n    for _, v := range values {\n        switch v.(type)\
    \ {\n        case int:\n            result = append(result, v.(int))\n       \
    \ }\n    }\n\n    return result\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        switch value.(type) {\n        case int:\n      \
    \      result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range values {\n        switch v.(type)\
    \ {\n        case int:\n            result = append(result, v.(int))\n       \
    \ }\n    }\n    return result\n}\n", "    var result []int\n    for _, value :=\
    \ range values {\n        switch value.(type) {\n        case int:\n         \
    \   result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    switch value.(type) {\n        case int:\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        if v, ok := value.(int); ok\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, v := range values {\n        if\
    \ value, ok := v.(int); ok {\n            result = append(result, value)\n   \
    \     }\n    }\n    return result\n}\n", "    integers := make([]int, 0)\n   \
    \ for _, value := range values {\n        if value, ok := value.(int); ok {\n\
    \            integers = append(integers, value)\n        }\n    }\n    return\
    \ integers\n}\n", "    var result []int\n    for _, v := range values {\n    \
    \    if value, ok := v.(int); ok {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
