name: HumanEval_22_filter_integers
language: go_test.go
prompt: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"\
  a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\"\
  , map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values\
  \ []interface{}) []int {\n"
tests: "func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
  \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
  \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
  \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    filtered := make([]int, 0)\n    for _, value := range values {\n\
    \        switch value.(type) {\n        case int:\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n", "    var ints []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            ints = append(ints, value.(int))\n        }\n    }\n    return\
    \ ints\n}\n", "    var result []int\n\n    for _, v := range values {\n      \
    \  switch value := v.(type) {\n        case int:\n            result = append(result,\
    \ value)\n        }\n    }\n\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, value := range\
    \ values {\n        switch value.(type) {\n        case int:\n            result\
    \ = append(result, value.(int))\n        }\n    }\n    return result\n}\n", " \
    \   integers := make([]int, 0)\n    for _, v := range values {\n        switch\
    \ v.(type) {\n        case int:\n            integers = append(integers, v.(int))\n\
    \        }\n    }\n    return integers\n}\n", "    result := make([]int, 0)\n\
    \    for _, val := range values {\n        switch v := val.(type) {\n        case\
    \ int:\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for _, value := range values {\n    \
    \    switch value.(type) {\n        case int:\n            result = append(result,\
    \ value.(int))\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    for _, v :=\
    \ range values {\n        switch v.(type) {\n        case int:\n            result\
    \ = append(result, v.(int))\n        }\n    }\n    return result\n}\n", "    var\
    \ int_list []int\n    for _, value := range values {\n        switch value.(type)\
    \ {\n        case int:\n            int_list = append(int_list, value.(int))\n\
    \        }\n    }\n    return int_list\n}\n", "    var results []int\n    for\
    \ _, value := range values {\n        switch value.(type) {\n        case int:\n\
    \            results = append(results, value.(int))\n        case float64:\n \
    \           if value.(float64) == float64(int(value.(float64))) {\n          \
    \      results = append(results, int(value.(float64)))\n            }\n      \
    \  }\n    }\n    return results\n}\n", "    integers := make([]int, 0)\n    for\
    \ _, value := range values {\n        switch i := value.(type) {\n        case\
    \ int:\n            integers = append(integers, i)\n        case int8:\n     \
    \       integers = append(integers, int(i))\n        case int16:\n           \
    \ integers = append(integers, int(i))\n        case int32:\n            integers\
    \ = append(integers, int(i))\n        case int64:\n            integers = append(integers,\
    \ int(i))\n        case uint:\n            integers = append(integers, int(i))\n\
    \        case uint8:\n            integers = append(integers, int(i))\n      \
    \  case uint16:\n            integers = append(integers, int(i))\n        case\
    \ uint32:\n            integers = append(integers, int(i))\n        case uint64:\n\
    \            integers = append(integers, int(i))\n        }\n    }\n    return\
    \ integers\n}\n", "    res := make([]int, 0)\n    for _, value := range values\
    \ {\n        if num, ok := value.(int); ok {\n            res = append(res, num)\n\
    \        }\n    }\n    return res\n}\n", "    var result []int\n    for _, value\
    \ := range values {\n        switch value.(type) {\n        case int:\n      \
    \      result = append(result, value.(int))\n        }\n    }\n    return result\n\
    }\n", "    var xs []int\n    for _, val := range values {\n        if _, ok :=\
    \ val.(int); ok {\n            xs = append(xs, val.(int))\n        }\n    }\n\
    \    return xs\n}\n", "    var ret []int\n\n    for _, v := range values {\n \
    \       if vv, ok := v.(int); ok {\n            ret = append(ret, vv)\n      \
    \  }\n    }\n\n    return ret\n}\n", "    result := make([]int, 0)\n    for _,\
    \ value := range values {\n        switch value.(type) {\n        case int:\n\
    \            result = append(result, value.(int))\n        }\n    }\n    return\
    \ result\n}\n", "    var res []int\n    for _, value := range values {\n     \
    \   if v, ok := value.(int); ok {\n            res = append(res, v)\n        }\n\
    \    }\n    return res\n}\n", "    // Take a list of any values and return a new\
    \ list of integers.\n    var int_values []int\n    // Go through the list and\
    \ keep only the integers.\n    for _, value := range values {\n        if value,\
    \ ok := value.(int); ok {\n            int_values = append(int_values, value)\n\
    \        }\n    }\n    return int_values\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
