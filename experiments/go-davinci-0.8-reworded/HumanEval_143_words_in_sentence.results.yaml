language: go_test.go
name: HumanEval_143_words_in_sentence
results:
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if len(sentence)\
    \ == 0 {\n        return \"\"\n    }\n    words := strings.Split(sentence, \"\
    \ \")\n    if len(words) == 0 {\n        return \"\"\n    }\n    for i, word :=\
    \ range words {\n        if len(word) <= 1 {\n            continue\n        }\n\
    \        if word[0] == word[len(word)-1] {\n            words[i] = word[1 : len(word)-1]\n\
    \        }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkmxvvnw7_test.go:26:14: undefined: strings

    /tmp/tmpkmxvvnw7_test.go:38:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return sentence\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'is', got 'This is a test'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpt8ce0wqt_test.go:45:\
    \ expected 'go for', got 'lets go for swimming'\n    --- FAIL: TestWords_In_Sentence/test_num__2\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'there is no place', got 'there\
    \ is no place available here'\n    --- FAIL: TestWords_In_Sentence/test_num__3\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'Hi am Hussein', got 'Hi I\
    \ am Hussein'\n    --- FAIL: TestWords_In_Sentence/test_num__5 (0.00s)\n     \
    \   tmpt8ce0wqt_test.go:45: expected '', got 'here'\n    --- FAIL: TestWords_In_Sentence/test_num__6\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'is', got 'here is'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := get_words(sentence)\n\
    \    prime_words := prime_words(words)\n    return print_words(prime_words)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsdd8kzkd_test.go:23:14: undefined: get_words

    /tmp/tmpsdd8kzkd_test.go:24:20: undefined: prime_words

    /tmp/tmpsdd8kzkd_test.go:25:12: undefined: print_words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    count := 0\n\
    \    var word = \"\"\n    for _, ch := range sentence {\n        if ch == ' '\
    \ {\n            if is_prime(count) {\n                word += fmt.Sprintf(\"\
    %d\", count)\n            }\n            count = 0\n        } else {\n       \
    \     count++\n        }\n    }\n    return word\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytqlrjvy_test.go:27:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    current_word := \"\"\n    for _, c := range sentence {\n        if c == '\
    \ ' {\n            words = append(words, current_word)\n            current_word\
    \ = \"\"\n        } else {\n            current_word += string(c)\n        }\n\
    \    }\n    words = append(words, current_word)\n    prime_words := []string{}\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    prime_words = append(prime_words, word)\n        }\n    }\n    return fmt.Sprintf(\"\
    %s\", strings.Join(prime_words, \" \"))\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjq4ppqzd_test.go:36:12: undefined: is_prime

    /tmp/tmpjq4ppqzd_test.go:40:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,0)\n\
    \    word  := \"\"\n    var result string\n    for _,char := range sentence {\n\
    \        if string(char) == \" \" {\n            words = append(words,word)\n\
    \            word = \"\"\n        } else {\n            word += string(char)\n\
    \        }\n    }\n    words = append(words,word)\n    for _,word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuh9ifsh4_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    res := \"\"\n\
    \    for _, word := range words(sentence) {\n        if is_prime(len(word)) {\n\
    \            res += word + \" \"\n        }\n    }\n    return res[:len(res)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn805_v6q_test.go:24:26: undefined: words

    /tmp/tmpn805_v6q_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    var buffer string\n    for _, c := range sentence {\n        switch c {\n\
    \        case ' ':\n            if len(buffer) > 0 {\n                words =\
    \ append(words, buffer)\n                buffer = \"\"\n            }\n      \
    \  default:\n            buffer += string(c)\n        }\n    }\n    if len(buffer)\
    \ > 0 {\n        words = append(words, buffer)\n    }\n    result := []string{}\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result = append(result, word)\n        }\n    }\n    return strings.Join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp52p17dm0_test.go:41:12: undefined: is_prime

    /tmp/tmp52p17dm0_test.go:45:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range split(sentence) {\n        if is_prime(len(word)) {\n\
    \            words = append(words, word)\n        }\n    }\n    return join(words)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41rkersq_test.go:24:26: undefined: split

    /tmp/tmp41rkersq_test.go:25:12: undefined: is_prime

    /tmp/tmp41rkersq_test.go:29:12: undefined: join

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words += \" \" + word\n        }\n    }\n    return strings.TrimSpace(words)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc0psuk44_test.go:24:26: undefined: strings

    /tmp/tmpc0psuk44_test.go:25:12: undefined: is_prime

    /tmp/tmpc0psuk44_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"is\"\
    \n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__1\
    \ (0.00s)\n        tmp54d84h_5_test.go:45: expected 'go for', got 'is'\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n        tmp54d84h_5_test.go:45:\
    \ expected 'there is no place', got 'is'\n    --- FAIL: TestWords_In_Sentence/test_num__3\
    \ (0.00s)\n        tmp54d84h_5_test.go:45: expected 'Hi am Hussein', got 'is'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__4 (0.00s)\n        tmp54d84h_5_test.go:45:\
    \ expected 'go for it', got 'is'\n    --- FAIL: TestWords_In_Sentence/test_num__5\
    \ (0.00s)\n        tmp54d84h_5_test.go:45: expected '', got 'is'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    slice := []rune(sentence)\n\
    \    new_sentence := \"\"\n    i := 0\n    for i < len(slice) {\n        word\
    \ := \"\"\n        for i < len(slice) && slice[i] != ' ' {\n            word +=\
    \ string(slice[i])\n            i++\n        }\n        if is_prime(len(word))\
    \ {\n            new_sentence += word + \" \"\n        }\n        for i < len(slice)\
    \ && slice[i] == ' ' {\n            i++\n        }\n    }\n    return new_sentence[:len(new_sentence)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphm__fu_x_test.go:32:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if len(sentence)\
    \ == 0 {\n        return \"\"\n    }\n    words := make([]string, 0)\n    for\
    \ i, j := 0, 0; i < len(sentence); i++ {\n        if sentence[i] == ' ' {\n  \
    \          words = append(words, sentence[j:i])\n            j = i + 1\n     \
    \   }\n    }\n    words = append(words, sentence[j:])\n    result := \"\"\n  \
    \  for _, word := range words {\n        if is_prime(len(word)) {\n          \
    \  result += word + \" \"\n        }\n    }\n    if len(result) == 0 {\n     \
    \   return \"\"\n    }\n    return result[:len(result) - 1]\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9n483grz_test.go:33:36: undefined: j

    /tmp/tmp9n483grz_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var newWords []string\n    for _, word := range words {\n      \
    \  if isPrime(len(word)) {\n            newWords = append(newWords, word)\n  \
    \      }\n    }\n    return strings.Join(newWords, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpel8lckxa_test.go:23:14: undefined: strings

    /tmp/tmpel8lckxa_test.go:26:12: undefined: isPrime

    /tmp/tmpel8lckxa_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: Write\
    \ code here.\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n\
    \  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpnx2q9339_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpnx2q9339_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpnx2q9339_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpnx2q9339_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpnx2q9339_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpnx2q9339_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var sentence_split\
    \ []string = strings.Split(sentence, \" \")\n    var primes []string\n    for\
    \ _, word := range sentence_split {\n        var word_length int = len(word)\n\
    \        for i := 2; i < word_length; i++ {\n            if word_length % i ==\
    \ 0 {\n                break\n            }\n            primes = append(primes,\
    \ word)\n        }\n    }\n    return strings.Join(primes, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpozdzm0sl_test.go:23:35: undefined: strings

    /tmp/tmpozdzm0sl_test.go:34:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // Write your\
    \ code here\n    // To print results to the standard output you can use fmt.Println()\n\
    \    // Example: fmt.Println(\"Hello world!\")\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkb77dxe0_test.go:48: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkb77dxe0_test.go:48: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkb77dxe0_test.go:48: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkb77dxe0_test.go:48:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkb77dxe0_test.go:48: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkb77dxe0_test.go:48:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    var result string\n    var words = strings.Split(sentence, \" \")\n\
    \    for _, word := range words {\n        if IsPrime(len(word)) {\n         \
    \   result += word + \" \"\n        }\n    }\n    return strings.TrimRight(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9j7s1fls_test.go:25:17: undefined: strings

    /tmp/tmp9j7s1fls_test.go:27:12: undefined: IsPrime

    /tmp/tmp9j7s1fls_test.go:31:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := []string{}\n    for _, word := range words {\n       \
    \ if is_prime(len(word)) {\n            result = append(result, word)\n      \
    \  }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpto9w0d8u_test.go:23:14: undefined: strings

    /tmp/tmpto9w0d8u_test.go:26:12: undefined: is_prime

    /tmp/tmpto9w0d8u_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return sentence\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'is', got 'This is a test'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpt8ce0wqt_test.go:45:\
    \ expected 'go for', got 'lets go for swimming'\n    --- FAIL: TestWords_In_Sentence/test_num__2\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'there is no place', got 'there\
    \ is no place available here'\n    --- FAIL: TestWords_In_Sentence/test_num__3\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'Hi am Hussein', got 'Hi I\
    \ am Hussein'\n    --- FAIL: TestWords_In_Sentence/test_num__5 (0.00s)\n     \
    \   tmpt8ce0wqt_test.go:45: expected '', got 'here'\n    --- FAIL: TestWords_In_Sentence/test_num__6\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'is', got 'here is'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuvsy1_x_test.go:24:26: undefined: strings

    /tmp/tmpkuvsy1_x_test.go:25:12: undefined: is_prime

    /tmp/tmpkuvsy1_x_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result = \"\"\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result += word + \" \"\n        }\n    }\n\
    \    return strings.TrimRight(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5h1klubb_test.go:23:14: undefined: strings

    /tmp/tmp5h1klubb_test.go:26:12: undefined: is_prime

    /tmp/tmp5h1klubb_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var word_len_is_prime bool\n    word_in_sentence := \"\"\n    for i, j :=\
    \ 0, 0; i < len(sentence); i++ {\n        if sentence[i] == ' ' {\n          \
    \  word_len_is_prime = true\n            for j = 2; j*j <= i; j++ {\n        \
    \        if i%j == 0 {\n                    word_len_is_prime = false\n      \
    \              break\n                }\n            }\n            if word_len_is_prime\
    \ {\n                words = append(words, sentence[:i])\n            }\n    \
    \        sentence = sentence[i+1:]\n            i = 0\n        }\n    }\n    word_len_is_prime\
    \ = true\n    for j = 2; j*j <= len(sentence); j++ {\n        if len(sentence)%j\
    \ == 0 {\n            word_len_is_prime = false\n            break\n        }\n\
    \    }\n    if word_len_is_prime {\n        words = append(words, sentence)\n\
    \    }\n    for i = 0; i < len(words); i++ {\n        word_in_sentence += words[i]\n\
    \        if i != len(words)-1 {\n            word_in_sentence += \" \"\n     \
    \   }\n    }\n    return word_in_sentence\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8d7q8enp_test.go:43:9: undefined: j

    /tmp/tmp8d7q8enp_test.go:44:26: undefined: j

    /tmp/tmp8d7q8enp_test.go:52:9: undefined: i

    /tmp/tmp8d7q8enp_test.go:53:35: undefined: i

    /tmp/tmp8d7q8enp_test.go:54:12: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range getWords(sentence) {\n        if isPrime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kj8gmdl_test.go:24:26: undefined: getWords

    /tmp/tmp6kj8gmdl_test.go:25:12: undefined: isPrime

    /tmp/tmp6kj8gmdl_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range sentence {\n        if word != \" \" {\n           \
    \ words = append(words, string(word))\n        }\n    }\n    return strings.Join(words,\
    \ \"\")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl8trgrx5_test.go:25:20: invalid operation: word != " " (mismatched types
    rune and untyped string)

    /tmp/tmpl8trgrx5_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var ret string\n\n    for _, w := range words {\n        if is_prime(len(w))\
    \ {\n            ret += w + \" \"\n        }\n    }\n\n    return strings.TrimSpace(ret)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp20ag03em_test.go:23:14: undefined: strings

    /tmp/tmp20ag03em_test.go:27:12: undefined: is_prime

    /tmp/tmp20ag03em_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073488
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return sentence\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'is', got 'This is a test'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpt8ce0wqt_test.go:45:\
    \ expected 'go for', got 'lets go for swimming'\n    --- FAIL: TestWords_In_Sentence/test_num__2\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'there is no place', got 'there\
    \ is no place available here'\n    --- FAIL: TestWords_In_Sentence/test_num__3\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'Hi am Hussein', got 'Hi I\
    \ am Hussein'\n    --- FAIL: TestWords_In_Sentence/test_num__5 (0.00s)\n     \
    \   tmpt8ce0wqt_test.go:45: expected '', got 'here'\n    --- FAIL: TestWords_In_Sentence/test_num__6\
    \ (0.00s)\n        tmpt8ce0wqt_test.go:45: expected 'is', got 'here is'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if len(sentence)\
    \ == 0 {\n        return \"\"\n    }\n    w := \"\"\n    result := \"\"\n    for\
    \ _, c := range sentence {\n        if c == ' ' {\n            if is_prime(len(w))\
    \ {\n                result += w + \" \"\n            }\n            w = \"\"\n\
    \        } else {\n            w += string(c)\n        }\n    }\n    if is_prime(len(w))\
    \ {\n        result += w\n    }\n    if len(result) == 0 {\n        return result\n\
    \    }\n    return result[:len(result)-1]\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppff05nc9_test.go:30:16: undefined: is_prime

    /tmp/tmppff05nc9_test.go:38:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result []string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result = append(result, word)\n\
    \        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu7o8tl9z_test.go:24:14: undefined: strings

    /tmp/tmpu7o8tl9z_test.go:26:12: undefined: is_prime

    /tmp/tmpu7o8tl9z_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // Split sentence\
    \ into words\n    words := strings.Split(sentence, \" \")\n    ret := []string{}\n\
    \    for _, word := range words {\n        // Is this word length a prime number?\n\
    \        if is_prime(len(word)) {\n            ret = append(ret, word)\n     \
    \   }\n    }\n    return strings.Join(ret, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wmhvhbm_test.go:24:14: undefined: strings

    /tmp/tmp4wmhvhbm_test.go:28:12: undefined: is_prime

    /tmp/tmp4wmhvhbm_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    res := \"\"\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            res += word + \" \"\n        }\n    }\n    if len(res) > 0 {\n\
    \        res = res[:len(res)-1]\n    }\n    return res\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp53h48s_o_test.go:24:26: undefined: strings

    /tmp/tmp53h48s_o_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: your\
    \ solution here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpk6ovcwxv_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpk6ovcwxv_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpk6ovcwxv_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpk6ovcwxv_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpk6ovcwxv_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpk6ovcwxv_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, w := range split_words(sentence) {\n        if is_prime(len(w))\
    \ {\n            words = append(words, w)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6okt2qtm_test.go:24:23: undefined: split_words

    /tmp/tmp6okt2qtm_test.go:25:12: undefined: is_prime

    /tmp/tmp6okt2qtm_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuvsy1_x_test.go:24:26: undefined: strings

    /tmp/tmpkuvsy1_x_test.go:25:12: undefined: is_prime

    /tmp/tmpkuvsy1_x_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    var result string\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        if is_prime(len(word)) {\n            words = append(words,\
    \ word)\n        }\n    }\n    for _, word := range words {\n        result +=\
    \ word + \" \"\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpab9l8agy_test.go:25:26: undefined: strings

    /tmp/tmpab9l8agy_test.go:26:12: undefined: is_prime

    /tmp/tmpab9l8agy_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var wordList\
    \ []string\n    wordStartIndex := 0\n    for index, char := range sentence {\n\
    \        if char == ' ' {\n            wordList = append(wordList, sentence[wordStartIndex:index])\n\
    \            wordStartIndex = index + 1\n        }\n    }\n    wordList = append(wordList,\
    \ sentence[wordStartIndex:])\n    var primeList []string\n    for _, word := range\
    \ wordList {\n        if isPrime(len(word)) {\n            primeList = append(primeList,\
    \ word)\n        }\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(primeList,\
    \ \" \"))\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmm8ug93_test.go:34:12: undefined: isPrime

    /tmp/tmpzmm8ug93_test.go:38:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    for word := range words {\n        if word ==\n    }\n}\n\nfunc\
    \ TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi0qmc7cx_test.go:26:5: expected operand, found ''}''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // write your\
    \ solution here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpla4w7g31_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpla4w7g31_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpla4w7g31_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpla4w7g31_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpla4w7g31_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpla4w7g31_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: Implement\
    \ the function.\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpbb6isg_a_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpbb6isg_a_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpbb6isg_a_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpbb6isg_a_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpbb6isg_a_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpbb6isg_a_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, w := range strings.Split(sentence, \" \") {\n        if is_prime(len(w))\
    \ {\n            words = append(words, w)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp408r2euj_test.go:24:23: undefined: strings

    /tmp/tmp408r2euj_test.go:25:12: undefined: is_prime

    /tmp/tmp408r2euj_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := make([]string, 0)\n    last := 0\n    i := 0\n    n := len(sentence)\n\
    \    for i < n {\n        if sentence[i] == ' ' {\n            words = append(words,\
    \ sentence[last:i])\n            last = i + 1\n        }\n        i++\n    }\n\
    \    words = append(words, sentence[last:])\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return result[:len(result)-1]\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ce9bq8l_test.go:37:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var new_words\
    \ []string\n    words := split_sentence(sentence)\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            new_words = append(new_words,\
    \ word)\n        }\n    }\n    return strings.Join(new_words, \" \")\n}\n\nfunc\
    \ TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplp_gxlhu_test.go:24:14: undefined: split_sentence

    /tmp/tmplp_gxlhu_test.go:26:12: undefined: is_prime

    /tmp/tmplp_gxlhu_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // split words\
    \ by space\n    words := strings.Split(sentence, \" \")\n    result := \"\"\n\
    \    for _, word := range words {\n        if is_prime(len(word)) {\n        \
    \    result += word + \" \"\n        }\n    }\n    // remove the last space\n\
    \    return result[:len(result)-1]\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_o3th94_test.go:24:14: undefined: strings

    /tmp/tmpi_o3th94_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    sentence = sentence\
    \ + \" \"\n    var words []string\n    var word string\n    for _, c := range\
    \ sentence {\n        if string(c) == \" \" {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word = word +\
    \ string(c)\n        }\n    }\n    var result string\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            result = result + word\
    \ + \" \"\n        }\n    }\n    return result[:len(result)-1]\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzizc_y94_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    ret := \"\"\n    for _, w := range words {\n        if is_prime(len(w))\
    \ {\n            ret += \" \" + w\n        }\n    }\n    return strings.Trim(ret,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkclix_vk_test.go:23:14: undefined: strings

    /tmp/tmpkclix_vk_test.go:26:12: undefined: is_prime

    /tmp/tmpkclix_vk_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if len(sentence)\
    \ == 0 {\n        return \"\"\n    }\n    words := strings.Split(sentence, \"\
    \ \")\n    if len(words) == 0 {\n        return \"\"\n    }\n    if len(words)\
    \ == 1 {\n        return words[0]\n    }\n    result := \"\"\n    for _, word\
    \ := range words {\n        if is_prime(len(word)) {\n            result += word\
    \ + \" \"\n        }\n    }\n    return strings.TrimRight(result, \" \")\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3emefpeo_test.go:26:14: undefined: strings

    /tmp/tmp3emefpeo_test.go:35:12: undefined: is_prime

    /tmp/tmp3emefpeo_test.go:39:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(len(word)) {\n     \
    \       result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu86kddrb_test.go:25:12: undefined: is_prime

    /tmp/tmpu86kddrb_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpu86kddrb_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    result := \"\"\n    for _, word := range strings.Split(sentence, \"\
    \ \") {\n        if len(word) == 2 || len(word) == 3 || len(word) == 5 || len(word)\
    \ == 7 {\n            words = append(words, word)\n        }\n    }\n    return\
    \ strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n\
    \  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26autz99_test.go:24:5: result declared but not used

    /tmp/tmp26autz99_test.go:25:26: undefined: strings

    /tmp/tmp26autz99_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var (\n     \
    \   res []string\n        word string\n    )\n    for i := 0; i < len(sentence);\
    \ i++ {\n        if string(sentence[i]) == \" \" {\n            if is_prime(len(word))\
    \ {\n                res = append(res, word)\n            }\n            word\
    \ = \"\"\n        } else {\n            word += string(sentence[i])\n        }\n\
    \    }\n    if is_prime(len(word)) {\n        res = append(res, word)\n    }\n\
    \    return strings.Join(res, \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnac4w4gd_test.go:29:16: undefined: is_prime

    /tmp/tmpnac4w4gd_test.go:37:8: undefined: is_prime

    /tmp/tmpnac4w4gd_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    is_prime := func(n\
    \ int) bool {\n        if n == 1 {\n            return false\n        }\n    \
    \    for i := 2; i < n; i++ {\n            if n % i == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n\n    var result\
    \ string\n    words := strings.Split(sentence, \" \")\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            result += fmt.Sprintf(\"\
    %s \", word)\n        }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc\
    \ TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0lldsiyv_test.go:36:14: undefined: strings

    /tmp/tmp0lldsiyv_test.go:42:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var newWords\
    \ []string\n    for _, word := range(strings.Split(sentence, \" \")) {\n     \
    \   // if len(word) is a prime number, add it to newWords\n        if len(word)\
    \ is prime_number {\n            newWords = append(newWords, word)\n        }\n\
    \    }\n    return strings.Join(newWords, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy497xn0u_test.go:26:22: expected '';'', found is

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    var lgth int\n\n    words := []string{}\n    for _, word := range sentence\
    \ {\n        words = append(words, string(word))\n    }\n\n    for _, word :=\
    \ range words {\n        lgth = len(word)\n        if is_prime(lgth) {\n     \
    \       result += word\n        }\n    }\n\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphtmu5c65_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    //TODO\n    return\
    \ \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmp_50alne2_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmp_50alne2_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmp_50alne2_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmp_50alne2_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmp_50alne2_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmp_50alne2_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range words(sentence) {\n        if is_prime(word_length(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49685x5s_test.go:24:26: undefined: words

    /tmp/tmp49685x5s_test.go:25:12: undefined: is_prime

    /tmp/tmp49685x5s_test.go:25:21: undefined: word_length

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := split_words(sentence)\n\
    \    prime_words := get_prime_words(words)\n    return merge_words(prime_words)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprdj285f6_test.go:23:14: undefined: split_words

    /tmp/tmprdj285f6_test.go:24:20: undefined: get_prime_words

    /tmp/tmprdj285f6_test.go:25:12: undefined: merge_words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    length := len(sentence)\n\
    \    result := \"\"\n    for i := 0; i < length; i++ {\n        if sentence[i]\
    \ == ' ' {\n            continue\n        }\n        word_start := i\n       \
    \ for i++; i < length && sentence[i] != ' '; i++ {\n        }\n        word_length\
    \ := i - word_start\n        if is_prime(word_length) {\n            if len(result)\
    \ > 0 {\n                result += \" \"\n            }\n            result +=\
    \ sentence[word_start:i]\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptukuw_t5_test.go:33:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := string_to_words(sentence)\n\
    \    words_primes := []string{}\n    for _, w := range words {\n        if is_prime(len(w))\
    \ {\n            words_primes = append(words_primes, w)\n        }\n    }\n  \
    \  return strings_to_string(words_primes)\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgmz39yqc_test.go:23:14: undefined: string_to_words

    /tmp/tmpgmz39yqc_test.go:26:12: undefined: is_prime

    /tmp/tmpgmz39yqc_test.go:30:12: undefined: strings_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words = []string{}\n\
    \    var word = \"\"\n    for _, c := range sentence {\n        if c == ' ' {\n\
    \            words = append(words, word)\n            word = \"\"\n        } else\
    \ {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    var result = \"\"\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result[1:]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0so_silf_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    tmp := make([]string,\
    \ 0)\n    for _, w := range strings.Split(sentence, \" \") {\n        if is_prime(len(w))\
    \ {\n            tmp = append(tmp, w)\n        }\n    }\n    return strings.Join(tmp,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp62wga3mv_test.go:24:23: undefined: strings

    /tmp/tmp62wga3mv_test.go:25:12: undefined: is_prime

    /tmp/tmp62wga3mv_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO\n   \
    \ return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate :=\
    \ words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpfh7863___test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpfh7863___test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpfh7863___test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpfh7863___test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpfh7863___test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpfh7863___test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result []string\n\
    \    var words = get_words(sentence)\n    for _, word := range words {\n     \
    \   if is_prime(len(word)) {\n            result = append(result, word)\n    \
    \    }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqz6t52es_test.go:24:17: undefined: get_words

    /tmp/tmpqz6t52es_test.go:26:12: undefined: is_prime

    /tmp/tmpqz6t52es_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    word_lengths\
    \ := []int{}\n    words := []string{}\n    for _, word := range strings.Split(sentence,\
    \ \" \") {\n        word_lengths = append(word_lengths, len(word))\n        words\
    \ = append(words, word)\n    }\n    primes := []int{}\n    for _, length := range\
    \ word_lengths {\n        if is_prime(length) {\n            primes = append(primes,\
    \ length)\n        }\n    }\n    primes_string := []string{}\n    for _, word\
    \ := range words {\n        if contains(primes, len(word)) {\n            primes_string\
    \ = append(primes_string, word)\n        }\n    }\n    return strings.Join(primes_string,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf68l7d8b_test.go:25:26: undefined: strings

    /tmp/tmpf68l7d8b_test.go:31:12: undefined: is_prime

    /tmp/tmpf68l7d8b_test.go:37:12: undefined: contains

    /tmp/tmpf68l7d8b_test.go:41:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var (\n     \
    \   result string\n        word string\n    )\n    for _, c := range sentence\
    \ {\n        if c == ' ' {\n            if is_prime(len(word)) {\n           \
    \     result += word + \" \"\n            }\n            word = \"\"\n       \
    \ } else {\n            word += string(c)\n        }\n    }\n    if is_prime(len(word))\
    \ {\n        result += word\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp36c9306__test.go:29:16: undefined: is_prime

    /tmp/tmp36c9306__test.go:37:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    primeWords := make([]string, 0)\n    for _, word := range words\
    \ {\n        if isPrime(len(word)) {\n            primeWords = append(primeWords,\
    \ word)\n        }\n    }\n    return strings.Join(primeWords, \" \")\n}\n\nfunc\
    \ TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7hhm0li3_test.go:23:14: undefined: strings

    /tmp/tmp7hhm0li3_test.go:26:12: undefined: isPrime

    /tmp/tmp7hhm0li3_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for _, word := range words\
    \ {\n        for _, prime := range primes {\n            if len(word) == prime\
    \ {\n                return word\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuk07pcur_test.go:23:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // Your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmp_qmszf9v_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmp_qmszf9v_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmp_qmszf9v_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmp_qmszf9v_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmp_qmszf9v_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmp_qmszf9v_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_fujmlbt_test.go:24:26: undefined: strings

    /tmp/tmp_fujmlbt_test.go:25:12: undefined: is_prime

    /tmp/tmp_fujmlbt_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    var word string\n    for _, char := range sentence {\n        if char ==\
    \ ' ' {\n            if is_prime(len(word)) {\n                result += word\
    \ + \" \"\n            }\n            word = \"\"\n        } else {\n        \
    \    word += string(char)\n        }\n    }\n    if is_prime(len(word)) {\n  \
    \      result += word\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp79s50l6h_test.go:27:16: undefined: is_prime

    /tmp/tmp79s50l6h_test.go:35:8: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    word := \"\"\n    for _, char := range sentence {\n        if char ==\
    \ ' ' {\n            words = append(words, word)\n            word = \"\"\n  \
    \      } else {\n            word += string(char)\n        }\n    }\n    words\
    \ = append(words, word)\n    var result string\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return result[:len(result)-1]\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqgbald_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073492
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := split_words(sentence)\n\
    \    prime_words := []string{}\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            prime_words = append(prime_words, word)\n        }\n    }\n \
    \   if len(prime_words) > 0 {\n        return strings.Join(prime_words, \" \"\
    )\n    }\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n \
    \ candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83isbb9b_test.go:23:14: undefined: split_words

    /tmp/tmp83isbb9b_test.go:26:12: undefined: is_prime

    /tmp/tmp83isbb9b_test.go:31:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := []string{}\n    for i := 0; i < len(sentence); i++ {\n        if\
    \ sentence[i] == ' ' {\n            continue\n        } else {\n            //\
    \ get word from sentence\n            word := string(sentence[i])\n          \
    \  for j := i + 1; j < len(sentence); j++ {\n                if sentence[j] ==\
    \ ' ' {\n                    i = j\n                    break\n              \
    \  } else {\n                    word += string(sentence[j])\n               \
    \ }\n            }\n            words = append(words, word)\n        }\n    }\n\
    \    // check if word length is prime number\n    for _, word := range words {\n\
    \        isPrime := true\n        for i := 2; i < len(word); i++ {\n         \
    \   if len(word) % i == 0 {\n                isPrime = false\n               \
    \ break\n            }\n        }\n        if isPrime {\n            result +=\
    \ word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpc6hg2uos_test.go:77: expected 'is', got 'is a est st t '\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpc6hg2uos_test.go:77:\
    \ expected 'go for', got 'go for wimming mming ing ng g '\n    --- FAIL: TestWords_In_Sentence/test_num__2\
    \ (0.00s)\n        tmpc6hg2uos_test.go:77: expected 'there is no place', got 'there\
    \ is no place ere re e '\n    --- FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n\
    \        tmpc6hg2uos_test.go:77: expected 'Hi am Hussein', got 'Hi I am Hussein\
    \ ssein ein in n '\n    --- FAIL: TestWords_In_Sentence/test_num__4 (0.00s)\n\
    \        tmpc6hg2uos_test.go:77: expected 'go for it', got 'go for it t '\n  \
    \  --- FAIL: TestWords_In_Sentence/test_num__5 (0.00s)\n        tmpc6hg2uos_test.go:77:\
    \ expected '', got 'ere re e '\n    --- FAIL: TestWords_In_Sentence/test_num__6\
    \ (0.00s)\n        tmpc6hg2uos_test.go:77: expected 'is', got 'is s '\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := \"\"\
    \n    l := len(sentence)\n    if l <= 1 {\n        return words\n    }\n    var\
    \ current string\n    primes := map[int]int{2:2, 3:3, 5:5, 7:7, 11:11, 13:13,\
    \ 17:17, 19:19, 23:23, 29:29, 31:31, 37:37, 41:41, 43:43, 47:47, 53:53, 59:59,\
    \ 61:61, 67:67, 71:71, 73:73, 79:79, 83:83, 89:89, 97:97, 101:101}\n    for i\
    \ := 0; i < l; i++ {\n        current += string(sentence[i])\n        if string(sentence[i])\
    \ == \" \" {\n            if primes[len(current) - 1] > 0 {\n                words\
    \ += current\n            }\n            current = \"\"\n        }\n    }\n  \
    \  if primes[len(current)] > 0 {\n        words += current\n    }\n    return\
    \ words\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpa0_ok5aj_test.go:64: expected 'is', got 'is '\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpa0_ok5aj_test.go:64: expected\
    \ 'go for', got 'go for '\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpa0_ok5aj_test.go:64: expected 'there is no place', got 'there is no\
    \ place '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := [20]string{}\n\
    \    words_count := 0\n    final_words := [20]string{}\n    final_words_count\
    \ := 0\n    word := [20]rune{}\n    word_length := 0\n    for _, char := range\
    \ sentence {\n        if char == ' ' {\n            word[word_length] = '\\000'\n\
    \            words[words_count] = string(word[:word_length])\n            words_count++\n\
    \            word_length = 0\n        } else {\n            word[word_length]\
    \ = char\n            word_length++\n        }\n    }\n    word[word_length] =\
    \ '\\000'\n    words[words_count] = string(word[:word_length])\n    words_count++\n\
    \    for i := 0; i < words_count; i++ {\n        is_prime := true\n        for\
    \ j := 2; j < len(words[i]); j++ {\n            if len(words[i]) % j == 0 {\n\
    \                is_prime = false\n                break\n            }\n    \
    \    }\n        if is_prime {\n            final_words[final_words_count] = words[i]\n\
    \            final_words_count++\n        }\n    }\n    return strings.Join(final_words[:final_words_count],\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxbg7htqd_test.go:56:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range words_in_sentence_test.split_by_space(sentence) {\n\
    \        if is_prime(len(word)) {\n            words = append(words, word)\n \
    \       }\n    }\n    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptdpis17m_test.go:24:26: undefined: words_in_sentence_test

    /tmp/tmptdpis17m_test.go:25:12: undefined: is_prime

    /tmp/tmptdpis17m_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for i := 0; i < len(sentence); i++ {\n        if sentence[i] == ' '\
    \ {\n            i++\n        }\n        wordStart := i\n        for ; i < len(sentence)\
    \ && sentence[i] != ' '; i++ {\n        }\n        wordEnd := i\n        word\
    \ := sentence[wordStart:wordEnd]\n        words = append(words, word)\n    }\n\
    \    res := \"\"\n    for _, word := range words {\n        prime := true\n  \
    \      for i := 2; i < len(word); i++ {\n            if len(word) % i == 0 {\n\
    \                prime = false\n                break\n            }\n       \
    \ }\n        if prime {\n            res += word + \" \"\n        }\n    }\n \
    \   if len(res) > 0 {\n        res = res[:len(res) - 1]\n    }\n    return res\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpte8p_n_n_test.go:73: expected 'is', got 'is a'\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpte8p_n_n_test.go:73:\
    \ expected 'Hi am Hussein', got 'Hi I am Hussein'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    length := len(sentence)\n    if length < 1 || length > 100 {\n        return\
    \ \"\"\n    }\n    words := []rune(sentence)\n    is_prime := func(word_length\
    \ int) bool {\n        var i int\n        for i = 2; i < word_length; i++ {\n\
    \            if word_length % i == 0 {\n                return false\n       \
    \     }\n        }\n        return true\n    }\n    for _, word := range words\
    \ {\n        if word == ' ' {\n            continue\n        }\n        if word_length\
    \ := len([]rune(string(word))); is_prime(word_length) {\n            result +=\
    \ string(word)\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpsor6mvbd_test.go:68: expected 'is', got 'Thisisatest'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpsor6mvbd_test.go:68:\
    \ expected 'go for', got 'letsgoforswimming'\n    --- FAIL: TestWords_In_Sentence/test_num__2\
    \ (0.00s)\n        tmpsor6mvbd_test.go:68: expected 'there is no place', got 'thereisnoplaceavailablehere'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpsor6mvbd_test.go:68:\
    \ expected 'Hi am Hussein', got 'HiIamHussein'\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpsor6mvbd_test.go:68: expected 'go for it', got 'goforit'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__5 (0.00s)\n        tmpsor6mvbd_test.go:68:\
    \ expected '', got 'here'\n    --- FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n\
    \        tmpsor6mvbd_test.go:68: expected 'is', got 'hereis'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO\n   \
    \ return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate :=\
    \ words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpfh7863___test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpfh7863___test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpfh7863___test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpfh7863___test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpfh7863___test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpfh7863___test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range words(sentence) {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xwd72_5_test.go:24:26: undefined: words

    /tmp/tmp5xwd72_5_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // YOUR CODE\
    \ GOES HERE\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n\
    \  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpmxm6bbz8_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpmxm6bbz8_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpmxm6bbz8_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpmxm6bbz8_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpmxm6bbz8_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpmxm6bbz8_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    word := \"\"\n    for _, c := range sentence {\n        if c == ' '\
    \ {\n            words = append(words, word)\n            word = \"\"\n      \
    \  } else {\n            word += string(c)\n        }\n    }\n    words = append(words,\
    \ word)\n    res := \"\"\n    for _, w := range words {\n        if is_prime(len(w))\
    \ {\n            res += w + \" \"\n        }\n    }\n    return res[:len(res)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0u_2sw4r_test.go:36:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result []string\n\
    \    var words = \"\"\n    for _, word := range sentence {\n        if word ==\
    \ ' ' {\n            if is_prime(len(words)) {\n                result = append(result,\
    \ words)\n            }\n            words = \"\"\n        } else {\n        \
    \    words += string(word)\n        }\n    }\n    if is_prime(len(words)) {\n\
    \        result = append(result, words)\n    }\n    if len(result) == 0 {\n  \
    \      return \"\"\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp941h_ns9_test.go:27:16: undefined: is_prime

    /tmp/tmp941h_ns9_test.go:35:8: undefined: is_prime

    /tmp/tmp941h_ns9_test.go:41:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range split_string(sentence) {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbtwwjw4_test.go:24:26: undefined: split_string

    /tmp/tmprbtwwjw4_test.go:25:12: undefined: is_prime

    /tmp/tmprbtwwjw4_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if sentence ==\
    \ \"\" {\n        return \"\"\n    }\n    var result string\n    sentence = sentence\
    \ + \" \"\n    words := strings.Split(sentence, \" \")\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            result = result + word\
    \ + \" \"\n        }\n    }\n    return strings.TrimRight(result, \" \")\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbobjv6n_test.go:28:14: undefined: strings

    /tmp/tmpvbobjv6n_test.go:30:12: undefined: is_prime

    /tmp/tmpvbobjv6n_test.go:34:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpgmqa1vtl_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpgmqa1vtl_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpgmqa1vtl_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpgmqa1vtl_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := words_in_sentence_helper(sentence)\n\
    \    result := \"\"\n    for i, word := range words {\n        if is_prime(len(word))\
    \ {\n            result += word\n            if i != len(words) - 1 {\n      \
    \          result += \" \"\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt71jq2sa_test.go:23:14: undefined: words_in_sentence_helper

    /tmp/tmpt71jq2sa_test.go:26:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if len(sentence)\
    \ == 0 {\n        return \"\"\n    }\n    words := strings.Split(sentence, \"\
    \ \")\n    // \u5C06\u53E5\u5B50\u6240\u6709\u5355\u8BCD\u5B58\u5165\u5207\u7247\
    \uFF0C\u4F46\u5B9E\u9645\u53EF\u4EE5\u76F4\u63A5\u7528\u4E00\u4E2A\u5B57\u7B26\
    \u4E32\u4FDD\u5B58\n    // \u7528\u7A7A\u683C\u5206\u5272\uFF0C\u5148\u904D\u5386\
    \u5207\u7247\uFF0C\u5224\u65AD\u662F\u5426\u4E3A\u8D28\u6570\uFF0C\u5982\u679C\
    \u662F\u8D28\u6570\uFF0C\u5219\u4FDD\u5B58\u8D77\u6765\n    // \u5982\u679C\u4E0D\
    \u662F\u8D28\u6570\uFF0C\u5219\u4E0D\u7528\u7BA1\n\n    // \u5982\u679C\u7528\u5B57\
    \u7B26\u4E32\u6765\u4FDD\u5B58\uFF0C\u5219\u76F4\u63A5\u904D\u5386\u5B57\u7B26\
    \u4E32\uFF0C\u6BCF\u6B21\u9047\u5230\u7A7A\u683C\u5219\u5BF9\u524D\u9762\u7684\
    \u5355\u8BCD\u5224\u65AD\u662F\u5426\u4E3A\u8D28\u6570\n    res := \"\"\n    for\
    \ _, word := range words {\n        // \u8BFB\u5165\u6BCF\u4E2A\u5355\u8BCD\n\
    \        if isPrime(len(word)) {\n            // \u5982\u679C\u662F\u8D28\u6570\
    \uFF0C\u5219\u62FC\u63A5\u5230\u5B57\u7B26\u4E32\u4E0A\uFF0C\u7136\u540E\u5728\
    \u7ED3\u5C3E\u52A0\u4E0A\u7A7A\u683C\n            res += word + \" \"\n      \
    \  }\n    }\n    if len(res) > 0 {\n        res = res[:len(res)-1]\n    }\n  \
    \  return res\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate :=\
    \ words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ra3_n3l_test.go:26:14: undefined: strings

    /tmp/tmp2ra3_n3l_test.go:35:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_g46fl51_test.go:23:14: undefined: strings

    /tmp/tmp_g46fl51_test.go:26:12: undefined: is_prime

    /tmp/tmp_g46fl51_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    if len(sentence) > 100 {\n        return result\n    }\n    list := make([]string,\
    \ 0)\n    var word string\n    for _, s := range sentence {\n        if s == '\
    \ ' {\n            list = append(list, word)\n            word = \"\"\n      \
    \  } else {\n            word += string(s)\n        }\n    }\n    if word != \"\
    \" {\n        list = append(list, word)\n    }\n    for _, w := range list {\n\
    \        if is_prime(len(w)) {\n            result += w + \" \"\n        }\n \
    \   }\n    if len(result) > 0 {\n        result = result[:len(result)-1]\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmposwat_27_test.go:41:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var ret []string\n    for _, w := range words {\n        if is_prime(len(w))\
    \ {\n            ret = append(ret, w)\n        }\n    }\n    return strings.Join(ret,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xsu5y65_test.go:23:14: undefined: strings

    /tmp/tmp0xsu5y65_test.go:26:12: undefined: is_prime

    /tmp/tmp0xsu5y65_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    /*\n    words\
    \ := strings.Split(sentence, \" \")\n    fmt.Println(words)\n    fmt.Println(len(words))\n\
    \    for i := 0; i < len(words); i++ {\n        fmt.Println(len(words[i]))\n \
    \   }\n    for i := 0; i < len(words); i++ {\n        if is_prime(len(words[i]))\
    \ {\n            fmt.Println(words[i])\n        }\n    }\n    */\n    /*\n   \
    \ words := strings.Split(sentence, \" \")\n    words_map := make(map[int]string)\n\
    \    for i := 0; i < len(words); i++ {\n        words_map[len(words[i])] = words[i]\n\
    \    }\n    var list []int\n    for key, _ := range words_map {\n        list\
    \ = append(list, key)\n    }\n    sort.Ints(list)\n    fmt.Println(list)\n   \
    \ fmt.Println(words_map)\n    */\n    /*\n    words := strings.Split(sentence,\
    \ \" \")\n    words_map := make(map[int]string)\n    for i := 0; i < len(words);\
    \ i++ {\n        words_map[len(words[i])] = words[i]\n    }\n    fmt.Println(words_map)\n\
    \    var list []int\n    for key, _ := range words_map {\n        list = append(list,\
    \ key)\n    }\n    sort.Ints(list)\n    fmt.Println(list)\n    var list_words\
    \ []string\n    for _, value := range list {\n        if is_prime(value) {\n \
    \           list_words = append(list_words, words_map[value])\n        }\n   \
    \ }\n    fmt.Println(list_words)\n    */\n    /*\n    words := strings.Split(sentence,\
    \ \" \")\n    words_map := make(map[int]string)\n    for i := 0; i < len(words);\
    \ i++ {\n        words_map[len(words[i])] = words[i]\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf_xau_wz_test.go:71:5: comment not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    s := \"\"\n \
    \   for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            s += word + \" \"\n        }\n    }\n    return strings.Trim(s,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprn_wxjhy_test.go:24:26: undefined: strings

    /tmp/tmprn_wxjhy_test.go:25:12: undefined: is_prime

    /tmp/tmprn_wxjhy_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if sentence ==\
    \ \"\" {\n        return \"\"\n    }\n    primes := map[int]bool{\n        2:\
    \ true,\n        3: true,\n        5: true,\n        7: true,\n        11: true,\n\
    \        13: true,\n        17: true,\n        19: true,\n        23: true,\n\
    \        29: true,\n        31: true,\n        37: true,\n        41: true,\n\
    \        43: true,\n        47: true,\n        53: true,\n        59: true,\n\
    \        61: true,\n        67: true,\n        71: true,\n        73: true,\n\
    \        79: true,\n        83: true,\n        89: true,\n        97: true,\n\
    \    }\n    words := make([]string, 0)\n    word := \"\"\n    for _, letter :=\
    \ range sentence {\n        if letter == ' ' {\n            words = append(words,\
    \ word)\n            word = \"\"\n        } else {\n            word += string(letter)\n\
    \        }\n    }\n    words = append(words, word)\n    answer := \"\"\n    for\
    \ _, word := range words {\n        if primes[len(word)] {\n            answer\
    \ += word + \" \"\n        }\n    }\n    return answer[:len(answer)-1]\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513780, 0xc000164018})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513780,\
    \ 0xc000164018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_in_sentence({0x51e56c, 0x4})\n\t/tmp/tmpjclblfjz_test.go:70\
    \ +0x5dd\ncommand-line-arguments_test.TestWords_In_Sentence(0x0?)\n\t/tmp/tmpjclblfjz_test.go:85\
    \ +0x11a\ntesting.tRunner(0xc000103380, 0x529130)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range(sentence) {\n        if string(word) == \" \" {\n  \
    \          words = append(words, \"\")\n        } else {\n            words[len(words)-1]\
    \ += string(word)\n        }\n    }\n    var result []string\n    for _, word\
    \ := range(words) {\n        if IsPrime(len(word)) {\n            result = append(result,\
    \ word)\n        }\n    }\n    var resultString string\n    for _, word := range(result)\
    \ {\n        resultString += word + \" \"\n    }\n    return resultString[:len(resultString)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpho62o3lv_test.go:33:12: undefined: IsPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += string(word)\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpql2j3n2q_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result []string\n\
    \    var words = strings.Split(sentence, \" \")\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result = append(result, word)\n\
    \        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsre3h_f_test.go:24:17: undefined: strings

    /tmp/tmptsre3h_f_test.go:26:12: undefined: is_prime

    /tmp/tmptsre3h_f_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073495
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    primes := list_primes(len(words))\n    result := []string{}\n  \
    \  for _, word := range words {\n        if primes[len(word)] {\n            result\
    \ = append(result, word)\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9zh6geg_test.go:23:14: undefined: strings

    /tmp/tmpd9zh6geg_test.go:24:15: undefined: list_primes

    /tmp/tmpd9zh6geg_test.go:31:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // Your code\
    \ goes here.\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n\
    \  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmp34a2fqul_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmp34a2fqul_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmp34a2fqul_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmp34a2fqul_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmp34a2fqul_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmp34a2fqul_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    result := \"\"\n    if len(sentence) == 0 {\n        return result\n    }\n\
    \    is_prime := func(value int) bool {\n        for i := 2; i <= value/2; i++\
    \ {\n            if value % i == 0 {\n                return false\n         \
    \   }\n        }\n        return true\n    }\n    for _, word := range sentence\
    \ {\n        if string(word) == \" \" {\n            continue\n        }\n   \
    \     if len(words) == 0 {\n            words = append(words, string(word))\n\
    \        } else {\n            if string(word) == \" \" {\n                continue\n\
    \            }\n            if string(word) != \" \" {\n                words[len(words)-1]\
    \ += string(word)\n            }\n        }\n    }\n    for _, word := range words\
    \ {\n        if is_prime(len(word)) {\n            result += word + \" \"\n  \
    \      }\n    }\n    return result[:len(result)-1]\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513640, 0xc0001620f0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513640,\
    \ 0xc0001620f0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_in_sentence({0x524a4c, 0x20})\n\t\
    /tmp/tmpk2a87wua_test.go:56 +0x2c5\ncommand-line-arguments_test.TestWords_In_Sentence(0x0?)\n\
    \t/tmp/tmpk2a87wua_test.go:68 +0x9f\ntesting.tRunner(0xc000103860, 0x528ff0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073495
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    sentence_length := len(sentence)\n    index := 0\n    for index < sentence_length\
    \ {\n        var end int\n        for end = index; end < sentence_length && sentence[end]\
    \ != ' '; end++ {\n        }\n        index = end + 1\n        words = append(words,\
    \ sentence[end-index+1:end])\n    }\n    fmt.Println(words)\n    primes := map[int]bool{\n\
    \        2: true,\n        3: true,\n        5: true,\n        7: true,\n    \
    \    11: true,\n        13: true,\n        17: true,\n        19: true,\n    \
    \    23: true,\n        29: true,\n        31: true,\n        37: true,\n    \
    \    41: true,\n        43: true,\n        47: true,\n        53: true,\n    \
    \    59: true,\n        61: true,\n        67: true,\n        71: true,\n    \
    \    73: true,\n        79: true,\n        83: true,\n        89: true,\n    \
    \    97: true,\n    }\n    res := make([]string, 0)\n    for _, word := range\
    \ words {\n        if primes[len(word)] {\n            res = append(res, word)\n\
    \        }\n    }\n    return strings.Join(res, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3668to22_test.go:67:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073495
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range sentence {\n        if is_prime(word) {\n          \
    \  result += fmt.Sprintf(\"%s\", word)\n        }\n    }\n    return result\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kpmq7eu_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073495
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += word + \" \"\n      \
    \  }\n    }\n    return strings.TrimSpace(result)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5_gow6a_test.go:24:14: undefined: strings

    /tmp/tmpv5_gow6a_test.go:26:12: undefined: is_prime

    /tmp/tmpv5_gow6a_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if len(sentence)\
    \ == 0 {\n        return \"\"\n    }\n    words := []string{}\n    word := \"\"\
    \n    length := len(sentence)\n    for i := 0; i < length; i++ {\n        if sentence[i]\
    \ == ' ' {\n            words = append(words, word)\n            word = \"\"\n\
    \        } else {\n            word += string(sentence[i])\n        }\n    }\n\
    \    words = append(words, word)\n    result := \"\"\n    for _, word := range\
    \ words {\n        if is_prime(len(word)) {\n            result += word + \" \"\
    \n        }\n    }\n    if len(result) == 0 {\n        return \"\"\n    }\n  \
    \  return result[:len(result) - 1]\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyoxr1xqj_test.go:40:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    num_list := make([]int,\
    \ 0)\n    word_list := make([]string, 0)\n    is_primes := make([]bool, 101)\n\
    \    is_primes[0] = false\n    is_primes[1] = false\n    for i := 2; i < 101;\
    \ i++ {\n        is_primes[i] = true\n    }\n    for i := 2; i < 101; i++ {\n\
    \        if is_primes[i] {\n            for j := i * 2; j < 101; j += i {\n  \
    \              is_primes[j] = false\n            }\n        }\n    }\n    for\
    \ i := 0; i < len(sentence); i++ {\n        if sentence[i] == ' ' {\n        \
    \    word_list = append(word_list, sentence[:i])\n            sentence = sentence[i\
    \ + 1:]\n            i = -1\n        }\n    }\n    word_list = append(word_list,\
    \ sentence)\n    for _, word := range word_list {\n        if is_primes[len(word)]\
    \ {\n            num_list = append(num_list, len(word))\n        }\n    }\n  \
    \  words := make([]string, 0)\n    if len(num_list) > 0 {\n        words = append(words,\
    \ word_list[0])\n        for i := 1; i < len(word_list); i++ {\n            if\
    \ len(word_list[i]) == num_list[0] {\n                words = append(words, word_list[i])\n\
    \                num_list = num_list[1:]\n            }\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s\", words)\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_in_sentence({0x52024f?, 0xc0000f8d18?})\n\
    \t/tmp/tmpafqvit93_test.go:55 +0x4af\ncommand-line-arguments_test.TestWords_In_Sentence(0x0?)\n\
    \t/tmp/tmpafqvit93_test.go:71 +0x4d\ntesting.tRunner(0xc0001a0340, 0x528ff0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    words = words[:len(words)-1]\n    new_words := []string{}\n    for\
    \ _, w := range words {\n        if is_prime(len(w)) {\n            new_words\
    \ = append(new_words, w)\n        }\n    }\n    return strings.Join(new_words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfc4beu17_test.go:23:14: undefined: strings

    /tmp/tmpfc4beu17_test.go:27:12: undefined: is_prime

    /tmp/tmpfc4beu17_test.go:31:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var non_prime_words []string\n    for _, word := range sentence {\n     \
    \   if word == ' ' {\n            words = append(words, sentence[:len(sentence)-len(non_prime_words)])\n\
    \            non_prime_words = []string{}\n        } else {\n            non_prime_words\
    \ = append(non_prime_words, string(word))\n        }\n    }\n    if len(non_prime_words)\
    \ > 0 {\n        words = append(words, non_prime_words)\n    }\n    var prime_words\
    \ []string\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            prime_words = append(prime_words, word)\n        }\n    }\n    var\
    \ prime_sentence string\n    for _, word := range prime_words {\n        prime_sentence\
    \ += \" \" + word\n    }\n    return prime_sentence[1:]\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofa40jzy_test.go:34:31: cannot use non_prime_words (variable of type []string)
    as type string in argument to append

    /tmp/tmpofa40jzy_test.go:38:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range words(sentence) {\n        if is_prime(len(word)) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xwd72_5_test.go:24:26: undefined: words

    /tmp/tmp5xwd72_5_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073494
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if sentence ==\
    \ \"\" {\n        return \"\"\n    }\n    words := strings.Split(sentence, \"\
    \ \")\n    var result string\n    for _, word := range words {\n        if IsPrime(len(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return strings.Trim(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe5nmqs0r_test.go:26:14: undefined: strings

    /tmp/tmpe5nmqs0r_test.go:29:12: undefined: IsPrime

    /tmp/tmpe5nmqs0r_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \n    // write your code here\n    sentence += \" \"\n    var word string\n  \
    \  for i := 0; i < len(sentence); i++ {\n        if sentence[i] == ' ' {\n   \
    \         if is_prime(len(word)) {\n                result += word + \" \"\n \
    \           }\n            word = \"\"\n        } else {\n            word +=\
    \ string(sentence[i])\n        }\n    }\n\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy5s3hrdz_test.go:30:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range Split(sentence, \" \") {\n        if IsPrime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8c9j1ni_test.go:24:26: undefined: Split

    /tmp/tmpr8c9j1ni_test.go:25:12: undefined: IsPrime

    /tmp/tmpr8c9j1ni_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: implement\
    \ the function here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmp9rn4y1oy_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmp9rn4y1oy_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmp9rn4y1oy_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmp9rn4y1oy_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmp9rn4y1oy_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmp9rn4y1oy_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    s := []rune(sentence)\n\
    \    var isPrime = func(n int) bool {\n        for i := 2; i <= n / 2; i++ {\n\
    \            if n % i == 0 {\n                return false\n            }\n  \
    \      }\n        return true\n    }\n    result := \"\"\n    for i := 0; i <\
    \ len(s); i++ {\n        var word string\n        for ; i < len(s) && s[i] !=\
    \ ' '; i++ {\n            word += string(s[i])\n        }\n        if isPrime(len(word))\
    \ {\n            result += word + \" \"\n        }\n    }\n    return result[:len(result)\
    \ - 1]\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513640,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_in_sentence({0x51e42c?, 0xc0000f8c48?})\n\
    \t/tmp/tmpi2_facyl_test.go:42 +0xe6\ncommand-line-arguments_test.TestWords_In_Sentence(0x0?)\n\
    \t/tmp/tmpi2_facyl_test.go:57 +0x11a\ntesting.tRunner(0xc0001924e0, 0x528ff0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if len(sentence)\
    \ < 1 || len(sentence) > 100 {\n        return \"sentence is out of bounds\"\n\
    \    }\n    words := split(sentence)\n    primes := primes_in_set(words)\n   \
    \ newSentence := []string{}\n    for _, word := range words {\n        for _,\
    \ prime := range primes {\n            if len(word) == prime {\n             \
    \   newSentence = append(newSentence, word)\n            }\n        }\n    }\n\
    \    return fmt.Sprintf(\"%v\", newSentence)\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0z0d0e43_test.go:26:14: undefined: split

    /tmp/tmp0z0d0e43_test.go:27:15: undefined: primes_in_set

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var newSentence\
    \ string\n    words := strings.Split(sentence, \" \")\n    for _, word := range\
    \ words {\n        if isPrime(len(word)) {\n            newSentence += word +\
    \ \" \"\n        }\n    }\n    return newSentence\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5pmay69n_test.go:24:14: undefined: strings

    /tmp/tmp5pmay69n_test.go:26:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result += word + \" \"\n        }\n    }\n\
    \    return strings.Trim(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe3kld8ax_test.go:23:14: undefined: strings

    /tmp/tmpe3kld8ax_test.go:26:12: undefined: is_prime

    /tmp/tmpe3kld8ax_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var wordLengthIsPrime\
    \ = func(word string) bool {\n        var length = len(word)\n        var isPrime\
    \ = func(number int) bool {\n            if number == 1 {\n                return\
    \ false\n            }\n            if number == 2 {\n                return true\n\
    \            }\n            var i int\n            for i = 2; i <= number / 2;\
    \ i++ {\n                if number % i == 0 {\n                    return false\n\
    \                }\n            }\n            return true\n        }\n      \
    \  return isPrime(length)\n    }\n    var words = \"\"\n    var i = 0\n    for\
    \ i = 0; i < len(sentence); i++ {\n        if sentence[i] == ' ' {\n         \
    \   words += \" \"\n        } else {\n            var word = \"\"\n          \
    \  for sentence[i] != ' ' && i < len(sentence) {\n                word += string(sentence[i])\n\
    \                i++\n            }\n            if wordLengthIsPrime(word) {\n\
    \                words += word\n            }\n            i--\n        }\n  \
    \  }\n    return words\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\npanic: runtime error: index out\
    \ of range [14] with length 14 [recovered]\n\tpanic: runtime error: index out\
    \ of range [14] with length 14\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_in_sentence({0x52024f, 0xe})\n\t/tmp/tmp7oum7_qa_test.go:49\
    \ +0x16a\ncommand-line-arguments_test.TestWords_In_Sentence(0x0?)\n\t/tmp/tmp7oum7_qa_test.go:69\
    \ +0x4d\ntesting.tRunner(0xc000192680, 0x528ff0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073497
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdj0fn1h_test.go:24:26: undefined: strings

    /tmp/tmpxdj0fn1h_test.go:25:12: undefined: is_prime

    /tmp/tmpxdj0fn1h_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            result += fmt.Sprintf(\"%s \",\
    \ word)\n        }\n    }\n    return strings.TrimRight(result, \" \")\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0b5yqjew_test.go:24:14: undefined: strings

    /tmp/tmp0b5yqjew_test.go:26:12: undefined: is_prime

    /tmp/tmp0b5yqjew_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    ans := \"\"\n\
    \    for _, word := range words(sentence) {\n        if is_prime(len(word)) {\n\
    \            ans += word + \" \"\n        }\n    }\n    return ans[:len(ans)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphorjtqnu_test.go:24:26: undefined: words

    /tmp/tmphorjtqnu_test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    result := []string{}\n    for _, word := range words {\n       \
    \ if _, ok := is_prime[len(word)]; ok {\n            result = append(result, word)\n\
    \        }\n    }\n    return strings.Join(result, \" \")\n}\n\nvar is_prime =\
    \ map[int]\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpldm89wh0_test.go:33:24: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073496
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := sentenceToWords(sentence)\n\
    \    fmt.Println(words)\n    primes := getPrimes(words)\n    fmt.Println(primes)\n\
    \    return wordsToSentence(primes)\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx34r8hli_test.go:23:14: undefined: sentenceToWords

    /tmp/tmpx34r8hli_test.go:25:15: undefined: getPrimes

    /tmp/tmpx34r8hli_test.go:27:12: undefined: wordsToSentence

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := Split(sentence,\
    \ \" \")\n    var result []string\n    for _, word := range words {\n        if\
    \ IsPrime(len(word)) {\n            result = append(result, word)\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbdvb6fij_test.go:23:14: undefined: Split

    /tmp/tmpbdvb6fij_test.go:26:12: undefined: IsPrime

    /tmp/tmpbdvb6fij_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var res string\n\
    \    for _, word := range word_split(sentence) {\n        if is_prime(len(word))\
    \ {\n            res += word + \" \"\n        }\n    }\n    return res[:len(res)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofvttxp__test.go:24:26: undefined: word_split

    /tmp/tmpofvttxp__test.go:25:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var all_words\
    \ []string\n    var is_prime = make(map[int]bool)\n    var ret_str string\n  \
    \  for _, v := range sentence {\n        if string(v) == \" \" {\n           \
    \ all_words = append(all_words, \"\")\n        } else {\n            all_words[len(all_words)-1]\
    \ += string(v)\n        }\n    }\n    for i := 2; i < len(sentence); i++ {\n \
    \       for j := 2; j <= i; j++ {\n            if i % j == 0 {\n             \
    \   is_prime[i] = false\n                break\n            } else {\n       \
    \         is_prime[i] = true\n            }\n        }\n    }\n    for _, v :=\
    \ range all_words {\n        if is_prime[len(v)] {\n            ret_str += v +\
    \ \" \"\n        }\n    }\n    return ret_str[:len(ret_str)-1]\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_in_sentence({0x52038f, 0xe})\n\t/tmp/tmp9bqv692d_test.go:30\
    \ +0x425\ncommand-line-arguments_test.TestWords_In_Sentence(0x0?)\n\t/tmp/tmp9bqv692d_test.go:58\
    \ +0x4d\ntesting.tRunner(0xc0001924e0, 0x529130)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var new_sentence\
    \ string\n    for _, word := range(sentence) {\n        if is_prime(len(word))\
    \ {\n            new_sentence += word\n        }\n    }\n    return new_sentence\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzrzdznnl_test.go:25:12: undefined: is_prime

    /tmp/tmpzrzdznnl_test.go:25:25: invalid argument: word (variable of type rune)
    for len

    /tmp/tmpzrzdznnl_test.go:26:13: invalid operation: new_sentence += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073497
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words = []rune(sentence)\n\
    \    var result = \"\"\n    var length = len(words)\n    var i = 0\n    var temp\
    \ = \"\"\n    for i < length {\n        if isPrime(len(temp)) {\n            result\
    \ += temp + \" \"\n        }\n        if words[i] == ' ' {\n            i++\n\
    \            temp = \"\"\n            continue\n        }\n        temp += string(words[i])\n\
    \        i++\n    }\n    if isPrime(len(temp)) {\n        result += temp\n   \
    \ }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv92iu828_test.go:29:12: undefined: isPrime

    /tmp/tmpv92iu828_test.go:40:8: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    s := []rune(sentence)\n\
    \    result := \"\"\n    for i := 0; i < len(s); i++ {\n        cur := \"\"\n\
    \        for ; i < len(s) && 'a' <= s[i] && s[i] <= 'z'; i++ {\n            cur\
    \ += string(s[i])\n        }\n        if len(cur) > 0 && is_prime(len(cur)) {\n\
    \            result += cur + \" \"\n        }\n    }\n    return result[:len(result)-1]\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkecvdfht_test.go:30:28: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    ret := \"\"\n    for _, w := range words {\n        if is_prime(len(w))\
    \ {\n            ret += w + \" \"\n        }\n    }\n    return strings.TrimSpace(ret)\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8cqwwo52_test.go:23:14: undefined: strings

    /tmp/tmp8cqwwo52_test.go:26:12: undefined: is_prime

    /tmp/tmp8cqwwo52_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result += fmt.Sprintf(\"%s \", word)\n  \
    \      }\n    }\n    return strings.Trim(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhpd7mp6_test.go:23:14: undefined: strings

    /tmp/tmpmhpd7mp6_test.go:26:12: undefined: is_prime

    /tmp/tmpmhpd7mp6_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: Implement\
    \ the function.\n    words := \"\"\n    for i := 0; i < len(sentence); i++ {\n\
    \        word := \"\"\n        for j := i; j < len(sentence); j++ {\n        \
    \    if string(sentence[j]) == \" \" {\n                i = j + 1\n          \
    \      break\n            }\n            word += string(sentence[j])\n       \
    \ }\n        if checkPrime(len(word)) {\n            words += word + \" \"\n \
    \       }\n    }\n    return words\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ughnbl2_test.go:34:12: undefined: checkPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result += fmt.Sprintf(\"%s \", word)\n  \
    \      }\n    }\n    return strings.Trim(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhpd7mp6_test.go:23:14: undefined: strings

    /tmp/tmpmhpd7mp6_test.go:26:12: undefined: is_prime

    /tmp/tmpmhpd7mp6_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var res string\n\
    \    var isPrime = make(map[int]bool)\n    for _, v := range []string{\"\", \"\
    1\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\"\
    , \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\"\
    , \"79\", \"83\", \"89\", \"97\"} {\n        isPrime[len(v)] = true\n    }\n \
    \   for _, word := range strings.Split(sentence, \" \") {\n        if isPrime[len(word)]\
    \ {\n            res += word + \" \"\n        }\n    }\n    return strings.Trim(res,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpejitc138_test.go:28:26: undefined: strings

    /tmp/tmpejitc138_test.go:33:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    newWords := []string{}\n    for _, word := range words {\n     \
    \   if isPrime(len(word)) {\n            newWords = append(newWords, word)\n \
    \       }\n    }\n    return strings.Join(newWords, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa5mqoxbl_test.go:23:14: undefined: strings

    /tmp/tmpa5mqoxbl_test.go:26:12: undefined: isPrime

    /tmp/tmpa5mqoxbl_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    currentWord := \"\"\n    for _, char := range sentence {\n        if string(char)\
    \ == \" \" {\n            words = append(words, currentWord)\n            currentWord\
    \ = \"\"\n        } else {\n            currentWord += string(char)\n        }\n\
    \    }\n    words = append(words, currentWord)\n    filteredWords := []string{}\n\
    \    for _, word := range words {\n        if isPrimeNumber(len(word)) {\n   \
    \         filteredWords = append(filteredWords, word)\n        }\n    }\n    return\
    \ strings.Join(filteredWords, \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppvwdk_hx_test.go:36:12: undefined: isPrimeNumber

    /tmp/tmppvwdk_hx_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073498
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words = make([]string,\
    \ 0)\n    for i := range sentence {\n        if sentence[i] == ' ' {\n       \
    \     words = append(words, sentence[:i])\n            sentence = sentence[i+1:]\n\
    \            i = 0\n        }\n    }\n    words = append(words, sentence)\n  \
    \  var prime_words = make([]string, 0)\n    for _, word := range words {\n   \
    \     if word[0] == ' ' {\n            word = word[1:]\n        }\n        var\
    \ is_prime = true\n        for j := 2; j < len(word); j++ {\n            if len(word)\
    \ % j == 0 {\n                is_prime = false\n                break\n      \
    \      }\n        }\n        if is_prime {\n            prime_words = append(prime_words,\
    \ word)\n        }\n    }\n    return fmt.Sprintf(\"%v\", prime_words)\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\npanic: runtime error: index out\
    \ of range [9] with length 9 [recovered]\n\tpanic: runtime error: index out of\
    \ range [9] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_in_sentence({0x52024f, 0xe})\n\t/tmp/tmps56wdyg7_test.go:25\
    \ +0x3fa\ncommand-line-arguments_test.TestWords_In_Sentence(0x0?)\n\t/tmp/tmps56wdyg7_test.go:58\
    \ +0x4d\ntesting.tRunner(0xc000192680, 0x528ff0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := string_to_words(sentence)\n\
    \    new_words := []string{}\n    for _, word := range words {\n        if is_prime(len(word))\
    \ {\n            new_words = append(new_words, word)\n        }\n    }\n    return\
    \ strings_to_string(new_words)\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpao8zbdep_test.go:23:14: undefined: string_to_words

    /tmp/tmpao8zbdep_test.go:26:12: undefined: is_prime

    /tmp/tmpao8zbdep_test.go:30:12: undefined: strings_to_string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    res := \"\"\n\
    \    for _, word := range(strings.Split(sentence, \" \")) {\n        if prime.IsPrime(len(word))\
    \ {\n            res += word + \" \"\n        }\n    }\n    return strings.TrimRight(res,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgs8pipn_test.go:24:26: undefined: strings

    /tmp/tmpkgs8pipn_test.go:25:12: undefined: prime

    /tmp/tmpkgs8pipn_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // split sentence\
    \ to words\n    words := SplitString(sentence)\n    fmt.Println(words)\n    //\
    \ get the prime word\n    prime_words := GetPrimeWords(words)\n    fmt.Println(prime_words)\n\
    \    // retunr the result\n    return GetStringFromWords(prime_words)\n}\n\nfunc\
    \ TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfud9f0xk_test.go:24:14: undefined: SplitString

    /tmp/tmpfud9f0xk_test.go:27:20: undefined: GetPrimeWords

    /tmp/tmpfud9f0xk_test.go:30:12: undefined: GetStringFromWords

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO\n   \
    \ return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate :=\
    \ words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpfh7863___test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpfh7863___test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpfh7863___test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpfh7863___test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpfh7863___test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpfh7863___test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073493
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    prime_words := []string{}\n    for _, word := range words {\n  \
    \      if is_prime(len(word)) {\n            prime_words = append(prime_words,\
    \ word)\n        }\n    }\n    return strings.Join(prime_words, \" \")\n}\n\n\
    func TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzo0twiq__test.go:23:14: undefined: strings

    /tmp/tmpzo0twiq__test.go:26:12: undefined: is_prime

    /tmp/tmpzo0twiq__test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // TODO: write\
    \ your code here\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpcj1uiahr_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpcj1uiahr_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpcj1uiahr_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpcj1uiahr_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpcj1uiahr_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpcj1uiahr_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var ret string\n\
    \    // ret = \"\";\n    var words []string = strings.Fields(sentence)\n    for\
    \ _, word := range words {\n        if is_prime(len(word)) {\n            ret\
    \ += \" \" + word\n        }\n    }\n    return ret\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxfuwchsz_test.go:25:26: undefined: strings

    /tmp/tmpxfuwchsz_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var str string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if is_prime(len(word)) {\n            str += word + \" \"\n        }\n\
    \    }\n    return strings.TrimRight(str, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuvp_zeat_test.go:24:14: undefined: strings

    /tmp/tmpuvp_zeat_test.go:26:12: undefined: is_prime

    /tmp/tmpuvp_zeat_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []rune(sentence)\n\
    \    result := \"\"\n    for i := 0; i < len(words); i++ {\n        if i == 0\
    \ {\n            if is_prime(len(words)) {\n                result += string(words[i])\n\
    \            }\n        } else if words[i-1] == ' ' {\n            if is_prime(len(words[i:]))\
    \ {\n                result += \" \" + string(words[i])\n            }\n     \
    \   } else {\n            result += string(words[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp40bazu69_test.go:27:16: undefined: is_prime

    /tmp/tmp40bazu69_test.go:31:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := []string{}\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10ewje2t_test.go:24:26: undefined: strings

    /tmp/tmp10ewje2t_test.go:25:12: undefined: is_prime

    /tmp/tmp10ewje2t_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if sentence ==\
    \ \"\" {\n        return \"\"\n    }\n    // words is a slice of the words in\
    \ sentence\n    words := strings.Split(sentence, \" \")\n    for i, word := range\
    \ words {\n        // Remove non-alpha chars from word\n        r := regexp.MustCompile(\"\
    [^a-zA-Z]+\")\n        word = r.ReplaceAllString(word, \"\")\n        if word\
    \ == \"\" {\n            continue\n        }\n        // Check if length of word\
    \ is prime\n        if !is_prime(len(word)) {\n            words[i] = \"\"\n \
    \       }\n    }\n    // Convert slice to string, filtering out empty strings\n\
    \    return strings.Join(words, \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpki2ycwfp_test.go:27:14: undefined: strings

    /tmp/tmpki2ycwfp_test.go:30:14: undefined: regexp

    /tmp/tmpki2ycwfp_test.go:36:13: undefined: is_prime

    /tmp/tmpki2ycwfp_test.go:41:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    for i, word := range words {\n        if ! is_prime(len(word)) {\n\
    \            words[i] = \"\"\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphuig4rmh_test.go:23:14: undefined: strings

    /tmp/tmphuig4rmh_test.go:25:14: undefined: is_prime

    /tmp/tmphuig4rmh_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    fmt.Println(words)\n    var result = \"\"\n    for _, word := range\
    \ words {\n        if(is_prime(len(word))) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoufrmhtm_test.go:23:14: undefined: strings

    /tmp/tmpoufrmhtm_test.go:27:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result []string\n\
    \    for _, word := range(words(sentence)) {\n        if is_prime(len(word)) {\n\
    \            result = append(result, word)\n        }\n    }\n    return join(result,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsgos69t2_test.go:24:26: undefined: words

    /tmp/tmpsgos69t2_test.go:25:12: undefined: is_prime

    /tmp/tmpsgos69t2_test.go:29:12: undefined: join

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if sentence ==\
    \ \"\" {\n        return \"\"\n    }\n    words := make([]string, 0)\n    ret\
    \ := make([]string, 0)\n    for _, word := range strings.Split(sentence, \" \"\
    ) {\n        word := strings.TrimSpace(word)\n        if len(word) == 0 {\n  \
    \          continue\n        }\n        words = append(words, word)\n    }\n \
    \   for _, word := range words {\n        if IsPrime(len(word)) {\n          \
    \  ret = append(ret, word)\n        }\n    }\n    return strings.Join(ret, \"\
    \ \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv6iyvblv_test.go:28:26: undefined: strings

    /tmp/tmpv6iyvblv_test.go:29:17: undefined: strings

    /tmp/tmpv6iyvblv_test.go:36:12: undefined: IsPrime

    /tmp/tmpv6iyvblv_test.go:40:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"not\
    \ implemented\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate\
    \ := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"This is a\
    \ test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for swimming\"\
    ), expected: \"go for\" },\n     { actual: candidate(\"there is no place available\
    \ here\"), expected: \"there is no place\" },\n     { actual: candidate(\"Hi I\
    \ am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual: candidate(\"go\
    \ for it\"), expected: \"go for it\" },\n     { actual: candidate(\"here\"), expected:\
    \ \"\" },\n     { actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpsva2_89f_test.go:45: expected 'is', got 'not implemented'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpsva2_89f_test.go:45:\
    \ expected 'go for', got 'not implemented'\n    --- FAIL: TestWords_In_Sentence/test_num__2\
    \ (0.00s)\n        tmpsva2_89f_test.go:45: expected 'there is no place', got 'not\
    \ implemented'\n    --- FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n    \
    \    tmpsva2_89f_test.go:45: expected 'Hi am Hussein', got 'not implemented'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__4 (0.00s)\n        tmpsva2_89f_test.go:45:\
    \ expected 'go for it', got 'not implemented'\n    --- FAIL: TestWords_In_Sentence/test_num__5\
    \ (0.00s)\n        tmpsva2_89f_test.go:45: expected '', got 'not implemented'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpsva2_89f_test.go:45:\
    \ expected 'is', got 'not implemented'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    count := 0\n\
    \    for i, s := range sentence {\n        if s == ' ' {\n            count++\n\
    \        }\n        if count >= 3 {\n            sentence = sentence[:i+1]\n \
    \           break\n        }\n    }\n    primes := []int{2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  words := \"\"\n    for _, s := range sentence {\n        if isPrime(int(s),\
    \ primes) {\n            words += string(s)\n        }\n    }\n    return words\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2sx7igr6_test.go:36:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073499
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n\treturn \"\"\n}\n\
    \nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmp2lflbpc6_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmp2lflbpc6_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmp2lflbpc6_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmp2lflbpc6_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmp2lflbpc6_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmp2lflbpc6_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    words := split_sentence(sentence)\n    for _, word := range words {\n   \
    \     if is_prime(len(word)) {\n            result += word + \" \"\n        }\n\
    \    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n \
    \ candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcez3hd9i_test.go:24:14: undefined: split_sentence

    /tmp/tmpcez3hd9i_test.go:26:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    // your code\
    \ here...\n    return \"\"\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n\
    \  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpokenl5hb_test.go:46: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpokenl5hb_test.go:46: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpokenl5hb_test.go:46: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpokenl5hb_test.go:46:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpokenl5hb_test.go:46: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpokenl5hb_test.go:46:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var (\n     \
    \   words, ret []string\n        is_prime = func(n int) bool {\n            if\
    \ n <= 1 {\n                return false\n            }\n            for i :=\
    \ 2; i * i <= n; i++ {\n                if n % i == 0 {\n                    return\
    \ false\n                }\n            }\n            return true\n        }\n\
    \    )\n    for _, w := range sentence {\n        words = append(words, string(w))\n\
    \    }\n    for i := 0; i < len(words); i++ {\n        if is_prime(len(words[i]))\
    \ {\n            ret = append(ret, words[i])\n        }\n    }\n    return fmt.Sprintf(\"\
    %s\", strings.Join(ret, \" \"))\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpothhcu7a_test.go:45:30: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    var start int\n    for i, s := range sentence {\n        if s == ' ' {\n\
    \            words = append(words, sentence[start:i])\n            start = i +\
    \ 1\n        }\n    }\n    words = append(words, sentence[start:])\n    output\
    \ := \"\"\n    for _, word := range words {\n        if is_prime(len(word)) {\n\
    \            output += word + \" \"\n        }\n    }\n    return output[:len(output)\
    \ - 1]\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4q0lngad_test.go:34:12: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := strings.Split(sentence,\
    \ \" \")\n    var result string\n    for _, word := range words {\n        if\
    \ is_prime(len(word)) {\n            result += word + \" \"\n        }\n    }\n\
    \    return strings.TrimRight(result, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0vqpaurt_test.go:23:14: undefined: strings

    /tmp/tmp0vqpaurt_test.go:26:12: undefined: is_prime

    /tmp/tmp0vqpaurt_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    is_prime := func(n\
    \ int) bool {\n        if n < 2 {\n            return false\n        }\n     \
    \   if n == 2 {\n            return true\n        }\n        if n % 2 == 0 {\n\
    \            return false\n        }\n        for i := 3; i*i <= n; i += 2 {\n\
    \            if n % i == 0 {\n                return false\n            }\n  \
    \      }\n        return true\n    }\n\n    in_str := []byte(sentence)\n    in_str\
    \ = append(in_str, ' ')\n    out_str := []byte{}\n    i, j := 0, 0\n    for j\
    \ < len(in_str) {\n        if in_str[j] == ' ' {\n            if is_prime(j -\
    \ i) {\n                out_str = append(out_str, in_str[i:j]...)\n          \
    \      out_str = append(out_str, ' ')\n            }\n            i = j + 1\n\
    \        }\n        j++\n    }\n    return string(out_str[:len(out_str)-1])\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 5 [running]:\ntesting.tRunner.func1.2({0x513640, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513640,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_in_sentence({0x51e42c?, 0xc0000f0f88?})\n\
    \t/tmp/tmpz4ofxevc_test.go:55 +0xfd\ncommand-line-arguments_test.TestWords_In_Sentence(0x0?)\n\
    \t/tmp/tmpz4ofxevc_test.go:70 +0x11a\ntesting.tRunner(0xc0002181a0, 0x528ff0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var result string\n\
    \    for _, word := range(sentence) {\n        if is_prime(word) {\n         \
    \   result += word\n        }\n    }\n    return result\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp97e8mxea_test.go:25:12: undefined: is_prime

    /tmp/tmp97e8mxea_test.go:26:13: invalid operation: result += word (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    words := make([]string,\
    \ 0)\n    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ap7f3ht_test.go:24:26: undefined: strings

    /tmp/tmp_ap7f3ht_test.go:25:12: undefined: is_prime

    /tmp/tmp_ap7f3ht_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n\tvar words []string\n\
    \tfor _, word := range strings.Split(sentence, \" \") {\n\t\tif is_prime(len(word))\
    \ {\n\t\t\twords = append(words, word)\n\t\t}\n\t}\n\treturn strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49taqm5u_test.go:24:23: undefined: strings

    /tmp/tmp49taqm5u_test.go:25:6: undefined: is_prime

    /tmp/tmp49taqm5u_test.go:29:9: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    prime := []int{2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n    var s string\n    for _, i := range sentence {\n      \
    \  for _, j := range prime {\n            if int(i) == j {\n                s\
    \ += string(i)\n            }\n        }\n    }\n    return s\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpngtcips0_test.go:54: expected 'is', got 'a'\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpngtcips0_test.go:54: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpngtcips0_test.go:54: expected 'there is no place', got 'aaaa'\n  \
    \  --- FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpngtcips0_test.go:54:\
    \ expected 'Hi am Hussein', got 'Ia'\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpngtcips0_test.go:54: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpngtcips0_test.go:54:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"\"\n\
    }\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__0\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'is', got ''\n    --- FAIL:\
    \ TestWords_In_Sentence/test_num__1 (0.00s)\n        tmpkgkrgfq8_test.go:45: expected\
    \ 'go for', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n\
    \        tmpkgkrgfq8_test.go:45: expected 'there is no place', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__3 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'Hi am Hussein', got ''\n    --- FAIL: TestWords_In_Sentence/test_num__4\
    \ (0.00s)\n        tmpkgkrgfq8_test.go:45: expected 'go for it', got ''\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__6 (0.00s)\n        tmpkgkrgfq8_test.go:45:\
    \ expected 'is', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    if len(sentence)\
    \ == 0 {\n        return \"\"\n    }\n    words := make([]string, 0)\n    j :=\
    \ 0\n    is_letter := false\n    for i := 0; i < len(sentence); i++ {\n      \
    \  if ('a' <= sentence[i] && sentence[i] <= 'z') || ('A' <= sentence[i] && sentence[i]\
    \ <= 'Z') {\n            if !is_letter {\n                is_letter = true\n \
    \               j = i\n            }\n        } else {\n            if is_letter\
    \ {\n                is_letter = false\n                words = append(words,\
    \ sentence[j:i])\n            }\n        }\n    }\n    if is_letter {\n      \
    \  words = append(words, sentence[j:])\n    }\n    primes := []int{2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n    result := make([]string, 0)\n    for _, w := range words {\n  \
    \      len_word := len(w)\n        for _, p := range primes {\n            if\
    \ len_word == p {\n                result = append(result, w)\n              \
    \  break\n            }\n        }\n    }\n    return strings.Join(result, \"\
    \ \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcjjkal8u_test.go:56:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var res string\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        l := len(word)\n        if is_prime(l) {\n            res += word + \"\
    \ \"\n        }\n    }\n    return strings.Trim(res, \" \")\n}\n\nfunc TestWords_In_Sentence(t\
    \ *testing.T) {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"This is a test\"), expected: \"is\" },\n     { actual:\
    \ candidate(\"lets go for swimming\"), expected: \"go for\" },\n     { actual:\
    \ candidate(\"there is no place available here\"), expected: \"there is no place\"\
    \ },\n     { actual: candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\"\
    \ },\n     { actual: candidate(\"go for it\"), expected: \"go for it\" },\n  \
    \   { actual: candidate(\"here\"), expected: \"\" },\n     { actual: candidate(\"\
    here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp684la9ha_test.go:24:14: undefined: strings

    /tmp/tmp684la9ha_test.go:27:12: undefined: is_prime

    /tmp/tmp684la9ha_test.go:31:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
- exit_code: 1
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    return \"is\"\
    \n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_In_Sentence (0.00s)\n    --- FAIL: TestWords_In_Sentence/test_num__1\
    \ (0.00s)\n        tmp54d84h_5_test.go:45: expected 'go for', got 'is'\n    ---\
    \ FAIL: TestWords_In_Sentence/test_num__2 (0.00s)\n        tmp54d84h_5_test.go:45:\
    \ expected 'there is no place', got 'is'\n    --- FAIL: TestWords_In_Sentence/test_num__3\
    \ (0.00s)\n        tmp54d84h_5_test.go:45: expected 'Hi am Hussein', got 'is'\n\
    \    --- FAIL: TestWords_In_Sentence/test_num__4 (0.00s)\n        tmp54d84h_5_test.go:45:\
    \ expected 'go for it', got 'is'\n    --- FAIL: TestWords_In_Sentence/test_num__5\
    \ (0.00s)\n        tmp54d84h_5_test.go:45: expected '', got 'is'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    var words []string\n\
    \    for _, word := range strings.Split(sentence, \" \") {\n        if is_prime(len(word))\
    \ {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words,\
    \ \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T) {\n  candidate := words_in_sentence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"This is a test\"), expected:\
    \ \"is\" },\n     { actual: candidate(\"lets go for swimming\"), expected: \"\
    go for\" },\n     { actual: candidate(\"there is no place available here\"), expected:\
    \ \"there is no place\" },\n     { actual: candidate(\"Hi I am Hussein\"), expected:\
    \ \"Hi am Hussein\" },\n     { actual: candidate(\"go for it\"), expected: \"\
    go for it\" },\n     { actual: candidate(\"here\"), expected: \"\" },\n     {\
    \ actual: candidate(\"here is\"), expected: \"is\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkuvsy1_x_test.go:24:26: undefined: strings

    /tmp/tmpkuvsy1_x_test.go:25:12: undefined: is_prime

    /tmp/tmpkuvsy1_x_test.go:29:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a string representing a sentence,\n// the sentence contains\
    \ some words separated by a space,\n// and you have to return a string that contains\
    \ the words from the original sentence,\n// whose lengths are prime numbers,\n\
    // the order of the words in the new string should be the same as the original\
    \ one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\
    \n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\
    \n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only\
    \ letters\nfunc words_in_sentence(sentence string) string {\n    res := \"\"\n\
    \    words := strings.Split(sentence, \" \")\n    for _, word := range words {\n\
    \        if len(word) > 1 && len(word) <= 3 {\n            if is_prime(len(word))\
    \ {\n                res += word + \" \"\n            }\n        }\n    }\n  \
    \  return strings.Trim(res, \" \")\n}\n\nfunc TestWords_In_Sentence(t *testing.T)\
    \ {\n  candidate := words_in_sentence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    This is a test\"), expected: \"is\" },\n     { actual: candidate(\"lets go for\
    \ swimming\"), expected: \"go for\" },\n     { actual: candidate(\"there is no\
    \ place available here\"), expected: \"there is no place\" },\n     { actual:\
    \ candidate(\"Hi I am Hussein\"), expected: \"Hi am Hussein\" },\n     { actual:\
    \ candidate(\"go for it\"), expected: \"go for it\" },\n     { actual: candidate(\"\
    here\"), expected: \"\" },\n     { actual: candidate(\"here is\"), expected: \"\
    is\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgu2gdurf_test.go:24:14: undefined: strings

    /tmp/tmpgu2gdurf_test.go:27:16: undefined: is_prime

    /tmp/tmpgu2gdurf_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073500
