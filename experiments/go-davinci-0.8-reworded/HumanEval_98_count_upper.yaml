name: HumanEval_98_count_upper
language: go_test.go
prompt: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s, count the number of uppercase vowels in even indices.\n// For\
  \ example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
  )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n"
tests: "func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
  \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected:\
  \ 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
  U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
  \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // Initialize our counter.\n    count := 0\n\n    // Loop through\
    \ the string, incrementing counter by 1 for each uppercase vowel in even index.\n\
    \    for i, r := range s {\n        if i % 2 == 0 && (r == 'A' || r == 'E' ||\
    \ r == 'I' || r == 'O' || r == 'U') {\n            count++\n        }\n    }\n\
    \n    return count\n}\n", "    return 0\n}\n", "    count := 0\n    for i, c :=\
    \ range s {\n        if i % 2 == 0 && c >= 'A' && c <= 'Z' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for i, c := range\
    \ s {\n        if i % 2 == 0 && c >= 'A' && c <= 'Z' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    i := 0\n    for _, r := range\
    \ s {\n        if 'A' <= r && r <= 'Z' && i % 2 == 0 {\n            i++\n    \
    \    }\n    }\n    return i\n}\n", "    // TODO: Write your code here!\n    var\
    \ count int\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A' && r\
    \ <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   res := 0\n    for i, ch := range s {\n        if i % 2 == 0 && ch >= 'A' &&\
    \ ch <= 'Z' {\n            res++\n        }\n    }\n    return res\n}\n", "  \
    \  n := 0\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A' && c <=\
    \ 'Z' {\n            n += 1\n        }\n    }\n    return n\n}\n", "    count\
    \ := 0\n    for i, _ := range s {\n        if i % 2 == 0 {\n            if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \           count++\n            }\n        }\n    }\n    return count\n}\n",
  "    c := 0\n    for i, r := range s {\n        if i % 2 == 0 && r >= 'A' && r <=\
    \ 'Z' {\n            c++\n        }\n    }\n    return c\n}\n", "    // your code\
    \ here\n    count := 0\n    for i, _ := range s {\n        if i % 2 == 0 && s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count += 1\n        }\n    }\n    return count\n}\n", "    count := 0\n\
    \    fmt.Println(len(s))\n    for i := 0; i < len(s); i++ {\n        if i % 2\
    \ == 0 && s[i] >= 'A' && s[i] <= 'Z' {\n            count += 1\n        }\n  \
    \  }\n    return count\n}\n", "    output := 0\n    var even int = 0\n    var\
    \ vowel string = \"AEIOU\"\n    var caseVowel string = \"AEIOUaeiou\"\n    for\
    \ _, c := range s {\n        if even%2 == 0 {\n            if string(c) == string(caseVowel[vowel[even%5]-caseVowel[even%5]])\
    \ {\n                output += 1\n            }\n        }\n        even += 1\n\
    \    }\n    return output\n}\n", "    count := 0\n    for i, r := range s {\n\
    \        if i % 2 == 0 && r >= 'A' && r <= 'Z' {\n            count += 1\n   \
    \     }\n    }\n    return count\n}\n", "    count := 0\n    for i, char := range\
    \ s {\n        if (i % 2 == 0) && (char > 64) && (char < 91) {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n", "    cnt := 0\n    for i, r\
    \ := range s {\n        if i % 2 == 0 && r >= 'A' && r <= 'Z' {\n            cnt++\n\
    \        }\n    }\n    return cnt\n}\n", "    count := 0\n    for i, c := range\
    \ s {\n        if i % 2 == 0 && c >= 'A' && c <= 'Z' {\n            count += 1\n\
    \        }\n    }\n    return count\n}\n", "\tvar count int\n\tfor i, r := range\
    \ s {\n\t\tif i % 2 == 0 && (r == 'A' || r == 'E' || r == 'I' || r == 'O' || r\
    \ == 'U') {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n", "    var result\
    \ int\n    for i, c := range s {\n        if i % 2 == 0 && c >= 'A' && c <= 'Z'\
    \ {\n            result += 1\n        }\n    }\n    return result\n}\n", "   \
    \ var c int = 0\n    for i,v := range s {\n        if v > 'A' && v < 'Z' && i\
    \ % 2 == 0 {\n            c++\n        }\n    }\n    return c\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
