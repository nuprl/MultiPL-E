language: go_test.go
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evens, odds int\n\n    for num != 0 {\n      \
    \  if num % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n        num /= 10\n    }\n\n    return []interface{}{evens, odds}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpgu38_8hj_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    if num < 0 {\n      \
    \  num = -num\n    }\n    if num == 0 {\n        even += 1\n    }\n    for num\
    \ > 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8txc9q2p_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for ; num > 0; num /= 10 {\n\
    \        digit := num % 10\n        if digit % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpj6me4bxx_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpj6me4bxx_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpj6me4bxx_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpj6me4bxx_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj6me4bxx_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8txc9q2p_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{len(even_digits(num)), len(odd_digits(num))}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp101yh6dx_test.go:15:30: undefined: even_digits

    /tmp/tmp101yh6dx_test.go:15:53: undefined: odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        num = -num\n    }\n    odds\
    \ := 0\n    evens := 0\n    for num > 0 {\n        if num % 2 == 0 {\n       \
    \     evens++\n        } else {\n            odds++\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp69ktlm18_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    var result []interface{}\n\
    \    for _, d := range fmt.Sprintf(\"%d\", num) {\n        if d == '-' {\n   \
    \         continue\n        }\n        if int(d - '0') % 2 == 0 {\n          \
    \  even += 1\n        } else {\n            odd += 1\n        }\n    }\n    result\
    \ = append(result, even)\n    result = append(result, odd)\n    return result\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphbu30115_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // Your code here\n    var even, odd int\n    var\
    \ list []interface{}\n    if num > 0 {\n        for num != 0 {\n            if\
    \ num % 2 == 0 {\n                even += 1\n            } else {\n          \
    \      odd += 1\n            }\n            num /= 10\n        }\n    } else {\n\
    \        num = -1 * num\n        for num != 0 {\n            if num % 2 == 0 {\n\
    \                even += 1\n            } else {\n                odd += 1\n \
    \           }\n            num /= 10\n        }\n    }\n    list = append(list,\
    \ even)\n    list = append(list, odd)\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpw3n1ltb8_test.go:63: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var count_even, count_odd int\n    for num > 0 {\n\
    \        if num % 2 == 0 {\n            count_even++\n        } else {\n     \
    \       count_odd++\n        }\n        num /= 10\n    }\n    return []interface{}{count_even,\
    \ count_odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpmihs8c2q_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpmihs8c2q_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpmihs8c2q_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpmihs8c2q_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpmihs8c2q_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    isNegative := false\n    if num < 0 {\n        isNegative\
    \ = true\n        num = -num\n    }\n    evenCount := 0\n    oddCount := 0\n \
    \   for ; num != 0; num /= 10 {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n    }\n    if isNegative\
    \ {\n        oddCount++\n    }\n    return []interface{}{evenCount, oddCount}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpucyp_92j_test.go:55: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpucyp_92j_test.go:55: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpucyp_92j_test.go:55: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpucyp_92j_test.go:55: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpucyp_92j_test.go:55: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for {\n \
    \       if num == 0 {\n            break\n        }\n        if (num % 10) % 2\
    \ == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpf6lpun0r_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    nums := []int{}\n   \
    \ for num > 0 {\n        nums = append(nums, num % 10)\n        num /= 10\n  \
    \  }\n    for _, n := range nums {\n        if n % 2 == 0 {\n            even\
    \ += 1\n        } else {\n            odd += 1\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpj6r75md6_test.go:52: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpj6r75md6_test.go:52: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpj6r75md6_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpj6r75md6_test.go:52: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpj6r75md6_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // TODO: Implement\n    return nil\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmprn0z9u3c_test.go:39: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmprn0z9u3c_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmprn0z9u3c_test.go:39: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmprn0z9u3c_test.go:39:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmprn0z9u3c_test.go:39: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmprn0z9u3c_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmprn0z9u3c_test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmprn0z9u3c_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    abs_num :=\
    \ abs(num)\n    for abs_num > 0 {\n        remainder := abs_num % 10\n       \
    \ if remainder % 2 == 0 {\n            even_count++\n        } else {\n      \
    \      odd_count++\n        }\n        abs_num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcc3hlcym_test.go:17:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp1pwj9iew_test.go:39: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp1pwj9iew_test.go:39: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp1pwj9iew_test.go:39: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp1pwj9iew_test.go:39: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp1pwj9iew_test.go:39: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp1pwj9iew_test.go:39: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp1pwj9iew_test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp1pwj9iew_test.go:39: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num !=\
    \ 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpmvq9z8as_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return []interface{}{0, 0}\n\
    \    }\n    even := 0\n    odd := 0\n    for num != 0 {\n        if num % 2 ==\
    \ 0 {\n            even += 1\n        } else {\n            odd += 1\n       \
    \ }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpdy19kjji_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even_digits = 0\n    var odd_digits = 0\n    for\
    \ num != 0 {\n        if num % 2 == 0 {\n            even_digits++\n        }\
    \ else {\n            odd_digits++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_digits, odd_digits}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp553f9l5c_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    if num < 0 {\n        num =\
    \ -num\n    }\n    for num > 0 {\n        digit := num % 10\n        if digit\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpntwnnqve_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for ; num != 0; num /= 10 {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpc2q2gtks_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{1, 1}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpw0fysi69_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpw0fysi69_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpw0fysi69_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpw0fysi69_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpw0fysi69_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpw0fysi69_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpw0fysi69_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    num = abs(num)\n\
    \    for num > 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n \
    \           even_count++\n        } else {\n            odd_count++\n        }\n\
    \        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdiaxdakn_test.go:17:11: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    if num < 0 {\n        num =\
    \ -num\n    }\n    for num > 0 {\n        digit := num % 10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmptr6zd4ks_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    num_int :=\
    \ Abs(num)\n    for num_int > 0 {\n        remainder := num_int % 10\n       \
    \ if remainder % 2 == 0 {\n            even_count++\n        } else {\n      \
    \      odd_count++\n        }\n        num_int /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprc_4u2ay_test.go:17:16: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8txc9q2p_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for i := num; i > 0;\
    \ i /= 10 {\n        if i % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpetf64c8h_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpetf64c8h_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpetf64c8h_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpetf64c8h_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpetf64c8h_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    count :=\
    \ 0\n    for ; num != 0; num /= 10 {\n        count = num % 10\n        if count\
    \ % 2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n\
    \        }\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpxd5wutge_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074328
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    num_str := fmt.Sprintf(\"%d\", num)\n    even, odd\
    \ := 0, 0\n    for _, r := range num_str {\n        if r == '-' {\n          \
    \  continue\n        }\n        if r % 2 == 0 {\n            even += 1\n     \
    \   } else {\n            odd += 1\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var e, o int\n    for num != 0 {\n        digit :=\
    \ num % 10\n        if digit % 2 == 0 {\n            e++\n        } else {\n \
    \           o++\n        }\n        num /= 10\n    }\n    return []interface{}{e,\
    \ o}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpa5bryp2d_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return []interface{}{0, 1}\n\
    \    }\n    var even, odd int\n    for num != 0 {\n        digit := num % 10\n\
    \        if digit % 2 == 0 {\n            even++\n        } else {\n         \
    \   odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp3o91e4oq_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    negative\
    \ := false\n    if num < 0 {\n        negative = true\n        num = -num\n  \
    \  }\n    for {\n        num, mod := num / 10, num % 10\n        if mod % 2 ==\
    \ 0 {\n            even_count += 1\n        } else {\n            odd_count +=\
    \ 1\n        }\n        if num == 0 {\n            break\n        }\n    }\n \
    \   if negative {\n        even_count += 1\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{}\n    even := 0\n    odd :=\
    \ 0\n    for num != 0 {\n        if num % 2 == 0 {\n            even++\n     \
    \   } else {\n            odd++\n        }\n        num /= 10\n    }\n    result\
    \ = append(result, even)\n    result = append(result, odd)\n    return result\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp3qdy6atv_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for _,v := range fmt.Sprintf(\"\
    %d\", num) {\n        if v - '0' % 2 == 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpqym26mb3_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpqym26mb3_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpqym26mb3_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpqym26mb3_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpqym26mb3_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpqym26mb3_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqym26mb3_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    count := []interface{}{0, 0}\n    for num != 0 {\n\
    \        if (num % 10) % 2 == 0 {\n            count[0] = count[0].(int) + 1\n\
    \        } else {\n            count[1] = count[1].(int) + 1\n        }\n    \
    \    num /= 10\n    }\n    return count\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_qi68bk4_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num & 1 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpwky_pshb_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even_odd []interface{}\n\n    // Check if number\
    \ is negative\n    if num < 0 {\n        num = num * -1\n    }\n\n    // Add even/odd\
    \ to list\n    for num > 0 {\n        if num % 2 == 0 {\n            even_odd\
    \ = append(even_odd, 1)\n        } else {\n            even_odd = append(even_odd,\
    \ 0)\n        }\n        num = num / 10\n    }\n\n    // Sum even/odd\n    even\
    \ := 0\n    odd := 0\n    for _, v := range even_odd {\n        if v == 1 {\n\
    \            even++\n        } else {\n            odd++\n        }\n    }\n\n\
    \    // Return result\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpb9_gx99a_test.go:67: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    if num == 0 {\n        even,\
    \ odd = 1, 0\n    } else {\n        for num != 0 {\n            n := num % 10\n\
    \            if n % 2 == 0 {\n                even += 1\n            } else {\n\
    \                odd += 1\n            }\n            num /= 10\n        }\n \
    \   }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return []interface{}{0, 1}\n\
    \    }\n    even, odd := 0, 0\n    for num != 0 {\n        if num%2 == 0 {\n \
    \           even++\n        } else {\n            odd++\n        }\n        num\
    \ /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4myb82cr_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        n :=\
    \ num % 10\n        if n % 2 == 0 {\n            even++\n        } else {\n  \
    \          odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpegzd9bv9_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        r :=\
    \ num % 10\n        if r % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpspwn20bx_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even int\n    var odd int\n    for num > 0 {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpwxpfdo6u_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpwxpfdo6u_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpwxpfdo6u_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpwxpfdo6u_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpwxpfdo6u_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    digits := make([]int, 0)\n    even_count := 0\n  \
    \  odd_count := 0\n    if num == 0 {\n        digits = append(digits, 0)\n   \
    \ }\n    for num != 0 {\n        digits = append(digits, num % 10)\n        num\
    \ /= 10\n    }\n    for _, digit := range digits {\n        if digit % 2 == 0\
    \ {\n            even_count += 1\n        } else {\n            odd_count += 1\n\
    \        }\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu5zg3wph_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return []interface{}{0, 0}\n\
    \    }\n\n    even, odd := 0, 0\n    for num != 0 {\n        if num%2 == 0 {\n\
    \            even++\n        } else {\n            odd++\n        }\n        num\
    \ /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp3_9bkysf_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    n := num\n    for n !=\
    \ 0 {\n        digit := n % 10\n        if digit % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        n /= 10\n    }\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpf9tahjvc_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    r := []interface{}{0, 0}\n    switch {\n    case num\
    \ < 0:\n        r[0] = 1\n    case num > 0:\n        r[1] = 1\n    }\n    for\
    \ num != 0 {\n        if num % 2 == 0 {\n            r[0] += 1\n        } else\
    \ {\n            r[1] += 1\n        }\n        num /= 10\n    }\n    return r\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi127l205_test.go:24:13: invalid operation: r[0] += 1 (mismatched types
    interface{} and int)

    /tmp/tmpi127l205_test.go:26:13: invalid operation: r[1] += 1 (mismatched types
    interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074329
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    num_string := fmt.Sprintf(\"\
    %d\", num)\n    for _, digit := range num_string {\n        if digit == '-' {\n\
    \            continue\n        }\n        if (digit - '0') % 2 == 0 {\n      \
    \      even += 1\n        } else {\n            odd += 1\n        }\n    }\n \
    \   return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    var list []interface{}\n\
    \    mod := num % 10\n    if mod % 2 == 0 {\n        even += 1\n    } else {\n\
    \        odd += 1\n    }\n    if num / 10 != 0 {\n        list = even_odd_count(num\
    \ / 10)\n    }\n    list = append(list, even)\n    list = append(list, odd)\n\
    \    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate :=\
    \ even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp8qbaodow_test.go:52: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp8qbaodow_test.go:52: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n       \
    \ tmp8qbaodow_test.go:52: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp8qbaodow_test.go:52: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp8qbaodow_test.go:52: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evens, odds int\n    if num < 0 {\n        num\
    \ = -num\n    }\n    for {\n        if num == 0 {\n            break\n       \
    \ }\n        last_digit := num % 10\n        if last_digit % 2 == 0 {\n      \
    \      evens += 1\n        } else {\n            odds += 1\n        }\n      \
    \  num /= 10\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphp5bs68r_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    m := make(map[string]int)\n    m[\"even\"] = 0\n \
    \   m[\"odd\"] = 0\n    str := fmt.Sprintf(\"%d\", num)\n    for _, ch := range\
    \ str {\n        if int(ch) % 2 == 0 {\n            m[\"even\"] += 1\n       \
    \ } else {\n            m[\"odd\"] += 1\n        }\n    }\n    return []interface{}{m[\"\
    even\"], m[\"odd\"]}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmppe3zeg76_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmppe3zeg76_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmppe3zeg76_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmppe3zeg76_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for ; num != 0; num /= 10 {\n\
    \        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpkyz0fbsb_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    if num < 0 {\n        num =\
    \ -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num /= 10\n    }\n  \
    \  return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpscpu7nmu_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{0, 0}\n    for num != 0 {\n\
    \        rem := num % 10\n        if rem % 2 == 0 {\n            result[0] = result[0].(int)\
    \ + 1\n        } else {\n            result[1] = result[1].(int) + 1\n       \
    \ }\n        num /= 10\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_v0af2ba_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074330
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for ; num > 0; num /= 10 {\n\
    \        if num % 2 == 0 {\n            even += 1\n        } else {\n        \
    \    odd += 1\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp0flgqf7__test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp0flgqf7__test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp0flgqf7__test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp0flgqf7__test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp0flgqf7__test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    if num <\
    \ 0 {\n        num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n\
    \            even_count += 1\n        } else {\n            odd_count += 1\n \
    \       }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpma1ky_tl_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        n := num % 10\n        if n % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpjxq35c01_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for {\n        if num == 0\
    \ {\n            break\n        }\n        digit := num % 10\n        if digit\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpxq4cm57__test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num !=\
    \ 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        num /= 10\n    }\n\
    \    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpr7ei_sv0_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphbu30115_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8txc9q2p_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num & 1 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num >>= 1\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074344
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // Solution 1\n    // positive_num := int(math.Abs(float64(num)))\n\
    \    // even_digits := 0\n    // odd_digits := 0\n    // for positive_num > 0\
    \ {\n    //     digit := positive_num % 10\n    //     if digit % 2 == 0 {\n \
    \   //         even_digits++\n    //     } else {\n    //         odd_digits++\n\
    \    //     }\n    //     positive_num /= 10\n    // }\n    // return []interface{}{even_digits,\
    \ odd_digits}\n\n    // Solution 2\n    // even_digits := 0\n    // odd_digits\
    \ := 0\n    // if num < 0 {\n    //     num = -num\n    // }\n    // for num >\
    \ 0 {\n    //     digit := num % 10\n    //     if digit % 2 == 0 {\n    //  \
    \       even_digits++\n    //     } else {\n    //         odd_digits++\n    //\
    \     }\n    //     num /= 10\n    // }\n    // return []interface{}{even_digits,\
    \ odd_digits}\n\n    // Solution 3\n    even_digits := 0\n    odd_digits := 0\n\
    \    for num != 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n\
    \            even_digits++\n        } else {\n            odd_digits++\n     \
    \   }\n        num /= 10\n    }\n    return []interface{}{even_digits, odd_digits}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpap39blvf_test.go:82: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{1, 2}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num%2 == 0 {\n            even++\n        } else {\n            odd++\n    \
    \    }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp86k45_73_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var i, even, odd int\n    num_str := fmt.Sprintf(\"\
    %d\", num)\n    num_len := len(num_str)\n    for i = 0; i < num_len; i++ {\n \
    \       digit := int(num_str[i] - '0')\n        if digit % 2 == 0 {\n        \
    \    even++\n        } else {\n            odd++\n        }\n    }\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpge3910jf_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpge3910jf_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpge3910jf_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpge3910jf_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        num,\
    \ r := num/10, num%10\n        if r%2 == 0 {\n            even += 1\n        }\
    \ else {\n            odd += 1\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2dzk5dwv_test.go:17:9: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    val := num % 10\n        if val % 2 == 0 {\n            even += 1\n     \
    \   } else {\n            odd += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqeye_w7o_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    if num < 0 {\n      \
    \  num = num * -1\n    }\n    for num > 0 {\n        digit := num % 10\n     \
    \   if digit % 2 == 0 {\n            even += 1\n        } else {\n           \
    \ odd += 1\n        }\n        num = num / 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpp_815q5e_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        num = -num\n    }\n    var nums\
    \ []int\n    for num > 0 {\n        n := num % 10\n        nums = append(nums,\
    \ n)\n        num = num / 10\n    }\n    even, odd := 0, 0\n    for _, v := range\
    \ nums {\n        if v % 2 == 0 {\n            even += 1\n        } else {\n \
    \           odd += 1\n        }\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpvxxzae66_test.go:55: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var count = []int{0, 0}\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            count[0]++\n        } else {\n           \
    \ count[1]++\n        }\n        num /= 10\n    }\n    return []interface{}{count[0],\
    \ count[1]}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpd1lxtlt1_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    if num <\
    \ 0 {\n        num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n\
    \            even_count += 1\n        } else {\n            odd_count += 1\n \
    \       }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpma1ky_tl_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    if num <\
    \ 0 {\n        num = num * -1\n    }\n    for num > 0 {\n        if num % 2 ==\
    \ 0 {\n            even_count += 1\n        } else {\n            odd_count +=\
    \ 1\n        }\n        num = num / 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpi8ok8opd_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074332
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{0, 0}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp_ynrphf9_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp_ynrphf9_test.go:38: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp_ynrphf9_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp_ynrphf9_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp_ynrphf9_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp_ynrphf9_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp_ynrphf9_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_ynrphf9_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    num_str := fmt.Sprintf(\"%d\"\
    , num)\n    for _, ch := range num_str {\n        if ch == '-' {\n           \
    \ continue\n        }\n        if int(ch - '0') % 2 == 0 {\n            even +=\
    \ 1\n        } else {\n            odd += 1\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074331
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu15rfn2t_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        num = -num\n    }\n    var even_count\
    \ int = 0\n    var odd_count int = 0\n    for num > 0 {\n        if num % 2 ==\
    \ 0 {\n            even_count++\n        } else {\n            odd_count++\n \
    \       }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp71ohjwgh_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8txc9q2p_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // return [len(list(filter(lambda x: x % 2 == 0, list(map(int,\
    \ str(abs(num))))))), len(list(filter(lambda x: x % 2 == 1, list(map(int, str(abs(num)))))))]\n\
    \    even_odd_count := []interface{}{len(list(filter(lambda x: x % 2 == 0, list(map(int,\
    \ str(abs(num))))))), len(list(filter(lambda x: x % 2 == 1, list(map(int, str(abs(num)))))))}\n\
    \    return even_odd_count\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1sauy45o_test.go:16:60: missing '','' in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074331
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for _, ch := range fmt.Sprintf(\"\
    %d\", num) {\n        if ch == '-' {\n            continue\n        }\n      \
    \  digit := int(ch - '0')\n        if digit % 2 == 0 {\n            even++\n \
    \       } else {\n            odd++\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    if num < 0 {\n      \
    \  num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n         \
    \   even++\n        } else {\n            odd++\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpznc6m37k_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpxp8cnxl9_test.go:39: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpxp8cnxl9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpxp8cnxl9_test.go:39: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpxp8cnxl9_test.go:39:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpxp8cnxl9_test.go:39: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpxp8cnxl9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpxp8cnxl9_test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpxp8cnxl9_test.go:39:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8txc9q2p_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    ans := []interface{}{0, 0}\n    // if num is 0 then\
    \ return the current answer\n    if num == 0 {\n        return ans\n    }\n  \
    \  // if num is negative then make num positive\n    if num < 0 {\n        num\
    \ = -num\n    }\n    // recursive call to keep track of the number of digits\n\
    \    for num > 0 {\n        if num % 2 == 0 {\n            ans[0] = ans[0].(int)\
    \ + 1\n        } else {\n            ans[1] = ans[1].(int) + 1\n        }\n  \
    \      num /= 10\n    }\n    return ans\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpe97xxfck_test.go:56: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var odd_count, even_count int\n    for ; num > 0;\
    \ num /= 10 {\n        if num % 2 == 0 {\n            even_count += 1\n      \
    \  } else {\n            odd_count += 1\n        }\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpjrqy5yrj_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpjrqy5yrj_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpjrqy5yrj_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpjrqy5yrj_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpjrqy5yrj_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    abs_num :=\
    \ 0\n    if num < 0 {\n        abs_num = -num\n    } else {\n        abs_num =\
    \ num\n    }\n    for ; abs_num > 0; abs_num /= 10 {\n        last_digit := abs_num\
    \ % 10\n        if last_digit % 2 == 0 {\n            even_count += 1\n      \
    \  } else {\n            odd_count += 1\n        }\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpy001dg58_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    if num <\
    \ 0 {\n        num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n\
    \            even_count++\n        } else {\n            odd_count++\n       \
    \ }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu_vvk3a6_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var odds, evens int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{evens, odds}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp3xxm2ikz_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    fmt.Println(num)\n    if num == 0 {\n        return\
    \ []interface{}{0, 0}\n    }\n    if num < 0 {\n        num = -num\n    }\n  \
    \  result := []interface{}{0, 0}\n    for num > 0 {\n        if num % 2 == 0 {\n\
    \            result[0] = result[0].(int) + 1\n        } else {\n            result[1]\
    \ = result[1].(int) + 1\n        }\n        num /= 10\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "7\n-78\n3452\n346211\n-345821\n-2\n-45347\n0\n--- FAIL: TestEven_Odd_Count\
    \ (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpy9cael2__test.go:54:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    lst := []interface{}{0, 0}\n    if num == 0 {\n  \
    \      lst[0] = 1\n        return lst\n    }\n\n    if num < 0 {\n        num\
    \ = -num\n    }\n\n    for num > 0 {\n        if num % 2 == 0 {\n            lst[0]\
    \ += 1\n        } else {\n            lst[1] += 1\n        }\n        num /= 10\n\
    \    }\n    return lst\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22ew654d_test.go:27:13: invalid operation: lst[0] += 1 (mismatched types
    interface{} and int)

    /tmp/tmp22ew654d_test.go:29:13: invalid operation: lst[1] += 1 (mismatched types
    interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evenCount, oddCount int\n    var result []interface{}\n\
    \    numString := fmt.Sprintf(\"%d\", num)\n    for _, val := range numString\
    \ {\n        if val % 2 == 0 {\n            evenCount += 1\n        } else {\n\
    \            oddCount += 1\n        }\n    }\n    result = append(result, evenCount,\
    \ oddCount)\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpieodgnx6_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpieodgnx6_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpieodgnx6_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpieodgnx6_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    nums := []int{}\n   \
    \ if num < 0 {\n        nums = append(nums, -1)\n        num = -num\n    }\n \
    \   for num > 0 {\n        v := num % 10\n        if v % 2 == 0 {\n          \
    \  even += 1\n        } else {\n            odd += 1\n        }\n        num =\
    \ num / 10\n    }\n    nums = append(nums, even, odd)\n    return nums\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9cjvasqo_test.go:32:12: cannot use nums (variable of type []int) as type
    []interface{} in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074333
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    if num ==\
    \ 0 {\n        even_count += 1\n    }\n    if num < 0 {\n        num = -num\n\
    \    }\n    for num > 0 {\n        if num % 2 == 0 {\n            even_count +=\
    \ 1\n        } else {\n            odd_count += 1\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    remainder := num % 10\n        if remainder % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num /= 10\n    }\n  \
    \  return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpjfq7pwud_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphbu30115_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_c := 0\n    odd_c := 0\n    var result []interface{}\n\
    \    if num < 0 {\n        num = num * -1\n    }\n    for num > 0 {\n        if\
    \ num % 2 == 0 {\n            even_c += 1\n        } else {\n            odd_c\
    \ += 1\n        }\n        num = num / 10\n    }\n    result = append(result,\
    \ even_c)\n    result = append(result, odd_c)\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpkc8jf_s__test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{1, 2}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmplf5jlyxm_test.go:38: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074331
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    num_str := fmt.Sprintf(\"%d\", num)\n    num_str_byte\
    \ := []byte(num_str)\n    even_count := 0\n    odd_count := 0\n    for _, v :=\
    \ range num_str_byte {\n        if v == '-' {\n            continue\n        }\n\
    \        if v % 2 == 0 {\n            even_count += 1\n        } else {\n    \
    \        odd_count += 1\n        }\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpe04228k6_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // your code here\n    var even_count, odd_count int\n\
    \    num_str := fmt.Sprintf(\"%d\", num)\n    for _, rune := range num_str {\n\
    \        digit := int(rune - '0')\n        if digit%2 == 0 {\n            even_count++\n\
    \        } else {\n            odd_count++\n        }\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpwc5e7n6h_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpwc5e7n6h_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpwc5e7n6h_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpwc5e7n6h_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    count := []interface{}{0, 0}\n    for num != 0 {\n\
    \        if num % 2 == 0 {\n            count[0] = count[0].(int) + 1\n      \
    \  } else {\n            count[1] = count[1].(int) + 1\n        }\n        num\
    \ /= 10\n    }\n    return count\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmprwvh6e5s_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evens, odds int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            evens++\n        } else {\n            odds++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{evens, odds}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_bnkdgg__test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    digit := num % 10\n        if digit % 2 == 0 {\n            even++\n    \
    \    } else {\n            odd++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpuu12htd0_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return_list := []interface{}{0, 0}\n    // TODO: Add\
    \ your code here\n    return return_list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpg10rxxo0_test.go:40: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpg10rxxo0_test.go:40: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpg10rxxo0_test.go:40: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpg10rxxo0_test.go:40: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpg10rxxo0_test.go:40: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpg10rxxo0_test.go:40: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpg10rxxo0_test.go:40: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpg10rxxo0_test.go:40: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var evenCount int\n    var oddCount int\n    var list\
    \ []interface{}\n    for num > 0 {\n        var digit int = num % 10\n       \
    \ num = num / 10\n        if digit % 2 == 0 {\n            evenCount += 1\n  \
    \      } else {\n            oddCount += 1\n        }\n    }\n    list = append(list,\
    \ evenCount)\n    list = append(list, oddCount)\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpc7ew_g3d_test.go:52: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpc7ew_g3d_test.go:52: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpc7ew_g3d_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpc7ew_g3d_test.go:52: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpc7ew_g3d_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even_count, odd_count int\n    count := make([]interface{},\
    \ 2)\n    if num < 0 {\n        num = num * -1\n    }\n    for num > 0 {\n   \
    \     digit := num % 10\n        if digit % 2 == 0 {\n            even_count++\n\
    \        } else {\n            odd_count++\n        }\n        num = num / 10\n\
    \    }\n    count[0] = even_count\n    count[1] = odd_count\n    return count\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpc04qq1r1_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    var count\
    \ = []interface{}{even_count, odd_count}\n    for {\n        if num == 0 {\n \
    \           break\n        }\n        if num%2 == 0 {\n            even_count++\n\
    \        } else {\n            odd_count++\n        }\n        num /= 10\n   \
    \ }\n    count[0] = even_count\n    count[1] = odd_count\n    return count\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_bsjn9lb_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count++\n        } else {\n\
    \            odd_count++\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphbu30115_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu5zg3wph_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu5zg3wph_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num & 1 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpwky_pshb_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    if num < 0 {\n      \
    \  num = -num\n    }\n    for ; num > 0; num /= 10 {\n        if num % 2 == 0\
    \ {\n            even++\n        } else {\n            odd++\n        }\n    }\n\
    \    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpn0857k2o_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074335
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    count := []interface{}{0, 0}\n    if num < 0 {\n \
    \       num = -num\n    }\n    for num > 0 {\n        digit := num % 10\n    \
    \    if digit % 2 == 0 {\n            count[0] = count[0].(int) + 1\n        }\
    \ else {\n            count[1] = count[1].(int) + 1\n        }\n        num /=\
    \ 10\n    }\n    return count\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmptj_m797f_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for _, digit := range\
    \ fmt.Sprintf(\"%d\", num) {\n        if (digit - '0') % 2 == 0 {\n          \
    \  even++\n        } else {\n            odd++\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpgcxkima__test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpgcxkima__test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpgcxkima__test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpgcxkima__test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var odd, even int\n    var bs []byte = fmt.Sprintf(\"\
    %d\", num)\n    for _, c := range bs {\n        if c % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoys_r6yu_test.go:16:21: cannot use fmt.Sprintf("%d", num) (value of type
    string) as type []byte in variable declaration

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphr1v0odt_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu5zg3wph_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    if num < 0 {\n      \
    \  num = -num\n    }\n    for {\n        if num == 0 {\n            break\n  \
    \      }\n        remainder := num % 10\n        if remainder % 2 == 0 {\n   \
    \         even += 1\n        } else {\n            odd += 1\n        }\n     \
    \   num = num / 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmppp7yws6f_test.go:55: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    if num <\
    \ 0 {\n        num = -num\n    }\n    for num > 0 {\n        remainder := num\
    \ % 10\n        if remainder % 2 == 0 {\n            even_count++\n        } else\
    \ {\n            odd_count++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpgqodyjyk_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_odd := []interface{}{0, 0}\n    if num < 0 {\n\
    \        num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n   \
    \         even_odd[0] = even_odd[0].(int) + 1\n        } else {\n            even_odd[1]\
    \ = even_odd[1].(int) + 1\n        }\n        num /= 10\n    }\n    return even_odd\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8t_k9hvr_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    res := []interface{}{0, 0}\n    for num != 0 {\n \
    \       if num % 2 == 0 {\n            res[0] = res[0].(int) + 1\n        } else\
    \ {\n            res[1] = res[1].(int) + 1\n        }\n        num /= 10\n   \
    \ }\n    return res\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpe2k6g531_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        digit\
    \ := num % 10\n        if digit % 2 == 0 {\n            even += 1\n        } else\
    \ {\n            odd += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpegn2v11h_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    num_str := fmt.Sprintf(\"%d\"\
    , num)\n    for _, ch := range num_str {\n        if ch == '-' {\n           \
    \ continue\n        }\n        if int(ch) % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var count_even, count_odd int = 0, 0\n    var ret\
    \ = make([]interface{}, 2)\n    var dig, sign int = 0, 1\n    if num < 0 {\n \
    \       sign = -1\n    }\n    for num != 0 {\n        dig = sign * (num % 10)\n\
    \        if dig % 2 == 0 {\n            count_even += 1\n        } else {\n  \
    \          count_odd += 1\n        }\n        num /= 10\n    }\n    ret[0] = count_even\n\
    \    ret[1] = count_odd\n    return ret\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp3p6immlj_test.go:55: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpnimtqnnc_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    cnt_even := 0\n    cnt_odd := 0\n    for {\n     \
    \   if num == 0 {\n            break\n        }\n        remainder := num % 10\n\
    \        if remainder % 2 == 0 {\n            cnt_even++\n        } else {\n \
    \           cnt_odd++\n        }\n        num = num / 10\n    }\n    return []interface{}{cnt_even,\
    \ cnt_odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpga4tjwwy_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        num = -num\n    }\n    if num\
    \ == 0 {\n        return []interface{}{0, 0}\n    }\n    even_count := 0\n   \
    \ odd_count := 0\n    for num > 0 {\n        digit := num % 10\n        if digit\
    \ % 2 == 0 {\n            even_count++\n        } else {\n            odd_count++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp1fa5gh5s_test.go:55: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return nil\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpatzo_hx4_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpatzo_hx4_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpatzo_hx4_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpatzo_hx4_test.go:38:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpatzo_hx4_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpatzo_hx4_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpatzo_hx4_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpatzo_hx4_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        x :=\
    \ num % 10\n        if x % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp422awbc0_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    r := []interface{}{0, 0}\n    for num != 0 {\n   \
    \     if num%2 == 0 {\n            r[0] = r[0].(int) + 1\n        } else {\n \
    \           r[1] = r[1].(int) + 1\n        }\n        num /= 10\n    }\n    return\
    \ r\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpp3sv8cz3_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    if num < 0\
    \ {\n        num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n\
    \            evenCount += 1\n        } else {\n            oddCount += 1\n   \
    \     }\n        num /= 10\n    }\n    return []interface{}{evenCount, oddCount}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpt3r17i04_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074337
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    abs_num := abs(num)\n    for\
    \ abs_num > 0 {\n        r := abs_num % 10\n        if r % 2 == 0 {\n        \
    \    even++\n        } else {\n            odd++\n        }\n        abs_num /=\
    \ 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9xcozaqp_test.go:16:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    r := []interface{}{0, 0}\n    var is_even func(int)\
    \ bool\n    is_even = func(num int) bool {\n        if num%2 == 0 {\n        \
    \    return true\n        }\n        return false\n    }\n    var count_even_odd\
    \ func(int) []interface{}\n    count_even_odd = func(num int) []interface{} {\n\
    \        if num == 0 {\n            return r\n        }\n        if is_even(num)\
    \ {\n            r[0] = r[0].(int) + 1\n        } else {\n            r[1] = r[1].(int)\
    \ + 1\n        }\n        return count_even_odd(num/10)\n    }\n    return count_even_odd(num)\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpvgw8lkaw_test.go:58: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    res := []interface{}{0, 0}\n    for num != 0 {\n \
    \       if num % 2 == 0 {\n            res[0] = res[0].(int) + 1\n        } else\
    \ {\n            res[1] = res[1].(int) + 1\n        }\n        num /= 10\n   \
    \ }\n    return res\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpe2k6g531_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    m := make(map[int]int)\n    var l []interface{}\n\
    \    for num != 0 {\n        rem := num % 10\n        if rem % 2 == 0 {\n    \
    \        m[0]++\n        } else {\n            m[1]++\n        }\n        num\
    \ /= 10\n    }\n    for _, v := range m {\n        l = append(l, v)\n    }\n \
    \   return l\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp1u06ydaw_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n \
    \       tmp1u06ydaw_test.go:52: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp1u06ydaw_test.go:52:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__7 (0.00s)\n        tmp1u06ydaw_test.go:52: expected\
    \ '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    if num < 0 {\n        num =\
    \ -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n            even\
    \ += 1\n        } else {\n            odd += 1\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpy3ftrwy5_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for _, digit := range(fmt.Sprintf(\"\
    %d\", num)) {\n        n, _ := strconv.Atoi(string(digit))\n        if n % 2 ==\
    \ 0 {\n            even++\n        } else {\n            odd++\n        }\n  \
    \  }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3tz1mwv__test.go:18:17: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074337
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return []interface{}{0, 0}\n\
    \    }\n\n    sign := 1\n    if num < 0 {\n        sign = -1\n        num = -num\n\
    \    }\n\n    num = sign * num\n\n    even_count := 0\n    odd_count := 0\n\n\
    \    for num > 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n \
    \           even_count++\n        } else {\n            odd_count++\n        }\n\
    \        num /= 10\n    }\n\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpnktsecua_test.go:63: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpnktsecua_test.go:63: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpnktsecua_test.go:63: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpnktsecua_test.go:63: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpnktsecua_test.go:63: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    r := []interface{}{0, 0}\n    for num != 0 {\n   \
    \     if num % 2 == 0 {\n            r[0] = r[0].(int) + 1\n        } else {\n\
    \            r[1] = r[1].(int) + 1\n        }\n        num /= 10\n    }\n    return\
    \ r\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp99n2vin8_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074338
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    num_string\
    \ := fmt.Sprintf(\"%d\", num)\n    for _, c := range num_string {\n        if\
    \ string(c) == \"-\" {\n            continue\n        }\n        if int(c) % 2\
    \ == 0 {\n            even_count++\n        } else {\n            odd_count++\n\
    \        }\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpe04228k6_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    num_list := make([]int, 0)\n    even_count := 0\n\
    \    odd_count := 0\n    if num < 0 {\n        num *= -1\n    }\n    for num >\
    \ 0 {\n        num_list = append(num_list, num % 10)\n        num /= 10\n    }\n\
    \    for _, val := range num_list {\n        if val % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpszxersp0_test.go:55: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    if num < 0\
    \ {\n        num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n\
    \            evenCount++\n        } else {\n            oddCount++\n        }\n\
    \        num /= 10\n    }\n    return []interface{}{evenCount, oddCount}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpbxuenf2n_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu5zg3wph_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return nil\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpatzo_hx4_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpatzo_hx4_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpatzo_hx4_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpatzo_hx4_test.go:38:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpatzo_hx4_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpatzo_hx4_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpatzo_hx4_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpatzo_hx4_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        digit := num % 10\n        if digit % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu15rfn2t_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // Base case\n    if num == 0 {\n        return []interface{}{0,\
    \ 0}\n    }\n\n    // Recursive case\n    digit := num % 10\n    even, odd :=\
    \ even_odd_count(num / 10)\n    if digit % 2 == 0 {\n        even += 1\n    }\
    \ else {\n        odd += 1\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3bu4zbsb_test.go:22:18: assignment mismatch: 2 variables but even_odd_count
    returns 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for ; num > 0; num /= 10 {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpnxltso6e_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpnxltso6e_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpnxltso6e_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpnxltso6e_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpnxltso6e_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    res := []interface{}{0, 0}\n    for num != 0 {\n \
    \       if num % 2 == 0 {\n            res[0] = res[0].(int) + 1\n        } else\
    \ {\n            res[1] = res[1].(int) + 1\n        }\n        num /= 10\n   \
    \ }\n    return res\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpe2k6g531_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074336
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // your code here\n    count, count2 := 0, 0\n   \
    \ for num > 0 {\n        if num % 2 == 0 {\n            count++\n        } else\
    \ {\n            count2++\n        }\n        num /= 10\n    }\n    return []interface{}{count,\
    \ count2}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpfpik3434_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpfpik3434_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpfpik3434_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpfpik3434_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpfpik3434_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var count_even, count_odd int\n    for ; num > 0;\
    \ num /= 10 {\n        if num % 2 == 0 {\n            count_even++\n        }\
    \ else {\n            count_odd++\n        }\n    }\n    return []interface{}{count_even,\
    \ count_odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp78vfas_c_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp78vfas_c_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp78vfas_c_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp78vfas_c_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp78vfas_c_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    for num !=\
    \ 0 {\n        if num % 2 == 0 {\n            even_count += 1\n        } else\
    \ {\n            odd_count += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmptfqzfrod_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    var nums = make([]interface{},\
    \ 2)\n    for ; num != 0; num /= 10 {\n        if num % 2 == 0 {\n           \
    \ even++\n        } else {\n            odd++\n        }\n    }\n    nums[0] =\
    \ even\n    nums[1] = odd\n    return nums\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpcoaet_xh_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    if num < 0 {\n        num =\
    \ -num\n    }\n    if num == 0 {\n        even = 1\n    }\n    for num > 0 {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8txc9q2p_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 0
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    if num < 0 {\n      \
    \  num = -num\n    }\n    if num == 0 {\n        even = 1\n    }\n    for num\
    \ > 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n   \
    \         odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    if num < 0 {\n      \
    \  num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n         \
    \   even++\n        } else {\n            odd++\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpznc6m37k_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074333
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    ecount := 0\n    ocount := 0\n    nl := []int{}\n\
    \    if num > 0 {\n        nl = get_digits(num)\n    } else {\n        nl = get_digits(num\
    \ * -1)\n    }\n    for _, n := range nl {\n        if n % 2 == 0 {\n        \
    \    ecount += 1\n        } else {\n            ocount += 1\n        }\n    }\n\
    \    return []interface{}{ecount, ocount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdo3_8p2q_test.go:19:14: undefined: get_digits

    /tmp/tmpdo3_8p2q_test.go:21:14: undefined: get_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074338
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    if num < 0 {\n        num =\
    \ -num\n    }\n    for num > 0 {\n        n := num % 10\n        if n % 2 == 0\
    \ {\n            even++\n        } else {\n            odd++\n        }\n    \
    \    num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmppkqpj940_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    ret := []interface{}{0, 0}\n    for num != 0 {\n \
    \       if num % 2 == 0 {\n            ret[0] = ret[0].(int) + 1\n        } else\
    \ {\n            ret[1] = ret[1].(int) + 1\n        }\n        num /= 10\n   \
    \ }\n    return ret\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp5cbsentf_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    val := num % 10\n        if val % 2 == 0 {\n            even++\n        }\
    \ else {\n            odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_e712l43_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even++\n        } else {\n            odd++\n  \
    \      }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp8txc9q2p_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num % 2 == 0 {\n            even += 1\n        } else {\n            odd +=\
    \ 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpnimtqnnc_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    abs := num\n\
    \    if num < 0 {\n        abs = -num\n    }\n    for abs > 0 {\n        if abs\
    \ % 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        abs /= 10\n    }\n    return []interface{}{evenCount, oddCount}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpereqpva6_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // start your code here\n    return []interface{}{1,\
    \ 2}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpoo4q38f__test.go:39: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpoo4q38f__test.go:39: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpoo4q38f__test.go:39: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpoo4q38f__test.go:39: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpoo4q38f__test.go:39: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpoo4q38f__test.go:39: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpoo4q38f__test.go:39: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpoo4q38f__test.go:39: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // Your code here\n    var evens, odds int\n    for\
    \ ; num > 0; num /= 10 {\n        if num % 2 == 0 {\n            evens++\n   \
    \     } else {\n            odds++\n        }\n    }\n    return []interface{}{evens,\
    \ odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp6pni7ea2_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp6pni7ea2_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp6pni7ea2_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp6pni7ea2_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6pni7ea2_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    absNum := num\n    if\
    \ num < 0 {\n        absNum = -num\n    }\n    for absNum > 0 {\n        if absNum\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n        absNum /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpa98o9e0n_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074339
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for _, n := range fmt.Sprintf(\"\
    %d\", num) {\n        if n % 2 == 0 {\n            even++\n        } else {\n\
    \            odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpqv6q2dzm_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpqv6q2dzm_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpqv6q2dzm_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpqv6q2dzm_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpmenvx436_test.go:38: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpmenvx436_test.go:38:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074329
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    var nums []int\n\n    if num\
    \ < 0 {\n        num = num * -1\n    }\n\n    for num > 0 {\n        nums = append(nums,\
    \ num % 10)\n        num = num / 10\n    }\n\n    for _, n := range nums {\n \
    \       if n % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n    }\n\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmphf4g62e2_test.go:58: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for ; num != 0; num /= 10 {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpc2q2gtks_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even_count int = 0\n    var odd_count int = 0\n\
    \    var nums []interface{}\n\n    for num != 0 {\n        rem := num % 10\n \
    \       if rem % 2 == 0 {\n            even_count += 1\n        } else {\n   \
    \         odd_count += 1\n        }\n        num /= 10\n    }\n\n    nums = append(nums,\
    \ even_count)\n    nums = append(nums, odd_count)\n    return nums\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpppy_z00a_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // result := make([]interface{}, 2)\n    // even :=\
    \ 0\n    // odd := 0\n    // for num != 0 {\n    //     digit := num % 10\n  \
    \  //     if digit % 2 == 0 {\n    //         even++\n    //     } else {\n  \
    \  //         odd++\n    //     }\n    //     num /= 10\n    // }\n    // result[0]\
    \ = even\n    // result[1] = odd\n    // return result\n    return []interface{}{1,\
    \ 2}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmps5jpei4d_test.go:53: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmps5jpei4d_test.go:53: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmps5jpei4d_test.go:53: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmps5jpei4d_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmps5jpei4d_test.go:53: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmps5jpei4d_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmps5jpei4d_test.go:53: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmps5jpei4d_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074340
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var result []interface{}\n\n    even_count := 0\n\
    \    odd_count := 0\n\n    num = abs(num)\n\n    for {\n        if num == 0 {\n\
    \            break\n        }\n\n        last_digit := num % 10\n\n        if\
    \ last_digit % 2 == 0 {\n            even_count++\n        } else {\n        \
    \    odd_count++\n        }\n\n        num = num / 10\n    }\n\n    result = append(result,\
    \ even_count)\n    result = append(result, odd_count)\n\n    return result\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp73fimkl_test.go:20:11: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    if num < 0 {\n        num =\
    \ -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n            even\
    \ += 1\n        } else {\n            odd += 1\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpy3ftrwy5_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return []interface{}{0, 0}\n\
    \    }\n    even, odd := 0, 0\n    for ; num != 0; num /= 10 {\n        if num\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpb_0x14tj_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074340
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpbh_9614g_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for ; num != 0; num /=\
    \ 10 {\n        if num % 2 == 0 {\n            even++\n        } else {\n    \
    \        odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4j3a2j7e_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    var result []interface{}\n\
    \    if num < 0 {\n        num = -num\n    }\n    var rem int\n    for num > 0\
    \ {\n        rem = num % 10\n        if rem % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n        num /= 10\n    }\n\
    \    result = append(result, even)\n    result = append(result, odd)\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpmnan_5kv_test.go:55: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    count := []interface{}{0, 0}\n    if num < 0 {\n \
    \       num = -num\n    }\n    for num > 0 {\n        if num%2 == 0 {\n      \
    \      count[0] = count[0].(int) + 1\n        } else {\n            count[1] =\
    \ count[1].(int) + 1\n        }\n        num /= 10\n    }\n    return count\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpdcs85cq3_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    a, b := 0, 0\n    if num < 0 {\n        num = -num\n\
    \    }\n    for num > 0 {\n        if num % 2 == 0 {\n            a++\n      \
    \  } else {\n            b++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{a, b}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpmrdx55vm_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even_count := 0\n    odd_count := 0\n    if num <\
    \ 0 {\n        num = -num\n    }\n    for num > 0 {\n        if num % 2 == 0 {\n\
    \            even_count++\n        } else {\n            odd_count++\n       \
    \ }\n        num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpu_vvk3a6_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074334
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    cur_digit := num % 10\n        if cur_digit % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num /= 10\n    }\n  \
    \  return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp70wac4kz_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        rem\
    \ := num % 10\n        if rem % 2 == 0 {\n            even++\n        } else {\n\
    \            odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp1p_mwnsx_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even, odd int\n    for num != 0 {\n        if\
    \ num%2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\
    \nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4p5ubpac_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even_count int = 0\n    var odd_count int = 0\n\
    \    var even_odd_list []interface{}\n    var num_list []int = make([]int,0)\n\
    \    var num_list_len int\n    num_list = append(num_list, num)\n    num_list_len\
    \ = len(num_list)\n    for i := num_list_len - 1; i >= 0; i-- {\n        if num_list[i]%2\
    \ == 0 {\n            even_count++\n        } else {\n            odd_count++\n\
    \        }\n    }\n    even_odd_list = append(even_odd_list, even_count)\n   \
    \ even_odd_list = append(even_odd_list, odd_count)\n    return even_odd_list\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmprxh4bmeg_test.go:54: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmprxh4bmeg_test.go:54: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmprxh4bmeg_test.go:54: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmprxh4bmeg_test.go:54: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmprxh4bmeg_test.go:54: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even_count int = 0\n    var odd_count int = 0\n\
    \    for num != 0 {\n        if (num % 10) % 2 == 0 {\n            even_count\
    \ += 1\n        } else {\n            odd_count += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp2ny2_o5z_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        num = num * -1\n    }\n    even\
    \ := 0\n    odd := 0\n    for num > 0 {\n        remainder := num % 10\n     \
    \   if remainder % 2 == 0 {\n            even += 1\n        } else {\n       \
    \     odd += 1\n        }\n        num = num / 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqps9f0e9_test.go:52: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    // get the string representation of the number\n \
    \   num_str := fmt.Sprintf(\"%d\", num)\n    // init a slice that will store the\
    \ number of even and odd respectively\n    result := make([]interface{}, 2)\n\
    \    result[0] = 0\n    result[1] = 0\n    // iterate through each character of\
    \ the number\n    for _, char := range num_str {\n        // get the int representation\
    \ of the character\n        // and modulo it by 2\n        if (int(char) - 48)\
    \ % 2 == 0 {\n            // if the result is 0, the number is even\n        \
    \    // therefore increase the even count\n            result[0] = result[0].(int)\
    \ + 1\n        } else {\n            // if the result is 1, the number is odd\n\
    \            // therefore increase the odd count\n            result[1] = result[1].(int)\
    \ + 1\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpb_oeaex7_test.go:58: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpb_oeaex7_test.go:58: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpb_oeaex7_test.go:58: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpb_oeaex7_test.go:58: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num != 0 {\n        n :=\
    \ num % 10\n        if n % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp0xakwlkt_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num < 0 {\n        num = -num\n    }\n    if num\
    \ == 0 {\n        return []interface{}{0, 0}\n    }\n    even := 0\n    odd :=\
    \ 0\n    for num > 0 {\n        if num % 2 == 0 {\n            even++\n      \
    \  } else {\n            odd++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmptzasyh0a_test.go:54: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even := 0\n    odd := 0\n    for num != 0 {\n    \
    \    if num % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpbh_9614g_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074193
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for ; num != 0; num /= 10 {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpk2sxt2ju_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074341
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    if num == 0 {\n        return []interface{}{0, 0}\n\
    \    }\n\n    even := 0\n    odd := 0\n    for num != 0 {\n        digit := num\
    \ % 10\n        if digit % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqqcujdio_test.go:53: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074341
