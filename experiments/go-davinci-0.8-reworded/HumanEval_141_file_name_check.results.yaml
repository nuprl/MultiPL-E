language: go_test.go
name: HumanEval_141_file_name_check
results:
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    num_of_dots := 0\n    num_of_digits\
    \ := 0\n    for _, r := range file_name {\n        if '0' <= r && r <= '9' {\n\
    \            num_of_digits++\n        } else if r == '.' {\n            num_of_dots++\n\
    \        }\n    }\n    if num_of_dots != 1 || num_of_digits > 3 {\n        return\
    \ \"No\"\n    }\n    // I'll assume that the file name is not empty\n    dot_idx\
    \ := 0\n    for idx, r := range file_name {\n        if r == '.' {\n         \
    \   dot_idx = idx\n            break\n        }\n    }\n    ext := file_name[dot_idx\
    \ + 1:]\n    if ext != \"txt\" && ext != \"exe\" && ext != \"dll\" {\n       \
    \ return \"No\"\n    }\n    if !(('a' <= file_name[0] && file_name[0] <= 'z')\
    \ || ('A' <= file_name[0] && file_name[0] <= 'Z')) {\n        return \"No\"\n\
    \    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // skip leading spaces\n\
    \    for len(file_name) > 0 && file_name[0] == ' ' {\n        file_name = file_name[1:]\n\
    \    }\n    // skip trailing spaces\n    for len(file_name) > 0 && file_name[len(file_name)-1]\
    \ == ' ' {\n        file_name = file_name[:len(file_name)-1]\n    }\n    // empty\
    \ name\n    if len(file_name) == 0 {\n        return \"No\"\n    }\n    // leading\
    \ invalid character\n    if (file_name[0] < 'a' || file_name[0] > 'z') && (file_name[0]\
    \ < 'A' || file_name[0] > 'Z') {\n        return \"No\"\n    }\n    // check for\
    \ the valid substring before the dot\n    for i := 1; i < len(file_name); i++\
    \ {\n        if file_name[i] == '.' {\n            break\n        }\n        if\
    \ file_name[i] < 'a' || file_name[i] > 'z' {\n            if file_name[i] < 'A'\
    \ || file_name[i] > 'Z' {\n                if file_name[i] < '0' || file_name[i]\
    \ > '9' {\n                    return \"No\"\n                }\n            }\n\
    \        }\n    }\n    // check the valid file extension\n    if file_name[len(file_name)-4:]\
    \ != \".txt\" && file_name[len(file_name)-4:] != \".exe\" && file_name[len(file_name)-4:]\
    \ != \".dll\" {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-2:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-2:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.file_name_check({0x51e23a?, 0x8?})\n\t/tmp/tmp68z_bsbf_test.go:53\
    \ +0x147\ncommand-line-arguments_test.TestFile_Name_Check(0xc0001a0340?)\n\t/tmp/tmp68z_bsbf_test.go:91\
    \ +0x47b\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var count_digits int =\
    \ 0\n    var count_dots int = 0\n    var substring_length int = 0\n    var substring_length_after_dot\
    \ int = 0\n    var substring_before_dot string = \"\"\n    var substring_after_dot\
    \ string = \"\"\n    var extension string = \"\"\n    for i := 0; i < len(file_name);\
    \ i++ {\n        if file_name[i] == '.' {\n            count_dots += 1\n     \
    \       substring_before_dot = file_name[:i]\n            substring_after_dot\
    \ = file_name[i+1:]\n            substring_length = len(substring_before_dot)\n\
    \            substring_length_after_dot = len(substring_after_dot)\n        }\
    \ else if file_name[i] >= '0' && file_name[i] <= '9' {\n            count_digits\
    \ += 1\n        }\n    }\n    if count_dots == 1 && count_digits <= 3 && substring_length\
    \ > 0 && \n        substring_length_after_dot > 0 {\n        if substring_before_dot[0]\
    \ >= 'a' && substring_before_dot[0] <= 'z' ||\n            substring_before_dot[0]\
    \ >= 'A' && substring_before_dot[0] <= 'Z' {\n            extension = substring_after_dot\n\
    \            if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n                return \"Yes\"\n            }\n        }\n    }\n   \
    \ return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Implement this\
    \ method.\n    if n := len(file_name); n < 5 || n > 12 {\n        return \"No\"\
    \n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n \
    \ candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpunuc9kah_test.go:68: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpunuc9kah_test.go:68: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpunuc9kah_test.go:68: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpunuc9kah_test.go:68: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpunuc9kah_test.go:68: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__10 (0.00s)\n  \
    \      tmpunuc9kah_test.go:68: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpunuc9kah_test.go:68: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__17 (0.00s)\n        tmpunuc9kah_test.go:68: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18 (0.00s)\n  \
    \      tmpunuc9kah_test.go:68: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__21\
    \ (0.00s)\n        tmpunuc9kah_test.go:68: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__22 (0.00s)\n        tmpunuc9kah_test.go:68: expected\
    \ 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    num_digits := 0\n    num_dots\
    \ := 0\n    first_dot_pos := 0\n    extension := \"\"\n    cur_pos := 0\n    for\
    \ c := range file_name {\n        if c >= '0' && c <= '9' {\n            num_digits++\n\
    \        } else if c == '.' {\n            num_dots++\n            first_dot_pos\
    \ = cur_pos\n        }\n        cur_pos++\n    }\n    if num_digits > 3 || num_dots\
    \ != 1 {\n        return \"No\"\n    }\n    extension = file_name[first_dot_pos+1:]\n\
    \    if extension != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n\
    \        return \"No\"\n    }\n    prefix := file_name[:first_dot_pos]\n    if\
    \ len(prefix) == 0 {\n        return \"No\"\n    }\n    first_char := prefix[0]\n\
    \    if first_char < 'a' || first_char > 'z' && first_char < 'A' || first_char\
    \ > 'Z' {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpfgu1wyn9_test.go:93: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpfgu1wyn9_test.go:93: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpfgu1wyn9_test.go:93: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpfgu1wyn9_test.go:93: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpfgu1wyn9_test.go:93: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpfgu1wyn9_test.go:93: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpfgu1wyn9_test.go:93: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    dots := 0\n    digits :=\
    \ 0\n    for _, c := range file_name {\n        if c == '.' {\n            dots++\n\
    \        } else if '0' <= c && c <= '9' {\n            digits++\n        }\n \
    \   }\n    if dots != 1 || digits > 3 {\n        return \"No\"\n    }\n    pos\
    \ := 0\n    for ; pos < len(file_name); pos++ {\n        if file_name[pos] ==\
    \ '.' {\n            break\n        }\n    }\n    if pos == 0 || pos == len(file_name)\
    \ - 1 {\n        return \"No\"\n    }\n    var c byte = file_name[pos - 1]\n \
    \   if 'a' <= c && c <= 'z' || 'A' <= c && c <= 'Z' {\n        c = file_name[pos\
    \ + 1]\n        if c == 't' || c == 'e' || c == 'd' {\n            return \"Yes\"\
    \n        }\n    }\n    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmp2_mjdezj_test.go:92: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp2_mjdezj_test.go:92: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__6 (0.00s)\n   \
    \     tmp2_mjdezj_test.go:92: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7\
    \ (0.00s)\n        tmp2_mjdezj_test.go:92: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__8 (0.00s)\n        tmp2_mjdezj_test.go:92: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n  \
    \      tmp2_mjdezj_test.go:92: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp2_mjdezj_test.go:92: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp2_mjdezj_test.go:92: expected\
    \ 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // YOUR CODE HERE\n   \
    \ return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpxehout55_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var num_count int\n   \
    \ var has_dot int\n    var char_count int\n    var file_type bool\n\n    for _,\
    \ v := range file_name {\n        if v >= '0' && v <= '9' {\n            num_count++\n\
    \        } else if v == '.' {\n            has_dot++\n        } else if v >= 'a'\
    \ && v <= 'z' || v >= 'A' && v <= 'Z' {\n            char_count++\n        }\n\
    \    }\n\n    if num_count <= 3 && has_dot == 1 && char_count > 0 {\n        switch\
    \ file_name[len(file_name)-3:] {\n        case \"txt\":\n            file_type\
    \ = true\n        case \"exe\":\n            file_type = true\n        case \"\
    dll\":\n            file_type = true\n        default:\n            file_type\
    \ = false\n        }\n    } else {\n        file_type = false\n    }\n\n    if\
    \ file_type {\n        return \"Yes\"\n    } else {\n        return \"No\"\n \
    \   }\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-1:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.file_name_check({0x51e23a, 0x2})\n\t/tmp/tmp53om1_a1_test.go:39\
    \ +0x14d\ncommand-line-arguments_test.TestFile_Name_Check(0xc0001a0340?)\n\t/tmp/tmp53om1_a1_test.go:92\
    \ +0x47b\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Put your code here\n\
    \    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmprb24tkpm_test.go:65: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmprb24tkpm_test.go:65: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmprb24tkpm_test.go:65: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmprb24tkpm_test.go:65: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmprb24tkpm_test.go:65: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmprb24tkpm_test.go:65: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmprb24tkpm_test.go:65: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    count := 0\n    for _,\
    \ v := range file_name {\n        if v >= '0' && v <= '9' {\n            count\
    \ += 1\n        }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n \
    \   if file_name[0] < 'a' || file_name[0] > 'z' {\n        return \"No\"\n   \
    \ }\n    files := []string{\"txt\", \"exe\", \"dll\"}\n    flag := false\n   \
    \ index := -1\n    for i, v := range file_name {\n        if v == '.' {\n    \
    \        index = i\n            break\n        }\n    }\n    if index == -1 {\n\
    \        return \"No\"\n    }\n    for _, v := range files {\n        if file_name[index+1:]\
    \ == v {\n            flag = true\n            break\n        }\n    }\n    if\
    \ flag {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpa9m6xd_u_test.go:97: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpa9m6xd_u_test.go:97: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__16 (0.00s)\n  \
    \      tmpa9m6xd_u_test.go:97: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17\
    \ (0.00s)\n        tmpa9m6xd_u_test.go:97: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\n\
    \    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpd1urncjj_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpd1urncjj_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpd1urncjj_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpd1urncjj_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpd1urncjj_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpd1urncjj_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpd1urncjj_test.go:65: expected 'No', got 'Yes'\n "
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    r := file_name[0]\n   \
    \ if ((r >= 65 && r <= 90) || (r >= 97 && r <= 122)) {\n        chars := []rune(file_name)\n\
    \        point := len(chars)\n        digits := 0\n        for i := 0; i < len(chars);\
    \ i++ {\n            if (chars[i] == 46) {\n                point = i\n      \
    \          break\n            }\n            if (chars[i] >= 48 && chars[i] <=\
    \ 57) {\n                digits += 1\n            }\n        }\n        if (digits\
    \ <= 3 && point != len(chars)) {\n            if (point > 1) {\n             \
    \   file_ext := string(chars[point+1:])\n                if (file_ext == \"txt\"\
    \ || file_ext == \"exe\" || file_ext == \"dll\") {\n                    return\
    \ \"Yes\"\n                }\n            }\n        }\n    }\n    return \"No\"\
    \n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpcfopux1j_test.go:87: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    file_name_length := len(file_name)\n\
    \    if file_name_length < 4 {\n        return \"No\"\n    }\n    dot_count :=\
    \ 0\n    for i := 0; i < file_name_length; i++ {\n        if file_name[i] == '.'\
    \ {\n            dot_count++\n        }\n    }\n    if dot_count != 1 {\n    \
    \    return \"No\"\n    }\n    tmp_l := file_name[:file_name_length-4]\n    if\
    \ len(tmp_l) == 0 {\n        return \"No\"\n    }\n    if tmp_l[0] < 'a' || (tmp_l[0]\
    \ > 'z' && tmp_l[0] < 'A') || tmp_l[0] > 'Z' {\n        return \"No\"\n    }\n\
    \    three_digits_count := 0\n    for i := 0; i < len(tmp_l); i++ {\n        if\
    \ tmp_l[i] >= '0' && tmp_l[i] <= '9' {\n            three_digits_count++\n   \
    \     }\n    }\n    if three_digits_count > 3 {\n        return \"No\"\n    }\n\
    \    tmp_r := file_name[file_name_length-3:]\n    if tmp_r != \"txt\" && tmp_r\
    \ != \"exe\" && tmp_r != \"dll\" {\n        return \"No\"\n    }\n    return \"\
    Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpdokf7alb_test.go:97: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpdokf7alb_test.go:97: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpdokf7alb_test.go:97: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpdokf7alb_test.go:97: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpdokf7alb_test.go:97: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpdokf7alb_test.go:97: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpdokf7alb_test.go:97: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    count := 0\n    if file_name[0]\
    \ == '.' {\n        return \"No\"\n    }\n    for _, char := range file_name {\n\
    \        if '0' <= char && char <= '9' {\n            count += 1\n        }\n\
    \    }\n    if count > 3 {\n        return \"No\"\n    }\n    dot_count := 0\n\
    \    for _, char := range file_name {\n        if char == '.' {\n            dot_count\
    \ += 1\n        }\n    }\n    if dot_count != 1 {\n        return \"No\"\n   \
    \ }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpqe3gjjs9_test.go:85: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpqe3gjjs9_test.go:85: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6 (0.00s)\n   \
    \     tmpqe3gjjs9_test.go:85: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7\
    \ (0.00s)\n        tmpqe3gjjs9_test.go:85: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__8 (0.00s)\n        tmpqe3gjjs9_test.go:85: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n   \
    \     tmpqe3gjjs9_test.go:85: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__11\
    \ (0.00s)\n        tmpqe3gjjs9_test.go:85: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__12 (0.00s)\n        tmpqe3gjjs9_test.go:85: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n  \
    \      tmpqe3gjjs9_test.go:85: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__25\
    \ (0.00s)\n        tmpqe3gjjs9_test.go:85: expected 'No', got 'Yes'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var ext = [...]string{\"\
    txt\", \"exe\", \"dll\"}\n    var is_valid = false\n    for _, s := range ext\
    \ {\n        if file_name == s {\n            is_valid = true\n            break\n\
    \        }\n    }\n    if is_valid {\n        return \"Yes\"\n    }\n    return\
    \ \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmph9z4et68_test.go:75: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmph9z4et68_test.go:75: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmph9z4et68_test.go:75: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmph9z4et68_test.go:75: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmph9z4et68_test.go:75: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmph9z4et68_test.go:75: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmph9z4et68_test.go:75: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // write your code here\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpsgr4xa4j_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    dot_index := -1\n    digits_count\
    \ := 0\n    for i := 0; i < len(file_name); i++ {\n        switch file_name[i]\
    \ {\n        case '.':\n            dot_index = i\n        case '0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9':\n            digits_count++\n        }\n\
    \    }\n    if digits_count > 3 {\n        return \"No\"\n    }\n    if dot_index\
    \ == -1 {\n        return \"No\"\n    }\n    if dot_index == 0 {\n        return\
    \ \"No\"\n    }\n    if dot_index == len(file_name) - 1 {\n        return \"No\"\
    \n    }\n    if !((file_name[0] >= 'a' && file_name[0] <= 'z') || (file_name[0]\
    \ >= 'A' && file_name[0] <= 'Z')) {\n        return \"No\"\n    }\n    switch\
    \ file_name[dot_index + 1:] {\n    case \"txt\", \"exe\", \"dll\":\n        return\
    \ \"Yes\"\n    default:\n        return \"No\"\n    }\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpjlbrvm7p_test.go:94: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__21 (0.00s)\n        tmpjlbrvm7p_test.go:94: expected\
    \ 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Your implementation\
    \ here\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpoiadx6et_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpoiadx6et_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpoiadx6et_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpoiadx6et_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpoiadx6et_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpoiadx6et_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpoiadx6et_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpoiadx6et_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpoiadx6et_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpoiadx6et_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpoiadx6et_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpoiadx6et_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpoiadx6et_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpoiadx6et_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpoiadx6et_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpoiadx6et_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpoiadx6et_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpoiadx6et_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Implement me!\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpty6roebi_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpty6roebi_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpty6roebi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpty6roebi_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpty6roebi_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpty6roebi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpty6roebi_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpty6roebi_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpty6roebi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpty6roebi_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpty6roebi_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpty6roebi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpty6roebi_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpty6roebi_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpty6roebi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpty6roebi_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpty6roebi_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpty6roebi_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // ...\n    return \"\"\
    \n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpse2hkhqb_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // YOUR CODE HERE\n   \
    \ return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpxehout55_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpxehout55_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpxehout55_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var result string\n   \
    \ count := 0\n    var str1, str2 string\n    var i, k int\n    var dot_pos int\n\
    \    var file_name_len int\n    file_name_len = len(file_name)\n    for i = 0;\
    \ i < file_name_len; i++ {\n        if file_name[i] == '.' {\n            dot_pos\
    \ = i\n            count++\n        }\n    }\n    if count != 1 {\n        result\
    \ = \"No\"\n        return result\n    }\n    for i = 0; i < dot_pos; i++ {\n\
    \        if file_name[i] >= '0' && file_name[i] <= '9' {\n            if i ==\
    \ dot_pos - 3 {\n                result = \"No\"\n                return result\n\
    \            }\n        }\n    }\n    for i = dot_pos + 1; i < file_name_len;\
    \ i++ {\n        str1 += string(file_name[i])\n    }\n    for k = 0; k < 3; k++\
    \ {\n        if str1 == file_type[k] {\n            break\n        }\n    }\n\
    \    if k == 3 {\n        result = \"No\"\n        return result\n    }\n    str2\
    \ = string(file_name[0])\n    if str2 >= \"a\" && str2 <= \"z\" || str2 >= \"\
    A\" && str2 <= \"Z\" {\n        result = \"Yes\"\n        return result\n    }\
    \ else {\n        result = \"No\"\n        return result\n    }\n}\n\nvar file_type\
    \ = [3]string{\"txt\", \"exe\", \"dll\"}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__5\
    \ (0.00s)\n        tmp7n_xi1pb_test.go:110: expected 'No', got 'Yes'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\n\
    \    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpzqgqmrzj_test.go:65: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpzqgqmrzj_test.go:65: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpzqgqmrzj_test.go:65: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpzqgqmrzj_test.go:65: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpzqgqmrzj_test.go:65: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpzqgqmrzj_test.go:65: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpzqgqmrzj_test.go:65: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // write your code in Go\
    \ 1.4\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmp678_um2g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp678_um2g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmp678_um2g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmp678_um2g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmp678_um2g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmp678_um2g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmp678_um2g_test.go:65: expected 'No', got 'Yes'\n "
  timestamp: 1660075422
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // for i := 0; i < len(file_name);\
    \ i++ {\n    //     fmt.Println(file_name[i])\n    // }\n    // fmt.Println(\"\
    end of for loop\")\n    var dot_index int = -1\n    for i := 0; i < len(file_name);\
    \ i++ {\n        if file_name[i] == '.' {\n            if dot_index != -1 {\n\
    \                return \"No\"\n            }\n            dot_index = i\n   \
    \     }\n    }\n    if dot_index == -1 {\n        return \"No\"\n    }\n    if\
    \ dot_index == 0 {\n        return \"No\"\n    }\n    var ext string = file_name[dot_index+1:]\n\
    \    // fmt.Println(ext)\n    if ext != \"txt\" && ext != \"exe\" && ext != \"\
    dll\" {\n        return \"No\"\n    }\n    var count_digits int = 0\n    for i\
    \ := 0; i < dot_index; i++ {\n        if file_name[i] >= '0' && file_name[i] <=\
    \ '9' {\n            count_digits++\n        }\n    }\n    if count_digits > 3\
    \ {\n        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0] >\
    \ 'z' {\n        if file_name[0] < 'A' || file_name[0] > 'Z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075422
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Your code goes here\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjvjii1fd_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    check_num_count := 0\n\
    \    check_dot_count := 0\n    char_count := 0\n    for _, c := range file_name\
    \ {\n        if (c >= '0' && c <= '9') {\n            check_num_count++\n    \
    \    } else if (c == '.') {\n            check_dot_count++\n        } else if\
    \ (c == ' ') {\n            return \"No\"\n        }\n        char_count++\n \
    \   }\n    if (check_num_count > 3 || check_dot_count != 1) {\n        return\
    \ \"No\"\n    }\n    if (char_count < 4) {\n        return \"No\"\n    }\n   \
    \ dot_index := 0\n    for i, c := range file_name {\n        if (c == '.') {\n\
    \            dot_index = i\n            break\n        }\n    }\n    if (dot_index\
    \ == 0) {\n        return \"No\"\n    }\n    pre_str := file_name[:dot_index]\n\
    \    post_str := file_name[dot_index+1:]\n    if (len(pre_str) == 0) {\n     \
    \   return \"No\"\n    }\n    c := pre_str[0]\n    if (c < 'a' || c > 'z') &&\
    \ (c < 'A' || c > 'Z') {\n        return \"No\"\n    }\n    if (post_str != \"\
    txt\" && post_str != \"exe\" && post_str != \"dll\") {\n        return \"No\"\n\
    \    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075423
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n\tif matched, _ := regexp.MatchString(`^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$`, file_name); matched {\n\t\treturn \"Yes\"\n\t}\n\treturn \"\
    No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnro2ugb5_test.go:23:19: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 5 {\n\
    \        return \"No\"\n    }\n    if count_digit(file_name) > 3 {\n        return\
    \ \"No\"\n    }\n    if !is_valid_extension(file_name) {\n        return \"No\"\
    \n    }\n    if !is_valid_file_name(file_name) {\n        return \"No\"\n    }\n\
    \    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2t5htc0_test.go:26:8: undefined: count_digit

    /tmp/tmpn2t5htc0_test.go:29:9: undefined: is_valid_extension

    /tmp/tmpn2t5htc0_test.go:32:9: undefined: is_valid_file_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"No\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075267
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if (file_name[0] >= '0'\
    \ && file_name[0] <= '9') {\n        return \"No\"\n    }\n    count_digit :=\
    \ 0\n    count_dot := 0\n    i := 0\n    for i < len(file_name) {\n        if\
    \ (file_name[i] >= '0' && file_name[i] <= '9') {\n            count_digit++\n\
    \        }\n        if (file_name[i] == '.') {\n            count_dot++\n    \
    \    }\n        i++\n    }\n    if (count_digit > 3 || count_dot != 1) {\n   \
    \     return \"No\"\n    }\n    if (file_name[len(file_name) - 3:len(file_name)]\
    \ != \"txt\" &&\n        file_name[len(file_name) - 3:len(file_name)] != \"exe\"\
    \ &&\n        file_name[len(file_name) - 3:len(file_name)] != \"dll\") {\n   \
    \     return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-1:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.file_name_check({0x51e23a?, 0x0?})\n\t/tmp/tmpss3vzutm_test.go:41\
    \ +0x10d\ncommand-line-arguments_test.TestFile_Name_Check(0xc0001a01a0?)\n\t/tmp/tmpss3vzutm_test.go:81\
    \ +0x47b\ntesting.tRunner(0xc0001a01a0, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    /* Fill this function */\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpfzu05kgk_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpfzu05kgk_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpfzu05kgk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpfzu05kgk_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpfzu05kgk_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpfzu05kgk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpfzu05kgk_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpfzu05kgk_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpfzu05kgk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpfzu05kgk_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpfzu05kgk_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpfzu05kgk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpfzu05kgk_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpfzu05kgk_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpfzu05kgk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpfzu05kgk_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpfzu05kgk_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpfzu05kgk_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075425
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 4 {\n\
    \        return \"No\"\n    }\n    dot_index := 0\n    for i, char := range file_name\
    \ {\n        if char == '.' {\n            dot_index = i\n            break\n\
    \        }\n    }\n    if dot_index == 0 {\n        return \"No\"\n    }\n   \
    \ var (\n        pre_dot string = file_name[:dot_index]\n        post_dot string\
    \ = file_name[dot_index+1:]\n    )\n    if !((('a' <= pre_dot[0] && pre_dot[0]\
    \ <= 'z') || ('A' <= pre_dot[0] && pre_dot[0] <= 'Z')) && \n        (post_dot\
    \ == \"txt\" || post_dot == \"exe\" || post_dot == \"dll\")) {\n        return\
    \ \"No\"\n    }\n    dot_count := 0\n    digit_count := 0\n    for _, char :=\
    \ range pre_dot {\n        if char == '.' {\n            dot_count++\n       \
    \ } else if '0' <= char && char <= '9' {\n            digit_count++\n        }\n\
    \    }\n    if dot_count != 0 || digit_count > 3 {\n        return \"No\"\n  \
    \  }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Your code here\n   \
    \ return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp94li2guk_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp94li2guk_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp94li2guk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp94li2guk_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp94li2guk_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp94li2guk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp94li2guk_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp94li2guk_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp94li2guk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp94li2guk_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp94li2guk_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp94li2guk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp94li2guk_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp94li2guk_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp94li2guk_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp94li2guk_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp94li2guk_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp94li2guk_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075267
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    s := \"\"\n    if len(file_name)\
    \ < 2 {\n        return \"No\"\n    }\n    if file_name[0] >= 'a' && file_name[0]\
    \ <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z' {\n        n := 0\n   \
    \     for i := 1; i < len(file_name); i++ {\n            if file_name[i] >= '0'\
    \ && file_name[i] <= '9' {\n                n++\n            }\n            if\
    \ n > 3 {\n                return \"No\"\n            }\n            if file_name[i]\
    \ == '.' {\n                j := i + 1\n                if j == len(file_name)\
    \ {\n                    return \"No\"\n                }\n                s =\
    \ file_name[j:]\n                break\n            }\n        }\n        if s\
    \ == \"txt\" || s == \"exe\" || s == \"dll\" {\n            return \"Yes\"\n \
    \       }\n    }\n    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here!\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmporuu6gce_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"No\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075267
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var dot_pos int\n    var\
    \ digit_count int\n    dot_pos = -1\n    digit_count = 0\n    for i, c := range\
    \ file_name {\n        if c == '.' {\n            dot_pos = i\n        }\n   \
    \     if c >= '0' && c <= '9' {\n            digit_count++\n        }\n    }\n\
    \    if dot_pos == -1 || digit_count > 3 {\n        return \"No\"\n    }\n   \
    \ sub_str_after_dot := file_name[dot_pos+1:]\n    if sub_str_after_dot != \"txt\"\
    \ && sub_str_after_dot != \"exe\" && sub_str_after_dot != \"dll\" {\n        return\
    \ \"No\"\n    }\n    if dot_pos == 0 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpotjb3ekw_test.go:86: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__6 (0.00s)\n        tmpotjb3ekw_test.go:86: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n   \
    \     tmpotjb3ekw_test.go:86: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpotjb3ekw_test.go:86: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpotjb3ekw_test.go:86: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpotjb3ekw_test.go:86: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21\
    \ (0.00s)\n        tmpotjb3ekw_test.go:86: expected 'No', got 'Yes'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"No\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075267
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Your code goes here\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjvjii1fd_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075422
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    count_dot := 0\n    if\
    \ len(file_name) < 4 {\n        return \"No\"\n    }\n    for i := 0; i < len(file_name);\
    \ i++ {\n        if file_name[i] == '.' {\n            count_dot++\n        }\n\
    \    }\n    if count_dot > 1 {\n        return \"No\"\n    }\n    char_rune :=\
    \ []rune(file_name)\n    var file_extension []rune\n    count_num := 0\n    if\
    \ char_rune[0] < 'A' || (char_rune[0] > 'Z' && char_rune[0] < 'a') || char_rune[0]\
    \ > 'z' {\n        return \"No\"\n    }\n    for i := 0; i < len(char_rune); i++\
    \ {\n        if char_rune[i] == '.' {\n            for j := i + 1; j < len(char_rune);\
    \ j++ {\n                file_extension = append(file_extension, char_rune[j])\n\
    \            }\n            break\n        }\n        if char_rune[i] >= '0' &&\
    \ char_rune[i] <= '9' {\n            count_num++\n        }\n    }\n    if count_num\
    \ > 3 {\n        return \"No\"\n    }\n    if string(file_extension) != \"txt\"\
    \ && string(file_extension) != \"exe\" && string(file_extension) != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n\tname_pattern := \"[a-zA-Z][a-zA-Z0-9]*\"\
    \n\textension_pattern := \"txt|exe|dll\"\n\tfull_pattern := name_pattern + \"\\\
    \\.\" + extension_pattern\n\tif ok, _ := regexp.MatchString(full_pattern, file_name);\
    \ ok {\n\t\treturn \"Yes\"\n\t}\n\treturn \"No\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpykc38kq__test.go:26:14: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Your code here!\n\
    \    if len(file_name) == 0 {\n        return \"No\"\n    }\n    var num_digits\
    \ int\n    var num_dots int\n    var file_name_prefix_string string\n    var file_name_suffix_string\
    \ string\n    var file_name_prefix []rune\n    var file_name_suffix []rune\n \
    \   for _, x := range file_name {\n        if x == '.' {\n            num_dots\
    \ += 1\n            if len(file_name_prefix_string) == 0 {\n                return\
    \ \"No\"\n            }\n            continue\n        }\n        if x == '0'\
    \ || x == '1' || x == '2' || x == '3' || x == '4' || x == '5' || x == '6' || x\
    \ == '7' || x == '8' || x == '9' {\n            num_digits += 1\n            if\
    \ num_digits > 3 {\n                return \"No\"\n            }\n           \
    \ continue\n        }\n        if num_dots == 0 {\n            file_name_prefix_string\
    \ += string(x)\n            file_name_prefix = append(file_name_prefix, x)\n \
    \       } else {\n            file_name_suffix_string += string(x)\n         \
    \   file_name_suffix = append(file_name_suffix, x)\n        }\n    }\n    if num_dots\
    \ == 0 {\n        return \"No\"\n    }\n    if num_dots > 1 {\n        return\
    \ \"No\"\n    }\n    if len(file_name_prefix) == 0 {\n        return \"No\"\n\
    \    }\n    if file_name_prefix[0] < 'a' || file_name_prefix[0] > 'z' {\n    \
    \    if file_name_prefix[0] < 'A' || file_name_prefix[0] > 'Z' {\n           \
    \ return \"No\"\n        }\n    }\n    if file_name_suffix_string != \"txt\" &&\
    \ file_name_suffix_string != \"exe\" && file_name_suffix_string != \"dll\" {\n\
    \        return\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpelzbc2lc_test.go:72:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var allowed_extensions\
    \ []string = []string{\"txt\", \"exe\", \"dll\"}\n    var count int = 0\n    var\
    \ extension string = \"\"\n    var name string = \"\"\n    var num_digits int\
    \ = 0\n    var num_dots int = 0\n    for _, c := range file_name {\n        if\
    \ c >= '0' && c <= '9' {\n            num_digits += 1\n        } else if c ==\
    \ '.' {\n            num_dots += 1\n            extension = file_name[count +\
    \ 1:]\n        } else if c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' {\n    \
    \        name = file_name[:count]\n        }\n        count += 1\n    }\n    for\
    \ _, a := range allowed_extensions {\n        if extension == a {\n          \
    \  if num_digits <= 3 && num_dots == 1 && len(name) > 0 {\n                return\
    \ \"Yes\"\n            }\n        }\n    }\n    return \"No\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpg9bo6m0o_test.go:88: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__6 (0.00s)\n        tmpg9bo6m0o_test.go:88: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n   \
    \     tmpg9bo6m0o_test.go:88: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpg9bo6m0o_test.go:88: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpg9bo6m0o_test.go:88: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpg9bo6m0o_test.go:88: expected 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 2 {\n\
    \        return \"No\"\n    }\n    dot_count := 0\n    for i := 0; i < len(file_name);\
    \ i++ {\n        // contain '.'\n        if file_name[i] == '.' {\n          \
    \  dot_count++\n            if dot_count > 1 {\n                return \"No\"\n\
    \            }\n            if i == 0 {\n                return \"No\"\n     \
    \       }\n            if !(file_name[i + 1] == 't' && file_name[i + 2] == 'x'\
    \ && file_name[i + 3] == 't' ||\n                 file_name[i + 1] == 'e' && file_name[i\
    \ + 2] == 'x' && file_name[i + 3] == 'e' ||\n                 file_name[i + 1]\
    \ == 'd' && file_name[i + 2] == 'l' && file_name[i + 3] == 'l') {\n          \
    \      return \"No\"\n            }\n        }\n        // contain digit\n   \
    \     if file_name[i] >= '0' && file_name[i] <= '9' {\n            if i < len(file_name)\
    \ - 4 {\n                continue\n            }\n            if file_name[i]\
    \ == '0' && file_name[i + 1] == '0' && file_name[i + 2] == '0' {\n           \
    \     return \"No\"\n            }\n            return \"Yes\"\n        }\n  \
    \      // contain letter\n        if (file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ || (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            continue\n  \
    \      }\n        return \"No\"\n    }\n    return \"No\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.file_name_check({0x51e23a?, 0x0?})\n\t/tmp/tmptpao6iuh_test.go:37\
    \ +0x2e6\ncommand-line-arguments_test.TestFile_Name_Check(0xc0001201a0?)\n\t/tmp/tmptpao6iuh_test.go:94\
    \ +0x47b\ntesting.tRunner(0xc0001201a0, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n\t// TODO\n\treturn \"\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpw_sbxn_1_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpw_sbxn_1_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpw_sbxn_1_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpw_sbxn_1_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpw_sbxn_1_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpw_sbxn_1_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpw_sbxn_1_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpw_sbxn_1_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpw_sbxn_1_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpw_sbxn_1_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpw_sbxn_1_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpw_sbxn_1_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpw_sbxn_1_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpw_sbxn_1_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpw_sbxn_1_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpw_sbxn_1_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpw_sbxn_1_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpw_sbxn_1_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    ...\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpugmar32r_test.go:23:5: expected statement, found ''...''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    count := 0\n    for i :=\
    \ 0; i < len(file_name); i++ {\n        if '0' <= file_name[i] && file_name[i]\
    \ <= '9' {\n            count += 1\n        }\n    }\n    if count > 3 {\n   \
    \     return \"No\"\n    }\n    dot_index := -1\n    for i := 0; i < len(file_name);\
    \ i++ {\n        if file_name[i] == '.' {\n            dot_index = i\n       \
    \     break\n        }\n    }\n    if dot_index == -1 {\n        return \"No\"\
    \n    }\n    if dot_index == 0 {\n        return \"No\"\n    }\n    if !('a' <=\
    \ file_name[0] && file_name[0] <= 'z' || 'A' <= file_name[0] && file_name[0] <=\
    \ 'Z') {\n        return \"No\"\n    }\n    if !(file_name[dot_index + 1:] ==\
    \ \"txt\" || file_name[dot_index + 1:] == \"exe\" || file_name[dot_index + 1:]\
    \ == \"dll\") {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var valid bool = true\n\
    \    var n int = 0\n    var dot int = 0\n    for i := 0; i < len(file_name); i++\
    \ {\n        if file_name[i] >= '0' && file_name[i] <= '9' {\n            n++\n\
    \        }\n        if file_name[i] == '.' {\n            dot++\n        }\n \
    \   }\n    if n > 3 || dot != 1 {\n        valid = false\n    }\n    var c int\
    \ = 0\n    for i := 0; i < len(file_name); i++ {\n        if file_name[i] == '.'\
    \ {\n            break\n        }\n        if file_name[i] >= 'a' && file_name[i]\
    \ <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z' {\n            c++\n  \
    \      }\n    }\n    if c == 0 {\n        valid = false\n    }\n    var len_left\
    \ int = 0\n    var len_right int = 0\n    for i := 0; i < len(file_name); i++\
    \ {\n        if file_name[i] == '.' {\n            len_left = i\n            break\n\
    \        }\n    }\n    len_right = len(file_name) - len_left - 1\n    if len_right\
    \ < 3 || len_right > 3 {\n        valid = false\n    }\n    if file_name[len_left\
    \ + 1:] != \"txt\" && file_name[len_left + 1:] != \"exe\" && file_name[len_left\
    \ + 1:] != \"dll\" {\n        valid = false\n    }\n    if valid {\n        return\
    \ \"Yes\"\n    } else {\n        return \"No\"\n    }\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmp3l_uqyrc_test.go:109: expected 'No', got 'Yes'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__6 (0.00s)\n        tmp3l_uqyrc_test.go:109:\
    \ expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n\
    \        tmp3l_uqyrc_test.go:109: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmp3l_uqyrc_test.go:109: expected 'No', got 'Yes'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmp3l_uqyrc_test.go:109:\
    \ expected 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // YOUR CODE GOES HERE\n\
    \    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpdb1ekzgb_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpdb1ekzgb_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpdb1ekzgb_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpdb1ekzgb_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpdb1ekzgb_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpdb1ekzgb_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpdb1ekzgb_test.go:65: expected 'No', got 'Yes'\n "
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\n\
    \    if file_name == \"\" {\n        return \"No\"\n    }\n    re := []rune(file_name)\n\
    \    num_count := 0\n    fmt.Println(string(re[0]))\n    for i := 0; i < len(re);\
    \ i++ {\n        fmt.Println(string(re[i]))\n        if re[i] >= '0' && re[i]\
    \ <= '9' {\n            num_count++\n        }\n    }\n    if num_count > 3 {\n\
    \        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "e\ne\nx\na\nm\np\nl\ne\n.\nt\nx\nt\n1\n1\ne\nx\na\nm\np\nl\ne\n.\nd\nl\n\
    l\ns\ns\n1\ns\nd\nf\n3\n.\na\ns\nd\nK\nK\n.\nd\nl\nl\nM\nM\nY\n1\n6\nF\nI\nL\n\
    E\n3\n.\ne\nx\ne\nH\nH\ni\ns\n1\n2\nF\nI\nL\nE\n9\n4\n.\ne\nx\ne\n_\n_\nY\n.\n\
    t\nx\nt\n?\n?\na\nR\nE\nY\nA\n.\ne\nx\ne\n/\n/\nt\nh\ni\ns\n_\ni\ns\n_\nv\na\n\
    l\ni\nd\n.\nd\nl\nl\nt\nt\nh\ni\ns\n_\ni\ns\n_\nv\na\nl\ni\nd\n.\nw\no\nw\nt\n\
    t\nh\ni\ns\n_\ni\ns\n_\nv\na\nl\ni\nd\n.\nt\nx\nt\nt\nt\nh\ni\ns\n_\ni\ns\n_\n\
    v\na\nl\ni\nd\n.\nt\nx\nt\ne\nx\ne\n#\n#\nt\nh\ni\ns\n2\n_\ni\n4\ns\n_\n5\nv\n\
    a\nl\ni\nd\n.\nt\ne\nn\n@\n@\nt\nh\ni\ns\n1\n_\ni\ns\n6\n_\nv\na\nl\ni\nd\n.\n\
    e\nx\ne\nt\nt\nh\ni\ns\n_\ni\ns\n_\n1\n2\nv\na\nl\ni\nd\n.\n6\ne\nx\ne\n4\n.\n\
    t\nx\nt\na\na\nl\nl\n.\ne\nx\ne\n.\nt\nx\nt\nI\nI\n5\n6\n3\n_\nN\no\n.\ne\nx\n\
    e\nI\nI\ns\n3\ny\no\nu\nf\na\nu\nl\nt\n.\nt\nx\nt\nn\nn\no\n_\no\nn\ne\n#\nk\n\
    n\no\nw\ns\n.\nd\nl\nl\n1\n1\nI\n5\n6\n3\n_\nY\ne\ns\n3\n.\ne\nx\ne\nI\nI\n5\n\
    6\n3\n_\nY\ne\ns\n3\n.\nt\nx\nt\nt\nf\nf\ni\nn\na\nl\n.\n.\nt\nx\nt\nf\nf\ni\n\
    n\na\nl\n1\n3\n2\n_\n_\nf\n4\ni\nn\nd\ns\na\nr\nt\na\nl\n1\n3\n2\n.\n.\n.\nt\n\
    x\nt\ns\ns\n.\n--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpjv_zv7go_test.go:80: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpjv_zv7go_test.go:80: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6 (0.00s)\n   \
    \     tmpjv_zv7go_test.go:80: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7\
    \ (0.00s)\n        tmpjv_zv7go_test.go:80: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__8 (0.00s)\n        tmpjv_zv7go_test.go:80: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n   \
    \     tmpjv_zv7go_test.go:80: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__11\
    \ (0.00s)\n        tmpjv_zv7go_test.go:80: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__12 (0.00s)\n        tmpjv_zv7go_test.go:80: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n  \
    \      tmpjv_zv7go_test.go:80: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpjv_zv7go_test.go:80: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__21 (0.00s)\n        tmpjv_zv7go_test.go:80: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22 (0."
  timestamp: 1660075425
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Your code goes here...\n\
    \    r := file_name_check_regex(file_name)\n    if r == true {\n        return\
    \ \"Yes\"\n    }\n    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7fk2fb3__test.go:24:10: undefined: file_name_check_regex

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075424
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 4 {\n\
    \        return \"No\"\n    }\n    dot := 0\n    for i := 0; i < len(file_name);\
    \ i++ {\n        if file_name[i] == '.' {\n            dot++\n        }\n    }\n\
    \    if dot != 1 {\n        return \"No\"\n    }\n    // {\"txt\", \"exe\", \"\
    dll\"}\n    if file_name[len(file_name)-3:] != \"txt\" && file_name[len(file_name)-3:]\
    \ != \"exe\" && file_name[len(file_name)-3:] != \"dll\" {\n        return \"No\"\
    \n    }\n    name := file_name[:len(file_name)-4]\n    if !((name[0] >= 'a' &&\
    \ name[0] <= 'z') || (name[0] >= 'A' && name[0] <= 'Z')) {\n        return \"\
    No\"\n    }\n    i := 0\n    for i < len(name) {\n        if name[i] >= '0' &&\
    \ name[i] <= '9' {\n            i++\n        } else {\n            break\n   \
    \     }\n    }\n    if i > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\
    \n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.file_name_check({0x51e33b?, 0x0?})\n\t/tmp/tmp8q77g3di_test.go:40\
    \ +0x159\ncommand-line-arguments_test.TestFile_Name_Check(0xc0001924e0?)\n\t/tmp/tmp8q77g3di_test.go:88\
    \ +0x44f\ntesting.tRunner(0xc0001924e0, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Error\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp5tbqsfra_test.go:64: expected 'Yes', got 'Error'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmp5tbqsfra_test.go:64:\
    \ expected 'No', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n\
    \        tmp5tbqsfra_test.go:64: expected 'No', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp5tbqsfra_test.go:64: expected 'Yes', got 'Error'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n        tmp5tbqsfra_test.go:64:\
    \ expected 'Yes', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n\
    \        tmp5tbqsfra_test.go:64: expected 'No', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp5tbqsfra_test.go:64: expected 'No', got 'Error'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n        tmp5tbqsfra_test.go:64:\
    \ expected 'No', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n\
    \        tmp5tbqsfra_test.go:64: expected 'No', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp5tbqsfra_test.go:64: expected 'No', got 'Error'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__10 (0.00s)\n        tmp5tbqsfra_test.go:64:\
    \ expected 'Yes', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__11\
    \ (0.00s)\n        tmp5tbqsfra_test.go:64: expected 'No', got 'Error'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n        tmp5tbqsfra_test.go:64:\
    \ expected 'No', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n\
    \        tmp5tbqsfra_test.go:64: expected 'No', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__14\
    \ (0.00s)\n        tmp5tbqsfra_test.go:64: expected 'No', got 'Error'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n        tmp5tbqsfra_test.go:64:\
    \ expected 'No', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__16 (0.00s)\n\
    \        tmp5tbqsfra_test.go:64: expected 'Yes', got 'Error'\n    --- FAIL: TestFile_Name_Check/test_num__17\
    \ (0.00s)\n        tmp5tbqsfra_te"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n\treturn \"No\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp736rvifq_test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmp736rvifq_test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmp736rvifq_test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp736rvifq_test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp736rvifq_test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmp736rvifq_test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmp736rvifq_test.go:64: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO - Complete the\
    \ implementation\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmptnlbqm6__test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmptnlbqm6__test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmptnlbqm6__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmptnlbqm6__test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmptnlbqm6__test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmptnlbqm6__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmptnlbqm6__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmptnlbqm6__test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmptnlbqm6__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmptnlbqm6__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmptnlbqm6__test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmptnlbqm6__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmptnlbqm6__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmptnlbqm6__test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmptnlbqm6__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmptnlbqm6__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmptnlbqm6__test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmptnlbqm6__test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075426
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    dot_i := -1\n    count\
    \ := 0\n    for i, c := range file_name {\n        if c == '.' {\n           \
    \ dot_i = i\n        } else if c >= '0' && c <= '9' {\n            count++\n \
    \       }\n    }\n    if count > 3 || dot_i < 0 {\n        return \"No\"\n   \
    \ }\n    ext := file_name[dot_i+1:]\n    if ext != \"txt\" && ext != \"exe\" &&\
    \ ext != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpmgyxajpy_test.go:80: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__6 (0.00s)\n        tmpmgyxajpy_test.go:80: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n   \
    \     tmpmgyxajpy_test.go:80: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpmgyxajpy_test.go:80: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpmgyxajpy_test.go:80: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpmgyxajpy_test.go:80: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21\
    \ (0.00s)\n        tmpmgyxajpy_test.go:80: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__24 (0.00s)\n        tmpmgyxajpy_test.go:80: expected\
    \ 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    is_valid := true\n    if\
    \ len(file_name) == 0 {\n        is_valid = false\n    }\n    count := 0\n   \
    \ for i := 0; i < len(file_name); i++ {\n        if '0' <= file_name[i] && file_name[i]\
    \ <= '9' {\n            count++\n        }\n    }\n    if count > 3 {\n      \
    \  is_valid = false\n    }\n    if file_name[0] < 'a' || 'z' < file_name[0] {\n\
    \        is_valid = false\n    }\n    if file_name[0] < 'A' || 'Z' < file_name[0]\
    \ {\n        is_valid = false\n    }\n    count = 0\n    for i := 0; i < len(file_name);\
    \ i++ {\n        if file_name[i] == '.' {\n            count++\n        }\n  \
    \  }\n    if count != 1 {\n        is_valid = false\n    }\n    start := 0\n \
    \   for i := 0; i < len(file_name); i++ {\n        if file_name[i] == '.' {\n\
    \            start = i + 1\n            break\n        }\n    }\n    if start\
    \ == 0 {\n        is_valid = false\n    }\n    if file_name[start:] != \"txt\"\
    \ && file_name[start:] != \"exe\" && file_name[start:] != \"dll\" {\n        is_valid\
    \ = false\n    }\n    if is_valid {\n        return \"Yes\"\n    } else {\n  \
    \      return \"No\"\n    }\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n \
    \ candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp36v987gi_test.go:109: expected 'Yes', got 'No'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmp36v987gi_test.go:109:\
    \ expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmp36v987gi_test.go:109: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp36v987gi_test.go:109: expected 'Yes', got 'No'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__16 (0.00s)\n        tmp36v987gi_test.go:109:\
    \ expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n\
    \        tmp36v987gi_test.go:109: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmp36v987gi_test.go:109: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Your code goes here.\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptigvdeul_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\
    \ and return the desired result.\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpd8kfwe50_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpd8kfwe50_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpd8kfwe50_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpd8kfwe50_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpd8kfwe50_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpd8kfwe50_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpd8kfwe50_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpd8kfwe50_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpd8kfwe50_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpd8kfwe50_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpd8kfwe50_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpd8kfwe50_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpd8kfwe50_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpd8kfwe50_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpd8kfwe50_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpd8kfwe50_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpd8kfwe50_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpd8kfwe50_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075426
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // fill the code here\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpq8g59_oe_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpq8g59_oe_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpq8g59_oe_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpq8g59_oe_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpq8g59_oe_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpq8g59_oe_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpq8g59_oe_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpq8g59_oe_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpq8g59_oe_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpq8g59_oe_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpq8g59_oe_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpq8g59_oe_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpq8g59_oe_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpq8g59_oe_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpq8g59_oe_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpq8g59_oe_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpq8g59_oe_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpq8g59_oe_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075426
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    r := [][]string{\n    \
    \    {\"a\", \"z\"},\n        {\"A\", \"Z\"},\n        {\"0\", \"9\"},\n    }\n\
    \    dot_index := -1\n    digits_count := 0\n    for i, v := range file_name {\n\
    \        c := string(v)\n        if c == \".\" {\n            dot_index = i\n\
    \            continue\n        }\n        fmt.Println(c)\n        is_in_range\
    \ := false\n        for _, rg := range r {\n            if c >= rg[0] && c <=\
    \ rg[1] {\n                is_in_range = true\n                break\n       \
    \     }\n        }\n        if !is_in_range {\n            return \"No\"\n   \
    \     }\n        if c >= \"0\" && c <= \"9\" {\n            digits_count += 1\n\
    \        }\n    }\n    if dot_index == -1 || dot_index == 0 || digits_count >\
    \ 3 {\n        return \"No\"\n    }\n    suffix := file_name[dot_index+1:]\n \
    \   if suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "e\nx\na\nm\np\nl\ne\nt\nx\nt\n1\ne\nx\na\nm\np\nl\ne\nd\nl\nl\ns\n1\ns\n\
    d\nf\n3\na\ns\nd\nK\nd\nl\nl\nM\nY\n1\n6\nF\nI\nL\nE\n3\ne\nx\ne\nH\ni\ns\n1\n\
    2\nF\nI\nL\nE\n9\n4\ne\nx\ne\n_\n?\n/\nt\nh\ni\ns\n_\nt\nh\ni\ns\n_\nt\nh\ni\n\
    s\n_\n#\n@\nt\nh\ni\ns\n_\na\nl\nl\ne\nx\ne\nt\nx\nt\nI\n5\n6\n3\n_\nI\ns\n3\n\
    y\no\nu\nf\na\nu\nl\nt\nt\nx\nt\nn\no\n_\n1\nI\n5\n6\n3\n_\nI\n5\n6\n3\n_\nf\n\
    i\nn\na\nl\nt\nx\nt\nf\ni\nn\na\nl\n1\n3\n2\n_\nt\nx\nt\ns\n--- FAIL: TestFile_Name_Check\
    \ (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n        tmpq08lejcm_test.go:99:\
    \ expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__10 (0.00s)\n\
    \        tmpq08lejcm_test.go:99: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpq08lejcm_test.go:99: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpq08lejcm_test.go:99: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18 (0.00s)\n  \
    \      tmpq08lejcm_test.go:99: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__21\
    \ (0.00s)\n        tmpq08lejcm_test.go:99: expected 'No', got 'Yes'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Implement this\
    \ function\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n \
    \ candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp_se32lur_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 5 {\n\
    \        return \"No\"\n    }\n    dot_location := file_name[0:5].find('.')\n\
    \    if dot_location < 0 {\n        return \"No\"\n    }\n    if string(file_name[0:5][dot_location+1])\
    \ != \"txt\" || \n        string(file_name[0:5][dot_location+1]) != \"exe\" ||\
    \ \n        string(file_name[0:5][dot_location+1]) != \"dll\" {\n        return\
    \ \"No\"\n    }\n    if len(file_name[0:5][0:dot_location]) == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name[0:5][0] < 'a' || file_name[0:5][0] > 'z' ||\
    \ \n        file_name[0:5][0] < 'A' || file_name[0:5][0] > 'Z' {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4po3wl58_test.go:26:36: file_name[0:5].find undefined (type string has
    no field or method find)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n\tflag := 0\n\tfor _, each\
    \ := range file_name {\n\t\tif each == '.' {\n\t\t\tflag++\n\t\t}\n\t}\n\tif flag\
    \ != 1 {\n\t\treturn \"No\"\n\t}\n\ti := 0\n\tfor _, each := range file_name {\n\
    \t\tif each == '.' {\n\t\t\tbreak\n\t\t}\n\t\ti++\n\t}\n\tif i == 0 {\n\t\treturn\
    \ \"No\"\n\t}\n\tbefore_dot := file_name[:i]\n\tfor _, each := range before_dot\
    \ {\n\t\tif (each < 'a' || each > 'z') && (each < 'A' || each > 'Z') {\n\t\t\t\
    return \"No\"\n\t\t}\n\t}\n\tafter_dot := file_name[i+1:]\n\tif after_dot != \"\
    txt\" && after_dot != \"exe\" && after_dot != \"dll\" {\n\t\treturn \"No\"\n\t\
    }\n\treturn \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__4\
    \ (0.00s)\n        tmpr_noanl7_test.go:93: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpr_noanl7_test.go:93: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__16 (0.00s)\n  \
    \      tmpr_noanl7_test.go:93: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17\
    \ (0.00s)\n        tmpr_noanl7_test.go:93: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__18 (0.00s)\n        tmpr_noanl7_test.go:93: expected\
    \ 'Yes', got 'No'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 6 {\n\
    \        return \"No\"\n    }\n    result := \"Yes\"\n    dot := false\n    var\
    \ alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    var\
    \ digits = \"0123456789\"\n    var ext = map[string]bool{\n        \"txt\": true,\n\
    \        \"exe\": true,\n        \"dll\": true,\n    }\n    num_digits := 0\n\
    \    for _, c := range file_name {\n        if string(c) == \".\" {\n        \
    \    dot = true\n            continue\n        }\n        if !dot {\n        \
    \    if !strings.Contains(alphabet, string(c)) {\n                result = \"\
    No\"\n                break\n            }\n        } else {\n            if strings.Contains(digits,\
    \ string(c)) {\n                num_digits += 1\n            }\n            if\
    \ num_digits > 3 {\n                result = \"No\"\n                break\n \
    \           }\n        }\n    }\n    if !dot {\n        result = \"No\"\n    }\n\
    \    if !ext[file_name[len(file_name)-3:]] {\n        result = \"No\"\n    }\n\
    \    return result\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplsllivz_test.go:42:17: undefined: strings

    /tmp/tmpplsllivz_test.go:47:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // return \"Yes\"\n   \
    \ count_digit := 0\n    count_dot := 0\n    var sub_str_before_dot, sub_str_after_dot\
    \ string\n    var valid bool = true\n    for _, v := range file_name {\n     \
    \   if v >= '0' && v <= '9' {\n            count_digit++\n        }\n        if\
    \ v == '.' {\n            count_dot++\n            sub_str_after_dot = file_name[len(sub_str_before_dot)+1:]\n\
    \        }\n        if count_digit > 3 {\n            valid = false\n        \
    \    break\n        }\n        if count_dot > 1 {\n            valid = false\n\
    \            break\n        }\n        if len(sub_str_before_dot) == 0 {\n   \
    \         valid = false\n            break\n        }\n        if !((sub_str_after_dot\
    \ == \"txt\") || (sub_str_after_dot == \"exe\") || (sub_str_after_dot == \"dll\"\
    )) {\n            valid = false\n            break\n        }\n        sub_str_before_dot\
    \ += string(v)\n    }\n    if valid {\n        return \"Yes\"\n    } else {\n\
    \        return \"No\"\n    }\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp98tkxfx5_test.go:99: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmp98tkxfx5_test.go:99: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmp98tkxfx5_test.go:99: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp98tkxfx5_test.go:99: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp98tkxfx5_test.go:99: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmp98tkxfx5_test.go:99: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmp98tkxfx5_test.go:99: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // your code here\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp81pk6bru_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n\tvar str_before_dot string\
    \ = \"\"\n\tvar str_after_dot string = \"\"\n\tvar count int = 0\n\tvar dot_count\
    \ int = 0\n\tfor index, char := range file_name {\n\t\t//fmt.Println(index, char)\n\
    \t\tif index == 0 && !(((char >= 'a') && (char <= 'z')) || ((char >= 'A') && (char\
    \ <= 'Z'))) {\n\t\t\treturn \"No\"\n\t\t}\n\t\tif (char >= '0') && (char <= '9')\
    \ {\n\t\t\tcount += 1\n\t\t}\n\t\tif (char == '.') {\n\t\t\tdot_count += 1\n\t\
    \t}\n\t\tif count > 3 {\n\t\t\treturn \"No\"\n\t\t}\n\t\tif (char == '.') && (index\
    \ < len(file_name)-1) {\n\t\t\tstr_before_dot = file_name[:index]\n\t\t\tstr_after_dot\
    \ = file_name[index+1:]\n\t\t}\n\t}\n\tif dot_count != 1 {\n\t\treturn \"No\"\n\
    \t}\n\tif (str_before_dot == \"\") || (str_after_dot == \"\") {\n\t\treturn \"\
    No\"\n\t}\n\tif !((str_after_dot == \"txt\") || (str_after_dot == \"exe\") ||\
    \ (str_after_dot == \"dll\")) {\n\t\treturn \"No\"\n\t}\n\treturn \"Yes\"\n}\n\
    \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO\n    return \"\"\
    \n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp526yft2__test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // your code here\n   \
    \ return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpxzz4w0z3_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpxzz4w0z3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpxzz4w0z3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpxzz4w0z3_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpxzz4w0z3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpxzz4w0z3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpxzz4w0z3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpxzz4w0z3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpxzz4w0z3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpxzz4w0z3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpxzz4w0z3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpxzz4w0z3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpxzz4w0z3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpxzz4w0z3_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpxzz4w0z3_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpxzz4w0z3_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpxzz4w0z3_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpxzz4w0z3_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075267
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    //Your code goes here\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpd4i79g7i_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpd4i79g7i_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpd4i79g7i_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpd4i79g7i_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpd4i79g7i_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpd4i79g7i_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpd4i79g7i_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpd4i79g7i_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpd4i79g7i_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpd4i79g7i_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpd4i79g7i_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpd4i79g7i_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpd4i79g7i_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpd4i79g7i_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpd4i79g7i_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpd4i79g7i_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpd4i79g7i_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpd4i79g7i_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // YOUR CODE HERE\n   \
    \ return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpg33hiaz3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpg33hiaz3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpg33hiaz3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpg33hiaz3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpg33hiaz3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpg33hiaz3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpg33hiaz3_test.go:65: expected 'No', got 'Yes'\n "
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmptru08p76_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmptru08p76_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmptru08p76_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n\treturn \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpoks566___test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpoks566___test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpoks566___test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpoks566___test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpoks566___test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpoks566___test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpoks566___test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpoks566___test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075427
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 5 {\n\
    \        return \"No\"\n    }\n    dot_index := strings.Index(file_name, \".\"\
    )\n    if dot_index == -1 {\n        return \"No\"\n    }\n    if dot_index ==\
    \ 0 {\n        return \"No\"\n    }\n    if dot_index == len(file_name) - 1 {\n\
    \        return \"No\"\n    }\n    if dot_index == len(file_name) - 4 {\n    \
    \    return \"No\"\n    }\n    if dot_index == len(file_name) - 5 {\n        return\
    \ \"No\"\n    }\n    if dot_index == len(file_name) - 6 {\n        return \"No\"\
    \n    }\n    if dot_index == len(file_name) - 7 {\n        return \"No\"\n   \
    \ }\n    digits_count := 0\n    for i := 0; i < dot_index; i++ {\n        c :=\
    \ file_name[i]\n        if '0' <= c && c <= '9' {\n            digits_count++\n\
    \        }\n    }\n    if digits_count > 3 {\n        return \"No\"\n    }\n \
    \   if 'A' <= file_name[0] && file_name[0] <= 'Z' {\n        return \"No\"\n \
    \   }\n    if 'a' <= file_name[0] && file_name[0] <= 'z' {\n        return \"\
    No\"\n    }\n    sub_name := file_name[dot_index+1:]\n    switch sub_name {\n\
    \    case \"txt\":\n        return \"Yes\"\n    case \"exe\":\n        return\
    \ \"Yes\"\n    case \"dll\":\n        return \"Yes\"\n    default:\n        return\
    \ \"No\"\n    }\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1c56iklq_test.go:26:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // IMPLEMENT THIS FUNCTION\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpx49y49l4_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpx49y49l4_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpx49y49l4_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpx49y49l4_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpx49y49l4_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpx49y49l4_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpx49y49l4_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpx49y49l4_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpx49y49l4_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpx49y49l4_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpx49y49l4_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpx49y49l4_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpx49y49l4_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpx49y49l4_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpx49y49l4_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpx49y49l4_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpx49y49l4_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpx49y49l4_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Implement this function\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp1hxcmw4m_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp1hxcmw4m_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp1hxcmw4m_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp1hxcmw4m_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp1hxcmw4m_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp1hxcmw4m_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp1hxcmw4m_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp1hxcmw4m_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp1hxcmw4m_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp1hxcmw4m_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp1hxcmw4m_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp1hxcmw4m_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp1hxcmw4m_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp1hxcmw4m_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp1hxcmw4m_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp1hxcmw4m_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp1hxcmw4m_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp1hxcmw4m_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075427
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    digits := 0\n    dot_counter\
    \ := 0\n    if len(file_name) == 0 {\n        return \"No\"\n    }\n    for _,\
    \ char := range file_name {\n        if char >= '0' && char <= '9' {\n       \
    \     digits++\n        }\n        if char == '.' {\n            dot_counter++\n\
    \        }\n    }\n    if digits > 3 || dot_counter != 1 {\n        return \"\
    No\"\n    }\n    name_parts := strings.Split(file_name, \".\")\n    if len(name_parts)\
    \ != 2 {\n        return \"No\"\n    }\n    if name_parts[0] == \"\" || name_parts[0][0]\
    \ < 'a' || name_parts[0][0] > 'z' {\n        return \"No\"\n    }\n    if name_parts[1]\
    \ != \"txt\" && name_parts[1] != \"exe\" && name_parts[1] != \"dll\" {\n     \
    \   return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4box9ac7_test.go:39:19: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    cnt := 0\n    for _, c\
    \ := range file_name {\n        if c >= '0' && c <= '9' {\n            cnt++\n\
    \        }\n    }\n    if cnt > 3 {\n        return \"No\"\n    }\n    for _,\
    \ c := range file_name {\n        if c == '.' {\n            return \"Yes\"\n\
    \        }\n    }\n    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpn513705s_test.go:78: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpn513705s_test.go:78: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6 (0.00s)\n   \
    \     tmpn513705s_test.go:78: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7\
    \ (0.00s)\n        tmpn513705s_test.go:78: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__8 (0.00s)\n        tmpn513705s_test.go:78: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9 (0.00s)\n   \
    \     tmpn513705s_test.go:78: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__11\
    \ (0.00s)\n        tmpn513705s_test.go:78: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__12 (0.00s)\n        tmpn513705s_test.go:78: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n  \
    \      tmpn513705s_test.go:78: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpn513705s_test.go:78: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__21 (0.00s)\n        tmpn513705s_test.go:78: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpn513705s_test.go:78: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__25\
    \ (0.00s)\n        tmpn513705s_test.go:78: expected 'No', got 'Yes'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) <= 4\
    \ {\n        return \"No\"\n    }\n    if !(file_name[0] >= 'a' && file_name[0]\
    \ <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z') {\n        return \"No\"\
    \n    }\n    if file_name[len(file_name) - 4] != '.' {\n        return \"No\"\n\
    \    }\n    if file_name[len(file_name) - 3] != 't' && file_name[len(file_name)\
    \ - 3] != 'e' && file_name[len(file_name) - 3] != 'd' {\n        return \"No\"\
    \n    }\n    if file_name[len(file_name) - 2] != 'x' || file_name[len(file_name)\
    \ - 1] != 'e' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name)\
    \ - 4; i++ {\n        if !(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z' || file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n            return \"No\"\n        }\n    }\n    for i := 0; i < len(file_name)\
    \ - 4; i++ {\n        if file_name[i] >= '0' && file_name[i] <= '9' {\n      \
    \      count := 0\n            for j := i; j < len(file_name) - 4; j++ {\n   \
    \             if file_name[j] >= '0' && file_name[j] <= '9' {\n              \
    \      count++\n                }\n            }\n            if count > 3 {\n\
    \                return \"No\"\n            }\n            break\n        }\n\
    \    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpb6l5j61w_test.go:98: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpb6l5j61w_test.go:98: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10 (0.00s)\n  \
    \      tmpb6l5j61w_test.go:98: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__16\
    \ (0.00s)\n        tmpb6l5j61w_test.go:98: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__17 (0.00s)\n        tmpb6l5j61w_test.go:98: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18 (0.00s)\n  \
    \      tmpb6l5j61w_test.go:98: expected 'Yes', got 'No'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    res := \"No\"\n    if len(file_name)\
    \ > 3 {\n        return res\n    }\n    return res\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpssqpyjmy_test.go:68: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpssqpyjmy_test.go:68: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpssqpyjmy_test.go:68: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpssqpyjmy_test.go:68: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpssqpyjmy_test.go:68: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpssqpyjmy_test.go:68: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpssqpyjmy_test.go:68: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here!\n\
    \    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmp5pmuvtcg_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp5pmuvtcg_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmp5pmuvtcg_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmp5pmuvtcg_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmp5pmuvtcg_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmp5pmuvtcg_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmp5pmuvtcg_test.go:65: expected 'No', got 'Yes'\n "
  timestamp: 1660075428
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    count_digits := 0\n   \
    \ count_dots := 0\n    count_letters := 0\n    file_parts := make([]string, 2)\n\
    \    dot_found := false\n    for i := 0; i < len(file_name); i++ {\n        switch\
    \ {\n        case file_name[i] >= '0' && file_name[i] <= '9':\n            count_digits++\n\
    \        case file_name[i] == '.':\n            count_dots++\n            dot_found\
    \ = true\n        case (file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z'):\n            count_letters++\n        }\n  \
    \      if dot_found {\n            file_parts[1] += string(file_name[i])\n   \
    \     } else {\n            file_parts[0] += string(file_name[i])\n        }\n\
    \    }\n    if count_digits > 3 || count_dots != 1 || len(file_parts[0]) == 0\
    \ || count_letters == 0 {\n        return \"No\"\n    }\n    fmt.Println(file_parts)\n\
    \    switch file_parts[1] {\n    case \".txt\", \".exe\", \".dll\":\n        return\
    \ \"Yes\"\n    default:\n        return \"No\"\n    }\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[example .txt]\n[1example .dll]\n[s1sdf3 .asd]\n[K .dll]\n[MY16FILE3 .exe]\n\
    [_Y .txt]\n[?aREYA .exe]\n[/this_is_valid .dll]\n[this_is_valid .wow]\n[this_is_valid\
    \ .txt]\n[this_is_valid .txtexe]\n[#this2_i4s_5valid .ten]\n[@this1_is6_valid\
    \ .exe]\n[I563_No .exe]\n[Is3youfault .txt]\n[no_one#knows .dll]\n[s .]\n--- FAIL:\
    \ TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1 (0.00s)\n\
    \        tmpp6p4uuyt_test.go:94: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpp6p4uuyt_test.go:94: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpp6p4uuyt_test.go:94: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpp6p4uuyt_test.go:94: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpp6p4uuyt_test.go:94: expected 'No', got 'Yes'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075428
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    digits_regexp := \"[0-9]{1,3}\"\
    \n    ext_regexp := \"(txt|exe|dll)\"\n    file_name_regexp := fmt.Sprintf(\"\
    ^[a-zA-Z][^.]{1,}\\\\.%s$\", ext_regexp)\n    fmt.Println(file_name_regexp)\n\
    \    // fmt.Println(digits_regexp)\n    // fmt.Println(ext_regexp)\n    return\
    \ \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9ziqf7u_test.go:23:5: digits_regexp declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    //Your code goes here!\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp586oreza_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075428
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    valid_ext := []string{\"\
    txt\", \"exe\", \"dll\"}\n    num_count := 0\n    dot_count := 0\n    var has_valid_ext\
    \ bool = false\n    var has_valid_pre_ext bool = false\n    var has_valid_num_count\
    \ bool = false\n    var has_valid_dot_count bool = false\n    var has_valid_first_char\
    \ bool = false\n    if len(file_name) == 0 {\n        return \"No\"\n    }\n \
    \   for i, v := range file_name {\n        switch {\n        case v >= '0' &&\
    \ v <= '9':\n            num_count += 1\n        case v == '.':\n            dot_count\
    \ += 1\n        case v >= 'a' && v <= 'z':\n            has_valid_first_char =\
    \ true\n        case v >= 'A' && v <= 'Z':\n            has_valid_first_char =\
    \ true\n        }\n        if v == '.' {\n            for _, ext := range valid_ext\
    \ {\n                if file_name[i+1:] == ext {\n                    has_valid_ext\
    \ = true\n                }\n            }\n            if i == 0 {\n        \
    \        has_valid_pre_ext = false\n            } else {\n                has_valid_pre_ext\
    \ = true\n            }\n        }\n    }\n    if num_count <= 3 {\n        has_valid_num_count\
    \ = true\n    }\n    if dot_count == 1 {\n        has_valid_dot_count = true\n\
    \    }\n    if has_valid_ext && has_valid_pre_ext && has_valid_num_count && has_valid_dot_count\
    \ && has_valid_first_char {\n        return \"Yes\"\n    }\n    return \"No\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpzz8c4yce_test.go:108: expected 'No', got 'Yes'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__6 (0.00s)\n        tmpzz8c4yce_test.go:108:\
    \ expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n\
    \        tmpzz8c4yce_test.go:108: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpzz8c4yce_test.go:108: expected 'No', got 'Yes'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmpzz8c4yce_test.go:108:\
    \ expected 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    digitCount := 0\n    dotCount\
    \ := 0\n    alphanumCount := 0\n    for _, c := range file_name {\n        digitCount\
    \ += int(c >= '0' && c <= '9')\n        dotCount += int(c == '.')\n        alphanumCount\
    \ += int(c == '.' || c == '_' || (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z')\
    \ || (c >= 'A' && c <= 'Z'))\n    }\n    if digitCount > 3 || dotCount != 1 ||\
    \ len(file_name) == alphanumCount {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoamatr4i_test.go:27:27: cannot convert c >= ''0'' && c <= ''9'' (untyped
    bool value) to type int

    /tmp/tmpoamatr4i_test.go:28:25: cannot convert c == ''.'' (untyped bool value)
    to type int

    /tmp/tmpoamatr4i_test.go:29:30: cannot convert c == ''.'' || c == ''_'' || (c
    >= ''0'' && c <= ''9'') || (c >= ''a'' && c <= ''z'') || (c >= ''A'' && c <= ''Z'')
    (untyped bool value) to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Your code here.\n  \
    \  return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpr2x6bcb3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpr2x6bcb3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpr2x6bcb3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpr2x6bcb3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpr2x6bcb3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpr2x6bcb3_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpr2x6bcb3_test.go:65: expected 'No', got 'Yes'\n "
  timestamp: 1660075429
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // for i, ch := range file_name\
    \ {\n    //     fmt.Println(i, ch)\n    // }\n    fmt.Println(len(file_name))\n\
    \    if len(file_name) > 10 {\n        return \"No\"\n    }\n    digit_count :=\
    \ 0\n    for _, ch := range file_name {\n        if ch >= '0' && ch <= '9' {\n\
    \            digit_count++\n        }\n    }\n    if digit_count > 3 {\n     \
    \   return \"No\"\n    }\n    dot_count := 0\n    for _, ch := range file_name\
    \ {\n        if ch == '.' {\n            dot_count++\n        }\n    }\n    if\
    \ dot_count != 1 {\n        return \"No\"\n    }\n    if !(file_name[len(file_name)-4:]\
    \ == \".txt\" || file_name[len(file_name)-4:] == \".exe\" || file_name[len(file_name)-4:]\
    \ == \".dll\") {\n        return \"No\"\n    }\n    if file_name[0] >= '0' &&\
    \ file_name[0] <= '9' {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\
    \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "11\n12\n10\n5\n13\n15\n6\n10\n18\n17\n17\n20\n21\n20\n25\n11\n11\n15\n\
    16\n14\n14\n10\n8\n16\n4\n2\n--- FAIL: TestFile_Name_Check (0.00s)\npanic: runtime\
    \ error: slice bounds out of range [-2:] [recovered]\n\tpanic: runtime error:\
    \ slice bounds out of range [-2:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.file_name_check({0x51e23a, 0x2})\n\t/tmp/tmp2zpotqy7_test.go:48\
    \ +0x1eb\ncommand-line-arguments_test.TestFile_Name_Check(0xc0001924e0?)\n\t/tmp/tmp2zpotqy7_test.go:89\
    \ +0x47b\ntesting.tRunner(0xc0001924e0, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n\tvar result string = \"No\"\
    \n\tvar digit_count, dot_count int = 0, 0\n\tvar substr_1, substr_2 string = \"\
    \", \"\"\n\tvar alphabet string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\tvar substr_2_list []string = []string{\"txt\", \"exe\", \"dll\"}\n\tvar substr_2_valid\
    \ bool = false\n\n\t// check whether there are more than three digits in the file\
    \ name\n\tfor i := 0; i < len(file_name); i++ {\n\t\tif digit_count > 3 {\n\t\t\
    \tbreak\n\t\t}\n\n\t\tif file_name[i] >= '0' && file_name[i] <= '9' {\n\t\t\t\
    digit_count++\n\t\t}\n\t}\n\n\t// check whether the file name contains exactly\
    \ one dot\n\tfor i := 0; i < len(file_name); i++ {\n\t\tif file_name[i] == '.'\
    \ {\n\t\t\tdot_count++\n\t\t}\n\t}\n\n\t// check the substring before the dot\n\
    \tfor i := 0; i < len(file_name); i++ {\n\t\tif file_name[i] == '.' {\n\t\t\t\
    if len(substr_1) == 0 {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tfor j := 0; j < len(alphabet);\
    \ j++ {\n\t\t\t\tif substr_1[0] == alphabet[j] {\n\t\t\t\t\tgoto OUT\n\t\t\t\t\
    }\n\t\t\t}\n\n\t\t\tbreak\n\t\t}\n\n\t\tsubstr_1 += string(file_name[i])\n\t}\n\
    \nOUT:\n\t// check the substring after the dot\n\tfor i := len(file_name) - 1;\
    \ i >= 0; i-- {\n\t\tif file_name[i] == '.' {\n\t\t\tfor j := 0; j < len(substr_2_list);\
    \ j++ {\n\t\t\t\tif substr_2 == substr_2_list[j] {\n\t\t\t\t\tsub\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9u4fz2rd_test.go:74:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075428
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    dot_idx := -1\n    dot_count\
    \ := 0\n    digit_count := 0\n    for i := 0; i < len(file_name); i++ {\n    \
    \    if file_name[i] == '.' {\n            dot_idx = i\n            dot_count++\n\
    \        } else if file_name[i] >= '0' && file_name[i] <= '9' {\n            digit_count++\n\
    \        }\n    }\n    if digit_count > 3 || dot_count != 1 || dot_idx == 0 ||\
    \ dot_idx == len(file_name) - 1 {\n        return \"No\"\n    }\n    ext := file_name[dot_idx\
    \ + 1:]\n    var valid bool\n    if ext == \"txt\" || ext == \"exe\" || ext ==\
    \ \"dll\" {\n        valid = true\n    } else {\n        valid = false\n    }\n\
    \    if file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0]\
    \ <= 'Z' {\n        if valid {\n            return \"Yes\"\n        }\n    }\n\
    \    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    count := 0\n    for _,\
    \ v := range file_name {\n        if v >= '0' && v <= '9' {\n            count++\n\
    \        }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n    dot_index\
    \ := -1\n    for i, v := range file_name {\n        if v == '.' {\n          \
    \  dot_index = i\n            break\n        }\n    }\n    if dot_index == -1\
    \ {\n        return \"No\"\n    }\n    if dot_index == 0 {\n        return \"\
    No\"\n    }\n    if dot_index == len(file_name) - 1 {\n        return \"No\"\n\
    \    }\n    if (file_name[0] < 'a' || file_name[0] > 'z') && (file_name[0] < 'A'\
    \ || file_name[0] > 'Z') {\n        return \"No\"\n    }\n    if file_name[dot_index\
    \ + 1:] != \"txt\" && file_name[dot_index + 1:] != \"exe\" && file_name[dot_index\
    \ + 1:] != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Add your code\
    \ here.\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpfltge2jx_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpfltge2jx_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpfltge2jx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpfltge2jx_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpfltge2jx_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpfltge2jx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpfltge2jx_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpfltge2jx_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpfltge2jx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpfltge2jx_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpfltge2jx_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpfltge2jx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpfltge2jx_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpfltge2jx_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpfltge2jx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpfltge2jx_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpfltge2jx_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpfltge2jx_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075430
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 1 {\n\
    \        return \"No\"\n    }\n    dot_index := -1\n    dot_count := 0\n    has_digit\
    \ := false\n    for i, s := range file_name {\n        if s == '.' {\n       \
    \     dot_index = i\n            dot_count++\n        }\n        if s >= '0' &&\
    \ s <= '9' {\n            has_digit = true\n        }\n    }\n    if dot_count\
    \ != 1 {\n        return \"No\"\n    }\n    if dot_index < 1 {\n        return\
    \ \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0] > 'z' || file_name[0]\
    \ < 'A' || file_name[0] > 'Z' {\n        return \"No\"\n    }\n    if dot_index\
    \ + 1 >= len(file_name) {\n        return \"No\"\n    }\n    if has_digit && dot_index\
    \ + 1 >= len(file_name) - 3 {\n        return \"No\"\n    }\n    ok := false\n\
    \    for _, ext := range []string{ \"txt\", \"exe\", \"dll\" } {\n        if file_name[dot_index\
    \ + 1:] == ext {\n            ok = true\n            break\n        }\n    }\n\
    \    if !ok {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmphcn_azuo_test.go:104: expected 'Yes', got 'No'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n        tmphcn_azuo_test.go:104:\
    \ expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n\
    \        tmphcn_azuo_test.go:104: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmphcn_azuo_test.go:104: expected 'Yes', got 'No'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__16 (0.00s)\n        tmphcn_azuo_test.go:104:\
    \ expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n\
    \        tmphcn_azuo_test.go:104: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmphcn_azuo_test.go:104: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"No\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075267
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var (\n        // How many\
    \ dots\n        dot_count int = 0\n        // The position of the dot\n      \
    \  dot_index int = -1\n        // How many numbers\n        num_count int = 0\n\
    \        // The suffix of the file\n        suffix string\n    )\n    for idx,\
    \ ch := range file_name {\n        if ch == '.' {\n            dot_count++\n \
    \           dot_index = idx\n        }\n        if ch >= '0' && ch <= '9' {\n\
    \            num_count++\n        }\n    }\n    if dot_count != 1 || num_count\
    \ > 3 {\n        return \"No\"\n    }\n    if dot_index == 0 || dot_index == len(file_name)\
    \ - 1 {\n        return \"No\"\n    }\n    if dot_index == 1 && (file_name[0]\
    \ < 'a' || file_name[0] > 'z') && (file_name[0] < 'A' || file_name[0] > 'Z') {\n\
    \        return \"No\"\n    }\n    suffix = file_name[dot_index + 1:]\n    if\
    \ suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmptupscele_test.go:96: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__6 (0.00s)\n        tmptupscele_test.go:96: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n   \
    \     tmptupscele_test.go:96: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmptupscele_test.go:96: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmptupscele_test.go:96: expected\
    \ 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) == 0\
    \ {\n        return \"No\"\n    }\n    var is_valid = true\n    var num_dots =\
    \ 0\n    var num_digits = 0\n    var has_leading_letter = false\n    var has_valid_extension\
    \ = false\n    for _, char := range file_name {\n        switch {\n        case\
    \ char >= 'a' && char <= 'z':\n            has_leading_letter = true\n       \
    \ case char >= 'A' && char <= 'Z':\n            has_leading_letter = true\n  \
    \      case char >= '0' && char <= '9':\n            num_digits++\n        case\
    \ char == '.':\n            num_dots++\n        default:\n            is_valid\
    \ = false\n        }\n    }\n    if num_dots != 1 {\n        is_valid = false\n\
    \    }\n    if num_digits > 3 {\n        is_valid = false\n    }\n    if !has_leading_letter\
    \ {\n        is_valid = false\n    }\n    extension := file_name[len(file_name)-3:]\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        has_valid_extension = true\n    }\n    if !has_valid_extension {\n  \
    \      is_valid = false\n    }\n    if is_valid {\n        return \"Yes\"\n  \
    \  }\n    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-1:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.file_name_check({0x51e23a, 0x2})\n\t/tmp/tmp7k6q8ex4_test.go:54\
    \ +0x1a5\ncommand-line-arguments_test.TestFile_Name_Check(0xc0001924e0?)\n\t/tmp/tmp7k6q8ex4_test.go:99\
    \ +0x47b\ntesting.tRunner(0xc0001924e0, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 4 {\n\
    \        return \"No\"\n    }\n    if file_name[0] < 'a' || file_name[0] > 'z'\
    \ {\n        return \"No\"\n    }\n    if file_name[len(file_name) - 4] != '.'\
    \ {\n        return \"No\"\n    }\n    if file_name[len(file_name) - 3] != 't'\
    \ || file_name[len(file_name) - 2] != 'x' || file_name[len(file_name) - 1] !=\
    \ 't' {\n        return \"No\"\n    }\n    for i := 1; i < len(file_name) - 4;\
    \ i++ {\n        if file_name[i] < 'a' || file_name[i] > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpnnucxseu_test.go:81: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpnnucxseu_test.go:81: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10 (0.00s)\n  \
    \      tmpnnucxseu_test.go:81: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__16\
    \ (0.00s)\n        tmpnnucxseu_test.go:81: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__17 (0.00s)\n        tmpnnucxseu_test.go:81: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18 (0.00s)\n  \
    \      tmpnnucxseu_test.go:81: expected 'Yes', got 'No'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075430
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    const EXE = 0\n    const\
    \ TXT = 1\n    const DLL = 2\n    const UNKNOWN = -1\n    fmt.Println(file_name)\n\
    \    file_name_len := len(file_name)\n    fmt.Println(file_name_len)\n    count_of_digit\
    \ := 0\n    dot_index := -1\n    file_type := UNKNOWN\n    for index, char :=\
    \ range file_name {\n        switch {\n        case char >= '0' && char <= '9':\n\
    \            count_of_digit++\n            if count_of_digit > 3 {\n         \
    \       return \"No\"\n            }\n        case char == '.':\n            dot_index\
    \ = index\n        case (char >= 'a' && char <= 'z') || (char >= 'A' && char <=\
    \ 'Z'):\n            if dot_index == -1 {\n                continue\n        \
    \    }\n            file_type = txte_or_exe_or_dll(file_name[dot_index + 1: file_name_len])\n\
    \            if file_type == UNKNOWN {\n                return \"No\"\n      \
    \      }\n        default:\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowp5ea31_test.go:46:25: undefined: txte_or_exe_or_dll

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // YOUR CODE HERE\n\n \
    \   return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmp1i04h8zz_test.go:66: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp1i04h8zz_test.go:66: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmp1i04h8zz_test.go:66: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmp1i04h8zz_test.go:66: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmp1i04h8zz_test.go:66: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmp1i04h8zz_test.go:66: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmp1i04h8zz_test.go:66: expected 'No', got 'Yes'\n "
  timestamp: 1660075430
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    number_of_digits := 0\n\
    \    number_of_dots := 0\n    for _, char := range file_name {\n        if char\
    \ >= '0' && char <= '9' {\n            number_of_digits++\n        } else if char\
    \ == '.' {\n            number_of_dots++\n        }\n    }\n    if number_of_digits\
    \ > 3 || number_of_dots != 1 {\n        return \"No\"\n    }\n\n    index_of_dot\
    \ := 0\n    for i, char := range file_name {\n        if char == '.' {\n     \
    \       index_of_dot = i\n            break\n        }\n    }\n    sub_string_before_dot\
    \ := file_name[:index_of_dot]\n    if len(sub_string_before_dot) == 0 {\n    \
    \    return \"No\"\n    }\n    if sub_string_before_dot[0] < 'a' || sub_string_before_dot[0]\
    \ > 'z' {\n        if sub_string_before_dot[0] < 'A' || sub_string_before_dot[0]\
    \ > 'Z' {\n            return \"No\"\n        }\n    }\n\n    sub_string_after_dot\
    \ := file_name[index_of_dot+1:]\n    if sub_string_after_dot != \"txt\" && sub_string_after_dot\
    \ != \"exe\" && sub_string_after_dot != \"dll\" {\n        return \"No\"\n   \
    \ }\n\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n\treturn \"No\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp736rvifq_test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmp736rvifq_test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmp736rvifq_test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmp736rvifq_test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp736rvifq_test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmp736rvifq_test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmp736rvifq_test.go:64: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075426
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: implement the\
    \ function\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n \
    \ candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpzcje6b1k_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpzcje6b1k_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpzcje6b1k_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpzcje6b1k_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpzcje6b1k_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpzcje6b1k_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpzcje6b1k_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpzcje6b1k_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpzcje6b1k_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpzcje6b1k_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpzcje6b1k_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpzcje6b1k_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpzcje6b1k_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpzcje6b1k_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpzcje6b1k_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpzcje6b1k_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpzcje6b1k_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpzcje6b1k_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) <= 4\
    \ {\n        return \"No\"\n    }\n    // first char must be a letter\n    if\
    \ !(file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0]\
    \ <= 'Z') {\n        return \"No\"\n    }\n    // 1 dot\n    if strings.Count(file_name,\
    \ \".\") != 1 {\n        return \"No\"\n    }\n    // at most 3 numbers\n    if\
    \ strings.Count(file_name, \"0\") + strings.Count(file_name, \"1\") + strings.Count(file_name,\
    \ \"2\") + strings.Count(file_name, \"3\") + strings.Count(file_name, \"4\") +\
    \ strings.Count(file_name, \"5\") + strings.Count(file_name, \"6\") + strings.Count(file_name,\
    \ \"7\") + strings.Count(file_name, \"8\") + strings.Count(file_name, \"9\") >\
    \ 3 {\n        return \"No\"\n    }\n    // substring after . can only be .txt\
    \ .exe .dll\n    if !(strings.HasSuffix(file_name, \".txt\") || strings.HasSuffix(file_name,\
    \ \".exe\") || strings.HasSuffix(file_name, \".dll\")) {\n        return \"No\"\
    \n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n \
    \ candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk0zu4f7p_test.go:31:8: undefined: strings

    /tmp/tmpk0zu4f7p_test.go:35:8: undefined: strings

    /tmp/tmpk0zu4f7p_test.go:39:10: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Define a variable to\
    \ store the number of digits\n    var digit_counter int\n    // Define a variable\
    \ to store the number of dots\n    var dot_counter int\n    // Define a variable\
    \ to store the start index of the file's name\n    var file_name_start_index int\n\
    \    // Define a variable to store the file extension\n    var file_extension\
    \ string\n    // Iterate through the file name\n    for i := 0; i < len(file_name);\
    \ i++ {\n        // If the character is a letter from the latin alphabet, set\
    \ the start index of the file's name to the current index\n        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z')\
    \ {\n            file_name_start_index = i\n            break\n        }\n   \
    \ }\n    // Iterate through the substring of the file name starting from the start\
    \ index\n    for i := file_name_start_index; i < len(file_name); i++ {\n     \
    \   // If the character is a digit, increase the digit counter\n        if file_name[i]\
    \ >= '0' && file_name[i] <= '9' {\n            digit_counter++\n        }\n  \
    \      // If the character is a dot, increase the dot counter\n        if file_name[i]\
    \ == '.' {\n            dot_counter++\n        }\n    }\n    // If the dot counter\
    \ is more than 1, return 'No'\n    if dot_counter > 1 {\n        return \"No\"\
    \n    }\n    // If the digit counter is more than 3, return 'No'\n    if digit_counter\
    \ > 3 {\n        return \"No\"\n    }\n    // If the file's name does not start\
    \ with a letter from the latin alphabet, return 'No'\n    if file_name[file_name_start_index]\
    \ < 'a' || file_name[file_name_start_index] > 'z' {\n        return \"No\"\n \
    \   }\n    // Loop through the file name in order to find the dot\n    for i :=\
    \ 0; i < len(file_name); i++ {\n\nfunc TestFile_Name_Check(t *testing.T) {\n \
    \ candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpumf71p4h_test.go:65:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075429
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var dot_pos, length int\
    \ = -1, len(file_name)\n    for i := 0; i < length; i++ {\n        if file_name[i]\
    \ == '.' {\n            dot_pos = i\n            break\n        }\n    }\n   \
    \ if dot_pos == -1 {\n        return \"No\"\n    }\n    var before_dot, after_dot\
    \ string = file_name[:dot_pos], file_name[dot_pos+1:]\n    for i := 0; i < len(before_dot);\
    \ i++ {\n        if before_dot[i] >= '0' && before_dot[i] <= '9' {\n         \
    \   return \"No\"\n        }\n    }\n    if after_dot != \"txt\" && after_dot\
    \ != \"exe\" && after_dot != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__4\
    \ (0.00s)\n        tmpaq7x2xd7_test.go:83: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__6 (0.00s)\n        tmpaq7x2xd7_test.go:83: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n   \
    \     tmpaq7x2xd7_test.go:83: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmpaq7x2xd7_test.go:83: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpaq7x2xd7_test.go:83: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpaq7x2xd7_test.go:83: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__24\
    \ (0.00s)\n        tmpaq7x2xd7_test.go:83: expected 'No', got 'Yes'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 4 {\n\
    \        return \"No\"\n    }\n    invalid_count := 0\n    for i := 0; i < len(file_name);\
    \ i++ {\n        if file_name[i] >= '0' && file_name[i] <= '9' {\n           \
    \ invalid_count++\n        }\n    }\n    if invalid_count > 3 {\n        return\
    \ \"No\"\n    }\n    i := 0\n    for ; i < len(file_name); i++ {\n        if file_name[i]\
    \ == '.' {\n            break\n        }\n    }\n    if i + 1 == len(file_name)\
    \ {\n        return \"No\"\n    }\n    ext := file_name[i + 1:]\n    if ext !=\
    \ \"txt\" && ext != \"exe\" && ext != \"dll\" {\n        return \"No\"\n    }\n\
    \    if i == 0 {\n        return \"No\"\n    }\n    for j := 0; j < i; j++ {\n\
    \        if file_name[j] < 'a' || file_name[j] > 'z' && file_name[j] < 'A' ||\
    \ file_name[j] > 'Z' {\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [9:8] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [9:8]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.file_name_check({0x51ed43?, 0x0?})\n\t/tmp/tmpnqv__ld2_test.go:44\
    \ +0x18a\ncommand-line-arguments_test.TestFile_Name_Check(0xc0001924e0?)\n\t/tmp/tmpnqv__ld2_test.go:88\
    \ +0x3f7\ntesting.tRunner(0xc0001924e0, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // WRITE YOUR CODE HERE\n\
    \    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpsynadb90_test.go:65: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpsynadb90_test.go:65: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpsynadb90_test.go:65: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpsynadb90_test.go:65: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpsynadb90_test.go:65: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpsynadb90_test.go:65: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpsynadb90_test.go:65: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here!\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmporuu6gce_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmporuu6gce_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmporuu6gce_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075425
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Please implement\
    \ the function.\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4s4dxehx_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4s4dxehx_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4s4dxehx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4s4dxehx_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4s4dxehx_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4s4dxehx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4s4dxehx_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4s4dxehx_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4s4dxehx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4s4dxehx_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4s4dxehx_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4s4dxehx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4s4dxehx_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4s4dxehx_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4s4dxehx_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4s4dxehx_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4s4dxehx_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4s4dxehx_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: implement me\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp4s_g10rj_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp4s_g10rj_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp4s_g10rj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp4s_g10rj_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp4s_g10rj_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp4s_g10rj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp4s_g10rj_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp4s_g10rj_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp4s_g10rj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp4s_g10rj_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp4s_g10rj_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp4s_g10rj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp4s_g10rj_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp4s_g10rj_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp4s_g10rj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp4s_g10rj_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp4s_g10rj_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp4s_g10rj_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    const no = \"No\"\n   \
    \ const yes = \"Yes\"\n    num_counter := 0\n    dot_counter := 0\n    dot_index\
    \ := 0\n    for i, v := range file_name {\n        if v >= '0' && v <= '9' {\n\
    \            num_counter += 1\n        }\n        if v == '.' {\n            dot_counter\
    \ += 1\n            dot_index = i\n        }\n    }\n    if num_counter > 3 {\n\
    \        return no\n    }\n    if dot_counter != 1 {\n        return no\n    }\n\
    \    if dot_index == 0 {\n        return no\n    }\n    if dot_index >= len(file_name)\
    \ - 1 {\n        return no\n    }\n    substr_1 := file_name[:dot_index]\n   \
    \ substr_2 := file_name[dot_index+1:]\n    if substr_1 == \"\" {\n        return\
    \ no\n    }\n    v := substr_1[0]\n    if v < 'a' || v > 'z' {\n        if v <\
    \ 'A' || v > 'Z' {\n            return no\n        }\n    }\n    if substr_2 !=\
    \ \"txt\" && substr_2 != \"exe\" && substr_2 != \"dll\" {\n        return no\n\
    \    }\n    return yes\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075431
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    count := 0\n    for _,\
    \ ch := range file_name {\n        if ch >= '0' && ch <= '9' {\n            count++\n\
    \        }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n    if _,\
    \ ok := strings.Split(file_name, \".\"); !ok {\n        return \"No\"\n    }\n\
    \    if _, ok := strings.Split(file_name, \".\"); !ok {\n        return \"No\"\
    \n    }\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9rprgx5b_test.go:32:17: undefined: strings

    /tmp/tmp9rprgx5b_test.go:35:17: undefined: strings

    /tmp/tmp9rprgx5b_test.go:38:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075430
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"No\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__3 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4 (0.00s)\n   \
    \     tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__10\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpts2c9mh__test.go:64: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n  \
    \      tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00s)\n        tmpts2c9mh__test.go:64: expected 'Yes', got 'No'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075267
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Create your function\
    \ to pass the test here.\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpt1xy8xsj_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpt1xy8xsj_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpt1xy8xsj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpt1xy8xsj_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpt1xy8xsj_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpt1xy8xsj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpt1xy8xsj_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpt1xy8xsj_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpt1xy8xsj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpt1xy8xsj_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpt1xy8xsj_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpt1xy8xsj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpt1xy8xsj_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpt1xy8xsj_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpt1xy8xsj_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpt1xy8xsj_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpt1xy8xsj_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpt1xy8xsj_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Implement me\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp32vm349r_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp32vm349r_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp32vm349r_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp32vm349r_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp32vm349r_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp32vm349r_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp32vm349r_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp32vm349r_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp32vm349r_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp32vm349r_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp32vm349r_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp32vm349r_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp32vm349r_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp32vm349r_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp32vm349r_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp32vm349r_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp32vm349r_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp32vm349r_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // write your code here\n\
    \    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpsgr4xa4j_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpsgr4xa4j_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpsgr4xa4j_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075422
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) == 0\
    \ {\n        return \"No\"\n    }\n    file_name_split := strings.Split(file_name,\
    \ \".\")\n    if len(file_name_split) > 2 {\n        return \"No\"\n    } else\
    \ if len(file_name_split) == 1 {\n        return \"No\"\n    }\n    return \"\
    Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgdbepdd5_test.go:26:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075431
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    if len(file_name) < 4 {\n\
    \        return \"No\"\n    }\n    dot_pos := -1\n    digit_count := 0\n    for\
    \ idx, char := range file_name {\n        if char == '.' {\n            dot_pos\
    \ = idx\n            break\n        }\n        if char >= '0' && char <= '9' {\n\
    \            digit_count++\n        }\n    }\n    if dot_pos == -1 || digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    first_part := file_name[:dot_pos]\n\
    \    last_part := file_name[dot_pos+1:]\n    if len(first_part) == 0 || len(last_part)\
    \ == 0 {\n        return \"No\"\n    }\n    if !(first_part[0] >= 'a' && first_part[0]\
    \ <= 'z' ||\n        first_part[0] >= 'A' && first_part[0] <= 'Z') {\n       \
    \ return \"No\"\n    }\n    if last_part != \"txt\" && last_part != \"exe\" &&\
    \ last_part != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\
    \nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    /*\n    // My Solution:\n\
    \    s := \"\"\n    count := 0\n    if strings.HasPrefix(file_name, \".\") ||\
    \ strings.HasSuffix(file_name, \".\") {\n        s = \"No\"\n    } else {\n  \
    \      for _, elem := range file_name {\n            if elem >= '0' && elem <=\
    \ '9' {\n                count++\n            }\n        }\n        if count >\
    \ 3 {\n            s = \"No\"\n        } else {\n            s = \"Yes\"\n   \
    \     }\n    }\n    return s\n    */\n    // Tests Solution:\n    if len(file_name)\
    \ < 4 {\n        return \"No\"\n    }\n\n    for i, c := range file_name {\n \
    \       if c == '.' {\n            if i == 0 || i == len(file_name)-1 {\n    \
    \            return \"No\"\n            }\n            suffix := file_name[i+1:]\n\
    \            if suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\" {\n\
    \                return \"No\"\n            }\n            digits := 0\n     \
    \       for _, c := range file_name[:i] {\n                if c >= '0' && c <=\
    \ '9' {\n                    digits++\n                }\n            }\n    \
    \        if digits > 3 {\n                return \"No\"\n            }\n     \
    \       return \"Yes\"\n        }\n    }\n    return \"No\"\n}\n\nfunc TestFile_Name_Check(t\
    \ *testing.T) {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1example.dll\"), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"\
    ), expected: \"No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\"\
    \ },\n     { actual: candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n    \
    \ { actual: candidate(\"His12FILE94.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n   \
    \  { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"Is3youfault.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final..txt\"), expected: \"No\" },\n     { actual: candidate(\"\
    final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmplzn8iw5v_test.go:110: expected 'No', got 'Yes'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__6 (0.00s)\n        tmplzn8iw5v_test.go:110:\
    \ expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n\
    \        tmplzn8iw5v_test.go:110: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmplzn8iw5v_test.go:110: expected 'No', got 'Yes'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__13 (0.00s)\n        tmplzn8iw5v_test.go:110:\
    \ expected 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    digit := 0\n    for _,\
    \ ch := range file_name {\n        if ch >= '0' && ch <= '9' {\n            digit++\n\
    \        }\n    }\n    if digit > 3 {\n        return \"No\"\n    }\n    dot :=\
    \ false\n    for _, ch := range file_name {\n        if ch == '.' {\n        \
    \    dot = true\n            break\n        }\n    }\n    if !dot {\n        return\
    \ \"No\"\n    }\n    pos := -1\n    for i, ch := range file_name {\n        if\
    \ ch == '.' {\n            pos = i\n            break\n        }\n    }\n    if\
    \ pos <= 0 {\n        return \"No\"\n    }\n    subs := file_name[:pos]\n    if\
    \ len(subs) == 0 {\n        return \"No\"\n    }\n    if !((subs[0] >= 'a' &&\
    \ subs[0] <= 'z') || (subs[0] >= 'A' && subs[0] <= 'Z')) {\n        return \"\
    No\"\n    }\n    subs = file_name[pos+1:]\n    if subs != \"txt\" && subs != \"\
    exe\" && subs != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075431
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // YOUR CODE GOES HERE\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ujr4_fc_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075431
- exit_code: 0
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    check_result := \"Yes\"\
    \n    dot_count := 0\n    dot_index := 0\n    num_count := 0\n    is_pre_part_valid\
    \ := false\n    is_post_part_valid := false\n    if len(file_name) < 4 {\n   \
    \     check_result = \"No\"\n    } else {\n        for i, ch := range file_name\
    \ {\n            if ch == '.' {\n                dot_count++\n               \
    \ dot_index = i\n            } else if (ch >= '0') && (ch <= '9') {\n        \
    \        num_count++\n            }\n        }\n        if (dot_count != 1) ||\
    \ (num_count > 3) {\n            check_result = \"No\"\n        } else {\n   \
    \         pre_part := file_name[:dot_index]\n            post_part := file_name[dot_index+1:]\n\
    \            if (len(pre_part) < 1) || (len(post_part) < 3) {\n              \
    \  check_result = \"No\"\n            } else {\n                if (pre_part[0]\
    \ >= 'a') && (pre_part[0] <= 'z') {\n                    is_pre_part_valid = true\n\
    \                } else if (pre_part[0] >= 'A') && (pre_part[0] <= 'Z') {\n  \
    \                  is_pre_part_valid = true\n                }\n             \
    \   if (post_part == \"txt\") || (post_part == \"exe\") || (post_part == \"dll\"\
    ) {\n                    is_post_part_valid = true\n                }\n      \
    \          if !is_pre_part_valid || !is_post_part_valid {\n                  \
    \  check_result = \"No\"\n                }\n            }\n        }\n    }\n\
    \    return check_result\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    count_of_digits := 0\n\
    \    file_name_list := []rune(file_name)\n    has_dot := false\n    count_of_dots\
    \ := 0\n    sub_str_before_dot := \"\"\n    sub_str_after_dot := \"\"\n    //\
    \ check number of digits\n    for i := 0; i < len(file_name_list); i++ {\n   \
    \     if file_name_list[i] >= '0' && file_name_list[i] <= '9' {\n            count_of_digits++\n\
    \        }\n    }\n    if count_of_digits > 3 {\n        return \"No\"\n    }\n\
    \    // check if the string has exactly one dot\n    for i := 0; i < len(file_name_list);\
    \ i++ {\n        if file_name_list[i] == '.' {\n            count_of_dots++\n\
    \            has_dot = true\n        }\n    }\n    if !has_dot || count_of_dots\
    \ != 1 {\n        return \"No\"\n    }\n    // store all strings before and after\
    \ the dot\n    for i := 0; i < len(file_name_list); i++ {\n        if file_name_list[i]\
    \ == '.' {\n            sub_str_before_dot = string(file_name_list[:i])\n    \
    \        sub_str_after_dot = string(file_name_list[i+1:])\n        }\n    }\n\
    \    // check sub string before the dot\n    sub_str_before_dot_list := []rune(sub_str_before_dot)\n\
    \    for i := 0; i < len(sub_str_before_dot_list); i++ {\n        if sub_str_before_dot_list[i]\
    \ < 'a' || sub_str_before_dot_list[i] > 'z' {\n            if sub_str_before_dot_list[i]\
    \ < 'A' || sub_str_before_dot_list[i] > 'Z' {\n                return \"No\"\n\
    \            }\n        }\n    }\n    // check sub string after the dot\n    if\
    \ sub_str_after_dot\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate :=\
    \ file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzsvu4_m4_test.go:66:6: expected ''('', found TestFile_Name_Check

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075431
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Your code goes here.\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptigvdeul_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075426
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here.\n\
    }\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp026zefy8_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpgj8ewboo_test.go:64: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpgj8ewboo_test.go:64: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpgj8ewboo_test.go:64: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // Write your code here\n\
    \    var result string = \"No\"\n    var count int = 0\n    var dotPos int = -1\n\
    \    var ext []string = []string{\"txt\", \"exe\", \"dll\"}\n    var hasExt bool\
    \ = false\n    var letter bool = false\n    var dot bool = false\n    var first\
    \ byte = file_name[0]\n    if first >= 'a' && first <= 'z' || first >= 'A' &&\
    \ first <= 'Z' {\n        letter = true\n    }\n    for i := 0; i < len(file_name);\
    \ i++ {\n        if file_name[i] >= '0' && file_name[i] <= '9' {\n           \
    \ count++\n        }\n        if file_name[i] == '.' {\n            dot = true\n\
    \            dotPos = i\n        }\n    }\n    if dotPos == -1 {\n        return\
    \ result\n    }\n    var last []byte = []byte(file_name[dotPos+1:])\n    var firstCheck\
    \ []byte = []byte(file_name[:dotPos])\n    if len(firstCheck) > 0 && len(last)\
    \ > 0 {\n        for _, v := range ext {\n            if v == string(last) {\n\
    \                hasExt = true\n            }\n        }\n    }\n    if count\
    \ <= 3 && dot && letter && hasExt {\n        result = \"Yes\"\n    }\n    return\
    \ result\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmprp0u3utw_test.go:100: expected 'No', got 'Yes'\n    ---\
    \ FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n        tmprp0u3utw_test.go:100:\
    \ expected 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO\n    return \"\"\
    \n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp526yft2__test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp526yft2__test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp526yft2__test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075427
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Write code to\
    \ solve this puzzle\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T)\
    \ {\n  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpcsb6zkwi_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpcsb6zkwi_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpcsb6zkwi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpcsb6zkwi_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpcsb6zkwi_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpcsb6zkwi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpcsb6zkwi_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpcsb6zkwi_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpcsb6zkwi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpcsb6zkwi_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpcsb6zkwi_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpcsb6zkwi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpcsb6zkwi_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpcsb6zkwi_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpcsb6zkwi_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpcsb6zkwi_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpcsb6zkwi_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpcsb6zkwi_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    return \"Yes\"\n}\n\nfunc\
    \ TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmpl_23ebe7_test.go:64: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmpl_23ebe7_test.go:64: expected 'No', got 'Yes'\n "
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    var is_valid bool = true\n\
    \    var is_letter bool = false\n    var is_digit bool = false\n    var is_dot\
    \ bool = false\n    var digits_count int = 0\n    var letters_count int = 0\n\
    \    var extension string = \"\"\n    var permissible_extensions []string = []string{\"\
    txt\", \"exe\", \"dll\"}\n    for _, c := range file_name {\n        if !is_letter\
    \ && is_digit {\n            is_valid = false\n            break\n        }\n\
    \        if c >= '0' && c <= '9' {\n            is_digit = true\n            digits_count\
    \ += 1\n        } else if c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' {\n   \
    \         is_letter = true\n            letters_count += 1\n        } else if\
    \ c == '.' {\n            is_dot = true\n            extension = file_name[len(file_name)\
    \ - 3:]\n        } else {\n            is_valid = false\n            break\n \
    \       }\n    }\n    if !is_valid || digits_count > 3 || !is_dot || letters_count\
    \ == 0 {\n        return \"No\"\n    }\n    for _, e := range permissible_extensions\
    \ {\n        if e == extension {\n            return \"Yes\"\n        }\n    }\n\
    \    return \"No\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate\
    \ := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"example.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n \
    \    { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"\
    this_is_valid.wow\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"\
    No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-1:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.file_name_check({0x51e23a, 0x2})\n\t/tmp/tmpv_ld54fn_test.go:44\
    \ +0x26e\ncommand-line-arguments_test.TestFile_Name_Check(0xc0001a0340?)\n\t/tmp/tmpv_ld54fn_test.go:93\
    \ +0x47b\ntesting.tRunner(0xc0001a0340, 0x5290a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    \n    if file_name[0] >\
    \ '9' || file_name[0] < '0'{\n        return \"No\"\n    }\n\n    return \"Yes\"\
    \n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmptfs8vyag_test.go:69: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmptfs8vyag_test.go:69: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__3 (0.00s)\n   \
    \     tmptfs8vyag_test.go:69: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__4\
    \ (0.00s)\n        tmptfs8vyag_test.go:69: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmptfs8vyag_test.go:69: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__16 (0.00s)\n  \
    \      tmptfs8vyag_test.go:69: expected 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__17\
    \ (0.00s)\n        tmptfs8vyag_test.go:69: expected 'Yes', got 'No'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__18 (0.00s)\n        tmptfs8vyag_test.go:69: expected\
    \ 'Yes', got 'No'\n    --- FAIL: TestFile_Name_Check/test_num__19 (0.00s)\n  \
    \      tmptfs8vyag_test.go:69: expected 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 2
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // split the input string\
    \ at '.'\n    parts := strings.Split(file_name, \".\")\n    if len(parts) != 2\
    \ {\n        return \"No\"\n    }\n    // now process each part\n    part1 :=\
    \ parts[0]\n    part2 := parts[1]\n    // part1 must be non-empty, start with\
    \ a letter, and contain at most 3 digits\n    if len(part1) == 0 || !('a' <= part1[0]\
    \ && part1[0] <= 'z' || 'A' <= part1[0] && part1[0] <= 'Z') {\n        return\
    \ \"No\"\n    }\n    n := 0\n    for _, c := range part1 {\n        if '0' <=\
    \ c && c <= '9' {\n            n++\n        }\n    }\n    if n > 3 {\n       \
    \ return \"No\"\n    }\n    // part2 must be one of 'txt', 'exe', 'dll'\n    if\
    \ part2 != \"txt\" && part2 != \"exe\" && part2 != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n\
    \  candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb5fje81q_test.go:24:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO: Implement this\
    \ function\n    return \"\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n \
    \ candidate := file_name_check\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    example.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"1example.dll\"\
    ), expected: \"No\" },\n     { actual: candidate(\"s1sdf3.asd\"), expected: \"\
    No\" },\n     { actual: candidate(\"K.dll\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"MY16FILE3.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    His12FILE94.exe\"), expected: \"No\" },\n     { actual: candidate(\"_Y.txt\"),\
    \ expected: \"No\" },\n     { actual: candidate(\"?aREYA.exe\"), expected: \"\
    No\" },\n     { actual: candidate(\"/this_is_valid.dll\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_valid.wow\"), expected: \"No\" },\n     {\
    \ actual: candidate(\"this_is_valid.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"this_is_valid.txtexe\"), expected: \"No\" },\n     { actual: candidate(\"\
    #this2_i4s_5valid.ten\"), expected: \"No\" },\n     { actual: candidate(\"@this1_is6_valid.exe\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_12valid.6exe4.txt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"all.exe.txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"I563_No.exe\"), expected: \"Yes\" },\n   \
    \  { actual: candidate(\"Is3youfault.txt\"), expected: \"Yes\" },\n     { actual:\
    \ candidate(\"no_one#knows.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    1I563_Yes3.exe\"), expected: \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"\
    ), expected: \"No\" },\n     { actual: candidate(\"final..txt\"), expected: \"\
    No\" },\n     { actual: candidate(\"final132\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"_f4indsartal132.\"), expected: \"No\" },\n     { actual: candidate(\"\
    .txt\"), expected: \"No\" },\n     { actual: candidate(\"s.\"), expected: \"No\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmp_se32lur_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmp_se32lur_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmp_se32lur_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075114
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // TODO:\n    return \"\
    Yes\"\n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__2 (0.00s)\n        tmp0yq6cc6g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n   \
    \     tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmp0yq6cc6g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n   \
    \     tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__11 (0.00s)\n        tmp0yq6cc6g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__12 (0.00s)\n  \
    \      tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__13\
    \ (0.00s)\n        tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__14 (0.00s)\n        tmp0yq6cc6g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__15 (0.00s)\n  \
    \      tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__19\
    \ (0.00s)\n        tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__20 (0.00s)\n        tmp0yq6cc6g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__21 (0.00s)\n  \
    \      tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__22\
    \ (0.00s)\n        tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__23 (0.00s)\n        tmp0yq6cc6g_test.go:65: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__24 (0.00s)\n  \
    \      tmp0yq6cc6g_test.go:65: expected 'No', got 'Yes'\n "
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    \n    return \"\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpnj3rr0_c_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpnj3rr0_c_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpnj3rr0_c_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpnj3rr0_c_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpnj3rr0_c_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpnj3rr0_c_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpnj3rr0_c_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpnj3rr0_c_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpnj3rr0_c_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpnj3rr0_c_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpnj3rr0_c_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpnj3rr0_c_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpnj3rr0_c_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpnj3rr0_c_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpnj3rr0_c_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpnj3rr0_c_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpnj3rr0_c_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpnj3rr0_c_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    digits := 0\n    count\
    \ := 0\n    for _, letter := range file_name {\n        if letter >= '0' && letter\
    \ <= '9' {\n            digits++\n        } else if letter == '.' {\n        \
    \    count++\n        }\n    }\n    if digits > 3 || count != 1 {\n        return\
    \ \"No\"\n    }\n    for i, letter := range file_name {\n        if letter ==\
    \ '.' {\n            if i == 0 {\n                return \"No\"\n            }\n\
    \            if i == len(file_name) - 1 {\n                return \"No\"\n   \
    \         }\n            if file_name[i+1:] != \"txt\" && file_name[i+1:] != \"\
    exe\" && file_name[i+1:] != \"dll\" {\n                return \"No\"\n       \
    \     }\n            return \"Yes\"\n        }\n    }\n    return \"No\"\n}\n\n\
    func TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"example.txt\"), expected: \"Yes\" },\n\
    \     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__1\
    \ (0.00s)\n        tmp_07ynmcr_test.go:90: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__6 (0.00s)\n        tmp_07ynmcr_test.go:90: expected\
    \ 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__7 (0.00s)\n   \
    \     tmp_07ynmcr_test.go:90: expected 'No', got 'Yes'\n    --- FAIL: TestFile_Name_Check/test_num__8\
    \ (0.00s)\n        tmp_07ynmcr_test.go:90: expected 'No', got 'Yes'\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmp_07ynmcr_test.go:90: expected\
    \ 'No', got 'Yes'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075431
- exit_code: 1
  program: "package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Create a function which takes a string representing a file's name, and\
    \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    // A file's name is considered to be valid if and only if all the following conditions\
    \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n// - The file's name contains exactly one dot '.'\n// - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
    example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\
    \nfunc file_name_check(file_name string) string {\n    // ...\n    return \"\"\
    \n}\n\nfunc TestFile_Name_Check(t *testing.T) {\n  candidate := file_name_check\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"example.txt\"), expected: \"\
    Yes\" },\n     { actual: candidate(\"1example.dll\"), expected: \"No\" },\n  \
    \   { actual: candidate(\"s1sdf3.asd\"), expected: \"No\" },\n     { actual: candidate(\"\
    K.dll\"), expected: \"Yes\" },\n     { actual: candidate(\"MY16FILE3.exe\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"His12FILE94.exe\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"_Y.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"?aREYA.exe\"), expected: \"No\" },\n     { actual: candidate(\"\
    /this_is_valid.dll\"), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.wow\"\
    ), expected: \"No\" },\n     { actual: candidate(\"this_is_valid.txt\"), expected:\
    \ \"Yes\" },\n     { actual: candidate(\"this_is_valid.txtexe\"), expected: \"\
    No\" },\n     { actual: candidate(\"#this2_i4s_5valid.ten\"), expected: \"No\"\
    \ },\n     { actual: candidate(\"@this1_is6_valid.exe\"), expected: \"No\" },\n\
    \     { actual: candidate(\"this_is_12valid.6exe4.txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"all.exe.txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"I563_No.exe\"), expected: \"Yes\" },\n     { actual: candidate(\"\
    Is3youfault.txt\"), expected: \"Yes\" },\n     { actual: candidate(\"no_one#knows.dll\"\
    ), expected: \"Yes\" },\n     { actual: candidate(\"1I563_Yes3.exe\"), expected:\
    \ \"No\" },\n     { actual: candidate(\"I563_Yes3.txtt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"final..txt\"), expected: \"No\" },\n     { actual:\
    \ candidate(\"final132\"), expected: \"No\" },\n     { actual: candidate(\"_f4indsartal132.\"\
    ), expected: \"No\" },\n     { actual: candidate(\".txt\"), expected: \"No\" },\n\
    \     { actual: candidate(\"s.\"), expected: \"No\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFile_Name_Check (0.00s)\n    --- FAIL: TestFile_Name_Check/test_num__0\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__1 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__2 (0.00s)\n      \
    \  tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__3\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'Yes', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__4 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__5 (0.00s)\n     \
    \   tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__6\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__7 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__8 (0.00s)\n      \
    \  tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__9\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__10 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__11 (0.00s)\n    \
    \    tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__12\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__13 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__14 (0.00s)\n     \
    \   tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL: TestFile_Name_Check/test_num__15\
    \ (0.00s)\n        tmpse2hkhqb_test.go:65: expected 'No', got ''\n    --- FAIL:\
    \ TestFile_Name_Check/test_num__16 (0.00s)\n        tmpse2hkhqb_test.go:65: expected\
    \ 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__17 (0.00s)\n    \
    \    tmpse2hkhqb_test.go:65: expected 'Yes', got ''\n    --- FAIL: TestFile_Name_Check/test_num__18\
    \ (0.00"
  timestamp: 1660075422
