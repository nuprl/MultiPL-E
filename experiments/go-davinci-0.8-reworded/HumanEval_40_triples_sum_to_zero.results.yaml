language: go_test.go
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    m := make(map[int]int)\n    // iterate over the list and\
    \ hash each number\n    for _, v := range l {\n        fmt.Println(v)\n      \
    \  if _, ok := m[v]; ok {\n            m[v] += 1\n        } else {\n         \
    \   m[v] = 1\n        }\n    }\n    // if the list contains 0, then 0 is hashed\
    \ twice\n    // in the case that there is a 0, we decrement the counter by one\n\
    \    if _, ok := m[0]; ok {\n        m[0] -= 1\n    }\n    // if a number's negative\
    \ is a key in the hash table, then the two numbers\n    // can be used to sum\
    \ to zero\n    for k, _ := range m {\n        if _, ok := m[-k]; ok {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "1\n3\n5\n0\n1\n3\n5\n-1\n1\n3\n-2\n1\n1\n2\n3\n7\n1\n2\n5\n7\n2\n4\n-5\n\
    3\n9\n7\n1\n1\n3\n5\n-100\n100\n3\n5\n-100\n--- FAIL: TestTriples_Sum_To_Zero\
    \ (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0 (0.00s)\n       \
    \ tmpcjdjf4x3_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n \
    \   --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpcjdjf4x3_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpcjdjf4x3_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpcjdjf4x3_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpcjdjf4x3_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your solution goes here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpabmdw2lw_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpabmdw2lw_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    n := len(l)\n    for i:=0; i<n; i++ {\n        for j:=i+1;\
    \ j<n; j++ {\n            for k:=j+1; k<n; k++ {\n                sum := l[i]\
    \ + l[j] + l[k]\n                if sum == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 2 {\n        return false\n    }\n    for i\
    \ := 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n\
    \            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j]\
    \ + l[k] == 0 {\n                    return true\n                }\n        \
    \    }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your solution here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpbe0cdcf3_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpbe0cdcf3_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpl1ws0pa3_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpl1ws0pa3_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // first make a map of existing elements\n    existing :=\
    \ make(map[int]bool)\n    for _, v := range l {\n        existing[v] = true\n\
    \    }\n    // next iterate through the list, and check if the sum of -2 times\n\
    \    // each element, along with another single element in the list\n    // exists\
    \ in the map\n    for _, v := range l {\n        if existing[-2*v] {\n       \
    \     // now we need to find the third element\n            remaining := -v\n\
    \            for _, x := range l {\n                if x == remaining {\n    \
    \                return true\n                }\n            }\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp58dfbmmf_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp58dfbmmf_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp58dfbmmf_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // return true\n    var seen_three = false\n    for i, n\
    \ := range l {\n        for j, nn := range l {\n            for k, nnn := range\
    \ l {\n                if i == j || i == k || j == k {\n                    continue\n\
    \                }\n                if l[i] + l[j] + l[k] == 0 {\n           \
    \         fmt.Println(l[i], l[j], l[k])\n                    seen_three = true\n\
    \                }\n            }\n        }\n    }\n    return seen_three\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpie88__fq_test.go:24:12: n declared but not used

    /tmp/tmpie88__fq_test.go:25:16: nn declared but not used

    /tmp/tmpie88__fq_test.go:26:20: nnn declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // fill me in\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpol501mq8_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpol501mq8_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    seen :=\
    \ make(map[int]bool)\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            complement := -(l[i] + l[j])\n           \
    \ if _, ok := seen[complement]; ok {\n                return true\n          \
    \  }\n            seen[l[j]] = true\n        }\n        seen = make(map[int]bool)\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // write your code here and remove the panic\n    //panic(\"\
    Not Implemented Yet\")\n    if len(l) == 0 {\n        return false\n    }\n  \
    \  for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n\
    \            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j]\
    \ + l[k] == 0 {\n                    return true\n                }\n        \
    \    }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // the first requirement is to have 3 distinct elements\n\
    \    if len(l) < 3 {\n        return false\n    }\n\n    // we need to find at\
    \ least 2 numbers whose sum is -n\n    // for every n in l\n    // for this we\
    \ sort l and binary search for -n in l\n    // we can have duplicates, so we must\
    \ be able to traverse\n    // the array in both directions to find the first and\
    \ last\n    // occurence\n    // in the worst case we have to look through the\
    \ whole list\n    // the result is that this algorithm runs in O(n) + O(n * log(n))\n\
    \    // = O(n * log(n))\n\n    // copy l so we can modify it\n    l2 := make([]int,\
    \ len(l))\n    copy(l2, l)\n\n    // sort l2\n    sort_int_slice(l2)\n\n    //\
    \ check if we can find the required sums\n    for _, n := range l {\n        //\
    \ find the first and last occurence of -n in l2\n        first, last := binary_search_first_and_last(l2,\
    \ -n)\n        if first == -1 || last == -1 {\n            // we didn't find -n\n\
    \            continue\n        }\n\n        // we found -n.\n        // we will\
    \ ignore the occurences of -n that are in the same\n        // position as n\n\
    \        if first == last {\n            // we only found one occurence of -n\n\
    \            continue\n        }\n\n        // we have at least 2 occurences of\
    \ -n\n        // find the first occurrence of n in l2 that is not equal to -n\n\
    \        for i := first; i < len(l2); i++ {\n            if l2[i] == n && i !=\
    \ first {\n                // we found the required sum.\n                // we\
    \ need to check that we didn't find the same number\n                // twice\n\
    \                if i != last {\n                    return true\n           \
    \     }\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk0mbd0_3_test.go:42:5: undefined: sort_int_slice

    /tmp/tmpk0mbd0_3_test.go:47:24: undefined: binary_search_first_and_last

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    size := len(l)\n    found := false\n    if\
    \ size < 3 {\n        return found\n    }\n    // outer loop needs to be at least\
    \ length - 2\n    for i := 0; i < size - 2; i++ {\n        first := l[i]\n   \
    \     for j := i + 1; j < size - 1; j++ {\n            second := l[j]\n      \
    \      for k := j + 1; k < size; k++ {\n                sum = first + second +\
    \ l[k]\n                fmt.Printf(\"sum: %d\\n\", sum)\n                if sum\
    \ == 0 {\n                    found = true\n                    break\n      \
    \          }\n            }\n        }\n    }\n    return found\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\t// zero := 0\n\t// l = append(l, zero)\n\t// fmt.Println(l)\n\
    \tfmt.Println(l)\n\t// fmt.Println(len(l))\n\tfor i := 0; i < len(l)-1; i++ {\n\
    \t\tfor j := i+1; j < len(l); j++ {\n\t\t\tfor k := j+1; k < len(l); k++ {\n\t\
    \t\t\t// fmt.Println(i, j, k)\n\t\t\t\tif l[i] + l[j] + l[k] == 0 {\n\t\t\t\t\t\
    fmt.Println(i, j, k)\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected: false },\n\
    \     { actual: candidate([]int{100, 3, 5, -100}), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    if len(l) < 3 {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp_gke0d_j_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp_gke0d_j_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_gke0d_j_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp_gke0d_j_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp_gke0d_j_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmp_gke0d_j_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i,\
    \ _ := range l {\n        for j, _ := range l {\n            for k, _ := range\
    \ l {\n                if l[i] + l[j] + l[k] == 0 && i != j && j != k && i !=\
    \ k {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    m := make(map[int]int)\n\
    \    for _, e := range l {\n        m[e]++\n    }\n    for k, _ := range m {\n\
    \        for x, _ := range m {\n            if m[-k-x] > 0 {\n               \
    \ if k == 0 && x == 0 && m[k] < 3 {\n                    continue\n          \
    \      }\n                if k == x && m[k] < 2 {\n                    continue\n\
    \                }\n                return true\n            }\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    check := make(map[int]bool)\n    for _, a := range l {\n\
    \        for _, b := range l {\n            check[a + b] = true\n        }\n \
    \   }\n    for _, i := range l {\n        if check[-i] {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpwsor1z2i_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    // TODO:\
    \ Implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpqa79ez28_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqa79ez28_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            if _, ok := m[-l[i]-l[j]];\
    \ ok {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    // 1. what are the case test\n   \
    \ // 2. what are the possibility\n    // 3. what are the necessary condition\n\
    \    // 4. what are the data \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7hpoglk4_test.go:27:6: expected ''('', found TestTriples_Sum_To_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074793
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpqtdnqisa_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqtdnqisa_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    switch len(l) {\n    case 0:\n        return false\n    case\
    \ 1:\n        return false\n    case 2:\n        return false\n    case 3:\n \
    \       if l[0] + l[1] + l[2] == 0 {\n            return true\n        } else\
    \ {\n            return false\n        }\n    default:\n        for i := range\
    \ l {\n            for j := range l {\n                for k := range l {\n  \
    \                  if i != j && j != k && i != k {\n                        if\
    \ l[i] + l[j] + l[k] == 0 {\n                            return true\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        return false\n    }\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074795
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    seen :=\
    \ make(map[int]int)\n    for _, num := range l {\n        if _, ok := seen[num];\
    \ ok {\n            seen[num] += 1\n        } else {\n            seen[num] =\
    \ 1\n        }\n    }\n    for num, count := range seen {\n        if count >\
    \ 1 {\n            if _, ok := seen[0 - 2 * num]; ok {\n                return\
    \ true\n            }\n        }\n    }\n    for i := 0; i < len(l) - 1; i++ {\n\
    \        for j := i + 1; j < len(l); j++ {\n            if _, ok := seen[-(l[i]\
    \ + l[j])]; ok {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, x := range l {\n        for j, y := range l {\n  \
    \          for k, z := range l {\n                if i != j && i != k && j !=\
    \ k && x + y + z == 0 {\n                    return true\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // sorts the list and makes a new list of the sorted.\n \
    \   sort_list := sortList(l)\n    // initialize slice to hold values that sum\
    \ to zero.\n    sumZero := []int{}\n    // iterate through the slice\n    for\
    \ i,_ := range sort_list {\n        // if the element is negative iterate from\
    \ list[i] to 0\n        if sort_list[i] < 0 {\n            for j := i; j >= 0;\
    \ j-- {\n                // if list[i] + list[j] = 0, append to the slice\n  \
    \              if sort_list[i] + sort_list[j] == 0 {\n                    sumZero\
    \ = append(sumZero, sort_list[i], sort_list[j])\n                }\n         \
    \   }\n        }\n        // else iterate from list[i] to the end of the list\n\
    \        else {\n            for j := i; j < len(sort_list); j++ {\n         \
    \       // if list[i] + list[j] = 0, append to the slice\n                if sort_list[i]\
    \ + sort_list[j] == 0 {\n                    sumZero = append(sumZero, sort_list[i],\
    \ sort_list[j])\n                }\n            }\n        }\n    }\n    // if\
    \ the length of sumZero slice is greater than three, return true\n    if len(sumZero)\
    \ > 3 {\n        return true\n    }\n    // else return false\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp31p27wz_test.go:38:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074795
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for i := 0; i < 3; i++ {\n        sum += l[i]\n    }\n    if sum == 0\
    \ {\n        return true\n    }\n    for i := 3; i < len(l); i++ {\n        sum\
    \ -= l[i-3]\n        sum += l[i]\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpjqf4sry2_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpjqf4sry2_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074796
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // use a nested for loop to get all the combos\n    n :=\
    \ len(l)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k < n; k++ {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // YOUR CODE HERE\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdmfj66k2_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdmfj66k2_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    //for i := range l {\n    //    for j := range l {\n    //\
    \        for k := range l {\n    //            if i != j && j != k && i != k {\n\
    \    //                if l[i] + l[j] + l[k] == 0 {\n    //                  \
    \  return true\n    //                }\n    //            }\n    //        }\n\
    \    //    }\n    //}\n    //return false\n    if len(l) < 3 {\n        return\
    \ false\n    }\n    for i := 0; i < len(l) - 2; i++ {\n        for j := i + 1;\
    \ j < len(l) - 1; j++ {\n            for k := j + 1; k < len(l); k++ {\n     \
    \           if l[i] + l[j] + l[k] == 0 {\n                    return true\n  \
    \              }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, _ := range l {\n        for j, _ := range l {\n  \
    \          for k, _ := range l {\n                if i != j && j != k && i !=\
    \ k {\n                    if l[i] + l[j] + l[k] == 0 {\n                    \
    \    return true\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074796
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Start from the third element, go back by pairs and then\
    \ go forward again\n    for i := 2; i < len(l); i++ {\n        for j := i - 1;\
    \ j > 0; j-- {\n            for k := j - 1; k >= 0; k-- {\n                if\
    \ l[i] + l[j] + l[k] == 0 {\n                    return true\n               \
    \ }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: put your implementation here\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpotzbr6sb_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpotzbr6sb_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074796
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    var c = make(map[int]int)\n    for _, v := range l {\n  \
    \      c[v]++\n    }\n    for i := 0; i < len(l); i++ {\n        for j := i +\
    \ 1; j < len(l); j++ {\n            if l[i] == 0 && l[j] == 0 && c[0] >= 3 {\n\
    \                return true\n            }\n            if c[-(l[i] + l[j])]\
    \ > 0 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // make a set of l\n    set := make(map[int]bool)\n    for\
    \ _, i := range l {\n        set[i] = true\n    }\n\n    // iterate over the elements\
    \ in l\n    for _, j := range l {\n        // find other elements in l that sum\
    \ to -j\n        for _, k := range l {\n            // make sure that k is not\
    \ j and not -j\n            if k != j && k != -j {\n                // make sure\
    \ that -j-k exists in the set\n                _, ok := set[-j-k]\n          \
    \      if ok {\n                    return true\n                }\n         \
    \   }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    m := make(map[int]bool)\n    if len(l) < 3 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        m[v] = true\n    }\n    for\
    \ _, v := range l {\n        for _, v2 := range l {\n            if v != v2 {\n\
    \                if m[-v-v2] {\n                    return true\n            \
    \    }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\tlength := len(l)\n\tif length < 3 {\n\t\treturn false\n\t}\n\
    \n\tvar i, j, k int\n\tfor i = 0; i < length; i++ {\n\t\tfor j = i + 1; j < length;\
    \ j++ {\n\t\t\tfor k = j + 1; k < length; k++ {\n\t\t\t\tif l[i] + l[j] + l[k]\
    \ == 0 {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // if there are less than 3 elements in the list, then no\
    \ 3 distinct\n    // elements can sum to zero.\n    if len(l) < 3 {\n        return\
    \ false\n    }\n\n    // we can't really improve the time complexity in the worst\
    \ case, because\n    // we need to look at every element.\n    // however, we\
    \ can improve the space complexity by using a set to keep\n    // track of the\
    \ elements we have seen.\n    // this also gives us a time complexity of O(n^2)\
    \ in the average case.\n    seen := make(map[int]\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd7lugx_k_test.go:33:26: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074795
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpxzvxe9ir_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxzvxe9ir_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // initializing the negative and positive integer slices\
    \ to hold the\n    // negatives and positives from the provided list\n    negative\
    \ := []int{}\n    positive := []int{}\n    // looping through the list of integers\
    \ provided, appending integers to the\n    // appropriate slice, then breaking\
    \ the loop if the slices have at least\n    // three integers in them\n    for\
    \ _, i := range l {\n        if i < 0 {\n            negative = append(negative,\
    \ i)\n        } else {\n            positive = append(positive, i)\n        }\n\
    \        if len(negative) >= 3 || len(positive) >= 3 {\n            break\n  \
    \      }\n    }\n    // if there are at least three integers in both slices, we\
    \ can return true\n    if len(negative) >= 3 && len(positive) >= 3 {\n       \
    \ return true\n    }\n    // if there are more than two integers in the negative\
    \ slice, we can return\n    // true if there is an integer in the positive slice\
    \ that has the same\n    // absolute value\n    if len(negative) > 2 {\n     \
    \   for _, i := range positive {\n            if i == -negative[len(negative)-1]\
    \ {\n                return true\n            }\n        }\n    }\n    // if there\
    \ are more than two integers in the positive slice, we can return\n    // true\
    \ if there is an integer in the negative slice that has the same\n    // absolute\
    \ value\n    if len(positive) > 2 {\n        for _, i := range negative {\n  \
    \          if i == -positive[len(positive)-1] {\n                return true\n\
    \            }\n        }\n    }\n    // if no conditions are met, we return false\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpvg56s69s_test.go:88: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvg56s69s_test.go:88:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Fill in your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpbm0pbvjs_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpbm0pbvjs_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // we will use a hashmap to store complements\n    m := make(map[int]\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb2xqh0ex_test.go:23:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074795
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyd0_q6tp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyd0_q6tp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    hash := make(map[int]bool)\n    for _, a := range l {\n \
    \       for _, b := range l {\n            if a == b {\n                continue\n\
    \            }\n            _, ok := hash[-a-b]\n            if ok {\n       \
    \         return true\n            }\n            hash[a] = true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l) - 2; i++ {\n        for j := i + 1;\
    \ j < len(l) - 1; j++ {\n            for k := j + 1; k < len(l); k++ {\n     \
    \           if l[i] + l[j] + l[k] == 0 {\n                    return true\n  \
    \              }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    set := make(map[int]int)\n    for _, value := range l {\n\
    \        set[value] = 1\n    }\n    for _, value := range l {\n        if _, ok\
    \ := set[-2*value]; ok {\n            if value == 0 {\n                if set[value]\
    \ >= 3 {\n                    return true\n                }\n            } else\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp9qk12yp7_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    N := len(l)\n    if N <= 2 {\n        return false\n    }\n\
    \    // create the set of all pairs, {(l[i], l[j])}\n    // avoid duplicates,\
    \ i.e. (a, b) and (b, a) are considered duplicates.\n    // note that all pairs\
    \ sum to a different value.\n    pair_set := make(map[int]map[int]bool)\n    for\
    \ i := 0; i < N - 1; i++ {\n        for j := i + 1; j < N; j++ {\n           \
    \ if pair_set[l[i]] == nil {\n                pair_set[l[i]] = make(map[int]bool)\n\
    \            }\n            pair_set[l[i]][l[j]] = true\n        }\n    }\n  \
    \  // check if a distinct pair in the pair set sum to zero.\n    for i := 0; i\
    \ < N; i++ {\n        if pair_set[-l[i]] != nil {\n            if pair_set[-l[i]][l[i]]\
    \ {\n                pair_set[-l[i]][l[i]] = false\n            } else {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp1c4bdhqc_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp1c4bdhqc_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074796
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i,\
    \ n := range l {\n        for j, m := range l {\n            if j == i {\n   \
    \             continue\n            }\n            for k, p := range l {\n   \
    \             if k == i || k == j {\n                    continue\n          \
    \      }\n                if n + m + p == 0 {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074797
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // insert your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg12ta3h9_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg12ta3h9_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074797
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\t// we only need to look at a sublist of the list l, because\
    \ the\n\t// order of the input doesn't matter\n\tsublist := l[:len(l)-2]\n\t//\
    \ make a set of all the elements in the list\n\tunique_elements := make(map[int]bool)\n\
    \tfor _, x := range sublist {\n\t\tunique_elements[x] = true\n\t}\n\t// look at\
    \ the last two elements in the list\n\tlast_two := l[len(l)-2:]\n\t// if the sum\
    \ of the last two elements is in the set of unique elements\n\t// then we have\
    \ a triple that sums to zero\n\tif _, ok := unique_elements[-(last_two[0] + last_two[1])];\
    \ ok {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\npanic: runtime error: slice\
    \ bounds out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512580,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512580, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.triples_sum_to_zero(...)\n\t/tmp/tmprvo81nxc_test.go:24\n\
    command-line-arguments_test.TestTriples_Sum_To_Zero(0x0?)\n\t/tmp/tmprvo81nxc_test.go:53\
    \ +0x61f\ntesting.tRunner(0xc000103520, 0x527e88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074797
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    m := make(map[int]int)\n    for _, n := range l {\n     \
    \   if m[n] == 0 {\n            m[n] = 1\n        } else {\n            m[n] +=\
    \ 1\n        }\n    }\n    for _, n := range l {\n        for _, m := range l\
    \ {\n            if m[-n-m] > 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjaq1jzrk_test.go:30:12: n declared but not used

    /tmp/tmpjaq1jzrk_test.go:32:17: invalid operation: cannot index m (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074797
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        if l[i] == 0 {\n \
    \           for j := i + 1; j < len(l); j++ {\n                if l[j] == 0 {\n\
    \                    for k := j + 1; k < len(l); k++ {\n                     \
    \   if l[k] == 0 {\n                            return true\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpzraev3x4_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpzraev3x4_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074797
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // For each two elements, check if the third element is in\
    \ the list.\n    // This approach is O(n^2)\n    for i := 0; i < len(l); i++ {\n\
    \        for j := i + 1; j < len(l); j++ {\n            if contains(l, -1 * (l[i]\
    \ + l[j])) {\n                return true\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzmvjnxvu_test.go:26:16: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074797
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    max_index := len(l) - 1\n    if max_index < 2 {\n       \
    \ return false\n    }\n    for i := 0; i < max_index - 1; i++ {\n        for j\
    \ := i + 1; j < max_index; j++ {\n            for k := j + 1; k <= max_index;\
    \ k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074798
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function.\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9zjmm_pg_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9zjmm_pg_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074798
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\tresult := false\n\tfor i := 0; i < len(l)-2; i++ {\n\t\tfor\
    \ j := i+1; j < len(l)-1; j++ {\n\t\t\tfor k := j+1; k < len(l); k++ {\n\t\t\t\
    \tif l[i]+l[j]+l[k] == 0 {\n\t\t\t\t\tresult = true\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn result\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074798
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, _ := range l {\n        for j, _ := range l {\n  \
    \          for k, _ := range l {\n                if i != j && j != k && i !=\
    \ k {\n                    if l[i] + l[j] + l[k] == 0 {\n                    \
    \    return true\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for _, e := range l {\n        for _, j := range l {\n  \
    \          for _, k := range l {\n                if (e + j + k) == 0 {\n    \
    \                return true\n                }\n            }\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpwwm3rjni_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074798
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyd0_q6tp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyd0_q6tp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l) - 2; i++ {\n        for j := i + 1;\
    \ j < len(l) - 1; j++ {\n            for k := j + 1; k < len(l); k++ {\n     \
    \           if l[i] + l[j] + l[k] == 0 {\n                    return true\n  \
    \              }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for x := 0; x < len(l); x++ {\n        for y := x + 1; y\
    \ < len(l); y++ {\n            for z := y + 1; z < len(l); z++ {\n           \
    \     if l[x] + l[y] + l[z] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074798
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    m := make(map[int]bool)\n    for _, v := range l {\n    \
    \    m[v] = true\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        for j\
    \ := i + 1; j < len(l); j++ {\n            if m[-l[i] - l[j]] {\n            \
    \    return true\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074798
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\treturn true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp2aunp45b_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp2aunp45b_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp2aunp45b_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp2aunp45b_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp2aunp45b_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp2aunp45b_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp2aunp45b_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // map the values\n    m := make(map[int]int)\n    for _,\
    \ v := range l {\n        m[v]++\n    }\n    // check for matches\n    for _,\
    \ v := range l {\n        for _, k := range l {\n            if m[-v-k] > 0 {\n\
    \                if v != k && v != -v-k && k != -v-k {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpk5z447mx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074798
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l) - 2; i++ {\n        for j := i + 1;\
    \ j < len(l) - 1; j++ {\n            for k := j + 1; k < len(l); k++ {\n     \
    \           if l[i] + l[j] + l[k] == 0 {\n                    return true\n  \
    \              }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // if the input is empty or only has one or two elements\n\
    \    // return false. (no possible zeros)\n    if len(l) <= 2 {\n        return\
    \ false\n    }\n\n    for idx, val := range l {\n        // remove the element\
    \ from the array and call two_sum_to_zero.\n        // (golang doesnt have a clone\
    \ method so we have to do it this way)\n        rest := append(l[:idx], l[idx+1:]...)\n\
    \        if two_sum_to_zero(rest, val) {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphj7gishr_test.go:32:12: undefined: two_sum_to_zero

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074798
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := make(map[int]bool)\n\
    \    for _, v := range l {\n        s[v] = true\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            a := l[i]\n  \
    \          b := l[j]\n            c := -(a + b)\n            if _, ok := s[c];\
    \ ok {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074798
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyd0_q6tp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyd0_q6tp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpru93vvpo_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpru93vvpo_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, n := range l {\n        for j, m := range l {\n  \
    \          for k, o := range l {\n                if n + m + o == 0 && i != j\
    \ && i != k && j != k {\n                    return true\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // loop through list l\n    //  subtract value from list\n\
    \    //    loop through list\n    //      subtract value from list\n    //   \
    \    loop through list\n    //          subtract value from list\n    //     \
    \  if sum == 0\n    //          return true\n    // return false\n    for _, outer_val\
    \ := range l {\n        for _, middle_val := range l {\n            for _, inner_val\
    \ := range l {\n                if (outer_val + middle_val + inner_val) == 0 {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpp3kgx1bw_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\tfor i, v := range l {\n\t\tfor j, w := range l {\n\t\t\tfor\
    \ k, x := range l {\n\t\t\t\tif v + w + x == 0 && i != j && i != k && j != k {\n\
    \t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074799
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // YOUR CODE HERE\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdmfj66k2_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdmfj66k2_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i,\
    \ e1 := range l {\n        for j, e2 := range l {\n            if i == j {\n \
    \               continue\n            }\n            for _, e3 := range l {\n\
    \                if i == j || j == _ || i == _ {\n                    continue\n\
    \                }\n                if e1 + e2 + e3 == 0 {\n                 \
    \   return true\n                }\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp8i3rv1o_test.go:31:35: cannot use _ as value or type

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074798
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: Write this function\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmptp2ace68_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmptp2ace68_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyd0_q6tp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyd0_q6tp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    length := len(l)\n    if length < 3 {\n        return false\n\
    \    }\n    for i := 0; i < length - 2; i++ {\n        for j := i + 1; j < length\
    \ - 1; j++ {\n            for k := j + 1; k < length; k++ {\n                if\
    \ l[i] + l[j] + l[k] == 0 {\n                    return true\n               \
    \ }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpl1ws0pa3_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpl1ws0pa3_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    var triple bool = false\n    var length = len(l)\n\n    for\
    \ i := 0; i < length; i++ {\n        for j := i + 1; j < length; j++ {\n     \
    \       for k := j + 1; k < length; k++ {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    triple = true\n                }\n            }\n\
    \        }\n    }\n\n    return triple\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\t\t// TODO: implement this!\n\treturn false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaghcj40t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaghcj40t_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // first sort the input\n    for i := 0; i < len(l); i++\
    \ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n\
    \                tmp := l[i]\n                l[i] = l[j]\n                l[j]\
    \ = tmp\n            }\n        }\n    }\n    // now that the list is sorted,\
    \ we can simply walk through it.\n    // any triple of ints that add to zero must\
    \ be in increasing order.\n    // so we start with the smallest int in the list\
    \ and look for triples\n    // that add to zero.\n    for i := 0; i < len(l) -\
    \ 2; i++ {\n        // move the index of the middle element forward as long as\
    \ it's\n        // less than the sum of the first and last element.\n        j\
    \ := i + 1\n        k := len(l) - 1\n        for j < k {\n            if l[i]\
    \ + l[j] + l[k] == 0 {\n                return true\n            } else if l[i]\
    \ + l[j] + l[k] < 0 {\n                j++\n            } else {\n           \
    \     k--\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpbxoorvoc_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpbxoorvoc_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    n := len(l)\n\
    \    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n\
    \            for k := j + 1; k < n; k++ {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    fmt.Println(l)\n    // implement me!\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 3 5 0]\n[1 3 5 -1]\n[1 3 -2 1]\n[1 2 3 7]\n[1 2 5 7]\n[2 4 -5 3 9 7]\n\
    [1]\n[1 3 5 -100]\n[100 3 5 -100]\n--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp95fqlvyb_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp95fqlvyb_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyd0_q6tp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyd0_q6tp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    var s []int\n    for i := 0; i < len(l); i++ {\n        for\
    \ j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n\
    \                if l[i] + l[j] + l[k] == 0 {\n                    s = append(s,\
    \ l[i])\n                    s = append(s, l[j])\n                    s = append(s,\
    \ l[k])\n                    return true\n                }\n            }\n \
    \       }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpnk24p4a1_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpnk24p4a1_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    //your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpbyn0qits_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpbyn0qits_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    triples\
    \ := make(map[int]int)\n    for _, v := range l {\n        if _, ok := triples[v];\
    \ ok {\n            triples[v] += 1\n        } else {\n            triples[v]\
    \ = 1\n        }\n    }\n    for k1, _ := range triples {\n        for k2, _ :=\
    \ range triples {\n            if k1 == k2 {\n                continue\n     \
    \       }\n            if k3, ok := triples[-k1-k2]; ok {\n                if\
    \ k1 != -k1-k2 && k2 != -k1-k2 {\n                    return true\n          \
    \      } else if k1 == -k1-k2 && k3 > 1 {\n                    return true\n \
    \               } else if k2 == -k1-k2 && k3 > 1 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074800
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    _l := len(l)\n    if _l < 3 {\n        return false\n   \
    \ }\n    for i := 0; i < _l; i++ {\n        for j := i + 1; j < _l; j++ {\n  \
    \          for k := j + 1; k < _l; k++ {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpru93vvpo_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpru93vvpo_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074799
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpbxoorvoc_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpbxoorvoc_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyd0_q6tp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyd0_q6tp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    for a := 0; a < len(l); a++ {\n  \
    \      for b := a + 1; b < len(l); b++ {\n            for c := b + 1; c < len(l);\
    \ c++ {\n                if l[a] + l[b] + l[c] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074801
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // YOUR CODE HERE\n    for i := 0; i < len(l); i++ {\n  \
    \      for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l);\
    \ k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // YOUR CODE HERE\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdmfj66k2_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdmfj66k2_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // build a dict of numbers and whether they appear twice\
    \ in the list\n    var num_dict = make(map[int]bool)\n    var num_count = make(map[int]int)\n\
    \    for _, num := range l {\n        if num_count[num] == 0 {\n            num_dict[num]\
    \ = false\n        } else if num_count[num] == 1 {\n            num_dict[num]\
    \ = true\n        }\n        num_count[num]++\n    }\n\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            third := -1 *\
    \ (l[i] + l[j])\n            if (num_dict[third] && !(l[i] == third && l[j] ==\
    \ third)) ||\n                (l[i] == third && num_count[third] >= 2) ||\n  \
    \              (l[j] == third && num_count[third] >= 2) {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpfwk5ot13_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    num_set\
    \ := make(map[int]bool)\n    for _, num := range l {\n        num_set[num] = true\n\
    \    }\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l);\
    \ j++ {\n            if num_set[-(l[i] + l[j])] {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074801
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // since the list is not sorted, any triplet can be formed\n\
    \    // thus we just need to check that there exists three distinct elements\n\
    \    // that sum to zero\n    for i := 0; i < len(l) - 2; i++ {\n        for j\
    \ := i + 1; j < len(l) - 1; j++ {\n            for k := j + 1; k < len(l); k++\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074801
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, a := range l {\n        for j, b := range l {\n  \
    \          if i == j {\n                continue\n            }\n            for\
    \ k, c := range l {\n                if i == k || j == k {\n                 \
    \   continue\n                }\n                if a + b + c == 0 {\n       \
    \             return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) <= 2 {\n        return false\n    }\n    m := make(map[int]\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxt9pxyld_test.go:25:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    triples := 0\n    for i := 0; i < len(l); i++ {\n       \
    \ for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++\
    \ {\n                if l[i] + l[j] + l[k] == 0 {\n                    triples++\n\
    \                }\n            }\n        }\n    }\n    return triples > 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074801
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // we want to find three distinct numbers that sum to zero.\n\
    \    // let's sort the list.\n    // then we know that if there are two numbers\
    \ on either side of the\n    // middle of the list that sum to 0, we have a solution.\n\
    \    // if we go through the list and find a number, we want to check if\n   \
    \ // there are two numbers on either side of it that sum to 0\n    // in order\
    \ to check this, we need to store a\n    // map of integers to counts in the list\n\
    \    m := make(map[int]int)\n    for _, val := range l {\n        m[val] += 1\n\
    \    }\n    for _, val := range l {\n        // check if there are two numbers\
    \ on either side of val that sum to 0\n        // because we have a map of numbers\
    \ to counts, we only need to\n        // check if m[-val] is > 0 if val is nonzero\n\
    \        if val != 0 && m[-val] > 0 {\n            // if val is zero, we need\
    \ to make sure that there are at least\n            // two zeros in the list\n\
    \            return true\n        } else if val == 0 && m[0] > 1 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpcpjsmnuu_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpcpjsmnuu_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpcpjsmnuu_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpcpjsmnuu_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // given two numbers, it is possible to find the third number\
    \ that\n    // makes the sum zero.\n    // there are no duplicate numbers in the\
    \ list, therefore the total\n    // number of possible combinations of three unique\
    \ numbers\n    // is O(n^3) without any optimizations.\n    // we can get a better\
    \ complexity by using a sorting algorithm and\n    // reducing the duplicate combinations\
    \ to O(n).\n    // total complexity is O(n log n)\n    n := len(l)\n    if n <\
    \ 3 {\n        return false\n    }\n    return triples_sum_to_zero_helper(l, 0,\
    \ n-1)\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7wyvjmyy_test.go:34:12: undefined: triples_sum_to_zero_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    m := make(map[int]int)\n    for _, v := range l {\n     \
    \   m[v]++\n    }\n    //fmt.Println(m)\n    for _, v := range l {\n        if\
    \ v != 0 {\n            if _, ok := m[-v]; ok {\n                if v > 0 {\n\
    \                    if m[v] >= 2 {\n                        return true\n   \
    \                 }\n                } else {\n                    if m[v] >=\
    \ 3 {\n                        return true\n                    }\n          \
    \      }\n            }\n        } else {\n            if m[v] >= 3 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpq4t6igfh_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpq4t6igfh_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // todo: fill in your solution.\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmppmu4yzce_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmppmu4yzce_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpnk24p4a1_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpnk24p4a1_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074800
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    // good\
    \ with duplicates, but not with repetitions\n    sum := func(a, b, c int) bool\
    \ {\n        return l[a] + l[b] + l[c] == 0\n    }\n    m := make(map[int]int)\n\
    \    for i, val := range l {\n        if _, ok := m[val]; ok {\n            return\
    \ true\n        }\n        m[val] = i\n    }\n    for i := 0; i < len(l) - 2;\
    \ i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n            if s, ok :=\
    \ m[-l[i] - l[j]]; ok && s != i && s != j {\n                return true\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfc299dfr_test.go:26:5: sum declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074800
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // first, check if there are less than 3 elements\n    if\
    \ len(l) < 3 {\n        return false\n    }\n\n    // now sort the list\n    for\
    \ i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n     \
    \       if l[i] > l[j] {\n                // swap elements\n                tmp\
    \ := l[i]\n                l[i] = l[j]\n                l[j] = tmp\n         \
    \   }\n        }\n    }\n\n    for i := 0; i < len(l) - 2; i++ {\n        // need\
    \ to check if there is an index that is\n        // equal to the sum of the previous\
    \ two elements\n        // so this is a test of the binary search\n        if\
    \ bsearch(l[i] + l[i + 1], l, i + 2) {\n            return true\n        }\n \
    \   }\n\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3goiele6_test.go:43:12: undefined: bsearch

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074800
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyd0_q6tp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyd0_q6tp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // find a triple that sums to zero\n    for i, x := range\
    \ l {\n        for j, y := range l {\n            if i == j {\n              \
    \  continue\n            }\n            for k, z := range l {\n              \
    \  if k == i || k == j {\n                    continue\n                }\n  \
    \              if x + y + z == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074801
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, e := range l {\n        for j, e := range l {\n  \
    \          for k, e := range l {\n                if i != j && j != k && i !=\
    \ k {\n                    if e + l[j] + l[k] == 0 {\n                       \
    \ return true\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk4qoy3ic_test.go:22:12: e declared but not used

    /tmp/tmpk4qoy3ic_test.go:23:16: e declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\t// sort the list\n\t// then for each element in the list, find\
    \ two elements that sum to negative of\n\t// that element.\n\t// if you find them,\
    \ return true\n\t// if you don't find them, continue looping\n\t// if you run\
    \ out of elements in the list, return false\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp3ub_fo4f_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3ub_fo4f_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpl1ws0pa3_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpl1ws0pa3_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement function\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpf5bvjiab_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpf5bvjiab_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074801
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // we need to test if there are at least three distinct elements\n\
    \    if len(l) < 3 {\n        return false\n    }\n\n    // basically, we'll iterate\
    \ over all possible triples of elements\n    // in the list, and see if any of\
    \ them sum to zero\n    // \n    // there are two ways to think about the triples:\n\
    \    // 1. we could think of them as the cartesian product of the list with\n\
    \    //    itself, and then take a slice of that that's 3 deep\n    // 2. we could\
    \ think of them as a chain of triple nested loops\n    //\n    // both of these\
    \ are equally valid, and the code for either of them\n    // would be equally\
    \ valid\n    //\n    // for the sake of simplicity, we'll just use triple nested\
    \ loops\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l);\
    \ j++ {\n            for k := j + 1; k < len(l); k++ {\n                // we've\
    \ chosen three elements of the list\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyd0_q6tp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyd0_q6tp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // brute force:\n    // for each x in l, choose two more\
    \ numbers from l,\n    // and make sure they sum to -x.\n    // we could also\
    \ add to a map while looping,\n    // so that we don't need to brute force the\
    \ inner loop\n    // (i.e. just check the map to see if -x is in it)\n    // or,\
    \ we could sort the list first, and then use binary search.\n    // the map approach\
    \ seems like it would be the fastest\n    // in the general case.\n    // if the\
    \ list is already sorted, then we should use binary search\n    // because it\
    \ will be faster.\n    // note that we only need to search until len(l)-2\n  \
    \  // because we need two more values after l[i] to sum to zero.\n    for i :=\
    \ 0; i < len(l)-2; i++ {\n        for j := i+1; j < len(l)-1; j++ {\n        \
    \    for k := j+1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074802
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for x := 0; x < len(l); x++ {\n        for y := x + 1; y\
    \ < len(l); y++ {\n            for z := y + 1; z < len(l); z++ {\n           \
    \     if l[x] + l[y] + l[z] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074798
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    n := len(l)\n    i := 0\n    j := 1\n    k := 2\n    for\
    \ i < n {\n        for j < n {\n            for k < n {\n                if l[i]\
    \ + l[j] + l[k] == 0 {\n                    return true\n                }\n \
    \               k++\n            }\n            j++\n            k = j + 1\n \
    \       }\n        i++\n        j = i + 1\n        k = j + 1\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpl1ws0pa3_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpl1ws0pa3_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: Add your code here!\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpnwfa75ze_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpnwfa75ze_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\tfor i := 0; i < len(l) - 2; i++ {\n\t\tfor j := i + 1; j <\
    \ len(l) - 1; j++ {\n\t\t\tfor k := j + 1; k < len(l); k++ {\n\t\t\t\tif l[i]\
    \ + l[j] + l[k] == 0 {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    var i, j, k int\n    var len_l int = len(l)\n    for i =\
    \ 0; i < len_l - 2; i++ {\n        for j = i + 1; j < len_l - 1; j++ {\n     \
    \       for k = j + 1; k < len_l; k++ {\n                if l[i] + l[j] + l[k]\
    \ == 0 {\n                    return true\n                }\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := make(map[int]bool)\n    for _, v := range l {\n    \
    \    if _, ok := s[v]; ok {\n            continue\n        }\n        for _, v2\
    \ := range l {\n            if _, ok := s[v2]; ok {\n                continue\n\
    \            }\n            for _, v3 := range l {\n                if _, ok :=\
    \ s[v3]; ok {\n                    continue\n                }\n             \
    \   if v + v2 + v3 == 0 {\n                    return true\n                }\n\
    \            }\n        }\n        s[v] = true\n    }\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmps6j003er_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    //insert code here!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2c_5av6s_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2c_5av6s_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, x := range l {\n        for j, y := range l {\n  \
    \          for k, z := range l {\n                if i != j && i != k && j !=\
    \ k && x + y + z == 0 {\n                    return true\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074796
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyd0_q6tp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyd0_q6tp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // implement this!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpk4bm02yd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpk4bm02yd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Your code here\n    // Apply your algorithm to the \"\
    l\" list.\n    // Return true if there are three elements in the list that sum\
    \ up to zero,\n    // and false otherwise.\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsrxig372_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsrxig372_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // replace these with your code\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp67_kxa95_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp67_kxa95_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp7qkit0gv_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp7qkit0gv_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074794
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // use a map for the two-sum problem\n    two_sum_map :=\
    \ make(map[int]bool)\n    // for each element in the list,\n    for _, n := range\
    \ l {\n        // check if its negative is a key in the map\n        if two_sum_map[-n]\
    \ {\n            // if so, we found a triple summing to zero\n            return\
    \ true\n        }\n        // otherwise, add the element and its negative to the\
    \ map\n        two_sum_map[n] = true\n        two_sum_map[-n] = true\n    }\n\
    \    // if we get to the end of the list without returning, we did not find a\
    \ triple summing to zero\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp5tqu0ncf_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp5tqu0ncf_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp5tqu0ncf_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    if len(l) < 3 {\n        return false\n\
    \    }\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l);\
    \ j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]\
    \ + l[j] + l[k] == 0 {\n                    return true\n                }\n \
    \           }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // sort l\n    sortedL := quickSort(l)\n    // fmt.Println(sortedL)\n\
    \    return tripleSum(sortedL)\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13jkayoy_test.go:23:16: undefined: quickSort

    /tmp/tmp13jkayoy_test.go:25:12: undefined: tripleSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i,\
    \ vi := range l {\n        for j, vj := range l {\n            if i == j {\n \
    \               continue\n            }\n            for k, vk := range l {\n\
    \                if k == i || k == j {\n                    continue\n       \
    \         }\n                if vi + vj + vk == 0 {\n                    return\
    \ true\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n\tvar numbers = make(map[int]bool)\n\tfor _, val := range l {\n\
    \t\tnumbers[val] = true\n\t}\n\tfor _, a := range l {\n\t\tfor _, b := range l\
    \ {\n\t\t\tif b == a {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif numbers[-a-b] {\n\t\
    \t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Find the maximum value in l.\n    maxValue := l[0]\n \
    \   for _, v := range l {\n        if v > maxValue {\n            maxValue = v\n\
    \        }\n    }\n\n    // Create a slice of length maxValue to use as a histogram.\n\
    \    histogram := make([]int, maxValue + 1)\n\n    // Iterate through the list\
    \ of integers, using each value as an index\n    // into the histogram to increment\
    \ the count of that value.\n    for _, v := range l {\n        histogram[v]++\n\
    \    }\n\n    // For each value in the histogram, check if the sum of any other\
    \ two\n    // values in the histogram is equal to the negative of that value.\n\
    \    for i, v := range histogram {\n        if v != 0 {\n            for j, w\
    \ := range histogram {\n                if w != 0 {\n                    if histogram[-i\
    \ - j] != 0 {\n                        return true\n                    }\n  \
    \              }\n            }\n        }\n    }\n\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\npanic: runtime error: index\
    \ out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.triples_sum_to_zero(...)\n\t/tmp/tmp9apffq_3_test.go:36\n\
    command-line-arguments_test.TestTriples_Sum_To_Zero(0x0?)\n\t/tmp/tmp9apffq_3_test.go:64\
    \ +0xdf3\ntesting.tRunner(0xc0001a0340, 0x528f68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    // use\
    \ map to record the number of times each element occurs\n    m := make(map[int]int)\n\
    \    for _, n := range l {\n        if _, ok := m[n]; ok {\n            m[n] +=\
    \ 1\n        } else {\n            m[n] = 1\n        }\n    }\n    // if zero\
    \ is in list, there should be more than 2 zeros\n    if _, ok := m[0]; ok {\n\
    \        if m[0] < 3 {\n            return false\n        }\n    }\n    for k,\
    \ _ := range m {\n        if _, ok := m[-k]; ok {\n            if k == 0 {\n \
    \               continue\n            }\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp2cgeaxvq_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp2cgeaxvq_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp2cgeaxvq_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmp2cgeaxvq_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, x := range l {\n        for j, y := range l {\n  \
    \          for k, z := range l {\n                if (i != j && j != k && i !=\
    \ k) && (x + y + z == 0) {\n                    return true\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i,\
    \ x := range l {\n        for j, y := range l {\n            if i != j {\n   \
    \             for _, z := range l {\n                    if x + y + z == 0 {\n\
    \                        return true\n                    }\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    /* \n     * Brute force implementation\n     * O(n^3)\n \
    \    */\n    // n := len(l)\n    // if n < 3 {\n    //     return false\n    //\
    \ }\n    // for i := 0; i < n; i++ {\n    //     for j := i + 1; j < n; j++ {\n\
    \    //         for k := j + 1; k < n; k++ {\n    //             if l[i] + l[j]\
    \ + l[k] == 0 {\n    //                 return true\n    //             }\n  \
    \  //         }\n    //     }\n    // }\n    // return false\n\n    /*\n     *\
    \ Hash table implementation\n     * O(n^2)\n     */\n    n := len(l)\n    if n\
    \ < 3 {\n        return false\n    }\n    // create a hash table with the given\
    \ list of integers\n    hash_table := make(map[int]bool)\n    for _, element :=\
    \ range l {\n        hash_table[element] = true\n    }\n    // check if there\
    \ are three distinct elements that sum to zero\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            if hash_table[-(l[i] + l[j])]\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, n := range l {\n        for j, _ := range l {\n  \
    \          for k, _ := range l {\n                if i == j || i == k || j ==\
    \ k {\n                    continue\n                }\n                if l[i]\
    \ + l[j] + l[k] == 0 {\n                    return true\n                }\n \
    \           }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjrr0fdye_test.go:22:12: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    // use\
    \ a map to record the number of times the element in list\n    ele_map := make(map[int]int)\n\
    \    for _, ele := range l {\n        ele_map[ele] += 1\n    }\n    // check if\
    \ there are 0 in the map\n    if _, ok := ele_map[0]; ok {\n        if ele_map[0]\
    \ >= 3 {\n            return true\n        }\n    }\n    // loop the list and\
    \ check if the element's negative number exists.\n    for _, ele := range l {\n\
    \        if _, ok := ele_map[-ele]; ok {\n            if ele == 0 {\n        \
    \        continue\n            }\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp6uyncmqf_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp6uyncmqf_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp6uyncmqf_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmp6uyncmqf_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    n := len(l)\n    if n <= 2 {\n        return false\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if l[i] + l[j] + l[k] == 0\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    l_len := len(l)\n    if l_len < 3 {\n        return false\n\
    \    }\n\n    m := make(map[int]int)\n    for i := 0; i < l_len; i++ {\n     \
    \   v := l[i]\n        m[v] = i\n    }\n\n    for i := 0; i < l_len; i++ {\n \
    \       for j := i + 1; j < l_len; j++ {\n            if _, ok := m[-l[i]-l[j]];\
    \ ok {\n                return true\n            }\n        }\n    }\n\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074803
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074652
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    var rtn bool\n    for i, _ := range l {\n        for j, _\
    \ := range l {\n            for k, _ := range l {\n                if i != j &&\
    \ i != k && j != k {\n                    if l[i] + l[j] + l[k] == 0 {\n     \
    \                   rtn = true\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return rtn\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc28qzk4r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc28qzk4r_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074652
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Insert your code here.\n    // Return true or false.\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdnkfqwis_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdnkfqwis_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns true if there are three distinct elements in the list that\n// sum to\
    \ zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // return triples_sum_to_zero_helper(l, 0, []int{}, []int{})\n\
    \    return triples_sum_to_zero_set(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb_gzvxu0_test.go:23:12: undefined: triples_sum_to_zero_set

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
