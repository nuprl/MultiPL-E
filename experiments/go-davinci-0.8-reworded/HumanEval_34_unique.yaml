name: HumanEval_34_unique
language: go_test.go
prompt: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0,\
  \ 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n"
tests: "func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
  \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    m := make(map[int]bool)\n    var r []int\n    for _, v := range\
    \ l {\n        if _, ok := m[v]; !ok {\n            m[v] = true\n            r\
    \ = append(r, v)\n        }\n    }\n    return r\n}\n", '    found := make(map[int]',
  "    result := []int{}\n    for _, i := range l {\n        if !inList(result, i)\
    \ {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", '    m := make(map[int]', '    m := make(map[int]', '    m := make(map[int]',
  "    var uniqueElements []int\n    m := make(map[int]int)\n    for _, element :=\
    \ range l {\n        if _, ok := m[element]; !ok {\n            m[element] = element\n\
    \            uniqueElements = append(uniqueElements, element)\n        }\n   \
    \ }\n    return uniqueElements\n}\n", "    u := make([]int, 0, len(l))\n    m\
    \ := make(map[int]bool)\n\n    for _, v := range l {\n        if _, ok := m[v];\
    \ !ok {\n            m[v] = true\n            u = append(u, v)\n        }\n  \
    \  }\n\n    return u\n}\n", "    // Add the values to a map and then build a new\
    \ list\n    m := make(map[int]bool)\n    var u []int\n    for _, x := range l\
    \ {\n        if !m[x] {\n            m[x] = true\n            u = append(u, x)\n\
    \        }\n    }\n    return u\n}\n", "    m := make(map[int]bool)\n    u :=\
    \ make([]int, 0)\n    for _, i := range l {\n        if _, ok := m[i]; !ok {\n\
    \            m[i] = true\n            u = append(u, i)\n        }\n    }\n   \
    \ return u\n}\n", "    m := make(map[int]bool)\n    var res []int\n    for _,\
    \ v := range l {\n        if _, ok := m[v]; !ok {\n            m[v] = true\n \
    \           res = append(res, v)\n        }\n    }\n    return res\n}\n", "  \
    \  m := make(map[int]bool)\n    for _, e := range l {\n        m[e] = true\n \
    \   }\n    var uniq []int\n    for k := range m {\n        uniq = append(uniq,\
    \ k)\n    }\n    return uniq\n}\n", "    count := make(map[int]int)\n    for _,\
    \ v := range l {\n        count[v] += 1\n    }\n    m := make(map[int]int)\n \
    \   for _, v := range l {\n        m[v] += 1\n        if m[v] >= count[v] {\n\
    \            continue\n        }\n        l = append(l, v)\n    }\n    return\
    \ l\n}\n", '    m := make(map[int]', "    r := []int{}\n    for _, e := range\
    \ l {\n        if _, ok := contains(r, e); !ok {\n            r = append(r, e)\n\
    \        }\n    }\n    return r\n}\n", "    var uniques []int\n    var exists\
    \ bool\n    for _, e := range l {\n        exists = false\n        for _, u :=\
    \ range uniques {\n            if e == u {\n                exists = true\n  \
    \              break\n            }\n        }\n        if !exists {\n       \
    \     uniques = append(uniques, e)\n        }\n    }\n    return uniques\n}\n",
  "    var res []int\n    var m = make(map[int]bool)\n    for _, v := range l {\n\
    \        if _, ok := m[v]; !ok {\n            m[v] = true\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n", "    s := make([]int, 0)\n    m\
    \ := make(map[int]bool)\n    for _, e := range l {\n        if _, ok := m[e];\
    \ !ok {\n            m[e] = true\n            s = append(s, e)\n        }\n  \
    \  }\n    return s\n}\n", "    var res []int\n    for _, n := range l {\n    \
    \    if len(res) == 0 || res[len(res)-1] != n {\n            res = append(res,\
    \ n)\n        }\n    }\n    return res\n}\n", "    unique := []int{}\n    m :=\
    \ map[int]bool{}\n    for _, i := range l {\n        if !m[i] {\n            m[i]\
    \ = true\n            unique = append(unique, i)\n        }\n    }\n    return\
    \ unique\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
