name: HumanEval_44_change_base
language: go_test.go
prompt: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunc change_base(x int, base int) string {\n"
tests: "func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
  \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
  \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
  \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\" },\n\
  \     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
  \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n \
  \    { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
  \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n \
  \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    digits := []int{}\n    for x > 0 {\n        digits = append(digits,\
    \ x % base)\n        x /= base\n    }\n    digits_str := []string{}\n    for _,\
    \ n := range digits {\n        digits_str = append(digits_str, fmt.Sprintf(\"\
    %d\", n))\n    }\n    return ReverseJoinString(digits_str)\n}\n", "    n := int(x\
    \ / base)\n    r := x % base\n    if n == 0 {\n        return fmt.Sprintf(\"%d\"\
    , r)\n    } else {\n        return fmt.Sprintf(\"%s%d\", change_base(n, base),\
    \ r)\n    }\n}\n", "    if x < 0 {\n        panic(\"x must be non-negative.\"\
    )\n    }\n    if base < 2 {\n        panic(\"base must be 2 or greater.\")\n \
    \   }\n    if x == 0 {\n        return \"0\"\n    }\n    var result string\n \
    \   for x > 0 {\n        result = fmt.Sprintf(\"%d%s\", x % base, result)\n  \
    \      x /= base\n    }\n    return result\n}\n", "    var digit = make([]int,\
    \ 0)\n    for x > 0 {\n        digit = append(digit, x % base)\n        x /= base\n\
    \    }\n    var s string\n    for i := len(digit) - 1; i >= 0; i-- {\n       \
    \ s += fmt.Sprintf(\"%d\", digit[i])\n    }\n    return s\n}\n", "    res := []int{}\n\
    \    for {\n        if x < base {\n            res = append(res, x)\n        \
    \    break\n        }\n        res = append(res, x % base)\n        x = x / base\n\
    \    }\n    // reverse array\n    for i, j := 0, len(res)-1; i < j; i, j = i+1,\
    \ j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n    return fmt.Sprintf(\"\
    %v\", res)\n}\n", "    y := x\n    s := \"\"\n    for y > 0 {\n        s = fmt.Sprintf(\"\
    %d%s\", y % base, s)\n        y = y / base\n    }\n    return s\n}\n", "    ret\
    \ := \"\"\n    for x > 0 {\n        ret = fmt.Sprintf(\"%d\", x % base) + ret\n\
    \        x /= base\n    }\n    return ret\n}\n", "    if x == 0 {\n        return\
    \ \"0\"\n    }\n\n    var buf []byte\n    for {\n        if x == 0 {\n       \
    \     break\n        }\n        r := x % base\n        x = x / base\n        buf\
    \ = append(buf, byte(r + '0'))\n    }\n\n    for i, j := 0, len(buf) - 1; i <\
    \ j; i, j = i + 1, j - 1 {\n        buf[i], buf[j] = buf[j], buf[i]\n    }\n\n\
    \    return string(buf)\n}\n", "    switch {\n    case x < base:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case x >= base:\n        mod := x % base\n     \
    \   return change_base(x / base, base) + fmt.Sprintf(\"%d\", mod)\n    }\n   \
    \ return \"\"\n}\n", "    r := \"\"\n    for {\n        if x == 0 {\n        \
    \    break\n        }\n        r = fmt.Sprintf(\"%v%v\", x % base, r)\n      \
    \  x = x / base\n    }\n    return r\n}\n", "    var result int = 0\n    var mod\
    \ int = 0\n    var remainder string = \"\"\n    for i := 0; x > 0; i++ {\n   \
    \     mod = x % base\n        remainder = fmt.Sprintf(\"%s%d\", remainder, mod)\n\
    \        x = x / base\n    }\n    return remainder\n}\n", "    res := \"\"\n \
    \   x_tmp := x\n    for ; x_tmp > 0; x_tmp /= base {\n        res = fmt.Sprintf(\"\
    %d\", x_tmp % base) + res\n    }\n    return res\n}\n", "    var d string = \"\
    \"\n    for ; x > 0; x /= base {\n        d = fmt.Sprintf(\"%d\", x % base) +\
    \ d\n    }\n    return d\n}\n", "    if x == 0 {\n        return \"0\"\n    }\n\
    \    output := \"\"\n    for x > 0 {\n        output = fmt.Sprintf(\"%d%s\", x\
    \ % base, output)\n        x /= base\n    }\n    return output\n}\n", "    //\
    \ implement here.\n    return \"\"\n}\n", "    if x < 0 {\n        return \"\"\
    \n    }\n\n    if x < base {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n\
    \    return change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n}\n",
  "    ret := []byte{}\n    for x > 0 {\n        ret = append(ret, byte(x % base +\
    \ '0'))\n        x /= base\n    }\n    for i, j := 0, len(ret) - 1; i < j; i,\
    \ j = i + 1, j - 1 {\n        ret[i], ret[j] = ret[j], ret[i]\n    }\n    return\
    \ string(ret)\n}\n", "    fmt.Printf(\"change base: %d, %d\\n\", x, base)\n  \
    \  if x < 0 {\n        return \"-\" + change_base(-x, base)\n    }\n    if x <\
    \ base {\n        return string('0' + x)\n    }\n    str := \"\"\n    for x >\
    \ 0 {\n        q := x / base\n        r := x % base\n        str = string('0'\
    \ + r) + str\n        x = q\n    }\n    return str\n}\n", "    ret := \"\"\n \
    \   for x > 0 {\n        ret = fmt.Sprintf(\"%d\", x % base) + ret\n        x\
    \ /= base\n    }\n    return ret\n}\n", "    // Write your code here.\n    if\
    \ x < base {\n        return fmt.Sprintf(\"%d\", x)\n    } else {\n        return\
    \ change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n    }\n}\n", " \
    \   if base > 10 {\n        return \"base number must be less than 10\"\n    }\n\
    \    // declare a slice which has maximum length of 10\n    var result []int\n\
    \    for {\n        if x < base {\n            result = append(result, x)\n  \
    \          break\n        }\n        digit := x % base\n        result = append(result,\
    \ digit)\n        x = x / base\n    }\n    // reverse result\n    for i, j :=\
    \ 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j],\
    \ result[i]\n    }\n    var str_result string\n    for _, num := range result\
    \ {\n        str_result += fmt.Sprintf(\"%d\", num)\n    }\n    return str_result\n\
    }\n", "    result := \"\"\n    if x < base {\n        result = fmt.Sprintf(\"\
    %d\", x)\n    } else {\n        result = fmt.Sprintf(\"%s%d\", change_base(x /\
    \ base, base), x % base)\n    }\n    return result\n}\n", "    if x == 0 {\n \
    \       return \"\"\n    }\n    r := x % base\n    return change_base(x / base,\
    \ base) + fmt.Sprintf(\"%d\", r)\n}\n", "    if base < 2 {\n        panic(\"base\
    \ must be greater than 1\")\n    }\n    digits := []int{}\n    for x > 0 {\n \
    \       digits = append(digits, x % base)\n        x /= base\n    }\n    n :=\
    \ len(digits)\n    for i := 0; i < n / 2; i++ {\n        digits[i], digits[n -\
    \ i - 1] = digits[n - i - 1], digits[i]\n    }\n    s := \"\"\n    for _, d :=\
    \ range digits {\n        s += fmt.Sprintf(\"%d\", d)\n    }\n    return s\n}\n",
  "    b := base\n\n    r := x % b\n    q := x / b\n\n    str := \"\"\n    for q >\
    \ 0 {\n        str = fmt.Sprintf(\"%d%s\", r, str)\n        r = q % b\n      \
    \  q = q / b\n    }\n    str = fmt.Sprintf(\"%d%s\", r, str)\n\n    return str\n\
    }\n", "    var result string\n    for x != 0 {\n        var mod int = x % base\n\
    \        var d string = fmt.Sprintf(\"%d\", mod)\n        result = d + result\n\
    \        x = x / base\n    }\n    return result\n}\n", "    if base == 10 {\n\
    \        return fmt.Sprintf(\"%d\", x)\n    }\n    answer := \"\"\n    tmp :=\
    \ x\n    for tmp > 0 {\n        answer = fmt.Sprintf(\"%d\", tmp % base) + answer\n\
    \        tmp /= base\n    }\n    return answer\n}\n", "    if x == 0 {\n     \
    \   return \"0\"\n    }\n    digits := []string{\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\"}\n    out := \"\"\n    for x > 0 {\n  \
    \      out = digits[x % base] + out\n        x /= base\n    }\n    return out\n\
    }\n", "    ret := \"\"\n    for x > 0 {\n        ret = fmt.Sprintf(\"%d\", x %\
    \ base) + ret\n        x /= base\n    }\n    return ret\n}\n", "    if base >\
    \ 10 {\n        return \"Not implemented\"\n    }\n    if x < base {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n\n    // use recursive call\n    return\
    \ change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n}\n", "    r :=\
    \ x % base\n    q := x / base\n    if q == 0 {\n        return fmt.Sprintf(\"\
    %d\", r)\n    }\n    return change_base(q, base) + fmt.Sprintf(\"%d\", r)\n}\n",
  "    if x < base {\n        return fmt.Sprintf(\"%d\", x)\n    } else {\n      \
    \  return change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n    }\n\
    }\n", "    res := \"\"\n    for x > 0 {\n        // bitwise AND.\n        // &\
    \ 1 is equivalent to % 2.\n        d := x & 1\n        x = x >> 1\n        if\
    \ d == 1 {\n            res = \"1\" + res\n        } else {\n            res =\
    \ \"0\" + res\n        }\n    }\n    return res\n}\n", "    // Implementation\
    \ here\n    // assume base is less than 10.\n    return \"0\"\n}\n", "    var\
    \ xs string\n    for x > 0 {\n        xs = fmt.Sprintf(\"%d%s\", x % base, xs)\n\
    \        x /= base\n    }\n    return xs\n}\n", "    var result string\n    for\
    \ x > 0 {\n        result = fmt.Sprintf(\"%d%s\", x % base, result)\n        x\
    \ /= base\n    }\n    return result\n}\n", "    if x < 0 {\n        return \"\
    -\" + change_base(-x, base)\n    }\n    if x == 0 {\n        return \"0\"\n  \
    \  }\n    if x % base == 0 {\n        return change_base(x / base, base)\n   \
    \ }\n    return change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n\
    }\n", "    if x == 0 {\n        return \"0\"\n    }\n\n    ret := \"\"\n    for\
    \ x > 0 {\n        ret = fmt.Sprintf(\"%d\", x % base) + ret\n        x /= base\n\
    \    }\n    return ret\n}\n", "    if x < base {\n        return fmt.Sprintf(\"\
    %d\", x)\n    } else {\n        return change_base(x / base, base) + fmt.Sprintf(\"\
    %d\", x % base)\n    }\n}\n", "    ret := \"\"\n    for {\n        ret = fmt.Sprintf(\"\
    %d\", x % base) + ret\n        x /= base\n        if x < base {\n            ret\
    \ = fmt.Sprintf(\"%d\", x) + ret\n            break\n        }\n    }\n    return\
    \ ret\n}\n", "    nums := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\"}\n    var result []string\n    for x > 0 {\n        mod\
    \ := x % base\n        result = append(result, nums[mod])\n        x = x / base\n\
    \    }\n    return \"1\"\n}\n", "    if x == 0 {\n        return \"0\"\n    }\n\
    \n    var buf string\n    for {\n        buf = fmt.Sprintf(\"%d%s\", x % base,\
    \ buf)\n        x /= base\n        if x == 0 {\n            break\n        }\n\
    \    }\n    return buf\n}\n", "    var res string\n    for x > 0 {\n        res\
    \ = fmt.Sprintf(\"%d\", x % base) + res\n        x /= base\n    }\n    return\
    \ res\n}\n", "    if x <= 0 {\n        return \"0\"\n    }\n    if base < 2 {\n\
    \        return \"base number must be larger than 1\"\n    }\n    result := \"\
    \"\n    for x > 0 {\n        result = fmt.Sprintf(\"%d\", x % base) + result\n\
    \        x /= base\n    }\n    return result\n}\n", "    if x < 0 {\n        return\
    \ \"-\" + change_base(-x, base)\n    }\n    var result string\n    for x > 0 {\n\
    \        result = fmt.Sprintf(\"%d\", x % base) + result\n        x /= base\n\
    \    }\n    return result\n}\n", "    result := \"\"\n    for x > 0 {\n      \
    \  result = fmt.Sprintf(\"%d\", x % base) + result\n        x /= base\n    }\n\
    \    return result\n}\n", "    if x == 0 {\n        return \"0\"\n    }\n\n  \
    \  result := \"\"\n    for x > 0 {\n        result = fmt.Sprintf(\"%d%s\", x %\
    \ base, result)\n        x /= base\n    }\n    return result\n}\n", "    ret :=\
    \ \"\"\n    if x < base {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    for\
    \ x >= base {\n        remain := x % base\n        x = x / base\n        ret =\
    \ fmt.Sprintf(\"%d%s\", remain, ret)\n    }\n    ret = fmt.Sprintf(\"%d%s\", x,\
    \ ret)\n    return ret\n}\n", "    result := \"\"\n    for x > 0 {\n        result\
    \ = fmt.Sprintf(\"%d\", x % base) + result\n        x /= base\n    }\n    return\
    \ result\n}\n", "    var b int\n    var a int\n    var ret string\n    for x >\
    \ 0 {\n        a = x / base\n        b = x % base\n        ret = fmt.Sprintf(\"\
    %d%s\", b, ret)\n        x = a\n    }\n    return ret\n}\n", "    result := \"\
    \"\n    // TODO: implement\n    return result\n}\n", "    if x == 0 {\n      \
    \  return \"0\"\n    }\n\n    if base < 2 {\n        panic(\"base must be greater\
    \ than or equal to 2\")\n    }\n\n    digits := []int{}\n    for x > 0 {\n   \
    \     digits = append(digits, x % base)\n        x /= base\n    }\n\n    result\
    \ := \"\"\n    for i := len(digits) - 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"\
    %d\", digits[i])\n    }\n\n    return result\n}\n", "    var n, m int\n    out\
    \ := \"\"\n    for {\n        n = x / base\n        m = x % base\n        out\
    \ = fmt.Sprintf(\"%d%s\", m, out)\n        if n == 0 {\n            break\n  \
    \      }\n        x = n\n    }\n    return out\n}\n", "    str := \"\"\n    for\
    \ x != 0 {\n        str = fmt.Sprintf(\"%d\", x % base) + str\n        x /= base\n\
    \    }\n    return str\n}\n", "    if x < 0 {\n        return \"\"\n    }\n  \
    \  if x == 0 {\n        return \"0\"\n    }\n    if base > 10 {\n        return\
    \ \"\"\n    }\n    ret := \"\"\n    for x != 0 {\n        ret = fmt.Sprintf(\"\
    %d\", x % base) + ret\n        x /= base\n    }\n    return ret\n}\n", "    var\
    \ res string\n    if x == 0 {\n        return \"0\"\n    }\n    for x > 0 {\n\
    \        r := x % base\n        res = fmt.Sprintf(\"%d%s\", r, res)\n        x\
    \ = x / base\n    }\n    return res\n}\n", "    remainders := make([]int, 0)\n\
    \    for x > 0 {\n        remainders = append(remainders, x % base)\n        x\
    \ /= base\n    }\n    answer := \"\"\n    for _, remainder := range remainders\
    \ {\n        answer = fmt.Sprintf(\"%d%s\", remainder, answer)\n    }\n    return\
    \ answer\n}\n", "    q := x / base\n    r := x % base\n    if q == 0 {\n     \
    \   return fmt.Sprintf(\"%d\", r)\n    } else {\n        return change_base(q,\
    \ base) + fmt.Sprintf(\"%d\", r)\n    }\n}\n", "    s := \"\"\n    if x == 0 {\n\
    \        return \"0\"\n    }\n    for x > 0 {\n        s = fmt.Sprintf(\"%d%s\"\
    , x % base, s)\n        x /= base\n    }\n    return s\n}\n", "    if base ==\
    \ 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    s := \"\"\n    for x\
    \ > 0 {\n        s = fmt.Sprintf(\"%d\", x % base) + s\n        x /= base\n  \
    \  }\n    return s\n}\n", "    // TODO: Write me!\n    return \"\"\n}\n", "  \
    \  var buf string\n    for x > 0 {\n        buf = fmt.Sprintf(\"%d%s\", x % base,\
    \ buf)\n        x /= base\n    }\n    return buf\n}\n", "    var r string\n  \
    \  for x > 0 {\n        r = fmt.Sprintf(\"%d%s\", x % base, r)\n        x /= base\n\
    \    }\n    return r\n}\n", "    y := make([]int, 0)\n    for x > 0 {\n      \
    \  y = append(y, x % base)\n        x /= base\n    }\n    fmt.Println(y)\n   \
    \ return \"a\"\n}\n", "    var format = \"%0\" + fmt.Sprintf(\"%d\", int(base))\
    \ + \"b\"\n    return fmt.Sprintf(format, x)\n}\n", "    s := \"\"\n    for x\
    \ > 0 {\n        s = fmt.Sprintf(\"%d%s\", x % base, s)\n        x /= base\n \
    \   }\n    return s\n}\n", "    // your code here\n    return \"\"\n}\n", "  \
    \  // Given base is less than 10.\n    if base < 2 || base > 10 {\n        panic(\"\
    base is out of range 2-10.\")\n    }\n\n    // If input number x is 0.\n    if\
    \ x == 0 {\n        return \"0\"\n    }\n\n    // result is array of integer numbers.\n\
    \    result := make([]int, 0)\n\n    // Work on remainders of x divided by base.\n\
    \    for x > 0 {\n        // Push the remainder to the result array.\n       \
    \ result = append(result, x % base)\n        // Divide x by base.\n        x /=\
    \ base\n    }\n\n    // The result array was created in the reversed order.\n\
    \    // The length of the result array is less than 20.\n    s := make([]byte,\
    \ len(result))\n    for i, v := range result {\n        // Convert integer number\
    \ to a byte.\n        s[len(result) - i - 1] = byte(v) + '0'\n    }\n\n    return\
    \ string(s)\n}\n", "    var ret string\n    for x > 0 {\n        last_digit :=\
    \ x % base\n        last_digit_as_rune := rune(last_digit + 48)\n        ret =\
    \ string(last_digit_as_rune) + ret\n        x = x / base\n    }\n    return ret\n\
    }\n", "    if x == 0 {\n        return \"0\"\n    }\n\n    if base > 10 {\n  \
    \      panic(\"base too large\")\n    }\n\n    res := \"\"\n    for x > 0 {\n\
    \        res = fmt.Sprintf(\"%d\", x % base) + res\n        x /= base\n    }\n\
    \    return res\n}\n", "    res := \"\"\n    for x > 0 {\n        r := x % base\n\
    \        x = x / base\n        res = fmt.Sprintf(\"%d%s\", r, res)\n    }\n  \
    \  return res\n}\n", "    result := \"\"\n    quotient := x / base\n    remainder\
    \ := x % base\n    result = fmt.Sprintf(\"%d%s\", remainder, result)\n    for\
    \ quotient > 0 {\n        remainder = quotient % base\n        quotient = quotient\
    \ / base\n        result = fmt.Sprintf(\"%d%s\", remainder, result)\n    }\n \
    \   return result\n}\n", "    var ret string\n    if x < base {\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n    return change_base(x / base, base) + fmt.Sprintf(\"\
    %d\", x % base)\n}\n", "    s := \"\"\n    for x > 0 {\n        s = fmt.Sprintf(\"\
    %d%s\", x % base, s)\n        x /= base\n    }\n    return s\n}\n", "    var l\
    \ []rune\n    for x > 0 {\n        l = append(l, rune(x % base) + '0')\n     \
    \   x /= base\n    }\n    if len(l) == 0 {\n        return \"0\"\n    }\n    return\
    \ string(reverse_rune(l))\n}\n", "    var res string\n    var remainder int\n\
    \    for x != 0 {\n        remainder = x % base\n        x = x / base\n      \
    \  res = fmt.Sprintf(\"%d%s\", remainder, res)\n    }\n    return res\n}\n", " \
    \   remainder := make([]int, base)\n    size := 0\n    var ch string\n\n    if\
    \ x < base {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\n    for x > 0 {\n\
    \        remainder[size] = x % base\n        x = x / base\n        size += 1\n\
    \    }\n\n    for i := size - 1; i >= 0; i-- {\n        ch += fmt.Sprintf(\"%d\"\
    , remainder[i])\n    }\n\n    return ch\n}\n", "    switch {\n    case x == 0:\n\
    \        return \"\"\n    case x < 0:\n        return fmt.Sprintf(\"-%s\", change_base(-x,\
    \ base))\n    }\n    return fmt.Sprintf(\"%s%d\", change_base(x/base, base), x%base)\n\
    }\n", "    xs := fmt.Sprintf(\"%d\", x)\n    y := make([]int, len(xs))\n    for\
    \ i := 0; i < len(xs); i++ {\n        y[i] = int(xs[i] - '0')\n    }\n    z :=\
    \ make([]int, len(y))\n    z[0] = y[0] % base\n    for i := 1; i < len(y); i++\
    \ {\n        z[i] = (y[i] + (y[i-1] - z[i-1])*10) % base\n    }\n    s := \"\"\
    \n    for i := len(z) - 1; i >= 0; i-- {\n        s += fmt.Sprintf(\"%d\", z[i])\n\
    \    }\n    return s\n}\n", "    n := 1\n    for n * base <= x {\n        n =\
    \ n * base\n    }\n    res := \"\"\n    for n > 0 {\n        m := x / n\n    \
    \    res += fmt.Sprintf(\"%d\", m)\n        x = x - m * n\n        n = n / base\n\
    \    }\n    return res\n}\n", "    result := \"\"\n    for x > 0 {\n        result\
    \ = fmt.Sprintf(\"%d\", x % base) + result\n        x /= base\n    }\n    return\
    \ result\n}\n", "    var y, r, m int\n    y = 0\n    m = 1\n    for x > 0 {\n\
    \        r = x % base\n        x = x / base\n        y = y + r * m\n        m\
    \ = m * 10\n    }\n    return fmt.Sprintf(\"%d\", y)\n}\n", "    r := \"\"\n \
    \   if x == 0 {\n        return \"0\"\n    }\n    if x < 0 {\n        return \"\
    -\" + change_base(-x, base)\n    }\n    if x < base {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    div := x / base\n    rem := x % base\n    return change_base(div,\
    \ base) + fmt.Sprintf(\"%d\", rem)\n}\n", "    var r string\n    if x == 0 {\n\
    \        return \"0\"\n    }\n    for x > 0 {\n        y := x % base\n       \
    \ r = fmt.Sprintf(\"%d%s\", y, r)\n        x = x / base\n    }\n    return r\n\
    }\n", "    if base > 10 {\n        panic(\"base is larger than 10\")\n    }\n\
    \    if x == 0 {\n        return \"0\"\n    }\n    s := \"\"\n    for x > 0 {\n\
    \        remainder := x % base\n        x = x / base\n        s = fmt.Sprintf(\"\
    %d%s\", remainder, s)\n    }\n    return s\n}\n", "    quotient := x / base\n\
    \    reminder := x % base\n    if quotient == 0 {\n        return fmt.Sprintf(\"\
    %d\", reminder)\n    } else {\n        return change_base(quotient, base) + fmt.Sprintf(\"\
    %d\", reminder)\n    }\n}\n", "    r := x % base\n    if x <= base {\n       \
    \ return fmt.Sprintf(\"%d\", r)\n    }\n    return change_base(x / base, base)\
    \ + fmt.Sprintf(\"%d\", r)\n}\n", "    n := int64(x)\n    ans := \"\"\n    for\
    \ n > 0 {\n        ans = fmt.Sprintf(\"%d\", n % int64(base)) + ans\n        n\
    \ /= int64(base)\n    }\n    return ans\n}\n", "    result := \"\"\n    for x\
    \ > 0 {\n        result = fmt.Sprintf(\"%d\", x % base) + result\n        x /=\
    \ base\n    }\n    return result\n}\n", "    a := make([]int, 0)\n    for x !=\
    \ 0 {\n        a = append(a, x % base)\n        x /= base\n    }\n    return fmt.Sprintf(\"\
    %d\", a)\n}\n", "    var reverse []int\n    var res []int\n    var nums = []string{\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"}\n    for x\
    \ != 0 {\n        r := x % base\n        reverse = append(reverse, r)\n      \
    \  x = x / base\n    }\n    for i := len(reverse) - 1; i >= 0; i-- {\n       \
    \ res = append(res, reverse[i])\n    }\n    // fmt.Println(res)\n    var s string\n\
    \    for i := 0; i < len(res); i++ {\n        s += nums[res[i]]\n    }\n    return\
    \ s\n}\n", "    if x == 0 {\n        return \"0\"\n    }\n\n    b := make([]string,\
    \ 0)\n    for x > 0 {\n        b = append(b, fmt.Sprintf(\"%d\", x % base))\n\
    \        x /= base\n    }\n\n    result := \"\"\n    for i := len(b) - 1; i >=\
    \ 0; i-- {\n        result += b[i]\n    }\n\n    return result\n}\n", "    result\
    \ := \"\"\n    for x != 0 {\n        remainder := x % base\n        if remainder\
    \ >= 10 {\n            result = fmt.Sprintf(\"%s%s\", string(remainder + 87),\
    \ result)\n        } else {\n            result = fmt.Sprintf(\"%s%d\", result,\
    \ remainder)\n        }\n        x = x / base\n    }\n    return result\n}\n",
  "    var res string = \"\"\n    for i := x; i > 0; i /= base {\n        res = fmt.Sprintf(\"\
    %d\", i % base) + res\n    }\n    return res\n}\n", "    ret := \"\"\n    for\
    \ x > 0 {\n        ret = fmt.Sprintf(\"%d\", x % base) + ret\n        x /= base\n\
    \    }\n    return ret\n}\n", "    tmp := x\n    res := \"\"\n    for tmp > 0\
    \ {\n        res = fmt.Sprintf(\"%d\", tmp % base) + res\n        tmp = tmp /\
    \ base\n    }\n    return res\n}\n", "    res := \"\"\n    for i := x; i > 0;\
    \ i /= base {\n        res = fmt.Sprintf(\"%v%v\", i % base, res)\n    }\n   \
    \ return res\n}\n", "    switch {\n    case x / base == 0:\n        return fmt.Sprintf(\"\
    %d\", x % base)\n    default:\n        return change_base(x / base, base) + fmt.Sprintf(\"\
    %d\", x % base)\n    }\n}\n", "    if x < base {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    return change_base(x / base, base) + fmt.Sprintf(\"%d\",\
    \ x % base)\n}\n", "    if x == 0 {\n        return \"0\"\n    }\n    if base\
    \ < 2 {\n        return \"\"\n    }\n    result := \"\"\n    for x > 0 {\n   \
    \     r := x % base\n        result = fmt.Sprintf(\"%d%s\", r, result)\n     \
    \   x = x / base\n    }\n    return result\n}\n", "    ret := \"\"\n    for x\
    \ > 0 {\n        ret = fmt.Sprintf(\"%d\", x % base) + ret\n        x /= base\n\
    \    }\n    return ret\n}\n", "    result := \"\"\n    if base < 2 || base > 10\
    \ {\n        return result\n    }\n    if x < base {\n        return string(rune(x)\
    \ + '0')\n    }\n    i := x\n    for i > 0 {\n        result = string(rune(i %\
    \ base) + '0') + result\n        i = i / base\n    }\n    return result\n}\n",
  "    result := \"\"\n    for x != 0 {\n        result = fmt.Sprintf(\"%d\", x %\
    \ base) + result\n        x /= base\n    }\n    return result\n}\n", "    n :=\
    \ x\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n\
    \ % base)\n        n = n / base\n    }\n    var s string\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        s += fmt.Sprintf(\"%d\", digits[i])\n    }\n   \
    \ return s\n}\n", "    if x == 0 {\n        return \"0\"\n    }\n    res := \"\
    \"\n    for x > 0 {\n        r := x % base\n        x = x / base\n        res\
    \ = fmt.Sprintf(\"%d%s\", r, res)\n    }\n    return res\n}\n", "    // TODO:\
    \ fill in the function body\n    return \"\"\n}\n", "    var res string\n    for\
    \ x > 0 {\n        r := x % base\n        x = x / base\n        res = fmt.Sprintf(\"\
    %d%s\", r, res)\n    }\n    return res\n}\n", "    var str string\n    for x >\
    \ 0 {\n        str = fmt.Sprintf(\"%d%s\", x % base, str)\n        x /= base\n\
    \    }\n    return str\n}\n", "    answer := \"\"\n    for x > 0 {\n        answer\
    \ = fmt.Sprintf(\"%d\", x % base) + answer\n        x /= base\n    }\n    return\
    \ answer\n}\n", "    if x < base {\n        return fmt.Sprintf(\"%d\", x)\n  \
    \  }\n    return change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n\
    }\n", "    if x < base {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    q,\
    \ r := x / base, x % base\n    return change_base(q, base) + fmt.Sprintf(\"%d\"\
    , r)\n}\n", "    str := \"\"\n    for x > 0 {\n        m := x % base\n       \
    \ x = x / base\n        str = fmt.Sprintf(\"%d%s\", m, str)\n    }\n    return\
    \ str\n}\n", "    var d int = 0\n    var result []int = make([]int, 100)\n   \
    \ for x > 0 {\n        d = x % base\n        x = x / base\n        result = append(result,\
    \ d)\n    }\n    return fmt.Sprintf(\"%d\", result)\n}\n", "    if x == 0 {\n\
    \        return \"0\"\n    }\n    y := \"\"\n    for i := x; i > 0; i /= base\
    \ {\n        y = fmt.Sprintf(\"%d%s\", i % base, y)\n    }\n    return y\n}\n",
  "    if base < 0 {\n        return \"Invalid base: \" + string(base)\n    }\n\n\
    \    if x < 0 {\n        return \"Negative number not allowed.\"\n    }\n\n  \
    \  s := \"\"\n    rem := 0\n    for x > 0 {\n        rem = x % base\n        x\
    \ = x / base\n        s = fmt.Sprintf(\"%v%v\", rem, s)\n    }\n    return s\n\
    }\n", "    var remainder int = x\n    var result = \"\"\n    var remainder_list\
    \ []int\n    if x == 0 {\n        return \"0\"\n    }\n\n    for remainder > 0\
    \ {\n        remainder_list = append(remainder_list, remainder % base)\n     \
    \   remainder = remainder / base\n    }\n\n    for i := len(remainder_list) -\
    \ 1; i >= 0; i-- {\n        result += fmt.Sprintf(\"%d\", remainder_list[i])\n\
    \    }\n\n    return result\n}\n", "    s := \"\"\n    for x > 0 {\n        s\
    \ = fmt.Sprintf(\"%v%v\", x % base, s)\n        x /= base\n    }\n    return s\n\
    }\n", "    var result []byte\n    for x != 0 {\n        result = append(result,\
    \ byte(x % base + '0'))\n        x /= base\n    }\n    for i, j := 0, len(result)\
    \ - 1; i < j; i, j = i + 1, j - 1 {\n        result[i], result[j] = result[j],\
    \ result[i]\n    }\n    return string(result)\n}\n", "    l := []string{}\n  \
    \  for ; x > 0; x /= base {\n        l = append(l, fmt.Sprintf(\"%d\", x % base))\n\
    \    }\n    return fmt.Sprintf(\"%s\", l)\n}\n", "    ans := \"\"\n    for x >\
    \ 0 {\n        ans = fmt.Sprintf(\"%d\", x % base) + ans\n        x /= base\n\
    \    }\n    return ans\n}\n", "    base_str := \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    s := \"\"\n    for x > 0 {\n        remainder := x % base\n        s = string(base_str[remainder])\
    \ + s\n        x = x / base\n    }\n    return s\n}\n", "    var _change_base\
    \ func(int, int) string\n    _change_base = func(x int, base int) string {\n \
    \       if x == 0 {\n            return \"\"\n        } else {\n            return\
    \ _change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n        }\n  \
    \  }\n    return _change_base(x, base)\n}\n", "    s := make([]string, 0)\n  \
    \  if x == 0 {\n        return \"0\"\n    }\n    for x > 0 {\n        s = append(s,\
    \ fmt.Sprintf(\"%d\", x % base))\n        x /= base\n    }\n    for i, j := 0,\
    \ len(s)-1; i < j; i, j = i+1, j-1 {\n        s[i], s[j] = s[j], s[i]\n    }\n\
    \    return strings.Join(s, \"\")\n}\n", "    result := \"\"\n    for x != 0 {\n\
    \        result = fmt.Sprintf(\"%d\", x % base) + result\n        x /= base\n\
    \    }\n    return result\n}\n", "    ans := \"\"\n    for x > 0 {\n        n\
    \ := x % base\n        ans = fmt.Sprintf(\"%d%s\", n, ans)\n        x = x / base\n\
    \    }\n    return ans\n}\n", "    if x < base {\n        return fmt.Sprintf(\"\
    %d\", x)\n    } else {\n        return change_base(x / base, base) + fmt.Sprintf(\"\
    %d\", x % base)\n    }\n}\n", "    result := \"\"\n    for {\n        if x ==\
    \ 0 {\n            break\n        }\n        r := x % base\n        result = fmt.Sprintf(\"\
    %d%s\", r, result)\n        x = x / base\n    }\n    return result\n}\n", "  \
    \  if x == 0 {\n        return \"0\"\n    }\n    if base < 2 {\n        return\
    \ \"error\"\n    }\n    if base > 10 {\n        return \"error\"\n    }\n    s\
    \ := \"\"\n    for x > 0 {\n        s = fmt.Sprintf(\"%d\", x % base) + s\n  \
    \      x /= base\n    }\n    return s\n}\n", "    r := \"\"\n    if x == 0 {\n\
    \        return \"0\"\n    }\n    if x < 0 {\n        r += \"-\"\n        x =\
    \ -x\n    }\n    q := x / base\n    r += change_base(q, base)\n    digit := x\
    \ % base\n    if digit > 9 {\n        r += string(digit + 55)\n    } else {\n\
    \        r += string(digit + 48)\n    }\n    return r\n}\n", "    n := x\n   \
    \ result := \"\"\n    for n >= base {\n        result = fmt.Sprintf(\"%d\", n\
    \ % base) + result\n        n = n / base\n    }\n    result = fmt.Sprintf(\"%d\"\
    , n) + result\n    return result\n}\n\n//", "    result := \"\"\n    for x > 0\
    \ {\n        remainder := x % base\n        result = fmt.Sprintf(\"%d%s\", remainder,\
    \ result)\n        x = x / base\n    }\n    return result\n}\n", "    result :=\
    \ \"\"\n    for ; x != 0; x /= base {\n        result = fmt.Sprintf(\"%s%d\",\
    \ string(x % base + '0'), result)\n    }\n    return result\n}\n", "    var m\
    \ int = x\n    var d int = base\n    var r int = 0\n    var s string = \"\"\n\
    \    for {\n        r = m % d\n        m = m / d\n        s = fmt.Sprintf(\"%d%s\"\
    , r, s)\n        if m == 0 {\n            break\n        }\n    }\n    return\
    \ s\n}\n", "    var y int\n    y = x\n    var result string\n    for {\n     \
    \   if y == 0 {\n            break\n        }\n        var remainder = y % base\n\
    \        result = fmt.Sprintf(\"%d%s\", remainder, result)\n        y = y / base\n\
    \    }\n    return result\n}\n", "    var y int\n    var d int\n    var result\
    \ []int\n    var digits int\n    y = x\n    for y != 0 {\n        d = y % base\n\
    \        result = append(result, d)\n        y = y / base\n    }\n    digits =\
    \ len(result)\n    var strresult string\n    for i := digits - 1; i >= 0; i--\
    \ {\n        strresult += fmt.Sprintf(\"%d\", result[i])\n    }\n    return strresult\n\
    }\n", "    if x == 0 {\n        return \"0\"\n    }\n\n    var res []string\n\
    \    for x > 0 {\n        res = append(res, fmt.Sprintf(\"%d\", x % base))\n \
    \       x /= base\n    }\n\n    i, j := 0, len(res) - 1\n    for i < j {\n   \
    \     res[i], res[j] = res[j], res[i]\n        i++\n        j--\n    }\n\n   \
    \ return fmt.Sprintf(\"%s\", strings.Join(res, \"\"))\n}\n", "    var r []int\n\
    \    var rstring string\n    for x > 0 {\n        if (x % base) == 0 {\n     \
    \       r = append(r, 0)\n        } else {\n            r = append(r, 1)\n   \
    \     }\n        x = x / base\n    }\n    for i := len(r) - 1; i >= 0; i-- {\n\
    \        rstring += fmt.Sprintf(\"%d\", r[i])\n    }\n    return rstring\n}\n",
  "    remainder := x\n    str := \"\"\n    for remainder > 0 {\n        str = fmt.Sprintf(\"\
    %d%s\", remainder % base, str)\n        remainder = remainder / base\n    }\n\
    \    return str\n}\n", "    if x < base {\n        return fmt.Sprintf(\"%d\",\
    \ x)\n    }\n    return change_base(x / base, base) + fmt.Sprintf(\"%d\", x %\
    \ base)\n}\n", "    if x <= 1 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n\
    \    return change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n}\n",
  "    r := \"\"\n    for x > 0 {\n        m := x % base\n        if m < 10 {\n  \
    \          r = fmt.Sprintf(\"%d%s\", m, r)\n        } else {\n            r =\
    \ fmt.Sprintf(\"%c%s\", m+55, r)\n        }\n        x = x / base\n    }\n   \
    \ return r\n}\n", "    if x < base {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    return change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n\
    }\n", "    if x == 0 {\n        return \"0\"\n    }\n\n    var convStr string\n\
    \    for x > 0 {\n        convStr = fmt.Sprintf(\"%v%v\", x % base, convStr)\n\
    \        x /= base\n    }\n    return convStr\n}\n", "    s := \"\"\n    for x\
    \ > 0 {\n        x, b := x / base, x % base\n        s = fmt.Sprintf(\"%d%s\"\
    , b, s)\n    }\n    return s\n}\n", "    // write your code here\n    s := \"\"\
    \n    for x > 0 {\n        r := x % base\n        x = x / base\n        s = fmt.Sprintf(\"\
    %d%s\", r, s)\n    }\n    return s\n}\n", "    ret := \"\"\n    for ; x > 0; x\
    \ /= base {\n        ret = fmt.Sprintf(\"%d\", x % base) + ret\n    }\n    return\
    \ ret\n}\n", "    r := x % base\n    q := x / base\n    s := \"\"\n    if q >\
    \ 0 {\n        s = change_base(q, base)\n    }\n    s += fmt.Sprintf(\"%d\", r)\n\
    \    return s\n}\n", "    s := \"\"\n    for x != 0 {\n        d := x % base\n\
    \        x = x / base\n        s = fmt.Sprintf(\"%d%s\", d, s)\n    }\n    return\
    \ s\n}\n", "    n := x\n    r := \"\"\n    for ; n > 0; n /= base {\n        r\
    \ = fmt.Sprintf(\"%v%v\", n % base, r)\n    }\n    return r\n}\n", "    s := \"\
    \"\n    for x > 0 {\n        n := x % base\n        s = fmt.Sprintf(\"%d%s\",\
    \ n, s)\n        x = x / base\n    }\n    return s\n}\n", "    if x / base ==\
    \ 0 {\n        return fmt.Sprintf(\"%d\", x % base)\n    }\n    return change_base(x\
    \ / base, base) + fmt.Sprintf(\"%d\", x % base)\n}\n", "    str := \"\"\n    q\
    \ := x\n    for q > 0 {\n        str = fmt.Sprintf(\"%d\", q % base) + str\n \
    \       q = q / base\n    }\n    return str\n}\n", "    // Hint: use the division\
    \ and modulo operators\n    return \"\"\n}\n", "    var result string\n    for\
    \ x > 0 {\n        result = fmt.Sprintf(\"%d%s\", x % base, result)\n        x\
    \ /= base\n    }\n    return result\n}\n", "    var ret string\n    for x > 0\
    \ {\n        y := x % base\n        ret = fmt.Sprintf(\"%s%d\", ret, y)\n    \
    \    x = x / base\n    }\n    return ret\n}\n", "    if x == 0 {\n        return\
    \ \"0\"\n    }\n    result := \"\"\n    for x > 0 {\n        r := x % base\n \
    \       x = x / base\n        result = fmt.Sprintf(\"%d%s\", r, result)\n    }\n\
    \    return result\n}\n", "    if x < 0 {\n        return \"\"\n    }\n    if\
    \ x < base {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return change_base(x\
    \ / base, base) + fmt.Sprintf(\"%d\", x % base)\n}\n", "    var s string\n   \
    \ for x > 0 {\n        s = fmt.Sprintf(\"%d%s\", x % base, s)\n        x /= base\n\
    \    }\n    return s\n}\n", "    var a []int\n    for i := 0; x > 0; i++ {\n \
    \       a = append(a, x % base)\n        x /= base\n    }\n    str := \"\"\n \
    \   for i := len(a) - 1; i >= 0; i-- {\n        str += fmt.Sprintf(\"%d\", a[i])\n\
    \    }\n    return str\n}\n", "    if x < base {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    reminder := x % base\n    quotient := x / base\n    return\
    \ change_base(quotient, base) + fmt.Sprintf(\"%d\", reminder)\n}\n", "    result\
    \ := \"\"\n    for x != 0 {\n        result = fmt.Sprintf(\"%d\", x % base) +\
    \ result\n        x /= base\n    }\n    return result\n}\n", "    if x == 0 {\n\
    \        return \"0\"\n    }\n    b := make([]int, 0)\n    for x > 0 {\n     \
    \   b = append(b, x % base)\n        x /= base\n    }\n    return fmt.Sprintf(\"\
    %v\", reverse(b))\n}\n", "    if x < base {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    y := x % base\n    z := x / base\n    return change_base(z, base)\
    \ + fmt.Sprintf(\"%d\", y)\n}\n", "    remainders := make([]int, 10)\n    i :=\
    \ 0\n    for {\n        remainders[i] = x % base\n        x = x / base\n     \
    \   if x == 0 {\n            break\n        }\n        i++\n    }\n    result\
    \ := \"\"\n    for j := i; j >= 0; j-- {\n        result += fmt.Sprintf(\"%d\"\
    , remainders[j])\n    }\n    return result\n}\n", "    if x < 0 {\n        return\
    \ \"\"\n    }\n    var result string\n    for x > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", x % base, result)\n        x /= base\n    }\n    return result\n}\n",
  "    c := 0\n    s := make([]int, 0)\n    for {\n        c = x % base\n        x\
    \ = x / base\n        s = append(s, c)\n        if x == 0 {\n            break\n\
    \        }\n    }\n    r := \"\"\n    l := len(s)\n    for i := l - 1; i >= 0;\
    \ i-- {\n        r += fmt.Sprintf(\"%d\", s[i])\n    }\n    return r\n}\n", " \
    \   if x == 0 {\n        return \"0\"\n    }\n\n    nums := []int{}\n    for x\
    \ != 0 {\n        nums = append(nums, x % base)\n        x /= base\n    }\n\n\
    \    str := \"\"\n    for i := len(nums) - 1; i >= 0; i-- {\n        str += fmt.Sprintf(\"\
    %d\", nums[i])\n    }\n    return str\n}\n", "    remainder := x\n    result :=\
    \ \"\"\n    for remainder > 0 {\n        result = fmt.Sprintf(\"%d%s\", remainder\
    \ % base, result)\n        remainder = remainder / base\n    }\n    return result\n\
    }\n", "    s := \"\"\n    for x > 0 {\n        s = fmt.Sprintf(\"%d%s\", x % base,\
    \ s)\n        x /= base\n    }\n    return s\n}\n", "    r := \"\"\n    for x\
    \ > 0 {\n        r = fmt.Sprintf(\"%d\", x % base) + r\n        x /= base\n  \
    \  }\n    return r\n}\n", "    o := \"\"\n    for x > 0 {\n        o = fmt.Sprintf(\"\
    %d%s\", x % base, o)\n        x /= base\n    }\n    return o\n}\n", "    var new_str\
    \ []byte\n    for x > 0 {\n        new_str = append(new_str, byte(x % base) +\
    \ '0')\n        x /= base\n    }\n    res := string(new_str)\n    for i, j :=\
    \ 0, len(res) - 1; i < j; i, j = i + 1, j - 1 {\n        res[i], res[j] = res[j],\
    \ res[i]\n    }\n    return res\n}\n", "    result := \"\"\n    for x != 0 {\n\
    \        result = fmt.Sprintf(\"%d\", x % base) + result\n        x /= base\n\
    \    }\n    return result\n}\n", "    var result string\n    for x > 0 {\n   \
    \     mod := x % base\n        x = x / base\n        result = fmt.Sprintf(\"%d%s\"\
    , mod, result)\n    }\n    return result\n}\n", "    if x == 0 {\n        return\
    \ \"0\"\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n \
    \   }\n    digits := make([]int, 0)\n    for x > 0 {\n        digits = append(digits,\
    \ x % base)\n        x /= base\n    }\n    ret := \"\"\n    for i := len(digits)\
    \ - 1; i >= 0; i-- {\n        ret += fmt.Sprintf(\"%d\", digits[i])\n    }\n \
    \   return ret\n}\n", "    var digit = []int{}\n    for x > 0 {\n        digit\
    \ = append(digit, x % base)\n        x /= base\n    }\n    return fmt.Sprintf(\"\
    %v\", digit)\n}\n", "    if x == 0 {\n        return \"0\"\n    }\n\n    var ret\
    \ string = \"\"\n    for {\n        if x == 0 {\n            break\n        }\n\
    \        digit := x % base\n        x = x / base\n        ret = fmt.Sprintf(\"\
    %d%s\", digit, ret)\n    }\n    return ret\n}\n", "    res := \"\"\n    for x\
    \ > 0 {\n        res = fmt.Sprintf(\"%d\", x % base) + res\n        x /= base\n\
    \    }\n    return res\n}\n", "    var buf []int\n    for x > 0 {\n        y :=\
    \ x % base\n        buf = append(buf, y)\n        x = x / base\n    }\n    str_buf\
    \ := make([]string, len(buf))\n    for i, v := range buf {\n        str_buf[len(buf)-i-1]\
    \ = fmt.Sprintf(\"%d\", v)\n    }\n    return fmt.Sprintf(\"%s\", str_buf)\n}\n",
  "    if x == 0 {\n        return \"0\"\n    }\n    if base < 2 {\n        panic(\"\
    base should be greater than 1\")\n    }\n    result := make([]int, 0)\n    for\
    \ x > 0 {\n        result = append(result, x % base)\n        x /= base\n    }\n\
    \    for i, j := 0, len(result) - 1; i < j; i, j = i + 1, j - 1 {\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    str := \"\"\n    for _, v := range\
    \ result {\n        str += fmt.Sprintf(\"%d\", v)\n    }\n    return str\n}\n",
  "    if x < base {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return change_base(x\
    \ / base, base) + fmt.Sprintf(\"%d\", x % base)\n}\n", "    result := \"\"\n \
    \   for x > 0 {\n        y := x % base\n        x = x / base\n        if y < 10\
    \ {\n            result = fmt.Sprintf(\"%d%s\", y, result)\n        } else {\n\
    \            result = fmt.Sprintf(\"%c%s\", 'A' + y - 10, result)\n        }\n\
    \    }\n    return result\n}\n", "    result := \"\"\n    for x > 0 {\n      \
    \  result = fmt.Sprintf(\"%d\", x % base) + result\n        x /= base\n    }\n\
    \    return result\n}\n", "    var result string\n    for x > 0 {\n        result\
    \ = fmt.Sprintf(\"%d%s\", x % base, result)\n        x /= base\n    }\n    return\
    \ result\n}\n", "    l := []rune{}\n    for x > 0 {\n        l = append(l, rune(x\
    \ % base + '0'))\n        x /= base\n    }\n    for i, j := 0, len(l) - 1; i <\
    \ j; i, j = i + 1, j - 1 {\n        l[i], l[j] = l[j], l[i]\n    }\n    return\
    \ string(l)\n}\n", "    if base < 2 {\n        return \"\"\n    }\n    quotient\
    \ := x / base\n    remain := x % base\n    if quotient == 0 {\n        return\
    \ fmt.Sprintf(\"%d\", remain)\n    }\n    return change_base(quotient, base) +\
    \ fmt.Sprintf(\"%d\", remain)\n}\n", "    s := \"\"\n    for x > 0 {\n       \
    \ r := x % base\n        s = fmt.Sprintf(\"%d%s\", r, s)\n        x = x / base\n\
    \    }\n    return s\n}\n", "    var result string\n    if x == 0 {\n        return\
    \ \"0\"\n    }\n    for x > 0 {\n        result = fmt.Sprintf(\"%d%s\", x % base,\
    \ result)\n        x /= base\n    }\n    return result\n}\n", "    m := make(map[int]string)\n\
    \    for i := 0; i < 10; i++ {\n        m[i] = fmt.Sprintf(\"%d\", i)\n    }\n\
    \    y := x\n    result := \"\"\n    for y != 0 {\n        num := y % base\n \
    \       y = y / base\n        result = m[num] + result\n    }\n    return result\n\
    }\n", "    // TODO: implement your code here\n    return \"\"\n}\n", "    if x\
    \ < base {\n        return fmt.Sprintf(\"%d\", x)\n    } else {\n        return\
    \ change_base(x / base, base) + fmt.Sprintf(\"%d\", x % base)\n    }\n}\n", " \
    \   if x < base {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return change_base(x\
    \ / base, base) + fmt.Sprintf(\"%d\", x % base)\n}\n", "    var t []int\n\n  \
    \  for x > 0 {\n        t = append(t, x % base)\n        x /= base\n    }\n\n\
    \    var s string\n    for _, v := range t {\n        s = fmt.Sprintf(\"%d%s\"\
    , v, s)\n    }\n\n    return s\n}\n", "    var s string = \"\"\n    for x > 0\
    \ {\n        y := x % base\n        s = fmt.Sprintf(\"%d%s\", y, s)\n        x\
    \ = x / base\n    }\n    return s\n}\n", "    ret := \"\"\n    for x > 0 {\n \
    \       ret = fmt.Sprintf(\"%d\", x % base) + ret\n        x /= base\n    }\n\
    \    return ret\n}\n", "    if x == 0 {\n        return \"0\"\n    }\n\n    res\
    \ := \"\"\n    for x > 0 {\n        res = fmt.Sprintf(\"%d\", x % base) + res\n\
    \        x /= base\n    }\n    return res\n}\n", "    var ret string\n    for\
    \ x > 0 {\n        i := x % base\n        ret = fmt.Sprintf(\"%d%s\", i, ret)\n\
    \        x = x / base\n    }\n    return ret\n}\n", "    if x < base {\n     \
    \   return fmt.Sprintf(\"%d\", x)\n    }\n    return change_base(x / base, base)\
    \ + fmt.Sprintf(\"%d\", x % base)\n}\n", "    var res string\n    if x == 0 {\n\
    \        return \"0\"\n    }\n    if x < 0 {\n        res += \"-\"\n        x\
    \ = -x\n    }\n    for x > 0 {\n        res = fmt.Sprintf(\"%d\", x % base) +\
    \ res\n        x /= base\n    }\n    return res\n}\n", "    str := \"\"\n    for\
    \ x > 0 {\n        y := x % base\n        x = x / base\n        str = fmt.Sprintf(\"\
    %d%s\", y, str)\n    }\n    return str\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
