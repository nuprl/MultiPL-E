name: HumanEval_57_monotonic
language: go_test.go
prompt: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return true is list elements are monotonically increasing or decreasing.\n// >>>\
  \ monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4, 10})\n\
  // false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l []int)\
  \ bool {\n"
tests: "func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n   \
  \  { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
  \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
  \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
  \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n \
  \    { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
  \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // length of list is 0 or 1\n    if len(l) <= 1 {\n        return\
    \ true\n    }\n\n    // list elements are increasing\n    if l[0] < l[len(l)-1]\
    \ {\n        for i := 0; i < len(l)-1; i++ {\n            if l[i] > l[i+1] {\n\
    \                return false\n            }\n        }\n    }\n\n    // list\
    \ elements are decreasing\n    if l[0] > l[len(l)-1] {\n        for i := 0; i\
    \ < len(l)-1; i++ {\n            if l[i] < l[i+1] {\n                return false\n\
    \            }\n        }\n    }\n\n    return true\n}\n", "    if len(l) <= 1\
    \ {\n        return true\n    }\n    prev := l[0]\n    sig := 0\n    for _, elem\
    \ := range l[1:] {\n        if elem == prev {\n            continue\n        }\n\
    \        if sig == 0 {\n            sig = elem - prev\n        } else if sig *\
    \ (elem - prev) < 0 {\n            return false\n        }\n        prev = elem\n\
    \    }\n    return true\n}\n", "    if len(l) <= 1 {\n        return true\n  \
    \  }\n    increasing := l[0] < l[1]\n    for i := 2; i < len(l); i++ {\n     \
    \   if increasing && l[i-1] > l[i] {\n            return false\n        }\n  \
    \      if !increasing && l[i-1] < l[i] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    if len(l) <= 1 {\n        return true\n  \
    \  }\n    sign := 0\n    for i := 1; i < len(l); i++ {\n        if l[i] == l[i-1]\
    \ {\n            continue\n        }\n        if sign == 0 {\n            sign\
    \ = 1\n            if l[i] < l[i-1] {\n                sign = -1\n           \
    \ }\n        }\n        if sign == 1 && l[i] < l[i-1] {\n            return false\n\
    \        }\n        if sign == -1 && l[i] > l[i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(l) <= 1 {\n        return\
    \ true\n    }\n    inc := true\n    dec := true\n    for i := 1; i < len(l); i++\
    \ {\n        if l[i] >= l[i-1] {\n            dec = false\n        }\n       \
    \ if l[i] <= l[i-1] {\n            inc = false\n        }\n    }\n    return inc\
    \ || dec\n}\n", "    increasing := true\n    decreasing := true\n    for i :=\
    \ 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i-1] {\n            decreasing = false\n     \
    \   }\n    }\n    return increasing || decreasing\n}\n", "    increasing := true\n\
    \    decreasing := true\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i]\
    \ > l[i + 1] {\n            increasing = false\n        }\n        if l[i] < l[i\
    \ + 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n", "    up := false\n    down := false\n    var prev int\n\
    \    for i, v := range l {\n        if i == 0 {\n            prev = v\n      \
    \      continue\n        }\n        if prev < v {\n            up = true\n   \
    \     } else if prev > v {\n            down = true\n        }\n        if up\
    \ && down {\n            return false\n        }\n        prev = v\n    }\n  \
    \  return true\n}\n", "    order := true // Asumme increasing\n    for i := 1;\
    \ i < len(l); i++ {\n        if l[i] < l[i-1] {\n            order = false\n \
    \           break\n        }\n    }\n    if order {\n        return true\n   \
    \ }\n    order = true // Assume decreasing\n    for i := 1; i < len(l); i++ {\n\
    \        if l[i] > l[i-1] {\n            order = false\n            break\n  \
    \      }\n    }\n    return order\n}\n", "    length := len(l)\n    if length\
    \ <= 1 {\n        return true\n    }\n    increasing := l[0] < l[1]\n    for i\
    \ := 1; i < length; i++ {\n        if increasing {\n            if l[i-1] > l[i]\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if l[i-1] < l[i] {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n", "    if len(l) <= 1 {\n        return true\n  \
    \  }\n    is_ascending := l[0] < l[1]\n    for i := 1; i < len(l) - 1; i++ {\n\
    \        if is_ascending {\n            if l[i] > l[i + 1] {\n               \
    \ return false\n            }\n        } else {\n            if l[i] < l[i + 1]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n", "    var inc, dec bool\n    for i := 0; i < len(l) - 1; i++ {\n\
    \        if l[i] < l[i + 1] {\n            inc = true\n        } else if l[i]\
    \ > l[i + 1] {\n            dec = true\n        }\n        if inc && dec {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    i := 0\n\
    \    j := len(l) - 1\n    for i < j {\n        if l[i] != l[j] {\n           \
    \ break\n        }\n        i++\n        j--\n    }\n    if i == j {\n       \
    \ return true\n    }\n    if l[i] < l[j] {\n        for i = 0; i < len(l) - 1;\
    \ i++ {\n            if l[i] > l[i + 1] {\n                return false\n    \
    \        }\n        }\n    } else {\n        for i = 0; i < len(l) - 1; i++ {\n\
    \            if l[i] < l[i + 1] {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n", "    if len(l) <= 1 {\n        return\
    \ true\n    }\n    if l[0] > l[1] {\n        for i := 0; i < len(l) - 1; i++ {\n\
    \            if l[i] < l[i + 1] {\n                return false\n            }\n\
    \        }\n    } else {\n        for i := 0; i < len(l) - 1; i++ {\n        \
    \    if l[i] > l[i + 1] {\n                return false\n            }\n     \
    \   }\n    }\n    return true\n}\n", "    return false\n}\n", "    if len(l) <=\
    \ 1 {\n        return true\n    }\n    increase := l[0] < l[1]\n    for i := 1;\
    \ i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] && increase {\n          \
    \  return false\n        }\n        if l[i] < l[i + 1] && !increase {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(l) <=\
    \ 1 {\n        return true\n    }\n    // first two elements tell us if we are\
    \ increasing or decreasing\n    increasing := l[0] < l[1]\n    for i := 1; i <\
    \ len(l)-1; i++ {\n        // if decreasing\n        if !increasing {\n      \
    \      if l[i] < l[i+1] {\n                return false\n            }\n     \
    \   } else {\n            if l[i] > l[i+1] {\n                return false\n \
    \           }\n        }\n    }\n    return true\n}\n", "    if len(l) <= 1 {\n\
    \        return true\n    }\n    isIncreasing := l[0] < l[1]\n    for i := 2;\
    \ i < len(l); i++ {\n        if isIncreasing {\n            if l[i-1] > l[i] {\n\
    \                return false\n            }\n        } else {\n            if\
    \ l[i-1] < l[i] {\n                return false\n            }\n        }\n  \
    \  }\n    return true\n}\n", "    a := l[0]\n    b := l[1]\n    sign := (b - a)\
    \ > 0\n    for _, e := range l[2:] {\n        if (e - b) * sign < 0 {\n      \
    \      return false\n        }\n        b = e\n    }\n    return true\n}\n", " \
    \   if len(l) < 2 {\n        return true\n    }\n    for i := 0; i < len(l) -\
    \ 1; i++ {\n        if l[i] == l[i + 1] {\n            continue\n        }\n \
    \       first := l[i] > l[i + 1]\n        for j := i + 1; j < len(l) - 1; j++\
    \ {\n            if l[j] == l[j + 1] {\n                continue\n           \
    \ }\n            second := l[j] > l[j + 1]\n            if first != second {\n\
    \                return false\n            }\n        }\n        return true\n\
    \    }\n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
