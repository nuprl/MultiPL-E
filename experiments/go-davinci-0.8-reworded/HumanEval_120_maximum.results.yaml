language: go_test.go
name: HumanEval_120_maximum
results:
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    if n <= k {\n        return arr\n    }\n    return\
    \ quickSelect(arr, 0, n - 1, n - k)\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzpqj0ao0_test.go:28:12: undefined: quickSelect

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // TODO\n    return []int{}\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpq0hwpru8_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpq0hwpru8_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpq0hwpru8_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpq0hwpru8_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpq0hwpru8_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpq0hwpru8_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpq0hwpru8_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpq0hwpru8_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpq0hwpru8_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpq0hwpru8_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073165
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Write your code here.\n    n := len(arr)\n    ans := make([]int, 0)\n\
    \    for i := 0; i < k; i++ {\n        idx := i\n        for j := i; j < n; j++\
    \ {\n            if arr[j] > arr[idx] {\n                idx = j\n           \
    \ }\n        }\n        ans = append(ans, arr[idx])\n        if idx != i {\n \
    \           arr[i], arr[idx] = arr[idx], arr[i]\n        }\n    }\n    return\
    \ ans\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpgpp5qg07_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpgpp5qg07_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpgpp5qg07_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpgpp5qg07_test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpgpp5qg07_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpgpp5qg07_test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpgpp5qg07_test.go:65: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // TODO: implement!\n    return nil\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpwx52mqg4_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpwx52mqg4_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpwx52mqg4_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpwx52mqg4_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpwx52mqg4_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpwx52mqg4_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpwx52mqg4_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpwx52mqg4_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpwx52mqg4_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpwx52mqg4_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == k {\n        return arr\n    }\n    indexes := make([]int,\
    \ 0, k)\n    for i, val := range arr {\n        if len(indexes) < k {\n      \
    \      indexes = append(indexes, i)\n        } else {\n            minIndex :=\
    \ 0\n            for j, index := range indexes {\n                if arr[index]\
    \ < arr[indexes[minIndex]] {\n                    minIndex = j\n             \
    \   }\n            }\n            if val > arr[indexes[minIndex]] {\n        \
    \        indexes[minIndex] = i\n            }\n        }\n    }\n    ret := make([]int,\
    \ k)\n    for i, index := range indexes {\n        ret[i] = arr[index]\n    }\n\
    \    return ret\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000020380?, 0x7, 0x5d42d0?},\
    \ 0x0)\n\t/tmp/tmpa09u_z2g_test.go:38 +0x1f0\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpa09u_z2g_test.go:67 +0x48f\ntesting.tRunner(0xc0001924e0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Assume k <= len(arr)\n    l := len(arr)\n    max := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        max[i] = -1000\n    }\n    for i := 0;\
    \ i < l; i++ {\n        if arr[i] > max[0] {\n            max[0] = arr[i]\n  \
    \          max = trickleDown(max, 0)\n        }\n    }\n    return max\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp4kg8wfw_test.go:33:19: undefined: trickleDown

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    size := len(arr)\n    if size <= k {\n        return arr\n    }\n   \
    \ if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max :=\
    \ arr[0]\n        for i := 1; i < size; i++ {\n            if arr[i] > max {\n\
    \                max = arr[i]\n            }\n        }\n        return []int{max}\n\
    \    }\n    sorted := make([]int, k)\n    copy(sorted, arr[:k])\n    quickSort(sorted,\
    \ 0, k-1)\n    for i := k; i < size; i++ {\n        if arr[i] < sorted[k-1] {\n\
    \            continue\n        }\n        sorted[k-1] = arr[i]\n        quickSort(sorted,\
    \ 0, k-1)\n    }\n    return sorted\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4g8gsp7_test.go:42:5: undefined: quickSort

    /tmp/tmpi4g8gsp7_test.go:48:9: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Bubble sort algorithm\n    // O(n^2) in worst and average case, O(n)\
    \ in best case.\n    // The algorithm is stable and adaptive.\n    l := len(arr)\n\
    \    if l <= 1 {\n        return arr\n    }\n    if k > l {\n        k = l\n \
    \   }\n    for i := 0; i < k; i++ {\n        for j := 0; j < l-i-1; j++ {\n  \
    \          if arr[j] < arr[j+1] {\n                tmp := arr[j]\n           \
    \     arr[j] = arr[j+1]\n                arr[j+1] = tmp\n            }\n     \
    \   }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxg5wfrxk_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxg5wfrxk_test.go:69: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxg5wfrxk_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxg5wfrxk_test.go:69: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpxg5wfrxk_test.go:69:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=2) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpxg5wfrxk_test.go:69: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxg5wfrxk_test.go:69:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpxg5wfrxk_test.go:69: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := []int{}\n    for i, v := range arr {\n        if len(max) == 0\
    \ {\n            max = append(max, v)\n        } else {\n            if len(max)\
    \ < k {\n                for j, u := range max {\n                    if v >=\
    \ u {\n                        max = append(max, 0)\n                        copy(max[j+1:],\
    \ max[j:])\n                        max[j] = v\n                        break\n\
    \                    }\n                }\n            } else {\n            \
    \    if v > max[0] {\n                    max = append(max, 0)\n             \
    \       copy(max[1:], max[:])\n                    max[0] = v\n              \
    \  }\n            }\n        }\n        fmt.Println(max)\n    }\n    if len(max)\
    \ > k {\n        max = max[:k]\n    }\n    return max\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8hidgqvy_test.go:25:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    if len(arr) == 0 {\n        return result\n   \
    \ }\n    if k > len(arr) {\n        k = len(arr)\n    }\n    maxK := len(arr)\
    \ - k\n    for i := 0; i < k; i++ {\n        var pos int\n        curr := arr[0]\n\
    \        for j := 1; j < len(arr); j++ {\n            if arr[j] > curr {\n   \
    \             curr = arr[j]\n                pos = j\n            }\n        }\n\
    \        result = append(result, curr)\n        arr = append(arr[:pos], arr[pos+1:]...)\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpejpt13dr_test.go:31:5: maxK declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    nums := map[int]int{}\n    for _, num := range arr {\n        nums[num]\
    \ += 1\n    }\n    keys := make([]int, 0, len(nums))\n    for key := range nums\
    \ {\n        keys = append(keys, key)\n    }\n    quicksort(keys, 0, len(keys)\
    \ - 1)\n    result := make([]int, 0, k)\n    for i := len(keys) - 1; i >= 0; i--\
    \ {\n        num := keys[i]\n        counter := nums[num]\n        for j := 0;\
    \ j < counter; j++ {\n            result = append(result, num)\n            if\
    \ len(result) == k {\n                return result\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnd43v7bp_test.go:32:5: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return arr\n    }\n    new_arr := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        new_arr[i] = arr[i]\n    }\n    new_arr\
    \ = quickSort(new_arr)\n    fmt.Println(new_arr)\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > new_arr[0] {\n            new_arr[0] = arr[i]\n \
    \           new_arr = quickSort(new_arr)\n        }\n    }\n    return new_arr\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx7ucd4nx_test.go:31:15: undefined: quickSort

    /tmp/tmpx7ucd4nx_test.go:36:23: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Corner Cases\n    if len(arr) == 0 {\n        return []int{}\n   \
    \ }\n    if k >= len(arr) {\n        return arr\n    }\n    // A \"heap\" can\
    \ be used here.\n    // A heap is used for sorting elements.\n    // The heap\
    \ stores the elements in order.\n    // This means that the minimum value is always\
    \ the first\n    // element in the heap.\n    // For a maximum heap, the maximum\
    \ value is always the first\n    // element in the heap.\n    // The first step\
    \ is to initialize the heap with the first k elements\n    // from the list arr.\n\
    \    // In this case, we use a maximum heap.\n    // This means that the first\
    \ element in the heap is the maximum value\n    // in the heap.\n    // As new\
    \ elements are added to the heap, they are compared to the maximum\n    // value.\n\
    \    // If the element added is less than the maximum value, then it is discarded.\n\
    \    // If the element added is greater than the maximum value, then the maximum\
    \ value\n    // is removed from the heap and the new element is added.\n    //\
    \ This ensures that the heap is always of size k, and that the elements\n    //\
    \ in the heap are sorted in descending order.\n    // The elements in the heap\
    \ can then be appended to a list, which will\n    // be returned.\n    // The\
    \ time complexity for this algorithm is O(n * log(k)).\n    // The space complexity\
    \ for this algorithm is O(k).\n    heap := new(MaxHeap)\n    heap.Init(arr[:k])\n\
    \    for i := k; i < len(arr); i++ {\n        if heap.GetMax() < arr[i] {\n  \
    \          heap.RemoveMax()\n            heap.Add(arr[i])\n        }\n    }\n\
    \    return heap.HeapToList()\n}\n\ntype MaxHeap \nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7ykytkv_test.go:65:14: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073390
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        k = len(arr)\n    }\n    larr := len(arr)\n\
    \    for i := 0; i < k; i++ {\n        for j := i; j < larr; j++ {\n         \
    \   if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n  \
    \          }\n        }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp8k7rxof5_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp8k7rxof5_test.go:61: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp8k7rxof5_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp8k7rxof5_test.go:61: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp8k7rxof5_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp8k7rxof5_test.go:61: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmp8k7rxof5_test.go:61: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // \u8FD9\u662F\u4E00\u4E2A\u7B80\u5355\u7684\u9898\u76EE\uFF0C\u7528\
    \u63D2\u5165\u6392\u5E8F\u5C31\u53EF\u4EE5\uFF0C\u4E0D\u8FC7\u7B97\u6CD5\u6BD4\
    \u8F83\u590D\u6742\n    // \u53EF\u4EE5\u7528\u5FEB\u6392\u7B97\u6CD5\u6765\u5B9E\
    \u73B0\n    // \u6211\u4EEC\u53EA\u9700\u8981\u5BF9\u6570\u7EC4\u7684\u524Dk\u4E2A\
    \u5143\u7D20\u8FDB\u884C\u6392\u5E8F\u5C31\u53EF\u4EE5\n    // \u5148\u627E\u51FA\
    \u524Dk\u4E2A\u5143\u7D20\u7684\u6700\u5C0F\u503C\u7684\u7D22\u5F15\n    // \u5982\
    \u679C\u63A5\u4E0B\u6765\u7684\u5143\u7D20\u5927\u4E8E\u6700\u5C0F\u503C\uFF0C\
    \u5C31\u66FF\u6362\uFF0C\u5E76\u91CD\u65B0\u8BA1\u7B97\u6700\u5C0F\u503C\u7684\
    \u7D22\u5F15\n    // \u5426\u5219\u8DF3\u8FC7\n    // \u6700\u540E\uFF0C\u6211\
    \u4EEC\u5C31\u5F97\u5230\u4E86\u524Dk\u4E2A\u6700\u5927\u7684\u6570\u5B57\u4E86\
    \n\n    var minIndex int\n    for i := 0; i < k; i++ {\n        if arr[i] > arr[minIndex]\
    \ {\n            minIndex = i\n        }\n    }\n\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > arr[minIndex] {\n            arr[minIndex] = arr[i]\n\
    \            minIndex = 0\n            for j := 0; j < k; j++ {\n            \
    \    if arr[j] < arr[minIndex] {\n                    minIndex = j\n         \
    \       }\n            }\n        }\n    }\n\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp4ke4xi50_test.go:77: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp4ke4xi50_test.go:77: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp4ke4xi50_test.go:77: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp4ke4xi50_test.go:77: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp4ke4xi50_test.go:77: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp4ke4xi50_test.go:77:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp4ke4xi50_test.go:77: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n\n    if k == 0 {\n\
    \        return []int{}\n    }\n\n    if k >= len(arr) {\n        return arr\n\
    \    }\n\n    partition := arr[len(arr)-1]\n    left := make([]int, 0)\n    right\
    \ := make([]int, 0)\n    for i := 0; i < len(arr)-1; i++ {\n        if arr[i]\
    \ > partition {\n            left = append(left, arr[i])\n        } else {\n \
    \           right = append(right, arr[i])\n        }\n    }\n\n    if len(left)\
    \ >= k {\n        return maximum(left, k)\n    }\n\n    if len(left) == k-1 {\n\
    \        return append(left, partition)\n    }\n\n    return append(maximum(left,\
    \ k-1-len(right)), append([]int{partition}, maximum(right, k-1-len(left))...)...)\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpt811jf8p_test.go:81: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpt811jf8p_test.go:81: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpt811jf8p_test.go:81: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpt811jf8p_test.go:81: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpt811jf8p_test.go:81:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpt811jf8p_test.go:81: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var output []int\n    // var max int\n    // var maxIndex int\n    //\
    \ var newIndex int\n    // var subSlice []int\n    // var arrLen int = len(arr)\n\
    \    // var i int = 0\n    // var j int = 0\n    // var found bool = false\n \
    \   // for i=0; i<k; i++ {\n    //     max = arr[i]\n    //     maxIndex = i\n\
    \    //     for j=i+1; j<arrLen; j++ {\n    //         if arr[j] > max {\n   \
    \ //             max = arr[j]\n    //             maxIndex = j\n    //       \
    \  }\n    //     }\n    //     fmt.Println(\"max:\", max)\n    //     output =\
    \ append(output, max)\n    //     found = false\n    //     subSlice = arr[i:arrLen]\n\
    \    //     fmt.Println(\"subSlice:\", subSlice)\n    //     fmt.Println(\"maxIndex:\"\
    , maxIndex)\n    //     for j=0; j<len(subSlice); j++ {\n    //         if !found\
    \ && j+i == maxIndex {\n    //             found = true\n    //             continue\n\
    \    //         }\n    //         if found {\n    //             arr[newIndex]\
    \ = subSlice[j]\n    //             newIndex++\n    //         }\n    //     }\n\
    \    //     fmt.Println(\"arr:\", arr)\n    // }\n    // return output\n    return\
    \ output\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp07n1y895_test.go:87: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmp07n1y895_test.go:87:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp07n1y895_test.go:87: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp07n1y895_test.go:87:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp07n1y895_test.go:87: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmp07n1y895_test.go:87: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp07n1y895_test.go:87: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp07n1y895_test.go:87:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp07n1y895_test.go:87: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp07n1y895_test.go:87:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Write your code here.\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpohwa60uw_test.go:25:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpy9c6b45n_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpy9c6b45n_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpy9c6b45n_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpy9c6b45n_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpy9c6b45n_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpy9c6b45n_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpy9c6b45n_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpy9c6b45n_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpy9c6b45n_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpy9c6b45n_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return arr\n    }\n    if k > len(arr) {\n\
    \        k = len(arr)\n    }\n    result := []int{}\n    for _, value := range\
    \ arr {\n        if len(result) < k {\n            result = append(result, value)\n\
    \        } else {\n            if result[0] < value {\n                result\
    \ = append(result, value)\n                maxIndex := 0\n                for\
    \ i := 1; i < len(result); i++ {\n                    if result[i] > result[maxIndex]\
    \ {\n                        maxIndex = i\n                    }\n           \
    \     }\n                result = append(result[:maxIndex], result[maxIndex+1:]...)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000020400?, 0x7, 0x5d42d0?},\
    \ 0x5e3ea0?)\n\t/tmp/tmpi86u27fp_test.go:35 +0x2b4\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpi86u27fp_test.go:67 +0x48f\ntesting.tRunner(0xc0001a0340, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return topK(arr, k)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpakosrwsn_test.go:24:12: undefined: topK

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073391
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    for _, item := range arr {\n        for k > 0 &&\
    \ len(result) > 0 && result[len(result)-1] < item {\n            result = result[:len(result)-1]\n\
    \            k--\n        }\n        result = append(result, item)\n    }\n  \
    \  return result[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpq6kjqtii_test.go:58: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpq6kjqtii_test.go:58:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpq6kjqtii_test.go:58: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpq6kjqtii_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpq6kjqtii_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpq6kjqtii_test.go:58: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15) %!s(int=3)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpq6kjqtii_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpq6kjqtii_test.go:58: expected '[%!s(int=5)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpq6kjqtii_test.go:58:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpq6kjqtii_test.go:58: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    length := len(arr)\n    if length == 0 {\n        return []int{}\n  \
    \  }\n    if k >= length {\n        return arr\n    }\n    minimum := func(a,\
    \ b int) int {\n        if a < b {\n            return a\n        }\n        return\
    \ b\n    }\n    max := minimum(k, length)\n    res := make([]int, max)\n    for\
    \ i := 0; i < max; i++ {\n        for j := 0; j < length-i-1; j++ {\n        \
    \    if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\
    \            }\n        }\n        res[max-i-1] = arr[length-i-1]\n    }\n   \
    \ return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp_hfgw30l_test.go:73: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp_hfgw30l_test.go:73: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n  \
    \  --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp_hfgw30l_test.go:73:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    size := len(arr)\n    if size == 0 {\n        return arr\n    }\n\n \
    \   start, end := 0, k - 1\n    if k >= size {\n        start, end = 0, size -\
    \ 1\n    }\n    // fmt.Printf(\"start=%d, end=%d\\n\", start, end)\n    for i\
    \ := start; i <= end; i++ {\n        max_pos := i\n        for j := i + 1; j <=\
    \ end; j++ {\n            if arr[j] > arr[max_pos] {\n                max_pos\
    \ = j\n            }\n        }\n        // fmt.Printf(\"max_pos=%d\\n\", max_pos)\n\
    \        arr[i], arr[max_pos] = arr[max_pos], arr[i]\n    }\n    return arr[start:end+1]\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpu701nmqj_test.go:70: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpu701nmqj_test.go:70: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpu701nmqj_test.go:70: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpu701nmqj_test.go:70:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=20)\
    \ %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpu701nmqj_test.go:70:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=1) %!s(int=0) %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpu701nmqj_test.go:70: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n   \
    \ --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpu701nmqj_test.go:70: expected\
    \ '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=-1)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpu701nmqj_test.go:70: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpu701nmqj_test.go:70:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpu701nmqj_test.go:70: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073392
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n\n    if k == len(arr) {\n\
    \        return arr\n    }\n\n    left, right := 0, len(arr) - 1\n    pivot :=\
    \ left + (right - left) / 2\n    for left < right {\n        pivot = partition(arr,\
    \ left, right)\n        if pivot == k - 1 {\n            break\n        } else\
    \ if pivot < k - 1 {\n            left = pivot + 1\n        } else {\n       \
    \     right = pivot - 1\n        }\n    }\n\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd0s0ronl_test.go:35:17: undefined: partition

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073392
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k <= 0 {\n\
    \        return []int{}\n    }\n    if k > len(arr) {\n        k = len(arr)\n\
    \    }\n    result := []int{}\n    for _, value := range arr {\n        for i\
    \ := 0; i < len(result); i++ {\n            if value >= result[i] {\n        \
    \        result = append(result, 0)\n                copy(result[i+1:], result[i:])\n\
    \                result[i] = value\n                break\n            }\n   \
    \     }\n        if len(result) < k {\n            result = append(result, value)\n\
    \        }\n    }\n    return result[:k]\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpq1x1rnwf_test.go:73: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpq1x1rnwf_test.go:73: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpq1x1rnwf_test.go:73: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpq1x1rnwf_test.go:73: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=15) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=3)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpq1x1rnwf_test.go:73:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpq1x1rnwf_test.go:73: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpq1x1rnwf_test.go:73: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == k {\n        return arr\n    }\n    var window []int\n\
    \    for _, item := range arr {\n        for i := len(window) - 1; i >= 0; i--\
    \ {\n            if item > window[i] {\n                window = append(window[:i],\
    \ window[i+1:]...)\n            }\n        }\n        if len(window) < k {\n \
    \           window = append(window, item)\n        }\n    }\n    return window\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpv_sbh_9d_test.go:64: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpv_sbh_9d_test.go:64: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpv_sbh_9d_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpv_sbh_9d_test.go:64: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n  \
    \  --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpv_sbh_9d_test.go:64:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpv_sbh_9d_test.go:64: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    res := make([]int, k)\n    copy(res, arr[:k])\n    min := min(res)\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > min {\n            res[minIdx(res)]\
    \ = arr[i]\n            min = min(res)\n        }\n    }\n    return res\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbe4byfwk_test.go:26:12: undefined: min

    /tmp/tmpbe4byfwk_test.go:29:17: undefined: minIdx

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n\
    \        return arr\n    }\n    // a slice to store the minimum k elements in\
    \ arr\n    s := make([]int, k)\n    // initialize the slice by the first k elements\
    \ in arr\n    for i := 0; i < k; i++ {\n        s[i] = arr[i]\n    }\n    // build\
    \ a max heap in the slice\n    for i := (k-2)/2; i >= 0; i-- {\n        maxHeapify(s,\
    \ i, k)\n    }\n    // replace the root of the heap by arr[k] if arr[k] is larger\
    \ than root\n    for i := k; i < len(arr); i++ {\n        if arr[i] > s[0] {\n\
    \            s[0] = arr[i]\n            maxHeapify(s, 0, k)\n        }\n    }\n\
    \    return s\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zv81ym4_test.go:38:9: undefined: maxHeapify

    /tmp/tmp8zv81ym4_test.go:44:13: undefined: maxHeapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var res []int\n    for _, v := range arr {\n        for len(res) > 0\
    \ && v > res[len(res)-1] && len(res) + len(arr) - 1 - k > 0 {\n            res\
    \ = res[:len(res)-1]\n        }\n        if len(res) < k {\n            res =\
    \ append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpgd6gjwm1_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpgd6gjwm1_test.go:59: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpgd6gjwm1_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpgd6gjwm1_test.go:59: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n\
    \        tmpgd6gjwm1_test.go:59: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpgd6gjwm1_test.go:59:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // initialize length of output\n    var out []int\n    // loop through\
    \ arr\n    for _, value := range arr {\n        out = append(out, value)\n   \
    \     // bubble sort out\n        for i := len(out) - 1; i > 0; i-- {\n      \
    \      if out[i - 1] < out[i] {\n                out[i - 1], out[i] = out[i],\
    \ out[i - 1]\n            }\n        }\n        // prune out if too big\n    \
    \    if len(out) > k {\n            out = out[1:]\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpcc6e9en9_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpcc6e9en9_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpcc6e9en9_test.go:66: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpcc6e9en9_test.go:66:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=-3)\
    \ %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpcc6e9en9_test.go:66:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=-3) %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpcc6e9en9_test.go:66: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n   \
    \ --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpcc6e9en9_test.go:66: expected\
    \ '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpcc6e9en9_test.go:66: expected '[%!s(int=5)]', got '[%!s(int=-7)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpcc6e9en9_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpcc6e9en9_test.go:66: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // TODO: Implement this function\n    return []int{}\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpuz0d4u1y_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpuz0d4u1y_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpuz0d4u1y_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpuz0d4u1y_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpuz0d4u1y_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpuz0d4u1y_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpuz0d4u1y_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpuz0d4u1y_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpuz0d4u1y_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpuz0d4u1y_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return nil\n    }\n    if k == len(arr) {\n    \
    \    return arr\n    }\n    maxArr := make([]int, k)\n    copy(maxArr, arr[:k])\n\
    \    quicksort(maxArr)\n    for i := k; i < len(arr); i++ {\n        if arr[i]\
    \ > maxArr[0] {\n            maxArr[0] = arr[i]\n            quicksort(maxArr)\n\
    \        }\n    }\n    return maxArr\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsh9hhpu3_test.go:32:5: undefined: quicksort

    /tmp/tmpsh9hhpu3_test.go:36:13: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arrlen := len(arr)\n    if arrlen == 0 {\n        return []int{}\n  \
    \  }\n\n    sorted_arr := make([]int, arrlen)\n    copy(sorted_arr, arr)\n   \
    \ if arrlen <= k {\n        return bubbleSort(sorted_arr)\n    }\n    return bubbleSort(sorted_arr)[arrlen-k:]\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnt0el_xb_test.go:32:16: undefined: bubbleSort

    /tmp/tmpnt0el_xb_test.go:34:12: undefined: bubbleSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073393
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    var res []int\n    for\
    \ i, num := range arr {\n        for len(res) > 0 && num > res[len(res)-1] &&\
    \ len(res) + len(arr) - i - 1 >= k {\n            res = res[:len(res)-1]\n   \
    \     }\n        if len(res) < k {\n            res = append(res, num)\n     \
    \   }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpei75d3vs_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpei75d3vs_test.go:62: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpei75d3vs_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpei75d3vs_test.go:62: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpei75d3vs_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpei75d3vs_test.go:62: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n\n    if k == len(arr) {\n\
    \        return arr\n    }\n\n    // O(n log k) solution\n    // // create a max\
    \ heap of k elements\n    // heap := make([]int, k)\n    // for i := 0; i < k;\
    \ i++ {\n    //     heap[i] = arr[i]\n    // }\n    // heapify(heap)\n\n    //\
    \ // go through the rest of the array and compare each element with the top\n\
    \    // // element of the heap\n    // for i := k; i < len(arr); i++ {\n    //\
    \     if arr[i] > heap[0] {\n    //         heap[0] = arr[i]\n    //         shiftDown(heap,\
    \ 0)\n    //     }\n    // }\n\n    // return heap\n\n    // O(n) solution with\
    \ quicksort\n    qsort(arr, 0, len(arr) - 1)\n    return arr[len(arr) - k:]\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6so2a0j_test.go:52:5: undefined: qsort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n\
    \        return arr\n    }\n    q := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        q[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   if arr[i] <= q[0] {\n            continue\n        }\n        j := 0\n   \
    \     for ; arr[i] > q[j]; j++ {\n            if j < k-1 {\n                q[j]\
    \ = q[j+1]\n            }\n        }\n        q[j] = arr[i]\n    }\n    return\
    \ q\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000126080?, 0x7, 0x5d4290?},\
    \ 0x1)\n\t/tmp/tmpv5i9_ksx_test.go:39 +0x106\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpv5i9_ksx_test.go:58 +0x148\ntesting.tRunner(0xc000103380, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    if n == k {\n        return arr\n    }\n\n    heap\
    \ := make([]int, k + 1)\n    copy(heap, arr[:k])\n    i := k / 2\n    for i >=\
    \ 0 {\n        heapify(heap, i, k)\n        i--\n    }\n\n    for i = k; i < n;\
    \ i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n       \
    \     heapify(heap, 0, k)\n        }\n    }\n\n    return heap[1:]\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvcbjwfdv_test.go:33:9: undefined: heapify

    /tmp/tmpvcbjwfdv_test.go:40:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return arr\n    }\n\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n\n    BuildMaxHeap(res)\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n         \
    \   res[0] = arr[i]\n            Heapify(res, 0)\n        }\n    }\n\n    return\
    \ res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi0dq_3v8_test.go:33:5: undefined: BuildMaxHeap

    /tmp/tmpi0dq_3v8_test.go:37:13: undefined: Heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 0
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return arr\n    }\n    for i := 0; i < k;\
    \ i++ {\n        for j := 0; j < len(arr) - i - 1; j++ {\n            if arr[j]\
    \ > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n  \
    \          }\n        }\n    }\n    return arr[len(arr) - k:]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmptf0p5_s3_test.go:50: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmptf0p5_s3_test.go:50: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    size := len(arr)\n    if size == k {\n        return arr\n    }\n   \
    \ if size == 0 {\n        return []int{}\n    }\n    // define the queue to store\
    \ the index\n    queue := make([]int, k)\n    // initialize the queue\n    for\
    \ i := 0; i < k; i++ {\n        queue[i] = i\n    }\n    // sort the queue (greater\
    \ than)\n    for i := 0; i < k - 1; i++ {\n        for j := i + 1; j < k; j++\
    \ {\n            if arr[queue[i]] < arr[queue[j]] {\n                queue[i],\
    \ queue[j] = queue[j], queue[i]\n            }\n        }\n    }\n    // try to\
    \ make the queue to be minimum \n    for i := k; i < size; i++ {\n        if arr[i]\
    \ > arr[queue[k - 1]] {\n            // find the position to insert\n        \
    \    for j := 0; j < k; j++ {\n                if arr[i] > arr[queue[j]] {\n \
    \                   insert := j\n                    // insert position change\
    \ the queue element\n                    for j := k - 1; j > insert; j-- {\n \
    \                       queue[j] = queue[j - 1]\n                    }\n     \
    \               queue[insert] = i\n                    break\n               \
    \ }\n            }\n        }\n    }\n    result := make([]int, k)\n    for i\
    \ := 0; i < k; i++ {\n        result[i] = arr[queue[i]]\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513820, 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc0000143c0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000020380?, 0x7, 0x5d42d0?},\
    \ 0x0)\n\t/tmp/tmpaa2_qjwl_test.go:47 +0x1d4\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpaa2_qjwl_test.go:86 +0x48f\ntesting.tRunner(0xc0001924e0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Return the maximum k numbers in arr in sorted order.\n    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    result := make([]int, 0)\n    for\
    \ _, x := range arr {\n        // insert into sorted list\n        n := len(result)\n\
    \        if n == 0 {\n            result = append(result, x)\n        } else {\n\
    \            if x < result[n-1] {\n                result = append(result, x)\n\
    \            } else {\n                i := 0\n                for i < n && x\
    \ > result[i] {\n                    i++\n                }\n                result\
    \ = append(result, 0)\n                copy(result[i+1:], result[i:])\n      \
    \          result[i] = x\n            }\n        }\n        // trim\n        if\
    \ n+1 > k {\n            result = result[:k]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1jpaonzs_test.go:78: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1jpaonzs_test.go:78: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1jpaonzs_test.go:78:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=20)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1jpaonzs_test.go:78:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=1) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp1jpaonzs_test.go:78: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=-8) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15) %!s(int=0) %!s(int=-13)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp1jpaonzs_test.go:78: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmp1jpaonzs_test.go:78: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1jpaonzs_test.go:78:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arrLen := len(arr)\n    var ret = make([]int, k)\n    if arrLen <= k\
    \ {\n        return arr\n    }\n\n    for i := 0; i < k; i++ {\n        ret[i]\
    \ = arr[i]\n    }\n\n    heapSort(ret)\n\n    for i := k; i < arrLen; i++ {\n\
    \        if arr[i] > ret[0] {\n            ret[0] = arr[i]\n            heapSort(ret)\n\
    \        }\n    }\n\n    return ret\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnrg21vhe_test.go:34:5: undefined: heapSort

    /tmp/tmpnrg21vhe_test.go:39:13: undefined: heapSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   maxIdx := 0\n        for i, val := range arr {\n            if val > max {\n\
    \                max = val\n                maxIdx = i\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    maxIdx\
    \ := 0\n    for i := 0; i < k; i++ {\n        maxIdx = i\n        for j := i +\
    \ 1; j < len(arr); j++ {\n            if arr[j] > arr[maxIdx] {\n            \
    \    maxIdx = j\n            }\n        }\n        tmp := arr[i]\n        arr[i]\
    \ = arr[maxIdx]\n        arr[maxIdx] = tmp\n    }\n    return arr[:k]\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9g3lynok_test.go:32:9: maxIdx declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    if n <= k {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        maxIdx := i\n        for j := i\
    \ + 1; j < n; j++ {\n            if arr[j] > arr[maxIdx] {\n                maxIdx\
    \ = j\n            }\n        }\n        result = append(result, arr[maxIdx])\n\
    \        arr[maxIdx], arr[i] = arr[i], arr[maxIdx]\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmppind2dsf_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmppind2dsf_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmppind2dsf_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmppind2dsf_test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmppind2dsf_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmppind2dsf_test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == k {\n        return arr\n    }\n\n    idx := 0\n    for\
    \ i, e := range arr {\n        if e > arr[idx] {\n            idx = i\n      \
    \  }\n    }\n\n    arr[idx], arr[len(arr)-1] = arr[len(arr)-1], arr[idx]\n   \
    \ return append(maximum(arr[:len(arr)-1], k), arr[len(arr)-1])\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpnfrut9q6_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpnfrut9q6_test.go:62: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpnfrut9q6_test.go:62: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=-2) %!s(int=-1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpnfrut9q6_test.go:62: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=-3) %!s(int=-123) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=20) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpnfrut9q6_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=-3) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpnfrut9q6_test.go:62:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpnfrut9q6_test.go:62: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=-10) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpnfrut9q6_test.go:62: expected '[%!s(int=5)]', got '[%!s(int=-7)\
    \ %!s(int=0) %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpnfrut9q6_test.go:62: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmpnfrut9q6_test.go:62:\
    \ expected '[]', got '[%!s(int=-400) %!s(int=-23) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=243)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var ret []int\n    if k > len(arr) {\n        return ret\n    }\n   \
    \ sorted := insertionSort(arr)\n    ret = sorted[len(sorted)-k:]\n    return ret\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl_o99zvb_test.go:28:15: undefined: insertionSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    result := make([]int, k)\n    index := 0\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            if index < k {\n       \
    \         result[index] = arr[i]\n                index++\n            } else\
    \ {\n                for j := 1; j < k; j++ {\n                    result[j -\
    \ 1] = result[j]\n                }\n                result[k - 1] = arr[i]\n\
    \            }\n        }\n    }\n    for i := index; i < k; i++ {\n        result[i]\
    \ = result[index - 1]\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpfguvmxwo_test.go:77: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpfguvmxwo_test.go:77: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpfguvmxwo_test.go:77: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpfguvmxwo_test.go:77: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpfguvmxwo_test.go:77:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpfguvmxwo_test.go:77: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073396
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    ans := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        ans[i] = -1000000\n    }\n    for _, a := range arr {\n     \
    \   if a > ans[0] {\n            ans[0] = a\n            for i := 1; i < k; i++\
    \ {\n                if ans[i] < ans[i-1] {\n                    ans[i], ans[i-1]\
    \ = ans[i-1], ans[i]\n                } else {\n                    break\n  \
    \              }\n            }\n        }\n    }\n    return ans\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpul183ydm_test.go:72: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpul183ydm_test.go:72: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n  \
    \  --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpul183ydm_test.go:72:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073396
- exit_code: 0
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    for i := 0; i < k; i++ {\n        for j := 0; j < len(arr) - i - 1; j++\
    \ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1]\
    \ = arr[j + 1], arr[j]\n            }\n        }\n    }\n    return arr[len(arr)\
    \ - k:]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == k {\n        return arr\n    }\n    if k == 0 {\n    \
    \    return []int{}\n    }\n    res := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > res[0] {\n            res[0] = arr[i]\n            heapSort(res)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprwdb107z_test.go:37:13: undefined: heapSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Write your code here\n    if k == 0 {\n        return []int{}\n  \
    \  }\n\n    if k == len(arr) {\n        return arr\n    }\n\n    // Time O(k)\n\
    \    heap := make([]int, k)\n    copy(heap, arr[:k])\n    buildHeap(heap)\n\n\
    \    // Time O(n-k)\n    for i := k; i < len(arr); i++ {\n        if arr[i] >\
    \ heap[0] {\n            heap[0] = arr[i]\n            heapify(heap, 0)\n    \
    \    }\n    }\n\n    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ov0l0fe_test.go:36:5: undefined: buildHeap

    /tmp/tmp9ov0l0fe_test.go:42:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return nil\n    }\n    length := len(arr)\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        min := arr[i]\n   \
    \     for j := i; j < length; j++ {\n            if arr[j] > min {\n         \
    \       min = arr[j]\n                if j != i {\n                    arr[i],\
    \ arr[j] = arr[j], arr[i]\n                }\n            }\n        }\n     \
    \   result[i] = min\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpclha5d6a_test.go:67: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpclha5d6a_test.go:67: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpclha5d6a_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpclha5d6a_test.go:67: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpclha5d6a_test.go:67:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpclha5d6a_test.go:67: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpclha5d6a_test.go:67: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // minHeap := make(MinHeap, k)\n    // for\
    \ i := 0; i < k; i++ {\n    //     minHeap[i] = arr[i]\n    // }\n    // heap.Init(&minHeap)\n\
    \    // for i := k; i < len(arr); i++ {\n    //     top := heap.Pop(&minHeap).(int)\n\
    \    //     if arr[i] > top {\n    //         heap.Push(&minHeap, arr[i])\n  \
    \  //     } else {\n    //         heap.Push(&minHeap, top)\n    //     }\n  \
    \  // }\n    // return minHeap.arr()\n    return quickSelect(arr, k)\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp038ka3zt_test.go:44:12: undefined: quickSelect

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    if n == k {\n        return arr\n    }\n\n    result\
    \ := make([]int, k)\n    // solution 1: \u5192\u6CE1\u6392\u5E8F\n    // solution\
    \ 2: \u53CC\u5411\u961F\u5217\n    // solution 3: \u5806\u6392\u5E8F\n    // solution\
    \ 4: \u8BA1\u6570\u6392\u5E8F\n    // solution 5: \u5FEB\u901F\u6392\u5E8F\n \
    \   quickSort(arr, 0, n - 1)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1zl8myfc_test.go:35:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    max := k\n   \
    \ result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] =\
    \ arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := k - 1;\
    \ j >= 0; j-- {\n            if result[j] < arr[i] {\n                result[j]\
    \ = arr[i]\n                fmt.Println(result)\n                return result\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm5mv1yui_test.go:27:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmptf0p5_s3_test.go:50: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmptf0p5_s3_test.go:50: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return nil\n    }\n    var stack []int\n \
    \   var result []int\n    for _, v := range arr {\n        for len(stack) > 0\
    \ && v > stack[len(stack)-1] && len(stack)+len(arr)-k >= len(stack) {\n      \
    \      stack = stack[:len(stack)-1]\n        }\n        if len(stack) < k {\n\
    \            stack = append(stack, v)\n        }\n    }\n    for i := 0; i < k;\
    \ i++ {\n        result = append(result, stack[len(stack)-1-i])\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0000f5c08, 0x3, 0x0?}, 0x3)\n\
    \t/tmp/tmp41bq_0ma_test.go:38 +0x19f\ncommand-line-arguments_test.TestMaximum(0xc0001a0340?)\n\
    \t/tmp/tmp41bq_0ma_test.go:50 +0x8a\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073396
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    q := []int{}\n    for i := 0; i < len(arr); i++ {\n        for len(q)\
    \ > 0 && len(q) + len(arr) - i > k && arr[i] > q[0] {\n            q = q[1:]\n\
    \        }\n        if len(q) < k {\n            q = append(q, arr[i])\n     \
    \   }\n    }\n    return q\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpsq5f4anr_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpsq5f4anr_test.go:59: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpsq5f4anr_test.go:59: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpsq5f4anr_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpsq5f4anr_test.go:59: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpsq5f4anr_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpsq5f4anr_test.go:59: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    // Use max heap\n    heap := arr[:k]\n    for\
    \ i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0]\
    \ = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n    for i := 0;\
    \ i < k / 2; i++ {\n        temp := heap[i]\n        heap[i] = heap[k - 1 - i]\n\
    \        heap[k - 1 - i] = temp\n    }\n    return heap\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9t84cvkp_test.go:33:9: undefined: heapify

    /tmp/tmp9t84cvkp_test.go:38:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var max []int\n    if k > len(arr) {\n        return max\n    }\n   \
    \ var tmp int\n    for i := 0; i < k; i++ {\n        tmp = i\n        for j :=\
    \ i; j < len(arr); j++ {\n            if arr[j] > arr[tmp] {\n               \
    \ tmp = j\n            }\n        }\n        arr[i], arr[tmp] = arr[tmp], arr[i]\n\
    \        max = append(max, arr[i])\n    }\n    return max\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbav595ze_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbav595ze_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbav595ze_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbav595ze_test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpbav595ze_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpbav595ze_test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpbav595ze_test.go:65: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073396
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := 0\n    var r []int\n    for i := 0; i < k; i++ {\n        max\
    \ = arr[i]\n        for j := i; j < len(arr); j++ {\n            if arr[j] > max\
    \ {\n                max = arr[j]\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n        r = append(r, max)\n    }\n    return r\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmplps0qwv8_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmplps0qwv8_test.go:62: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmplps0qwv8_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmplps0qwv8_test.go:62: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmplps0qwv8_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmplps0qwv8_test.go:62: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmplps0qwv8_test.go:62: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    m := arr[:k]\n    heapify(m)\n    for i := k; i < len(arr); i++ {\n \
    \       if arr[i] > m[0] {\n            m[0] = arr[i]\n            heapify(m)\n\
    \        }\n    }\n    return m\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7s71em3m_test.go:25:5: undefined: heapify

    /tmp/tmp7s71em3m_test.go:29:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 0
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n\n    m := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        m[i] = arr[i]\n    }\n\n    for i := k;\
    \ i < len(arr); i++ {\n        min := m[0]\n        minIdx := 0\n        for j\
    \ := 1; j < k; j++ {\n            if m[j] < min {\n                min = m[j]\n\
    \                minIdx = j\n            }\n        }\n        if arr[i] > min\
    \ {\n            m[minIdx] = arr[i]\n        }\n    }\n\n    for i := 0; i < k;\
    \ i++ {\n        min := m[i]\n        minIdx := i\n        for j := i+1; j < k;\
    \ j++ {\n            if m[j] < min {\n                min = m[j]\n           \
    \     minIdx = j\n            }\n        }\n        if minIdx != i {\n       \
    \     m[minIdx] = m[i]\n            m[i] = min\n        }\n    }\n\n    return\
    \ m\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073397
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n\
    \        return arr\n    }\n    r := make([]int, k)\n    copy(r, arr[:k])\n  \
    \  return maximumReqursive(r, arr[k:])\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkkbne__h_test.go:32:12: undefined: maximumReqursive

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var tmp []int\n    if k >= len(arr) {\n        return arr\n    }\n  \
    \  for i := 0; i < k; i++ {\n        tmp = append(tmp, arr[i])\n    }\n    tmp\
    \ = qsort(tmp)\n    fmt.Println(tmp)\n    for i := k; i < len(arr); i++ {\n  \
    \      if arr[i] > tmp[0] {\n            tmp[0] = arr[i]\n            tmp = qsort(tmp)\n\
    \        }\n    }\n    return tmp\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvbzp7wzd_test.go:31:11: undefined: qsort

    /tmp/tmpvbzp7wzd_test.go:36:19: undefined: qsort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Sort the list\n    for i := 0; i < len(arr); i++ {\n        for j\
    \ := i; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n              \
    \  tmp := arr[i]\n                arr[i] = arr[j]\n                arr[j] = tmp\n\
    \            }\n        }\n    }\n    // Return the first k elements\n    return\
    \ arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpmzkuwlds_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpmzkuwlds_test.go:61: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpmzkuwlds_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpmzkuwlds_test.go:61: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpmzkuwlds_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpmzkuwlds_test.go:61: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpmzkuwlds_test.go:61: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073397
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n\n    l := len(arr)\n   \
    \ if l <= k {\n        return arr\n    }\n\n    res := make([]int, k)\n    lr\
    \ := k - 1\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n\n \
    \   for i := k; i < l; i++ {\n        // find the smallest number in res, and\
    \ replace it if arr[i] is bigger\n        // TODO: optimize this, using binary\
    \ search and get rid of the for loop\n        for j := lr; j >= 0; j-- {\n   \
    \         if arr[i] > res[j] {\n                res[j] = arr[i]\n            \
    \    lr = j\n                break\n            }\n        }\n    }\n\n    return\
    \ res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpdslpab92_test.go:77: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpdslpab92_test.go:77: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpdslpab92_test.go:77: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-3) %!s(int=20) %!s(int=0) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpdslpab92_test.go:77: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpdslpab92_test.go:77:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073397
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // TODO\n    return []int{}\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpq0hwpru8_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpq0hwpru8_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpq0hwpru8_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpq0hwpru8_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpq0hwpru8_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpq0hwpru8_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpq0hwpru8_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpq0hwpru8_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpq0hwpru8_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpq0hwpru8_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073165
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmptf0p5_s3_test.go:50: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmptf0p5_s3_test.go:50: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var temp []int\n    if k <= 0 {\n        return []int{}\n    }\n    result\
    \ := make([]int, k)\n    for _, v := range arr {\n        temp = append(temp,\
    \ v)\n        bubbleSort(temp)\n        if len(temp) > k {\n            temp =\
    \ temp[:k]\n        }\n    }\n    for i, v := range temp {\n        result[i]\
    \ = v\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp61joe6f2_test.go:31:9: undefined: bubbleSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == len(arr) {\n        return arr\n    }\n    if k == 0 {\n    \
    \    return []int{}\n    }\n    res := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > res[0] {\n            for j := 0; j < k; j++ {\n        \
    \        if arr[i] <= res[j] {\n                    insert(res, j, arr[i])\n \
    \                   break\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiz4ff8q__test.go:38:21: undefined: insert

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073396
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    size := len(arr)\n    if size <= k {\n        return arr\n    }\n   \
    \ if k == 0 {\n        return []int{}\n    }\n    for i := k - 1; i >= 0; i--\
    \ {\n        for j := i - 1; j >= 0; j-- {\n            if arr[i] > arr[j] {\n\
    \                temp := arr[i]\n                arr[i] = arr[j]\n           \
    \     arr[j] = temp\n            }\n        }\n    }\n    return arr[:k]\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp6ciwrytf_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp6ciwrytf_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmp6ciwrytf_test.go:66: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp6ciwrytf_test.go:66:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=20)\
    \ %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp6ciwrytf_test.go:66:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=1) %!s(int=0) %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp6ciwrytf_test.go:66: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n  \
    \  --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp6ciwrytf_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=-1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp6ciwrytf_test.go:66: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp6ciwrytf_test.go:66: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073397
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    fmt.Println(fmt.Sprintf(\"Input: %v\", arr))\n    fmt.Println(fmt.Sprintf(\"\
    Positive integer: %d\", k))\n    // Implement your function here\n    return arr\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Input: [-3 -4 5]\nPositive integer: 3\nInput: [4 -4 4]\nPositive integer:\
    \ 2\nInput: [-3 2 1 2 -1 -2 1]\nPositive integer: 1\nInput: [123 -123 20 0 1 2\
    \ -3]\nPositive integer: 3\nInput: [-123 20 0 1 2 -3]\nPositive integer: 4\nInput:\
    \ [5 15 0 3 -13 -8 0]\nPositive integer: 7\nInput: [-1 0 2 5 3 -10]\nPositive\
    \ integer: 2\nInput: [1 0 5 -7]\nPositive integer: 1\nInput: [4 -4]\nPositive\
    \ integer: 2\nInput: [-10 10]\nPositive integer: 2\nInput: [1 2 3 -23 243 -400\
    \ 0]\nPositive integer: 0\n--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0\
    \ (0.00s)\n        tmp7zzex4kc_test.go:53: expected '[%!s(int=-4) %!s(int=-3)\
    \ %!s(int=5)]', got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp7zzex4kc_test.go:53: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp7zzex4kc_test.go:53: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp7zzex4kc_test.go:53: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp7zzex4kc_test.go:53: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp7zzex4kc_test.go:53:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp7zzex4kc_test.go:53: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmp7zzex4kc_test.go:53: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(in"
  timestamp: 1660073398
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var ret []int\n    var s, e int\n    var i int\n    n := len(arr)\n \
    \   for s < n {\n        e = s + k\n        if e > n {\n            e = n\n  \
    \      }\n        m := maximumRange(arr, s, e)\n        if i < k {\n         \
    \   ret = append(ret, m)\n        } else {\n            ret[i] = m\n        }\n\
    \        i++\n        s = e\n    }\n    return ret\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgt7yr1xl_test.go:33:14: undefined: maximumRange

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Implement here\n    if len(arr) <= k {\n        return arr\n    }\n\
    \    for i := 0; i < k; i++ {\n        for j := i; j < len(arr); j++ {\n     \
    \       if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmparaqyroh_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmparaqyroh_test.go:61: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmparaqyroh_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmparaqyroh_test.go:61: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmparaqyroh_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmparaqyroh_test.go:61: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == 1 {\n        biggest := arr[0]\n \
    \       for _, num := range arr {\n            if num > biggest {\n          \
    \      biggest = num\n            }\n        }\n        return []int{biggest}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for m := k - 1; m > j; m-- {\n       \
    \             result[m] = result[m - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpas_fwry3_test.go:83: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpas_fwry3_test.go:83: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpas_fwry3_test.go:83: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpas_fwry3_test.go:83:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpas_fwry3_test.go:83: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpas_fwry3_test.go:83:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return MergeSort(arr)[len(arr)-k:]\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2dyyvxd2_test.go:24:12: undefined: MergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return []int{}\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpup49gloy_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpup49gloy_test.go:50:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpup49gloy_test.go:50: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpup49gloy_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpup49gloy_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpup49gloy_test.go:50: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpup49gloy_test.go:50: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpup49gloy_test.go:50:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpup49gloy_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpup49gloy_test.go:50:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Bubble sort the list\n    for i:=0; i<len(arr); i++ {\n        for\
    \ j:=i+1; j<len(arr); j++ {\n            if arr[i] > arr[j] {\n              \
    \  arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // Trim\
    \ off unwanted elements\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n\
    \        tmpbxd2o6l4_test.go:59: expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=-4)\
    \ %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmpbxd2o6l4_test.go:59:\
    \ expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbxd2o6l4_test.go:59: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=-123) %!s(int=-3) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbxd2o6l4_test.go:59: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=-3) %!s(int=0) %!s(int=1)]'\n   \
    \ --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpbxd2o6l4_test.go:59: expected\
    \ '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-10) %!s(int=-1)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpbxd2o6l4_test.go:59: expected '[%!s(int=5)]', got '[%!s(int=-7)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    l := len(arr)\n    m := make([]int, k)\n    j := 0\n    for i := 0; i\
    \ < l; i++ {\n        if arr[i] > m[j] {\n            m[j] = arr[i]\n        \
    \    j++\n            if j == k {\n                j = 0\n            }\n    \
    \    }\n    }\n    return m\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmpzozsj45t_test.go:28\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmpzozsj45t_test.go:56 +0x665\n\
    testing.tRunner(0xc00019e000, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    var index int\n\n    // While we have values to\
    \ add and the result isn't full\n    for k > 0 && index < len(arr) {\n       \
    \ var max int\n        // Check if the item is greater than the last value\n \
    \       if len(result) == 0 || arr[index] > result[len(result) - 1] {\n      \
    \      max = arr[index]\n        } else {\n            max = result[len(result)\
    \ - 1]\n        }\n        result = append(result, max)\n        index++\n   \
    \ }\n\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpa_h_1q4j_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpa_h_1q4j_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpa_h_1q4j_test.go:66: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpa_h_1q4j_test.go:66: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123) %!s(int=123)\
    \ %!s(int=123) %!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpa_h_1q4j_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpa_h_1q4j_test.go:66:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15) %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n \
    \       tmpa_h_1q4j_test.go:66: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpa_h_1q4j_test.go:66: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpa_h_1q4j_test.go:66: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    maxSlice := make([]int, k)\n    // for i := 0; i < k; i++ {\n    // \
    \    maxSlice[i] = arr[i]\n    // }\n    copy(maxSlice, arr[:k])\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > maxSlice[0] {\n            maxSlice[0]\
    \ = arr[i]\n            maxSlice = fixMaxSlice(maxSlice)\n        }\n    }\n \
    \   // sort.Ints(maxSlice)\n    return maxSlice\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd106yowp_test.go:32:24: undefined: fixMaxSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    if n == 0 {\n        return arr\n    }\n    // maxHeap\
    \ stores the top k elements of arr.\n    maxHeap := make([]int, k)\n    // Initially,\
    \ the maxHeap consists of the first k elements of arr.\n    for i := 0; i < k;\
    \ i++ {\n        maxHeap[i] = arr[i]\n    }\n    // The above algorithm only works\
    \ when the minHeap is con\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuzpp9gwp_test.go:35:6: expected ''('', found TestMaximum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    for i := 0; i < k; i++ {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        result = append(result, max)\n      \
    \  for j, v := range arr {\n            if v == max {\n                arr = append(arr[:j],\
    \ arr[j+1:]...)\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmppl75q4av_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmppl75q4av_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmppl75q4av_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmppl75q4av_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmppl75q4av_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmppl75q4av_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmppl75q4av_test.go:66: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    size := len(arr)\n    if size == 0 {\n        return []int{}\n    }\n\
    \    if size == 1 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k >= size {\n        arr = quickSort(arr)\n        return\
    \ arr\n    }\n    index := -1\n    return quickSelect(arr, 0, size - 1, index,\
    \ k)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe61hzru__test.go:35:15: undefined: quickSort

    /tmp/tmpe61hzru__test.go:39:12: undefined: quickSelect

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // fmt.Println(arr, k)\n    if k == 0 {\n        return nil\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    result := []int{}\n    for i := 0; i < k; i++ {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        result = append(result, max)\n      \
    \  arr = deleteMax(arr, max)\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprcdmlcb9_test.go:49:15: undefined: deleteMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var (\n        res = make([]int, k)\n        i, j int\n    )\n    for\
    \ i, j = 0, 0; i < len(arr) && j < k; i++ {\n        for j > 0 && arr[i] > res[j-1]\
    \ {\n            j--\n        }\n        res[j] = arr[i]\n        j++\n    }\n\
    \    for i < len(arr) {\n        for j > 0 && arr[i] > res[j-1] {\n          \
    \  j--\n        }\n        if j < k {\n            res[j] = arr[i]\n         \
    \   j++\n        }\n        i++\n    }\n    return res\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmplhhh_ed5_test.go:71: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-4) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmplhhh_ed5_test.go:71: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmplhhh_ed5_test.go:71: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=-3) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmplhhh_ed5_test.go:71: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmplhhh_ed5_test.go:71:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmplhhh_ed5_test.go:71: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmplhhh_ed5_test.go:71: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073399
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // n := len(arr)\n    res := make([]int, k)\n    // Compare val with\
    \ all of res, if val is larger than one of them, \n    // remove the last item\
    \ and insert val at the appopriate position.\n    var insert = func(val int) {\n\
    \        for i := 0; i < k; i++ {\n            if res[i] < val {\n           \
    \     res = append(res[:i], append([]int{val}, res[i:k-1]...)...)\n          \
    \      return\n            }\n        }\n    }\n    for _, v := range arr {\n\
    \        insert(v)\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpx8sez6i__test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpx8sez6i__test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpx8sez6i__test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpx8sez6i__test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpx8sez6i__test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpx8sez6i__test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpx8sez6i__test.go:65: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return nil\n    }\n    if k >= len(arr) {\n    \
    \    return quicksort(arr)\n    }\n    idx := partition(arr)\n    i := 0\n   \
    \ for idx != k {\n        if idx > k {\n            idx = partition(arr[:idx])\n\
    \        } else {\n            i += idx + 1\n            idx = partition(arr[i:])\n\
    \        }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptacc09rc_test.go:28:16: undefined: quicksort

    /tmp/tmptacc09rc_test.go:30:12: undefined: partition

    /tmp/tmptacc09rc_test.go:34:19: undefined: partition

    /tmp/tmptacc09rc_test.go:37:19: undefined: partition

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpz85qcvu9_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpz85qcvu9_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpz85qcvu9_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpz85qcvu9_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpz85qcvu9_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpz85qcvu9_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpz85qcvu9_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpz85qcvu9_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpz85qcvu9_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpz85qcvu9_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073157
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == 1 {\n        arr[0] = findMax(arr)\n\
    \        return arr[:1]\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var res = make([]int, k)\n    copy(res, arr[:k])\n    heapSort(res)\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n         \
    \   res[0] = arr[i]\n            heapSort(res)\n        }\n    }\n    return res\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkajltf3y_test.go:31:18: undefined: findMax

    /tmp/tmpkajltf3y_test.go:39:5: undefined: heapSort

    /tmp/tmpkajltf3y_test.go:43:13: undefined: heapSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // insert numbers in a min-heap\n    minHeap := make([]int, 0)\n    for\
    \ _, num := range arr {\n        if len(minHeap) < k {\n            insert(minHeap,\
    \ num)\n        } else {\n            if num > minHeap[0] {\n                removeMin(minHeap)\n\
    \                insert(minHeap, num)\n            }\n        }\n    }\n    return\
    \ minHeap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5mk933kz_test.go:28:13: undefined: insert

    /tmp/tmp5mk933kz_test.go:31:17: undefined: removeMin

    /tmp/tmp5mk933kz_test.go:32:17: undefined: insert

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073398
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmptf0p5_s3_test.go:50: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmptf0p5_s3_test.go:50: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n\n    if k == 0 {\n\
    \        return []int{}\n    }\n\n    if k >= len(arr) {\n        return arr\n\
    \    }\n\n    for i := 0; i < k; i++ {\n        for j := i; j < len(arr) - 1;\
    \ j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j +\
    \ 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    return arr[len(arr)\
    \ - k:]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpq_963gcm_test.go:70: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpq_963gcm_test.go:70: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-3) %!s(int=1) %!s(int=2) %!s(int=20)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpq_963gcm_test.go:70: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpq_963gcm_test.go:70:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073399
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    for i := 0; i < k; i++ {\n        max_index :=\
    \ i\n        for j := i; j < len(arr); j++ {\n            if arr[j] > arr[max_index]\
    \ {\n                max_index = j\n            }\n        }\n        arr[i],\
    \ arr[max_index] = arr[max_index], arr[i]\n        result = append(result, arr[i])\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp9h_g4wao_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp9h_g4wao_test.go:61: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp9h_g4wao_test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp9h_g4wao_test.go:61: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp9h_g4wao_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp9h_g4wao_test.go:61: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmp9h_g4wao_test.go:61: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073399
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n       \
    \     max = v\n        }\n    }\n    count := 0\n    for _, v := range arr {\n\
    \        if v == max {\n            count++\n        }\n    }\n    var r []int\n\
    \    if count >= k {\n        for _, v := range arr {\n            if v == max\
    \ {\n                r = append(r, v)\n            }\n        }\n    } else {\n\
    \        r = append(r, max)\n        k--\n        i := 0\n        j := len(arr)\
    \ - 1\n        n := arr[i]\n        m := arr[j]\n        for k > 0 {\n       \
    \     if n >= m {\n                if n < max {\n                    r = append(r,\
    \ n)\n                    k--\n                }\n                i++\n      \
    \          n = arr[i]\n            } else {\n                if m < max {\n  \
    \                  r = append(r, m)\n                    k--\n               \
    \ }\n                j--\n                m = arr[j]\n            }\n        }\n\
    \    }\n    return r\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0000f5be0, 0x2, 0x0?}, 0x2)\n\
    \t/tmp/tmp_f9m7toy_test.go:57 +0x25f\ncommand-line-arguments_test.TestMaximum(0xc0001924e0?)\n\
    \t/tmp/tmp_f9m7toy_test.go:86 +0x4ed\ntesting.tRunner(0xc0001924e0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073399
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    for i := 0; i < k; i++ {\n        // find max arr[j]\n\
    \        max_idx := -1\n        for j := i; j < n; j++ {\n            if max_idx\
    \ == -1 || arr[j] > arr[max_idx] {\n                max_idx = j\n            }\n\
    \        }\n        // swap max with current idx\n        if max_idx != i {\n\
    \            arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        }\n    }\n \
    \   return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpk6labdta_test.go:64: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpk6labdta_test.go:64: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpk6labdta_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpk6labdta_test.go:64: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpk6labdta_test.go:64:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpk6labdta_test.go:64: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpk6labdta_test.go:64: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073399
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return arr\n    }\n    if k <= 0 {\n    \
    \    return []int{}\n    }\n    if k > len(arr) {\n        k = len(arr)\n    }\n\
    \    result := make([]int, k)\n    for i, x := range arr {\n        if i < k {\n\
    \            result[i] = x\n        } else {\n            insertMinHeap(result,\
    \ x)\n        }\n    }\n    return heapSort(result)\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2blk_715_test.go:38:13: undefined: insertMinHeap

    /tmp/tmp2blk_715_test.go:41:12: undefined: heapSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var (\n        result = make([]int, k)\n        minIdx int\n    )\n \
    \   for i := 0; i < k; i++ {\n        minIdx = i\n        for j := i + 1; j <\
    \ len(arr); j++ {\n            if arr[j] > arr[minIdx] {\n                minIdx\
    \ = j\n            }\n        }\n        if minIdx != i {\n            arr[i],\
    \ arr[minIdx] = arr[minIdx], arr[i]\n        }\n        result[i] = arr[i]\n \
    \   }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmprkx3o9uy_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmprkx3o9uy_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmprkx3o9uy_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmprkx3o9uy_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmprkx3o9uy_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmprkx3o9uy_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmprkx3o9uy_test.go:66: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    var stack []int\n    var res []int\n    for i,\
    \ v := range arr {\n        for len(stack) > 0 && len(stack) + len(arr) - i >\
    \ k && v > stack[len(stack) - 1] {\n            stack = stack[:len(stack) - 1]\n\
    \        }\n        if len(stack) < k {\n            stack = append(stack, v)\n\
    \        }\n    }\n    return stack\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsc5qjilf_test.go:31:9: res declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    ret := make([]int, k)\n    copy(ret, arr[:k])\n    k += k/2\n    for\
    \ i := k/2; i >= 0; i-- {\n        heapify(ret, i, k)\n    }\n    for i := k;\
    \ i < len(arr); i++ {\n        if arr[i] > ret[0] {\n            ret[0] = arr[i]\n\
    \            heapify(ret, 0, k)\n        }\n    }\n    return ret\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnri07kk0_test.go:37:9: undefined: heapify

    /tmp/tmpnri07kk0_test.go:42:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return nil\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpqp66h3ih_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpqp66h3ih_test.go:50:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpqp66h3ih_test.go:50: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpqp66h3ih_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpqp66h3ih_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpqp66h3ih_test.go:50: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpqp66h3ih_test.go:50: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpqp66h3ih_test.go:50:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpqp66h3ih_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpqp66h3ih_test.go:50:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n\n    q := make([]int,\
    \ 0)\n    for i := 0; i < len(arr); i++ {\n        q = append(q, arr[i])\n   \
    \     maxHeapify(q, i)\n        if len(q) > k {\n            q = q[1:]\n     \
    \   }\n    }\n    return q\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tdwz2oy_test.go:31:9: undefined: maxHeapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // corner case\n    if k <= 0 {\n        return []int{}\n    }\n    if\
    \ k >= len(arr) {\n        return arr\n    }\n    // create a new slice with length\
    \ k\n    ret := make([]int, k)\n    for i := 0; i < k; i++ {\n        ret[i] =\
    \ arr[i]\n    }\n    // sort the new slice\n    quicksort(ret, 0, k - 1)\n   \
    \ // iterate the rest of the slice\n    for i := k; i < len(arr); i++ {\n    \
    \    if arr[i] > ret[0] {\n            ret[0] = arr[i]\n            quicksort(ret,\
    \ 0, k - 1)\n        }\n    }\n    return ret\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp74kgelfv_test.go:37:5: undefined: quicksort

    /tmp/tmp74kgelfv_test.go:42:13: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    res := make([]int, k)\n    copy(res, arr[:k])\n    k = len(res)\n   \
    \ for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0]\
    \ = arr[i]\n            rebuild(res)\n        }\n    }\n    return res\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6cfz17m8_test.go:30:13: undefined: rebuild

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    length := len(arr)\n    if length == 0 {\n        return []int{}\n  \
    \  }\n    if k > length {\n        k = length\n    }\n    heap := NewMaxHeap(arr)\n\
    \    for heap.Size() > k {\n        heap.Pop()\n    }\n    return heap.Data()\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp967kzl08_test.go:31:13: undefined: NewMaxHeap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // TODO: Write your code here\n    return nil\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp8c1rt8wo_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmp8c1rt8wo_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp8c1rt8wo_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp8c1rt8wo_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp8c1rt8wo_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmp8c1rt8wo_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp8c1rt8wo_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp8c1rt8wo_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp8c1rt8wo_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp8c1rt8wo_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073400
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    if k == 0 {\n        return result\n    }\n   \
    \ for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n \
    \   for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n      \
    \      if arr[i] > result[j] {\n                result = append(result[:j], result[j+1:]...)\n\
    \                result = append(result, arr[i])\n                break\n    \
    \        }\n        }\n    }\n    return result[:k]\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpw6_xq1hf_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpw6_xq1hf_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpw6_xq1hf_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpw6_xq1hf_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpw6_xq1hf_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpw6_xq1hf_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073401
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arrLen := len(arr)\n    if arrLen <= 0 || k <= 0 || k > arrLen {\n  \
    \      return nil\n    }\n    arrResult := make([]int, k)\n    copy(arrResult,\
    \ arr[:k])\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapfiy(arrResult,\
    \ i, k)\n    }\n    for i := k; i < arrLen; i++ {\n        if arr[i] > arrResult[0]\
    \ {\n            arrResult[0] = arr[i]\n            heapfiy(arrResult, 0, k)\n\
    \        }\n    }\n    return arrResult\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpub30x5gd_test.go:31:9: undefined: heapfiy

    /tmp/tmpub30x5gd_test.go:36:13: undefined: heapfiy

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var res []int\n    if k == 1 {\n        res = make([]int, 1)\n      \
    \  res[0] = arr[0]\n        for i := 1; i < len(arr); i++ {\n            if arr[i]\
    \ > res[0] {\n                res[0] = arr[i]\n            }\n        }\n    \
    \    return res\n    }\n    // no need to sort the first k elements\n    res =\
    \ arr[:k]\n    for i := 1; i < k; i++ {\n        for j := 0; j < i; j++ {\n  \
    \          if res[j] > res[i] {\n                // insert at pos i\n        \
    \        temp := res[i]\n                copy(res[j+1:i+1], res[j:i])\n      \
    \          res[j] = temp\n            }\n        }\n    }\n    // sort the rest\
    \ of elements\n    for i := k; i < len(arr); i++ {\n        // compare with the\
    \ last element in the sorted array\n        if arr[i] > res[k-1] {\n         \
    \   // insert at pos k\n            temp := arr[i]\n            copy(res[1:k],\
    \ res[:k-1])\n            res[0] = temp\n        }\n    }\n    return res\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513820, 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000192140, 0x7, 0x7}, 0x0)\n\
    \t/tmp/tmp05ovy4e4_test.go:50 +0x14d\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmp05ovy4e4_test.go:77 +0x48f\ntesting.tRunner(0xc0001991e0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073401
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Your implementation goes here.\n    var slice []int\n    fmt.Println(slice)\n\
    \    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n--- FAIL: TestMaximum (0.00s)\n\
    \    --- FAIL: TestMaximum/test_num__0 (0.00s)\n        tmpe7uwxa___test.go:53:\
    \ expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]', got '[%!s(int=-3) %!s(int=-4)\
    \ %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpe7uwxa___test.go:53:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n\
    \    --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmpe7uwxa___test.go:53:\
    \ expected '[%!s(int=2)]', got '[%!s(int=-3) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpe7uwxa___test.go:53: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpe7uwxa___test.go:53:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpe7uwxa___test.go:53: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n  \
    \  --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpe7uwxa___test.go:53:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0) %!s(int=2)\
    \ %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpe7uwxa___test.go:53: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpe7uwxa___test.go:53: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmpe7uwxa___test.go:53:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073401
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    heapify(result)\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > result[0] {\n            result[0] = arr[i]\n           \
    \ heapify(result)\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt8b5gs8s_test.go:37:5: undefined: heapify

    /tmp/tmpt8b5gs8s_test.go:41:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073400
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    res := make([]int, k)\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpuwksqb2k_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpuwksqb2k_test.go:51: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpuwksqb2k_test.go:51: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpuwksqb2k_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpuwksqb2k_test.go:51:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpuwksqb2k_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpuwksqb2k_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpuwksqb2k_test.go:51: expected '[%!s(int=5)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpuwksqb2k_test.go:51:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpuwksqb2k_test.go:51: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073401
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    var ind, to_delete int\n    var i, j int\n    r := make([]int, k)\n\
    \    for i, to_delete = 0, len(arr) - k; i < to_delete; i++ {\n        ind = 0\n\
    \        for j = 1; j < k; j++ {\n            if arr[j] > arr[ind] {\n       \
    \         ind = j\n            }\n        }\n        arr[ind] = arr[len(arr) -\
    \ 1 - i]\n    }\n    copy(r, arr[i:])\n    return r\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpr7x_gju1_test.go:72: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpr7x_gju1_test.go:72: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpr7x_gju1_test.go:72: expected '[%!s(int=2)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpr7x_gju1_test.go:72:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpr7x_gju1_test.go:72:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpr7x_gju1_test.go:72: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpr7x_gju1_test.go:72: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpr7x_gju1_test.go:72: expected '[%!s(int=5)]', got '[%!s(int=-7)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpr7x_gju1_test.go:72:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073401
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var res []int\n    if k == 0 {\n        return res\n    }\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    for _, n := range arr {\n       \
    \ l := len(res)\n        if l == 0 {\n            res = append(res, n)\n     \
    \       continue\n        }\n        if l < k {\n            i := l - 1\n    \
    \        for ; i >= 0; i-- {\n                if res[i] < n {\n              \
    \      res = append(res[:i], append([]int{n}, res[i:]...)...)\n              \
    \      break\n                }\n            }\n            if i == -1 {\n   \
    \             res = append([]int{n}, res...)\n            }\n        } else {\n\
    \            i := l - 1\n            for ; i >= 0; i-- {\n                if res[i]\
    \ < n {\n                    res = append(res[:i], append([]int{n}, res[i:]...)...)\n\
    \                    res = res[:k]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpzviwo7wm_test.go:85: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpzviwo7wm_test.go:85: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpzviwo7wm_test.go:85: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=20) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpzviwo7wm_test.go:85: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpzviwo7wm_test.go:85: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpzviwo7wm_test.go:85:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpzviwo7wm_test.go:85: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073401
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    heap := make([]int, 0)\n    if k > len(arr) {\n        k = len(arr)\n\
    \    }\n    for i := 0; i < k; i++ {\n        heap = append(heap, arr[i])\n  \
    \  }\n    heapify(heap)\n    for i := k; i < len(arr); i++ {\n        if arr[i]\
    \ > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap)\n     \
    \   }\n    }\n    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0s1upke3_test.go:31:5: undefined: heapify

    /tmp/tmp0s1upke3_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073401
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    var max []int\n    for\
    \ i := 0; i < k; i++ {\n        max = append(max, arr[i])\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > max[j] {\n                max[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return max\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpwi1zk87p_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpwi1zk87p_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpwi1zk87p_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpwi1zk87p_test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpwi1zk87p_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpwi1zk87p_test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return arr\n    }\n    if k > len(arr) {\n\
    \        k = len(arr)\n    }\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >=\
    \ 0; i-- {\n        min_heapify(result, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         min_heapify(result, 0, k)\n        }\n    }\n    return result\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnchtb5k2_test.go:35:9: undefined: min_heapify

    /tmp/tmpnchtb5k2_test.go:40:13: undefined: min_heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073401
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    n := len(arr)\n    if\
    \ k >= n {\n        return arr\n    }\n    // Insertion Sort\n    // Worst Case:\
    \ O(n^2)\n    // O(nk)\n    for i := 1; i < k; i++ {\n        x := arr[i]\n  \
    \      j := i - 1\n        for ; j >= 0 && arr[j] < x; j-- {\n            arr[j+1]\
    \ = arr[j]\n        }\n        arr[j+1] = x\n    }\n    for i := k; i < n; i++\
    \ {\n        if arr[i] > arr[0] {\n            arr[0] = arr[i]\n            for\
    \ j := 1; j < k; j++ {\n                x := arr[j]\n                t := j -\
    \ 1\n                for ; t >= 0 && arr[t] < x; t-- {\n                    arr[t+1]\
    \ = arr[t]\n                }\n                arr[t+1] = x\n            }\n \
    \       }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpsu9406_j_test.go:81: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpsu9406_j_test.go:81: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpsu9406_j_test.go:81: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpsu9406_j_test.go:81: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=1) %!s(int=0) %!s(int=-123)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpsu9406_j_test.go:81: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpsu9406_j_test.go:81:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=-1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpsu9406_j_test.go:81: expected\
    \ '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // your code here\n    var res []int\n    for _, v := range arr {\n \
    \       i := len(res) - 1\n        for ; i >= 0; i-- {\n            if res[i]\
    \ < v {\n                break\n            }\n        }\n        i++\n      \
    \  if i == k {\n            continue\n        }\n        if len(res) < k {\n \
    \           res = append(res, v)\n        } else {\n            res = append(res[:i],\
    \ append([]int{v}, res[i:]...)...)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp415lwtb2_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp415lwtb2_test.go:69: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmp415lwtb2_test.go:69: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp415lwtb2_test.go:69:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=-3) %!s(int=0) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp415lwtb2_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=-3) %!s(int=20) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp415lwtb2_test.go:69:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp415lwtb2_test.go:69: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-10)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n  \
    \      tmp415lwtb2_test.go:69: expected '[%!s(int=5)]', got '[%!s(int=-7) %!s(int=0)\
    \ %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n   \
    \     tmp415lwtb2_test.go:69: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == len(arr) {\n        return arr\n    }\n    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, e := range arr {\n            if e > max {\n                max = e\n   \
    \         }\n        }\n        return []int{max}\n    }\n    half := k/2\n  \
    \  left := maximum(arr[:len(arr)-half], half)\n    right := maximum(arr[len(arr)-half:],\
    \ k-half)\n    ans := make([]int, 0, k)\n    i, j := 0, 0\n    for len(ans) <\
    \ k {\n        if i < len(left) && j < len(right) {\n            if left[i] >\
    \ right[j] {\n                ans = append(ans, left[i])\n                i++\n\
    \            } else {\n                ans = append(ans, right[j])\n         \
    \       j++\n            }\n        } else if i < len(left) {\n            ans\
    \ = append(ans, left[i])\n            i++\n        } else {\n            ans =\
    \ append(ans, right[j])\n            j++\n        }\n    }\n    return ans\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000020330?, 0x0?, 0x40ccc5?},\
    \ 0x0?)\n\t/tmp/tmpckhkxvlb_test.go:31 +0x475\ncommand-line-arguments_test.maximum({0xc000020330?,\
    \ 0x0?, 0x1}, 0x0?)\n\t/tmp/tmpckhkxvlb_test.go:40 +0xb8\ncommand-line-arguments_test.maximum({0xc000020300?,\
    \ 0x450b3e?, 0x7}, 0x5e4ea0?)\n\t/tmp/tmpckhkxvlb_test.go:41 +0x125\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpckhkxvlb_test.go:74 +0x1c3\ntesting.tRunner(0xc0001924e0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n\
    \        return arr\n    }\n    pivot := arr[0]\n    pivotIdx := 0\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n            pivotIdx\
    \ = i\n            pivot = arr[i]\n        }\n    }\n    left := []int{}\n   \
    \ right := []int{}\n    for i := 1; i < len(arr); i++ {\n        if i != pivotIdx\
    \ {\n            if arr[i] > pivot {\n                left = append(left, arr[i])\n\
    \            } else {\n                right = append(right, arr[i])\n       \
    \     }\n        }\n    }\n    if len(left) >= k {\n        return maximum(left,\
    \ k)\n    } else if len(left) + 1 == k {\n        return append(maximum(left,\
    \ len(left)), pivot)\n    } else {\n        return append(maximum(left, len(left)),\
    \ maximum(right, k - len(left) - 1)...)\n    }\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpmwhbetdr_test.go:81: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpmwhbetdr_test.go:81: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpmwhbetdr_test.go:81: expected '[%!s(int=2)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpmwhbetdr_test.go:81:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=1)\
    \ %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpmwhbetdr_test.go:81:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpmwhbetdr_test.go:81: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpmwhbetdr_test.go:81: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpmwhbetdr_test.go:81: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    fmt.Println(arr, k)\n    if len(arr) <= k {\n        return arr\n   \
    \ }\n    if k == 0 {\n        return []int{}\n    }\n    maxIdx := 0\n    for\
    \ i := 1; i < k; i++ {\n        if arr[i] > arr[maxIdx] {\n            maxIdx\
    \ = i\n        }\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i]\
    \ > arr[maxIdx] {\n            arr[maxIdx] = arr[i]\n            maxIdx = i\n\
    \            for j := 0; j < k; j++ {\n                if j == maxIdx {\n    \
    \                continue\n                }\n                if arr[j] > arr[maxIdx]\
    \ {\n                    maxIdx = j\n                }\n            }\n      \
    \  }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[-3 -4 5] 3\n[4 -4 4] 2\n[-3 2 1 2 -1 -2 1] 1\n[123 -123 20 0 1 2 -3] 3\n\
    [-123 20 0 1 2 -3] 4\n[5 15 0 3 -13 -8 0] 7\n[-1 0 2 5 3 -10] 2\n[1 0 5 -7] 1\n\
    [4 -4] 2\n[-10 10] 2\n[1 2 3 -23 243 -400 0] 0\n--- FAIL: TestMaximum (0.00s)\n\
    \    --- FAIL: TestMaximum/test_num__0 (0.00s)\n        tmp3wn1xqfh_test.go:77:\
    \ expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]', got '[%!s(int=-3) %!s(int=-4)\
    \ %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmp3wn1xqfh_test.go:77:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp3wn1xqfh_test.go:77: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n\
    \    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp3wn1xqfh_test.go:77:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp3wn1xqfh_test.go:77: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp3wn1xqfh_test.go:77: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp3wn1xqfh_test.go:77: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    if len(arr) < k {\n        return []int{}\n  \
    \  }\n    for i := 0; i < k; i++ {\n        for j := i; j < len(arr); j++ {\n\
    \            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmprnw56gr6_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmprnw56gr6_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmprnw56gr6_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmprnw56gr6_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmprnw56gr6_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmprnw56gr6_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        index :=\
    \ -1\n        val := -1001\n        for j := 0; j < len(arr); j++ {\n        \
    \    if arr[j] > val {\n                index = j\n                val = arr[j]\n\
    \            }\n        }\n        res[i] = val\n        arr = append(arr[:index],\
    \ arr[index+1:]...)\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpac1adjpe_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpac1adjpe_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpac1adjpe_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpac1adjpe_test.go:63: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpac1adjpe_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpac1adjpe_test.go:63: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpac1adjpe_test.go:63: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    result := make([]int, k)\n    found := 0\n   \
    \ for i := 0; i < len(arr); i++ {\n        value := arr[i]\n        j := found\n\
    \        for ; j > 0 && result[j - 1] < value; j-- {\n            result[j] =\
    \ result[j - 1]\n        }\n        result[j] = value\n        if found < k {\n\
    \            found++\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000014378?, 0x3, 0x5d42b0?},\
    \ 0x2)\n\t/tmp/tmp9q06q8cl_test.go:36 +0xf7\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmp9q06q8cl_test.go:54 +0xcd\ntesting.tRunner(0xc0001a0340, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n\n    // n is the length\
    \ of subarray that we need to sort.\n    n := len(arr) - k + 1\n    // \n    subarr\
    \ := arr[:n]\n    // fmt.Println(subarr)\n    for i := 1; i < n; i++ {\n     \
    \   for j := i; j > 0 && subarr[j] > subarr[j-1]; j-- {\n            // fmt.Println(subarr[j],\
    \ subarr[j-1])\n            subarr[j], subarr[j-1] = subarr[j-1], subarr[j]\n\
    \        }\n    }\n    // fmt.Println(subarr)\n    for i := n; i < len(arr); i++\
    \ {\n        if arr[i] > subarr[0] {\n            subarr[0] = arr[i]\n       \
    \     for j := 1; j < n && subarr[j] > subarr[j-1]; j++ {\n                subarr[j],\
    \ subarr[j-1] = subarr[j-1], subarr[j]\n            }\n        }\n    }\n    return\
    \ subarr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpst8tpxhc_test.go:74: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpst8tpxhc_test.go:74:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__2 (0.00s)\n        tmpst8tpxhc_test.go:74: expected\
    \ '[%!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=-1)\
    \ %!s(int=-2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n \
    \       tmpst8tpxhc_test.go:74: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=1) %!s(int=0) %!s(int=-123)]'\n    ---\
    \ FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpst8tpxhc_test.go:74: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20) %!s(int=0)\
    \ %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpst8tpxhc_test.go:74:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n\
    \        tmpst8tpxhc_test.go:74: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=-1)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpst8tpxhc_test.go:74: expected '[%!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=1) %!s(int=0) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpst8tpxhc_test.go:74: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpst8tpxhc_test.go:74:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k > len(arr)\
    \ {\n        k = len(arr)\n    }\n    // Create a new slice of integers containing\
    \ length k.\n    res := make([]int, k)\n    // Copy first k elements from the\
    \ origin array to the new slice.\n    copy(res, arr[:k])\n    // Put the minimum\
    \ number of the new slice at the end.\n    min := min(res)\n    for i := k; i\
    \ < len(arr); i++ {\n        if arr[i] > res[min] {\n            res[min] = arr[i]\n\
    \            min = min(res)\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5lawc5fo_test.go:35:12: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073402
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return nil\n    }\n    if k == len(arr) {\n    \
    \    return arr\n    }\n    arr = quicksort(arr)\n    return arr[:k]\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqlf6lgtj_test.go:30:11: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // keep track of the number of elements in the list. if the current element\
    \ \n    // is less than the current minimum, insert it and remove the last element\
    \ \n    // of the list to keep the size of the list constant\n    res := make([]int,\
    \ 0, k)\n    for _, i := range arr {\n        if len(res) < k {\n            res\
    \ = append(res, i)\n        } else {\n            if res[k-1] < i {\n        \
    \        res = append(res, i)\n                res = res[1:]\n            }\n\
    \        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmphcvo2yzu_test.go:32\n\
    command-line-arguments_test.TestMaximum(0x0?)\n\t/tmp/tmphcvo2yzu_test.go:58 +0xd86\n\
    testing.tRunner(0xc0001a0340, 0x528d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073403
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= k {\n        return arr\n    }\n    ans := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        ans[i] = arr[i]\n    }\n    return\
    \ quickSort(ans, k)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bf24gws_test.go:31:12: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return nil\n    }\n    result := make([]int, k)\n\
    \    n := len(arr)\n    if n == 0 {\n        return result\n    }\n    max :=\
    \ -1000000000\n    index := -1\n    // Find max value of the first k numbers\n\
    \    for i := 0; i < k; i++ {\n        v := arr[i]\n        if v > max {\n   \
    \         max = v\n            index = i\n        }\n    }\n    result[0] = max\n\
    \    for i := k; i < n; i++ {\n        v := arr[i]\n        if v > max {\n   \
    \         result[0] = v\n            max = v\n            index = i\n        }\n\
    \    }\n    current := 1\n    for current < k {\n        // Remove the previous\
    \ max number\n        n = n - 1\n        if index == n {\n            // Already\
    \ removed the previous max number\n            arr = arr[:n]\n        } else {\n\
    \            arr = append(arr[:index], arr[index+1:]...)\n        }\n        if\
    \ n == 0 {\n            break\n        }\n        max = -1000000000\n        index\
    \ = -1\n        // Find max value of the first k numbers\n        for i := 0;\
    \ i < n; i++ {\n            v := arr[i]\n            if v > max {\n          \
    \      max = v\n                index = i\n            }\n        }\n        result[current]\
    \ = max\n        current = current + 1\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp3pqojzfa_test.go:103: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp3pqojzfa_test.go:103: expected '[%!s(int=2) %!s(int=20)\
    \ %!s(int=123)]', got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp3pqojzfa_test.go:103: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp3pqojzfa_test.go:103: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp3pqojzfa_test.go:103:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp3pqojzfa_test.go:103: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmp3pqojzfa_test.go:103: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073403
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return heapMaximum(arr, k)\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxlhnvhk_test.go:24:12: undefined: heapMaximum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var results []int\n    if k > len(arr) {\n        k = len(arr)\n    }\n\
    \    // Use a hash-map to store integers and frequency.\n    store := make(map[int]int)\n\
    \    for _, v := range arr {\n        store[v]++\n    }\n    // Use a min-heap\
    \ to store integers according to frequency.\n    heap := new(Heap)\n    for key,\
    \ v := range store {\n        heap.Push(KeyValue{key, v})\n    }\n    for i :=\
    \ 0; i < k; i++ {\n        results = append(results, heap.Pop().Key)\n    }\n\
    \    return results\n}\n\ntype KeyValue \nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4v29vlu3_test.go:44:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073402
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // \u957F\u5EA6\u4E3Ak\u7684\u6700\u5927\u6570\u5217\uFF0C\u5C31\u662F\
    \u957F\u5EA6\u4E3Ak-1\u7684\u6700\u5927\u6570\u5217\uFF0C+\u65B0\u6570\u636E\uFF0C\
    \u518D+1\u8BA1\u7B97\u6700\u5927\u6570\u5217\n    // \u5982\u679C\u65B0\u6570\u636E\
    \u6BD4\u539F\u5217\u6700\u5C0F\u7684\u6570\u5C0F\uFF0C\u5C31\u66FF\u6362\uFF0C\
    \u539F\u5217\u6700\u5C0F\u6570\u53F3\u79FB\u4E00\u4F4D\uFF0C\u91CD\u590D\u8BA1\
    \u7B97\n    var ans []int\n    n := len(arr)\n    if n <= k {\n        return\
    \ arr\n    }\n    for i := 0; i < k; i++ {\n        ans = append(ans, arr[i])\n\
    \    }\n    for i := k; i < n; i++ {\n        if arr[i] <= ans[0] {\n        \
    \    ans = ans[1:]\n            ans = append(ans, arr[i])\n        } else {\n\
    \            ans = append(ans, arr[i])\n            for j := k; j > 0; j-- {\n\
    \                if ans[j] > ans[j-1] {\n                    ans[j], ans[j-1]\
    \ = ans[j-1], ans[j]\n                } else {\n                    break\n  \
    \              }\n            }\n        }\n    }\n    return ans\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000020400?, 0x7, 0x5d42f0?},\
    \ 0x0)\n\t/tmp/tmpvi47a4go_test.go:35 +0x22f\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpvi47a4go_test.go:69 +0x48f\ntesting.tRunner(0xc0001a01a0, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073403
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Fill this in.\n    var result []int\n    var item int\n    for _,\
    \ item = range arr {\n        // \u5148\u52A0\u5165k\u4E2A\u6570\n        if len(result)\
    \ < k {\n            result = append(result, item)\n            continue\n   \
    \     }\n        fmt.Println(item, result)\n        var index int\n        for\
    \ i, v := range result {\n            if v > item {\n                index = i\n\
    \                break\n            }\n        }\n        if index == 0 {\n  \
    \          continue\n        }\n        result = append(result[:index-1], result[index:]...)\n\
    \        result = append(result, item)\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "4 [4 -4]\n2 [-3]\n1 [-3]\n2 [-3]\n-1 [-3]\n-2 [-3]\n1 [-3]\n0 [123 -123\
    \ 20]\n1 [123 -123 20]\n2 [123 -123 20]\n-3 [123 -123 20]\n2 [-123 20 0 1]\n-3\
    \ [20 0 1 2]\n2 [-1 0]\n5 [-1 0]\n3 [-1 0]\n-10 [-1 0]\n0 [1]\n5 [1]\n-7 [1]\n\
    1 []\n2 []\n3 []\n-23 []\n243 []\n-400 []\n0 []\n--- FAIL: TestMaximum (0.00s)\n\
    \    --- FAIL: TestMaximum/test_num__0 (0.00s)\n        tmpjj3bo2x5_test.go:73:\
    \ expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]', got '[%!s(int=-3) %!s(int=-4)\
    \ %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpjj3bo2x5_test.go:73:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__2 (0.00s)\n        tmpjj3bo2x5_test.go:73: expected\
    \ '[%!s(int=2)]', got '[%!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpjj3bo2x5_test.go:73: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpjj3bo2x5_test.go:73: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpjj3bo2x5_test.go:73: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpjj3bo2x5_test.go:73:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpjj3bo2x5_test.go:73: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpjj3bo2x5_test.go:73: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073403
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    if len(arr) <= k {\n        return arr\n    }\n\
    \    for i := 0; i < k; i++ {\n        max := findMaximum(arr)\n        if max\
    \ == -1 {\n            break\n        }\n        result = append(result, arr[max])\n\
    \        arr = append(arr[:max], arr[max+1:]...)\n    }\n    return result\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf4_nwj09_test.go:29:16: undefined: findMaximum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073403
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n\n    lst := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        lst[i] = arr[i]\n    }\n\n    build_max_heap(lst)\n\
    \n    // add max heap\n    for i := k; i < len(arr); i++ {\n        if arr[i]\
    \ > lst[0] {\n            lst[0] = arr[i]\n            max_heapify(lst, 0)\n \
    \       }\n    }\n\n    return lst\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphpo7yoiw_test.go:33:5: undefined: build_max_heap

    /tmp/tmphpo7yoiw_test.go:39:13: undefined: max_heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073403
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var res []int\n    for i := 0; i < k; i++ {\n        max := -1000\n \
    \       maxi := -1\n        for j := 0; j < len(arr); j++ {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxi = j\n          \
    \  }\n        }\n        res = append(res, max)\n        arr = append(arr[:maxi],\
    \ arr[maxi+1:]...)\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmptulmq763_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmptulmq763_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmptulmq763_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmptulmq763_test.go:63: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmptulmq763_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmptulmq763_test.go:63: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmptulmq763_test.go:63: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073403
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == len(arr) {\n        return arr\n    }\n    // 1. Initialize a\
    \ list p with size len(arr) + 1\n    // 2. If a number is greater than the previous\
    \ one, save it in p\n    // 3. Remove the first number in p if its size is greater\
    \ than k\n    // 4. Skip all duplicated numbers\n    if len(arr) == 0 {\n    \
    \    return arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n    p\
    \ := make([]int, len(arr)+1)\n    p[0] = arr[0]\n    pLen := 1\n    for i := 1;\
    \ i < len(arr); i++ {\n        for pLen > 0 && p[pLen-1] < arr[i] {\n        \
    \    pLen--\n        }\n        if pLen < k {\n            p[pLen] = arr[i]\n\
    \            pLen++\n        }\n    }\n    return p[:pLen]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp59zem3ec_test.go:75: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp59zem3ec_test.go:75: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp59zem3ec_test.go:75: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp59zem3ec_test.go:75: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n  \
    \  --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp59zem3ec_test.go:75:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp59zem3ec_test.go:75: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073403
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Your implementation here\n    return []int{}\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpazsft32s_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpazsft32s_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpazsft32s_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpazsft32s_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpazsft32s_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpazsft32s_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpazsft32s_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpazsft32s_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpazsft32s_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpazsft32s_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var n = len(arr)\n    var idx = 0\n    var result = make([]int, 0)\n\
    \    if n == 0 {\n        return result\n    }\n    for idx < n {\n        var\
    \ i = 0\n        var j = len(result) - 1\n        for i <= j {\n            var\
    \ mid = (i + j) / 2\n            if result[mid] < arr[idx] {\n               \
    \ i = mid + 1\n            } else {\n                j = mid - 1\n           \
    \ }\n        }\n        if len(result) < k {\n            result = append(result,\
    \ 0)\n        }\n        copy(result[i+1:], result[i:])\n        result[i] = arr[idx]\n\
    \        idx++\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of range [2:1]\n\
    \ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc0001d8000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000187ca0, 0x7, 0x0?}, 0x1)\n\
    \t/tmp/tmpsx_if_p3_test.go:44 +0x225\ncommand-line-arguments_test.TestMaximum(0xc000199040?)\n\
    \t/tmp/tmpsx_if_p3_test.go:60 +0x1b2\ntesting.tRunner(0xc000199040, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    var ret []int\n    var max int\n    var index\
    \ int\n    for i := 0; i < k; i++ {\n        max = arr[0]\n        index = 0\n\
    \        for j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n    \
    \            max = arr[j]\n                index = j\n            }\n        }\n\
    \        ret = append(ret, max)\n        arr = append(arr[:index], arr[index+1:]...)\n\
    \    }\n    return ret\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpc8rdl5h4_test.go:71: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpc8rdl5h4_test.go:71: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpc8rdl5h4_test.go:71: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpc8rdl5h4_test.go:71: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpc8rdl5h4_test.go:71:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpc8rdl5h4_test.go:71: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var maximum []int\n    var i, j int\n    var kLessThanK, kGreaterThanK,\
    \ kEqualsK bool\n    if k == 0 {\n        return maximum\n    }\n    if k < len(arr)\
    \ {\n        kLessThanK = true\n    } else if k > len(arr) {\n        kGreaterThanK\
    \ = true\n    } else {\n        kEqualsK = true\n    }\n    if kLessThanK {\n\
    \        maximum = make([]int, k)\n        for i = range maximum {\n         \
    \   maximum[i] = arr[i]\n        }\n        for i = k; i < len(arr); i++ {\n \
    \           for j = 0; j < k; j++ {\n                if arr[i] > maximum[j] {\n\
    \                    for l := k - 1; l > j; l-- {\n                        maximum[l]\
    \ = maximum[l - 1]\n                    }\n                    maximum[j] = arr[i]\n\
    \                    break\n                }\n            }\n        }\n    }\
    \ else if kGreaterThanK {\n        maximum = make([]int, len(arr))\n        for\
    \ i = range maximum {\n            maximum[i] = arr[i]\n        }\n    } else\
    \ if kEqualsK {\n        maximum = make([]int, k)\n        for i = range maximum\
    \ {\n            maximum[i] = arr[i]\n        }\n    }\n    return maximum\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp8gt0lk_x_test.go:90: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp8gt0lk_x_test.go:90: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp8gt0lk_x_test.go:90: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp8gt0lk_x_test.go:90:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp8gt0lk_x_test.go:90: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp8gt0lk_x_test.go:90:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n\n    maxs := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        maxs[i] = arr[i]\n    }\n\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > maxs[j] {\n                for r := k - 1; r > j; r-- {\n         \
    \           maxs[r] = maxs[r - 1]\n                }\n                maxs[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n\n    return\
    \ maxs\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp8lhy6es6_test.go:71: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp8lhy6es6_test.go:71: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp8lhy6es6_test.go:71: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp8lhy6es6_test.go:71:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp8lhy6es6_test.go:71: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp8lhy6es6_test.go:71:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k > len(arr) {\n        return arr\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        index := i\n        // find max\n\
    \        for j := i; j < len(arr); j++ {\n            if arr[j] > arr[index] {\n\
    \                index = j\n            }\n        }\n        // append max\n\
    \        res[i] = arr[index]\n        // swap max to arr[i]\n        arr[index]\
    \ = arr[i]\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpuyl0qdl1_test.go:67: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpuyl0qdl1_test.go:67: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpuyl0qdl1_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpuyl0qdl1_test.go:67: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpuyl0qdl1_test.go:67:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpuyl0qdl1_test.go:67: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpuyl0qdl1_test.go:67: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    res := make([]int, k)\n    count := 0\n    tmp := make([]int, len(arr)\
    \ + 1)\n    // Copy the array to tmp.\n    copy(tmp, arr)\n    // Pick the maximum\
    \ k elements.\n    for count < k {\n        maximum := tmp[0]\n        max_index\
    \ := 0\n        for i := 1; i < len(tmp); i++ {\n            if tmp[i] > maximum\
    \ {\n                maximum = tmp[i]\n                max_index = i\n       \
    \     }\n        }\n        // Delete the maximum element.\n        copy(tmp[max_index:],\
    \ tmp[max_index + 1:])\n        tmp = tmp[:len(tmp) - 1]\n        res[count] =\
    \ maximum\n        count += 1\n    }\n    return res\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpgkz6obob_test.go:71: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=0) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpgkz6obob_test.go:71: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpgkz6obob_test.go:71: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpgkz6obob_test.go:71: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-8)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpgkz6obob_test.go:71:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpgkz6obob_test.go:71: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpgkz6obob_test.go:71: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var m []int\n    for _, v := range arr {\n        fmt.Println(v)\n  \
    \      if len(m) < k {\n            m = append(m, v)\n            if len(m) ==\
    \ k {\n                fmt.Println(m)\n                for i := 1; i < k; i++\
    \ {\n                    maxIndex := i\n                    for j := i + 1; j\
    \ < k; j++ {\n                        if m[j] > m[maxIndex] {\n              \
    \              maxIndex = j\n                        }\n                    }\n\
    \                    m[i], m[maxIndex] = m[maxIndex], m[i]\n                }\n\
    \            }\n        } else {\n            minIndex := 0\n            for i\
    \ := 1; i < k; i++ {\n                if m[i] < m[minIndex] {\n              \
    \      minIndex = i\n                }\n            }\n            if v > m[minIndex]\
    \ {\n                m[minIndex] = v\n            }\n        }\n    }\n    return\
    \ m\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "-3\n-4\n5\n[-3 -4 5]\n4\n-4\n[4 -4]\n4\n-3\n[-3]\n2\n1\n2\n-1\n-2\n1\n\
    123\n-123\n20\n[123 -123 20]\n0\n1\n2\n-3\n-123\n20\n0\n1\n[-123 20 0 1]\n2\n\
    -3\n5\n15\n0\n3\n-13\n-8\n0\n[5 15 0 3 -13 -8 0]\n-1\n0\n[-1 0]\n2\n5\n3\n-10\n\
    1\n[1]\n0\n5\n-7\n4\n-4\n[4 -4]\n-10\n10\n[-10 10]\n1\n--- FAIL: TestMaximum (0.00s)\n\
    panic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic:\
    \ runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\n\
    testing.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0000d3cd8, 0x7, 0x0?}, 0x0)\n\
    \t/tmp/tmpvq4z6svo_test.go:48 +0x249\ncommand-line-arguments_test.TestMaximum(0xc0001a0340?)\n\
    \t/tmp/tmpvq4z6svo_test.go:73 +0x5ef\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073404
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arrlen := len(arr)\n    if arrlen == 0 {\n        return []int{}\n  \
    \  }\n    if k > arrlen {\n        k = arrlen\n    }\n    // Use BubbleSort to\
    \ sort the arr.\n    arr = BubbleSort(arr)\n    return arr[arrlen-k:]\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl3ej061__test.go:32:11: undefined: BubbleSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // YOUR CODE HERE\n    return nil\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1gmyb3vq_test.go:51: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmp1gmyb3vq_test.go:51:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1gmyb3vq_test.go:51: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1gmyb3vq_test.go:51:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp1gmyb3vq_test.go:51: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmp1gmyb3vq_test.go:51: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp1gmyb3vq_test.go:51: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmp1gmyb3vq_test.go:51:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp1gmyb3vq_test.go:51: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1gmyb3vq_test.go:51:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmptf0p5_s3_test.go:50: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmptf0p5_s3_test.go:50: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    if n == k {\n        return arr\n    }\n\n    var\
    \ nums []int\n    if k < n {\n        nums = make([]int, n)\n        copy(nums,\
    \ arr)\n    } else {\n        nums = arr\n    }\n\n    return quicksort(nums,\
    \ 0, n-1, k)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpae9w6681_test.go:37:12: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073404
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n\n    if k == len(arr) {\n\
    \        return arr\n    }\n\n    if k == 1 {\n        return []int{max(arr)}\n\
    \    }\n\n    bucket := make([]int, 2001)\n    for _, value := range arr {\n \
    \       bucket[1000 + value]++\n    }\n\n    var result []int\n    for i := 2000;\
    \ i >= 0; i-- {\n        if bucket[i] > 0 {\n            for bucket[i] > 0 {\n\
    \                result = append(result, i - 1000)\n                bucket[i]--\n\
    \                if len(result) == k {\n                    return result\n  \
    \              }\n            }\n        }\n    }\n\n    return result\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwh6_sr44_test.go:33:22: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // write your code here\n    var result []int\n    for i := 0; i < k;\
    \ i++ {\n        result = append(result, arr[i])\n    }\n    var temp int\n  \
    \  for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n       \
    \     if arr[i] > result[j] {\n                temp = result[j]\n            \
    \    result[j] = arr[i]\n                for l := j+1; l < k; l++ {\n        \
    \            arr[i] = temp\n                    temp = result[l]\n           \
    \         result[l] = arr[i]\n                }\n                break\n     \
    \       }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpo6vp54db_test.go:70: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpo6vp54db_test.go:70: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpo6vp54db_test.go:70: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpo6vp54db_test.go:70:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpo6vp54db_test.go:70: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpo6vp54db_test.go:70:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073405
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n    \
    \    return make([]int, 0)\n    }\n    quicksort(arr, 0, len(arr) - 1)\n    if\
    \ k < len(arr) {\n        return arr[len(arr) - k:]\n    }\n    return arr\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh31ps0q_test.go:30:5: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073404
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return nil\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpqp66h3ih_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpqp66h3ih_test.go:50:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpqp66h3ih_test.go:50: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpqp66h3ih_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpqp66h3ih_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpqp66h3ih_test.go:50: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpqp66h3ih_test.go:50: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpqp66h3ih_test.go:50:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpqp66h3ih_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpqp66h3ih_test.go:50:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073400
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    max := make([]int, 0)\n    for _, v := range arr {\n        if len(max)\
    \ < k {\n            max = append(max, v)\n            continue\n        }\n \
    \       if max[k-1] < v {\n            max[k-1] = v\n        }\n        for i\
    \ := 0; i < k-1; i++ {\n            if max[i] < max[i+1] {\n                max[i],\
    \ max[i+1] = max[i+1], max[i]\n            }\n        }\n    }\n    return max\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0000f5cd8, 0x7, 0x0?}, 0x0)\n\
    \t/tmp/tmpgkpxv3u8_test.go:30 +0x146\ncommand-line-arguments_test.TestMaximum(0xc0001a01a0?)\n\
    \t/tmp/tmpgkpxv3u8_test.go:59 +0x5ef\ntesting.tRunner(0xc0001a01a0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073405
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    ret := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        ret[i] = arr[i]\n    }\n    // heapify\n    for i := (k - 2) / 2;\
    \ i >= 0; i-- {\n        siftDown(ret, i, k - 1)\n    }\n    for i := k; i < n;\
    \ i++ {\n        if arr[i] > ret[0] {\n            ret[0] = arr[i]\n         \
    \   siftDown(ret, 0, k - 1)\n        }\n    }\n    return ret\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0pbuk28e_test.go:31:9: undefined: siftDown

    /tmp/tmp0pbuk28e_test.go:36:13: undefined: siftDown

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073405
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // TODO: Implement\n    // quick select\n    if k > len(arr) {\n    \
    \    return arr\n    }\n    low, high := 0, len(arr) - 1\n    // first use the\
    \ partition function to find the first k\n    for low < high {\n        // use\
    \ partition to find the index of pivot\n        pivotIndex := partition(arr, low,\
    \ high)\n        if pivotIndex == k {\n            break\n        } else if pivotIndex\
    \ < k {\n            low = pivotIndex + 1\n        } else {\n            high\
    \ = pivotIndex - 1\n        }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5fk28qhc_test.go:33:23: undefined: partition

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073405
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    res := []int{}\n    for i := 0; i < k; i++ {\n        max := arr[0]\n\
    \        arr = arr[1:]\n        for _, n := range arr {\n            if n > max\
    \ {\n                max = n\n            }\n        }\n        res = append(res,\
    \ max)\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpo10dohz__test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpo10dohz__test.go:61: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpo10dohz__test.go:61: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=20) %!s(int=2) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpo10dohz__test.go:61: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=15) %!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpo10dohz__test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpo10dohz__test.go:61: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpo10dohz__test.go:61: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073405
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return arr\n    }\n    // Sort the array.\n\
    \    sort(arr)\n    // Get the length of the array.\n    len := len(arr)\n   \
    \ // Slice the array.\n    if k >= len {\n        return arr\n    }\n    arr =\
    \ arr[len-k:]\n    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgua6wkmw_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073405
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == k {\n        return arr\n    }\n    sortedArr := make([]int,\
    \ len(arr))\n    copy(sortedArr, arr)\n    quickSort(sortedArr, 0, len(sortedArr)\
    \ - 1)\n    return sortedArr[len(sortedArr) - k:]\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_dl82al_test.go:29:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073405
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return maximumRec(arr, k, 0, len(arr) - 1)\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6_kcq1l6_test.go:24:12: undefined: maximumRec

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073405
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Bubble sort\n    for i := 0; i < k; i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr[:k]\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmph9q_ublq_test.go:58: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmph9q_ublq_test.go:58: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmph9q_ublq_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmph9q_ublq_test.go:58: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmph9q_ublq_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmph9q_ublq_test.go:58: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmph9q_ublq_test.go:58: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    var start,end, mid int\n    var left bool\n   \
    \ if arr == nil || len(arr) == 0 {\n        return result\n    }\n    if k ==\
    \ 0 {\n        return result\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    end = len(arr) - 1\n    start = 0\n    for end - start > 1 {\n   \
    \     mid = (start + end) / 2\n        left = isMax(arr, mid, k)\n        if left\
    \ {\n            start = mid\n        } else {\n            end = mid\n      \
    \  }\n    }\n    if isMax(arr, start, k) {\n        start = start + 1\n    }\n\
    \    for i := start; i < start + k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnnifobi9_test.go:40:16: undefined: isMax

    /tmp/tmpnnifobi9_test.go:47:8: undefined: isMax

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073405
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Write your code here\n    var res []int\n    if len(arr) == 0 {\n\
    \        return res\n    }\n    if k == 0 {\n        return res\n    }\n    if\
    \ k > len(arr) {\n        k = len(arr)\n    }\n    copy(res, arr[0:k])\n    return\
    \ res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpfc5yodh5_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpfc5yodh5_test.go:62:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpfc5yodh5_test.go:62: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpfc5yodh5_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpfc5yodh5_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpfc5yodh5_test.go:62: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpfc5yodh5_test.go:62: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpfc5yodh5_test.go:62:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpfc5yodh5_test.go:62: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpfc5yodh5_test.go:62:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    heap := NewMaxHeap(k)\n    for _, e := range arr {\n        heap.Push(e)\n\
    \    }\n    return heap.Elements()\n}\n\ntype Heap interface {\n    Push(int)\n\
    \    Pop() int\n    IsEmpty() bool\n    Len() int\n    Peek() int\n    Elements()\
    \ []int\n}\n\ntype MaxHeap \nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpys5ca2a5_test.go:40:14: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073405
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k >= len(arr) {\n        return arr\n    }\n\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        cur := 0\n        for j := 1; j < len(arr);\
    \ j++ {\n            if arr[j] > arr[cur] {\n                cur = j\n       \
    \     }\n        }\n        res = append(res, arr[cur])\n        arr = append(arr[:cur],\
    \ arr[cur+1:]...)\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpc0ipy_o__test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpc0ipy_o__test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpc0ipy_o__test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpc0ipy_o__test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpc0ipy_o__test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpc0ipy_o__test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Find the maximum k numbers using a min-heap. Time complexity: O(n*log(k)).\n\
    \    // Space complexity: O(k).\n    if k == 0 {\n        return []int{}\n   \
    \ }\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i]\
    \ = arr[i]\n    }\n    for i := k-1; i >= 0; i-- {\n        heapify(heap, i, k)\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n \
    \           heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n   \
    \ }\n    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgdpv2ka8_test.go:34:9: undefined: heapify

    /tmp/tmpgdpv2ka8_test.go:39:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    for i := 0; i < k; i++ {\n        for j := i; j < len(arr); j++ {\n     \
    \       if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpdj4t2f93_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpdj4t2f93_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpdj4t2f93_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpdj4t2f93_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpdj4t2f93_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpdj4t2f93_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return selectionSort(arr, k)\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xo153nn_test.go:24:12: undefined: selectionSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    maxValues := make([]int, k)\n    insert := func(val int) {\n        if\
    \ len(maxValues) == 0 {\n            maxValues = append(maxValues, val)\n    \
    \        return\n        }\n        // keep the maxValues ordered\n        i :=\
    \ 0\n        for i < len(maxValues) && maxValues[i] >= val {\n            i++\n\
    \        }\n        j := len(maxValues) - 1\n        for j >= i {\n          \
    \  maxValues[j+1] = maxValues[j]\n            j--\n        }\n        maxValues[i]\
    \ = val\n    }\n    for _, val := range arr {\n        if len(maxValues) == k\
    \ {\n            if val > maxValues[0] {\n                maxValues = maxValues[1:]\n\
    \                insert(val)\n            }\n        } else {\n            insert(val)\n\
    \        }\n    }\n    return maxValues\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum.func1(...)\n\t/tmp/tmpmslmsj6q_test.go:37\n\
    command-line-arguments_test.maximum({0xc0000f5c08, 0x3, 0x0?}, 0x3)\n\t/tmp/tmpmslmsj6q_test.go:46\
    \ +0x2af\ncommand-line-arguments_test.TestMaximum(0xc0001a0340?)\n\t/tmp/tmpmslmsj6q_test.go:62\
    \ +0x8a\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[len(arr) - k:]\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa3qeuzq1_test.go:24:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return arr\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=2)]', got '[%!s(int=-3)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=-1) %!s(int=-2) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__3 (0.00s)\n        tmptf0p5_s3_test.go:50: expected\
    \ '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123) %!s(int=20)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmptf0p5_s3_test.go:50: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1)\
    \ %!s(int=0) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmptf0p5_s3_test.go:50: expected '[%!s(int=5)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=5) %!s(int=-7)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmptf0p5_s3_test.go:50: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__10 (0.00s)\n        tmptf0p5_s3_test.go:50:\
    \ expected '[]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=-23) %!s(int=243)\
    \ %!s(int=-400) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073394
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    res := make([]int, k)\n    copy(res, arr[:k])\n    heapify(res)\n   \
    \ for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0]\
    \ = arr[i]\n            siftdown(res, 0)\n        }\n    }\n    fmt.Println(res)\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppb14os7g_test.go:26:5: undefined: heapify

    /tmp/tmppb14os7g_test.go:30:13: undefined: siftdown

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return []int{}\n    }\n    out := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        out[i] = arr[i]\n    }\n    qSort(out,\
    \ 0, k-1)\n    for i := k; i < len(arr); i++ {\n        if arr[i] > out[0] {\n\
    \            out[0] = arr[i]\n            qSort(out, 0, k-1)\n        }\n    }\n\
    \    return out\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbv7uly5v_test.go:31:5: undefined: qSort

    /tmp/tmpbv7uly5v_test.go:35:13: undefined: qSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    if n <= k {\n        return arr\n    }\n    j := 0\n\
    \    if n - k == 1 {\n        j = 1\n    }\n    res := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k - 1; i\
    \ >= 0; i-- {\n        if res[i] > arr[i + j] {\n            res[i] = arr[i +\
    \ j]\n        } else {\n            return res\n        }\n    }\n    return res\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp27mzbl88_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp27mzbl88_test.go:69: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmp27mzbl88_test.go:69: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp27mzbl88_test.go:69:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp27mzbl88_test.go:69:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmp27mzbl88_test.go:69: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp27mzbl88_test.go:69: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmp27mzbl88_test.go:69: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp27mzbl88_test.go:69:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) == 0 {\n        return []int{}\n    }\n\n    var result []int\n\
    \    var max int\n    for i := 0; i < k; i++ {\n        for _, elem := range arr\
    \ {\n            if elem > max {\n                max = elem\n            }\n\
    \        }\n        result = append(result, max)\n        max = 0\n    }\n   \
    \ return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpe646axvx_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpe646axvx_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpe646axvx_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=20) %!s(int=20) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpe646axvx_test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)\
    \ %!s(int=15)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpe646axvx_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpe646axvx_test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpe646axvx_test.go:65: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    res := arr[:k]\n    for i := k; i < len(arr);\
    \ i++ {\n        t := arr[i]\n        for j := 0; j < k; j++ {\n            if\
    \ t > res[j] {\n                copy(res[j+1:], res[j:k-1])\n                res[j]\
    \ = t\n                break\n            }\n        }\n    }\n    return res\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpqcrrr843_test.go:67: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpqcrrr843_test.go:67: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpqcrrr843_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpqcrrr843_test.go:67:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpqcrrr843_test.go:67: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpqcrrr843_test.go:67:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if len(arr) <= 0 || k <= 0 {\n        return []int{}\n    }\n    if k\
    \ >= len(arr) {\n        quicksort(arr, 0, len(arr) - 1)\n        return arr\n\
    \    }\n    l, r := 0, len(arr) - 1\n    for l < r {\n        p := partition(arr,\
    \ l, r)\n        if p == k - 1 {\n            break\n        } else if p < k -\
    \ 1 {\n            l = p + 1\n        } else {\n            r = p - 1\n      \
    \  }\n    }\n    arr = arr[:k]\n    quicksort(arr, 0, k - 1)\n    return arr\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxx9zjk4_test.go:28:9: undefined: quicksort

    /tmp/tmpmxx9zjk4_test.go:33:14: undefined: partition

    /tmp/tmpmxx9zjk4_test.go:43:5: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    n := len(arr)\n    if n <= k {\n        return arr\n    }\n    var maxs\
    \ []int\n    for i := 0; i < k; i++ {\n        max := arr[i]\n        max_idx\
    \ := i\n        for j := i + 1; j < n; j++ {\n            if arr[j] > max {\n\
    \                max = arr[j]\n                max_idx = j\n            }\n  \
    \      }\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        maxs =\
    \ append(maxs, max)\n    }\n    return maxs\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp7lvy31iz_test.go:67: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp7lvy31iz_test.go:67: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp7lvy31iz_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp7lvy31iz_test.go:67: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp7lvy31iz_test.go:67:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp7lvy31iz_test.go:67: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k >= len(arr) {\n        return arr\n    }\n    heap := make([]int,\
    \ k)\n    for i, val := range arr {\n        if i < k {\n            heap[i] =\
    \ val\n        } else {\n            maximumOfHeap := heap[0]\n            if\
    \ val > maximumOfHeap {\n                heap[0] = val\n                heapify(heap,\
    \ 0)\n            }\n        }\n    }\n    return heap\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyi6xmfz_test.go:35:17: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    length := len(arr)\n    res := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        max := -1 << 31\n        temp := -1\n        for j := 0; j <\
    \ length; j++ {\n            if arr[j] > max {\n                max = arr[j]\n\
    \                temp = j\n            }\n        }\n        res[i] = max\n  \
    \      arr[temp] = -1 << 31\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpoc6pzg84_test.go:64: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpoc6pzg84_test.go:64: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpoc6pzg84_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpoc6pzg84_test.go:64: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpoc6pzg84_test.go:64:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpoc6pzg84_test.go:64: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpoc6pzg84_test.go:64: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    arr2 := make([]int, len(arr))\n    copy(arr2, arr)\n    kk := k\n   \
    \ // fmt.Println(arr2)\n    for i := 1; i < len(arr2); i++ {\n        // fmt.Println(arr2[i])\n\
    \        for j := i; j > 0; j-- {\n            if arr2[j] > arr2[j-1] {\n    \
    \            arr2[j], arr2[j-1] = arr2[j-1], arr2[j]\n            }\n        }\n\
    \        // fmt.Println(arr2)\n    }\n    // fmt.Println(arr2)\n    arr2 = arr2[len(arr2)-kk:]\n\
    \    // fmt.Println(arr2)\n    return arr2\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpjf_tkr21_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpjf_tkr21_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpjf_tkr21_test.go:66: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpjf_tkr21_test.go:66:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=0) %!s(int=-3)\
    \ %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpjf_tkr21_test.go:66:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=-3) %!s(int=-123)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpjf_tkr21_test.go:66: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n   \
    \ --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpjf_tkr21_test.go:66: expected\
    \ '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=-10)]'\n    --- FAIL: TestMaximum/test_num__7\
    \ (0.00s)\n        tmpjf_tkr21_test.go:66: expected '[%!s(int=5)]', got '[%!s(int=-7)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpjf_tkr21_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpjf_tkr21_test.go:66: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return maxHeap(arr, k)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ou3g0dy_test.go:24:12: undefined: maxHeap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    i := 0\n    j := k - 1\n    for i < j {\n        if arr[i] > arr[j] {\n\
    \            arr[i], arr[j] = arr[j], arr[i]\n        }\n        i++\n       \
    \ j--\n    }\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmps4o8v42u_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmps4o8v42u_test.go:59: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmps4o8v42u_test.go:59: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmps4o8v42u_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=20) %!s(int=-123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmps4o8v42u_test.go:59:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=0) %!s(int=20) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmps4o8v42u_test.go:59: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=0) %!s(int=-8)\
    \ %!s(int=-13) %!s(int=3) %!s(int=0) %!s(int=15) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmps4o8v42u_test.go:59: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmps4o8v42u_test.go:59: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    maxHeap := &MaxHeap{\n        heap: make([]int, 0),\n    }\n    for _,\
    \ num := range arr {\n        maxHeap.add(num)\n        if maxHeap.size() > k\
    \ {\n            maxHeap.pop()\n        }\n    }\n    sortedArr := make([]int,\
    \ 0)\n    for maxHeap.size() > 0 {\n        sortedArr = append(sortedArr, maxHeap.pop())\n\
    \    }\n    return sortedArr\n}\n\ntype MaxHeap \nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn_c59z_f_test.go:40:14: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073406
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n\
    \        arr = bubbleSort(arr)\n        return arr\n    }\n    for i := 0; i <\
    \ k; i++ {\n        for j := len(arr) - 1; j > i; j-- {\n            if arr[j]\
    \ > arr[j - 1] {\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n  \
    \          }\n        }\n    }\n    return arr[len(arr) - k:]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzdy7435d_test.go:28:15: undefined: bubbleSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    list := make([]int, 0)\n    for i, value := range arr {\n        if i\
    \ < k {\n            list = append(list, value)\n        } else {\n          \
    \  minimum := list[0]\n            min_i := 0\n            for i, value := range\
    \ list {\n                if value < minimum {\n                    minimum =\
    \ value\n                    min_i = i\n                }\n            }\n   \
    \         if value > minimum {\n                list[min_i] = value\n        \
    \    }\n        }\n    }\n    return list\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum(...)\n\t/tmp/tmp5gc5zy1l_test.go:29\n\
    command-line-arguments_test.TestMaximum(0xc0001a0340?)\n\t/tmp/tmp5gc5zy1l_test.go:62\
    \ +0x1107\ntesting.tRunner(0xc0001a0340, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    return maximum2(arr, k)\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphre9_w4v_test.go:24:12: undefined: maximum2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    lenArr := len(arr)\n    if lenArr < k {\n        return arr\n    }\n\
    \    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < lenArr; i++ {\n        if arr[i] <= res[k-1] {\n \
    \           continue\n        }\n        j := k - 1\n        for ; j >= 0; j--\
    \ {\n            if arr[i] > res[j] {\n                res[j+1] = res[j]\n   \
    \         } else {\n                break\n            }\n        }\n        res[j+1]\
    \ = arr[i]\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: index out of range\
    \ [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2]\
    \ with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc000014378?, 0x3, 0x5d42b0?},\
    \ 0x2)\n\t/tmp/tmpui0deicb_test.go:39 +0x150\ncommand-line-arguments_test.TestMaximum(0x0?)\n\
    \t/tmp/tmpui0deicb_test.go:57 +0xcd\ntesting.tRunner(0xc0001a0340, 0x529140)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073408
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k == 0 {\n        return arr[:0]\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    return maxHeap(arr, k)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3myi6bqe_test.go:30:12: undefined: maxHeap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return arr[:0]\n    }\n    if k >= len(arr) {\n\
    \        return arr\n    }\n    results := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        results[i] = arr[i]\n    }\n    // sort the first k numbers\
    \ in results\n    for i := 0; i < k; i++ {\n        minIndex := i\n        for\
    \ j := i + 1; j < k; j++ {\n            if results[j] < results[minIndex] {\n\
    \                minIndex = j\n            }\n        }\n        results[i], results[minIndex]\
    \ = results[minIndex], results[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > results[0] {\n            results[0] = arr[i]\n         \
    \   for j := 1; j < k; j++ {\n                if results[j] < results[j - 1] {\n\
    \                    results[j], results[j - 1] = results[j - 1], results[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return results\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpgun12g91_test.go:82: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpgun12g91_test.go:82: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n  \
    \  --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpgun12g91_test.go:82:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073408
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var ret []int\n    for i, a := range arr {\n        for len(ret) > 0\
    \ && a > ret[len(ret)-1] && k > len(ret) {\n            ret = ret[:len(ret)-1]\n\
    \        }\n        if len(ret) < k {\n            ret = append(ret, a)\n    \
    \    }\n        fmt.Println(i, ret)\n    }\n    return ret\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "0 [-3]\n1 [-3 -4]\n2 [5]\n0 [4]\n1 [4 -4]\n2 [4 -4]\n0 [-3]\n1 [-3]\n2\
    \ [-3]\n3 [-3]\n4 [-3]\n5 [-3]\n6 [-3]\n0 [123]\n1 [123 -123]\n2 [123 20]\n3 [123\
    \ 20 0]\n4 [123 20 0]\n5 [123 20 0]\n6 [123 20 0]\n0 [-123]\n1 [20]\n2 [20 0]\n\
    3 [20 1]\n4 [20 2]\n5 [20 2 -3]\n0 [5]\n1 [15]\n2 [15 0]\n3 [15 3]\n4 [15 3 -13]\n\
    5 [15 3 -8]\n6 [15 3 0]\n0 [-1]\n1 [0]\n2 [2]\n3 [5]\n4 [5 3]\n5 [5 3]\n0 [1]\n\
    1 [1]\n2 [1]\n3 [1]\n0 [4]\n1 [4 -4]\n0 [-10]\n1 [10]\n0 []\n1 []\n2 []\n3 []\n\
    4 []\n5 []\n6 []\n--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0\
    \ (0.00s)\n        tmpwt7_2lk5_test.go:60: expected '[%!s(int=-4) %!s(int=-3)\
    \ %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n\
    \        tmpwt7_2lk5_test.go:60: expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n        tmpwt7_2lk5_test.go:60:\
    \ expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpwt7_2lk5_test.go:60: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpwt7_2lk5_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpwt7_2lk5_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n   \
    \     tmpwt7_2lk5_test.go:60: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpwt7_2lk5_test.go:60:\
    \ expected '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmpwt7_2lk5_test.go:60: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9 (0.00s)\n\
    \        tmpwt7_2lk5_test.go:60: expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073408
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    if k <= 0 {\n        return []int{}\n    }\n\n    length := len(arr)\n\
    \    if k >= length {\n        return arr\n    }\n\n    mergeSort(arr, 0, length\
    \ - 1)\n    return arr[length - k:]\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjoe7frc3_test.go:33:5: undefined: mergeSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    var result []int\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    // The idea is: find the right-most position of the result array.\n    //\
    \ Then, compare the largest number in the array with the right-most\n    // value\
    \ in the result array. If the largest number is larger than the \n    // right-most\
    \ value, move the result array from the right to the left\n    // by 1 position.\
    \ Keep doing this process until the largest number is\n    // no longer larger\
    \ than the right-most value, or the right-most position\n    // is reached. Then,\
    \ insert the largest number into the result array.\n    for i := 0; i < k; i++\
    \ {\n        m := i\n        for j := len(arr) - 1; j > i; j-- {\n           \
    \ if arr[j] > arr[m] {\n                m = j\n            }\n        }\n    \
    \    // Replace the right-most position of the result array.\n        if i !=\
    \ m {\n            arr[i], arr[m] = arr[m], arr[i]\n        }\n    }\n    return\
    \ arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4yq582aa_test.go:24:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073407
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // Base case\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    // Recursive case\n\
    \    max := maximum(arr[1:], k-1)\n    if arr[0] > max[k-2] {\n        return\
    \ append([]int{arr[0]}, max[:k-1]...)\n    }\n    return append(max, arr[0])\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\npanic: runtime error: slice bounds out of\
    \ range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137c0, 0xc0000143a8})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5137c0,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.maximum({0xc0000f5d08?, 0xc0000f57e0?, 0x44a174?},\
    \ 0x40ccc5?)\n\t/tmp/tmpl8c3ynl5_test.go:35 +0x1c9\ncommand-line-arguments_test.maximum({0xc0000d3d08,\
    \ 0xc0000f5860?, 0x44a174?}, 0xfffffffffffffffa)\n\t/tmp/tmpl8c3ynl5_test.go:35\
    \ +0x88\ncommand-line-arguments_test.maximum({0xc0000d3d00, 0xc0000f58e0?, 0x44a174?},\
    \ 0xfffffffffffffffb)\n\t/tmp/tmpl8c3ynl5_test.go:35 +0x88\ncommand-line-arguments_test.maximum({0xc0000d3cf8,\
    \ 0xc0000f5960?, 0x44a174?}, 0xfffffffffffffffc)\n\t/tmp/tmpl8c3ynl5_test.go:35\
    \ +0x88\ncommand-line-arguments_test.maximum({0xc0000d3cf0, 0x2adaa675c448?, 0x0?},\
    \ 0xfffffffffffffffd)\n\t/tmp/tmpl8c3ynl5_test.go:35 +0x88\ncommand-line-arguments_test.maximum({0xc0000d3ce8,\
    \ 0xc0000f5a60?, 0x44a174?}, 0xfffffffffffffffe)\n\t/tmp/tmpl8c3ynl5_test.go:35\
    \ +0x88\ncommand-line-arguments_test.maximum({0xc0000d3ce0, 0xc00001e2f0?, 0x0?},\
    \ 0xffffffffffffffff)\n\t/tmp/tmpl8c3ynl5_test.go:35 +0x88\ncommand-line-arguments_test.maximum({0xc0000d3cd8,\
    \ 0x0?, 0x0?}, 0x0)\n\t/tmp/tmpl8c3ynl5_test.go:35 +0x88\ncommand-line-arguments_test.TestMaximum(0xc0001964e0?)\n\
    \t/tmp/tmpl8c3ynl5_test.go:59 +0x5ef\ntesting.tRunner(0xc0001964e0, 0x5290e0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073408
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the\
    \ range of [1, 1000].\n// 2. The elements in the list will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int\
    \ {\n    // bubble sort\n    for i := 0; i < k; i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr[:k]\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0fa_bb8a_test.go:58: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp0fa_bb8a_test.go:58: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp0fa_bb8a_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp0fa_bb8a_test.go:58: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0fa_bb8a_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp0fa_bb8a_test.go:58: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmp0fa_bb8a_test.go:58: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073408
