name: HumanEval_21_rescale_to_unit
language: go_test.go
prompt: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n//\
  \ []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
  \ []float64 {\n"
tests: "func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
  \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
  \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
  \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
  \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n    \
  \ { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
  \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) < 2 {\n        panic(\"Illegal argument. Needs\
    \ at least two elements.\")\n    }\n    // Find the minimum and maximum elements\
    \ of the slice\n    min, max := numbers[0], numbers[0]\n    for _, value := range\
    \ numbers {\n        if value < min {\n            min = value\n        }\n  \
    \      if value > max {\n            max = value\n        }\n    }\n    // Keep\
    \ track of the index, as the for loop doesn't allow that\n    for i := 0; i <\
    \ len(numbers); i++ {\n        numbers[i] = (numbers[i] - min) / (max - min)\n\
    \    }\n    return numbers\n}\n", "    if len(numbers) == 0 {\n        return\
    \ []float64{}\n    }\n\n    lowest := numbers[0]\n    highest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < lowest {\n        \
    \    lowest = number\n        }\n        if number > highest {\n            highest\
    \ = number\n        }\n    }\n\n    if lowest == highest {\n        return []float64{0.0}\n\
    \    }\n\n    result := make([]float64, len(numbers))\n    for index, number :=\
    \ range numbers {\n        result[index] = (number - lowest) / (highest - lowest)\n\
    \    }\n\n    return result\n}\n", "    var min float64 = 9999999\n    var max\
    \ float64 = -9999999\n    var res []float64\n\n    for _, value := range numbers\
    \ {\n        if value < min {\n            min = value\n        }\n        if\
    \ value > max {\n            max = value\n        }\n    }\n\n    for _, value\
    \ := range numbers {\n        res = append(res, (value - min) / (max - min))\n\
    \    }\n\n    return res\n}\n", "    // find the maximum and minimum value in\
    \ the list\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ n := range numbers {\n        if n < smallest {\n            smallest = n\n\
    \        }\n        if n > largest {\n            largest = n\n        }\n   \
    \ }\n    // create new list that is scaled\n    scaled := make([]float64, len(numbers))\n\
    \    for i, n := range numbers {\n        scaled[i] = (n - smallest) / (largest\
    \ - smallest)\n    }\n    return scaled\n}\n", "    max := numbers[0]\n    min\
    \ := numbers[0]\n    for _, n := range numbers {\n        if n > max {\n     \
    \       max = n\n        }\n        if n < min {\n            min = n\n      \
    \  }\n    }\n    if max == min {\n        return numbers\n    }\n    scale :=\
    \ 1.0 / (max - min)\n    for i, n := range numbers {\n        numbers[i] = (n\
    \ - min) * scale\n    }\n    return numbers\n}\n", "    min_value := find_min(numbers)\n\
    \    max_value := find_max(numbers)\n    if max_value == min_value {\n       \
    \ fmt.Println(\"Numbers are all the same.\")\n        return numbers\n    }\n\
    \    scaled_numbers := []float64{}\n    for _, v := range numbers {\n        //\
    \ TODO: implement scaling algorithm\n        scaled_numbers = append(scaled_numbers,\
    \ (v - min_value) / (max_value - min_value))\n    }\n    return scaled_numbers\n\
    }\n", "    if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, num := range numbers {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    diff := max - min\n    if diff == 0 {\n       \
    \ return numbers\n    }\n    result := make([]float64, len(numbers))\n    for\
    \ i, num := range numbers {\n        result[i] = (num - min) / diff\n    }\n \
    \   return result\n}\n", "    output := make([]float64, len(numbers))\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, num := range numbers {\n  \
    \      if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    scale := max - min\n    for\
    \ i, num := range numbers {\n        output[i] = (num - min) / scale\n    }\n\
    \    return output\n}\n", "    var lowest = numbers[0]\n    var highest = numbers[0]\n\
    \    for _, n := range numbers {\n        if n < lowest {\n            lowest\
    \ = n\n        }\n        if n > highest {\n            highest = n\n        }\n\
    \    }\n    var range_ = highest - lowest\n    var scaled = make([]float64, len(numbers))\n\
    \    for i, n := range numbers {\n        scaled[i] = (n - lowest) / range_\n\
    \    }\n    return scaled\n}\n", "    // Find the smallest and largest numbers\n\
    \    var small, large float64 = numbers[0], numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < small {\n            small = number\n       \
    \ }\n        if number > large {\n            large = number\n        }\n    }\n\
    \    // Calculate the scale\n    scale := large - small\n    // Apply the scale\
    \ to each number\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - small) / scale)\n    }\n    return\
    \ result\n}\n", "    var res = make([]float64, len(numbers))\n    min := min_in_list(numbers)\n\
    \    max := max_in_list(numbers)\n    if max - min == 0 {\n        return res\n\
    \    }\n    for i, num := range numbers {\n        res[i] = (num - min) / (max\
    \ - min)\n    }\n    return res\n}\n", "    min, max := min_max(numbers)\n   \
    \ range_ := max - min\n    result := make([]float64, len(numbers))\n    for i,\
    \ num := range numbers {\n        result[i] = (num - min) / range_\n    }\n  \
    \  return result\n}\n", "    if len(numbers) < 2 {\n        panic(\"\")\n    }\n\
    \    var max float64 = numbers[0]\n    var min float64 = numbers[0]\n    for _,\
    \ item := range numbers {\n        if item > max {\n            max = item\n \
    \       }\n        if item < min {\n            min = item\n        }\n    }\n\
    \    var result []float64\n    for _, item := range numbers {\n        result\
    \ = append(result, (item - min) / (max - min))\n    }\n    return result\n}\n",
  "    var ret []float64\n    // If the length of the given numbers is 0 or 1, then\
    \ we can't rescale anything...\n    if len(numbers) <= 1 {\n        return numbers\n\
    \    }\n    // So, we find the minimum and maximum numbers\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, num := range numbers {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    // And then we scale each number between 0 and\
    \ 1 using the formula\n    // \"the scaled number = (the number - the minimum)\
    \ / (the maximum - the minimum)\"\n    for _, num := range numbers {\n       \
    \ ret = append(ret, (num - min) / (max - min))\n    }\n    return ret\n}\n", " \
    \   if len(numbers) < 2 {\n        return []float64{}\n    }\n    var min, max\
    \ float64\n    min = numbers[0]\n    max = numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ diff float64\n    diff = max - min\n    var rescaled []float64\n    for _, number\
    \ := range numbers {\n        rescaled = append(rescaled, (number - min) / diff)\n\
    \    }\n    return rescaled\n}\n", "    min := min(numbers)\n    max := max(numbers)\n\
    \    size := max - min\n    if size == 0 {\n        return numbers\n    }\n  \
    \  output := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        output[i] = (number - min) / size\n    }\n    return output\n}\n",
  "    var min = numbers[0]\n    var max = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    var m float64 = 1.0 / (max - min)\n\
    \    var result = make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        result[i] = (n - min) * m\n    }\n    return result\n}\n", "    if\
    \ len(numbers) == 0 {\n        return numbers\n    }\n    max := numbers[0]\n\
    \    min := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        if number < min {\n  \
    \          min = number\n        }\n    }\n    range_ := max - min\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     rescaled[i] = (number - min) / range_\n    }\n    return rescaled\n}\n",
  "    if len(numbers) < 2 {\n        panic(\"Cannot rescale a list of less than two\
    \ numbers\")\n    }\n    max, min := get_min_max(numbers)\n    var result []float64\n\
    \    for _, n := range numbers {\n        scaled := (n - min) / (max - min)\n\
    \        result = append(result, scaled)\n    }\n    return result\n}\n", "  \
    \  var max = numbers[0]\n    var min = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n > max {\n            max = n\n        }\n        if n < min\
    \ {\n            min = n\n        }\n    }\n    var range_ = max - min\n    if\
    \ range_ == 0 {\n        return numbers\n    }\n    var results = make([]float64,\
    \ len(numbers))\n    for i, n := range numbers {\n        results[i] = (n - min)\
    \ / range_\n    }\n    return results\n}\n", "    var scaled []float64\n\n   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    if smallest == largest {\n        return numbers\n    }\n\n\
    \    for _, number := range numbers {\n        scaled = append(scaled, (number\
    \ - smallest) / (largest - smallest))\n    }\n\n    return scaled\n}\n", "   \
    \ var unit_scale []float64\n    minimum, maximum := numbers[0], numbers[0]\n \
    \   for _, number := range numbers {\n        if number < minimum {\n        \
    \    minimum = number\n        }\n        if number > maximum {\n            maximum\
    \ = number\n        }\n    }\n    for _, number := range numbers {\n        unit_scale\
    \ = append(unit_scale, (number - minimum) / (maximum - minimum))\n    }\n    return\
    \ unit_scale\n}\n", "    var numbers_copy = make([]float64, len(numbers))\n  \
    \  copy(numbers_copy, numbers)\n    var min = numbers_copy[0]\n    var max = numbers_copy[0]\n\
    \    for _, value := range numbers_copy {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    var length = max - min\n    for i, value := range numbers_copy\
    \ {\n        numbers_copy[i] = (value - min) / length\n    }\n    return numbers_copy\n\
    }\n", "    // find smallest and largest numbers\n    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, n := range numbers {\n        if n < min {\n     \
    \       min = n\n        }\n        if n > max {\n            max = n\n      \
    \  }\n    }\n    var res []float64\n    for _, n := range numbers {\n        res\
    \ = append(res, (n - min) / (max - min))\n    }\n    return res\n}\n", "    min,\
    \ max := min_max(numbers)\n    if (max == min) {\n        return []float64{}\n\
    \    }\n    return apply_linear_transform(numbers, min, max)\n}\n", "    if len(numbers)\
    \ < 2 {\n        panic(\"cannot rescale a list that is less than 2 elements long!\"\
    )\n    }\n    min_number := numbers[0]\n    max_number := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min_number {\n           \
    \ min_number = number\n        }\n        if number > max_number {\n         \
    \   max_number = number\n        }\n    }\n    if max_number == min_number {\n\
    \        panic(\"cannot rescale a list that is equal throughout!\")\n    }\n \
    \   multiplier := 1.0 / (max_number - min_number)\n    rescaled_numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        rescaled_numbers[i]\
    \ = (number - min_number) * multiplier\n    }\n    return rescaled_numbers\n}\n",
  "    if len(numbers) < 2 {\n        panic(\"Too few numbers to rescale\")\n    }\n\
    \    // first find the max and min values\n    max := numbers[0]\n    min := numbers[0]\n\
    \    for _, value := range numbers {\n        if value > max {\n            max\
    \ = value\n        }\n        if value < min {\n            min = value\n    \
    \    }\n    }\n    // now rescale all values\n    var result []float64\n    for\
    \ _, value := range numbers {\n        result = append(result, (value - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var min float64 = numbers[0]\n\
    \    var max float64 = numbers[0]\n    for _, number := range numbers {\n    \
    \    if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    if max - min == 0 {\n\
    \        panic(\"divide by zero\")\n    }\n    var result []float64\n    for _,\
    \ number := range numbers {\n        result = append(result, (number - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    var min, max float64\n  \
    \  min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    scaled_numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     scaled_numbers[i] = (number - min) / (max - min)\n    }\n    return scaled_numbers\n\
    }\n", "    var result []float64\n    var smallest, largest, range_ float64\n \
    \   smallest = numbers[0]\n    largest = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < smallest {\n            smallest = n\n        }\n        if\
    \ n > largest {\n            largest = n\n        }\n    }\n    range_ = largest\
    \ - smallest\n    for _, n := range numbers {\n        if range_ == 0 {\n    \
    \        result = append(result, 0)\n        } else {\n            result = append(result,\
    \ (n - smallest) / range_)\n        }\n    }\n    return result\n}\n", "    if\
    \ len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n \
    \   max := numbers[0]\n    for _, num := range numbers {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    // fmt.Printf(\"Min: %v Max: %v\\n\", min, max)\n\
    \    var result []float64\n    for _, num := range numbers {\n        new_num\
    \ := (num - min) / (max - min)\n        result = append(result, new_num)\n   \
    \ }\n    return result\n}\n", "    var max, min float64\n    max = numbers[0]\n\
    \    min = numbers[0]\n    for _, num := range numbers {\n        if max < num\
    \ {\n            max = num\n        }\n        if min > num {\n            min\
    \ = num\n        }\n    }\n    for i, num := range numbers {\n        numbers[i]\
    \ = (num - min) / (max - min)\n    }\n    return numbers\n}\n", "    // Determining\
    \ the smallest and the largest number\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, n := range numbers {\n        if n < smallest {\n\
    \            smallest = n\n        }\n        if n > largest {\n            largest\
    \ = n\n        }\n    }\n    rangeOfNumbers := largest - smallest\n    for i,\
    \ n := range numbers {\n        // Making the smallest number zero\n        numbers[i]\
    \ = n - smallest\n        // Scaling the numbers so that the largest number becomes\
    \ 1\n        numbers[i] = numbers[i] / rangeOfNumbers\n    }\n    return numbers\n\
    }\n", "    var min = numbers[0]\n    var max = numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < min {\n            min = number\n     \
    \   }\n        if number > max {\n            max = number\n        }\n    }\n\
    \    var range_ = max - min\n    var rescaled = make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        rescaled[i] = (number - min) /\
    \ range_\n    }\n    return rescaled\n}\n", "    if len(numbers) < 2 {\n     \
    \   panic(\"At least two numbers need to be provided.\")\n    }\n    smallest_number\
    \ := numbers[0]\n    largest_number := numbers[0]\n    for _, v := range numbers\
    \ {\n        if v < smallest_number {\n            smallest_number = v\n     \
    \   }\n        if v > largest_number {\n            largest_number = v\n     \
    \   }\n    }\n    if smallest_number == largest_number {\n        panic(\"All\
    \ numbers have to be different.\")\n    }\n    diff := largest_number - smallest_number\n\
    \    rescaled := make([]float64, len(numbers))\n    for k, v := range numbers\
    \ {\n        rescaled[k] = (v - smallest_number) / diff\n    }\n    return rescaled\n\
    }\n", "    min, max := min_max(numbers)\n    new_list := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        new_list[i] = float64(number -\
    \ min) / float64(max - min)\n    }\n    return new_list\n}\n", "    var result\
    \ []float64\n    if len(numbers) <= 1 {\n        return result\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, num := range numbers {\n  \
    \      if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    for _, num := range numbers\
    \ {\n        result = append(result, (num - min) / (max - min))\n    }\n    return\
    \ result\n}\n", "    if (len(numbers) < 2) {\n        panic(\"rescale_to_unit\
    \ needs at least two elements\")\n    }\n    min, max := numbers[0], numbers[0]\n\
    \    for _, num := range numbers {\n        if (num < min) {\n            min\
    \ = num\n        }\n        if (num > max) {\n            max = num\n        }\n\
    \    }\n    //fmt.Printf(\"min: %f, max: %f\\n\", min, max)\n    newNumbers :=\
    \ make([]float64, len(numbers))\n    for i, num := range numbers {\n        newNumbers[i]\
    \ = (num - min) / (max - min)\n    }\n    return newNumbers\n}\n", "    var (\n\
    \        result = make([]float64, len(numbers))\n        min_val, max_val float64\n\
    \    )\n    min_val = numbers[0]\n    max_val = numbers[0]\n    for _, element\
    \ := range numbers {\n        if element < min_val {\n            min_val = element\n\
    \        }\n        if element > max_val {\n            max_val = element\n  \
    \      }\n    }\n    for index, element := range numbers {\n        result[index]\
    \ = (element - min_val) / (max_val - min_val)\n    }\n    return result\n}\n",
  "    if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, value := range numbers {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    var result []float64\n    for _, value\
    \ := range numbers {\n        result = append(result, (value - min) / (max - min))\n\
    \    }\n    return result\n}\n", "    min_number := numbers[0]\n    max_number\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min_number\
    \ {\n            min_number = number\n        }\n        if number > max_number\
    \ {\n            max_number = number\n        }\n    }\n    lin_trans := (1.0\
    \ - 0.0) / (max_number - min_number)\n    output := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        output[i] = lin_trans * (number\
    \ - min_number)\n    }\n    return output\n}\n", "    var min, max float64\n \
    \   min = numbers[0]\n    max = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var transformed\
    \ []float64\n    for _, number := range numbers {\n        transformed = append(transformed,\
    \ (number - min) / (max - min))\n    }\n    return transformed\n}\n", "    max,\
    \ min := get_max_and_min(numbers)\n    return rescale_to_unit_max_and_min(numbers,\
    \ max, min)\n}\n", "    // Find the largest and smallest\n    largest := numbers[0]\n\
    \    smallest := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number > largest {\n            largest = number\n        }\n        if number\
    \ < smallest {\n            smallest = number\n        }\n    }\n    // Rescale\
    \ the numbers\n    for i, number := range numbers {\n        numbers[i] = (number\
    \ - smallest) / (largest - smallest)\n    }\n    return numbers\n}\n", "    var\
    \ min float64 = math.MaxFloat64\n    var max float64 = -1 * math.MaxFloat64\n\
    \    for _, v := range numbers {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ i, v := range numbers {\n        numbers[i] = (v - min) / (max - min)\n    }\n\
    \    return numbers\n}\n", "    max, min := numbers[0], numbers[0]\n    for _,\
    \ n := range numbers {\n        if n > max {\n            max = n\n        }\n\
    \        if n < min {\n            min = n\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for idx, n := range numbers {\n        result[idx] = (n -\
    \ min) / (max - min)\n    }\n    return result\n}\n", "    return rescale_to_range(numbers,\
    \ 0.0, 1.0)\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n  \
    \  for _, n := range numbers {\n        if n < smallest {\n            smallest\
    \ = n\n        }\n        if n > largest {\n            largest = n\n        }\n\
    \    }\n    rescaled := make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        rescaled[i] = (n - smallest) / (largest - smallest)\n    }\n    return\
    \ rescaled\n}\n", "    result := make([]float64, len(numbers))\n    if len(numbers)\
    \ < 2 {\n        panic(\"rescale_to_unit requires a list of at least two numbers\"\
    )\n    }\n    min, max := numbers[0], numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    const epsilon = 0.00001\n    if\
    \ max - min < epsilon {\n        panic(fmt.Sprintf(\"rescale_to_unit requires\
    \ a list of numbers that differ by at least %f\", epsilon))\n    }\n    for i,\
    \ n := range numbers {\n        result[i] = (n - min) / (max - min)\n    }\n \
    \   return result\n}\n", "    if len(numbers) < 2 {\n        panic(\"numbers must\
    \ have at least two elements\")\n    }\n    min, max := numbers[0], numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    out\
    \ := make([]float64, len(numbers))\n    for i, n := range numbers {\n        out[i]\
    \ = (n - min) / (max - min)\n    }\n    return out\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, num := range numbers {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    fmt.Printf(\"min=%f max=%f\\n\", min, max)\n  \
    \  var width float64 = max - min\n    if width == 0 {\n        return numbers\n\
    \    }\n    var rescaled []float64\n    for _, num := range numbers {\n      \
    \  rescaled = append(rescaled, (num - min) / width)\n    }\n    return rescaled\n\
    }\n", "    var smallest, largest float64\n    var result []float64\n    if len(numbers)\
    \ < 2 {\n        fmt.Println(\"Need at least two numbers to rescale\")\n     \
    \   return nil\n    }\n    smallest = numbers[0]\n    largest = numbers[0]\n \
    \   for _,number := range numbers {\n        if number < smallest {\n        \
    \    smallest = number\n        }\n        if number > largest {\n           \
    \ largest = number\n        }\n    }\n    for _,number := range numbers {\n  \
    \      result = append(result, (number - smallest) / (largest - smallest))\n \
    \   }\n    return result\n}\n", "    scaled := make([]float64, len(numbers))\n\
    \    min, max := get_min_max(numbers)\n    denominator := max - min\n    for i,\
    \ n := range numbers {\n        scaled[i] = (n - min) / denominator\n    }\n \
    \   return scaled\n}\n", "    min := min_float64(numbers)\n    max := max_float64(numbers)\n\
    \    if max - min == 0 {\n        return make([]float64, len(numbers))\n    }\n\
    \    return_values := make([]float64, len(numbers))\n    for i, e := range numbers\
    \ {\n        return_values[i] = (e - min) / (max - min)\n    }\n    return return_values\n\
    }\n", "    if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        if max - min == 0 {\n         \
    \   result[i] = 0\n        } else {\n            result[i] = (number - min) /\
    \ (max - min)\n        }\n    }\n    return result\n}\n", "    l := len(numbers)\n\
    \    if l < 2 {\n        panic(\"Must have at least two numbers\")\n    }\n  \
    \  smallest, largest := numbers[0], numbers[0]\n    for _, value := range numbers\
    \ {\n        if value < smallest {\n            smallest = value\n        }\n\
    \        if value > largest {\n            largest = value\n        }\n    }\n\
    \    result := make([]float64, l)\n    for i, value := range numbers {\n     \
    \   result[i] = (value - smallest) / (largest - smallest)\n    }\n    return result\n\
    }\n", "    // Define the minimum and maximum values of the list\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    // Define the transform, which\
    \ is the difference between the maximum and minimum value\n    transform := max\
    \ - min\n    // Apply the transform on each element\n    for i, number := range\
    \ numbers {\n        numbers[i] = (number - min) / transform\n    }\n    return\
    \ numbers\n}\n", "    var max = numbers[0]\n    var min = numbers[0]\n    for\
    \ _, n := range numbers {\n        if n > max {\n            max = n\n       \
    \ }\n        if n < min {\n            min = n\n        }\n    }\n    var result\
    \ = make([]float64, len(numbers))\n    for i, n := range numbers {\n        result[i]\
    \ = (n - min) / (max - min)\n    }\n    return result\n}\n", "    max := numbers[0]\n\
    \    min := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        if number < min {\n  \
    \          min = number\n        }\n    }\n    if max == min {\n        return\
    \ numbers\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n", "    if len(numbers) < 2 {\n        panic(\"Need at least\
    \ two numbers to do rescaling\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i, n := range numbers {\n        rescaled[i]\
    \ = (n - min) / (max - min)\n    }\n    return rescaled\n}\n", "    min, max :=\
    \ numbers[0], numbers[0]\n    for _, n := range numbers {\n        if n < min\
    \ {\n            min = n\n        }\n        if n > max {\n            max = n\n\
    \        }\n    }\n    ret := make([]float64, len(numbers))\n    for i, n := range\
    \ numbers {\n        ret[i] = (n - min) / (max - min)\n    }\n    return ret\n\
    }\n", "    min, max := numbers[0], numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    if min == max\
    \ {\n        return make([]float64, len(numbers))\n    }\n    for i, number :=\
    \ range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n\
    \    return numbers\n}\n", "    min_number := numbers[0]\n    max_number := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min_number {\n    \
    \        min_number = number\n        }\n        if number > max_number {\n  \
    \          max_number = number\n        }\n    }\n    if min_number == max_number\
    \ {\n        return make([]float64, len(numbers))\n    }\n    transformation :=\
    \ func(number float64) float64 {\n        return (number - min_number) / (max_number\
    \ - min_number)\n    }\n    return apply_transformation(numbers, transformation)\n\
    }\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    for i, n := range numbers {\n\
    \        numbers[i] = (n - min) / (max - min)\n    }\n    return numbers\n}\n",
  "    min := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n\
    \        if n < min {\n            min = n\n        }\n        if n > max {\n\
    \            max = n\n        }\n    }\n    if min == max {\n        return make([]float64,\
    \ len(numbers))\n    }\n    // could replace 1.0 / (max - min) with 1 / (max -\
    \ min)\n    // but that would result in an int, which means the multiplication\
    \ by\n    // n - min in the next line would also produce an int.\n    scale :=\
    \ 1.0 / (max - min)\n    result := make([]float64, len(numbers))\n    for i, n\
    \ := range numbers {\n        result[i] = (n - min) * scale\n    }\n    return\
    \ result\n}\n", "    var min_max_pair MinMaxPair\n    min_max_pair = get_min_max(numbers)\n\
    \    var delta = min_max_pair.max - min_max_pair.min\n    fmt.Println(min_max_pair)\n\
    \    fmt.Println(delta)\n    var result []float64\n    for _, number := range\
    \ numbers {\n        result = append(result, (number - min_max_pair.min) / delta)\n\
    \    }\n    return result\n}\n\ntype MinMaxPair ", "    min := numbers[0]\n  \
    \  max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    range_ := max - min\n    scaled\
    \ := make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        scaled[index] = (number - min) / range_\n    }\n    return scaled\n}\n",
  "    min, max := numbers[0], numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    transformed := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        transformed[i]\
    \ = (number - min) / (max - min)\n    }\n    return transformed\n}\n", "    if\
    \ len(numbers) < 2 {\n        panic(\"Need at least two numbers to perform rescale\"\
    )\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    var result []float64\n    for _, number := range numbers {\n\
    \        result = append(result, (number - smallest) / (largest - smallest))\n\
    \    }\n    return result\n}\n", "    min, max := numbers[0], numbers[0]\n   \
    \ for _, v := range numbers {\n        if v < min {\n            min = v\n   \
    \     }\n        if v > max {\n            max = v\n        }\n    }\n    span\
    \ := max - min\n    new_numbers := make([]float64, len(numbers))\n    for i, v\
    \ := range numbers {\n        new_numbers[i] = (v - min) / span\n    }\n    return\
    \ new_numbers\n}\n", "    size := len(numbers)\n    var max float64 = numbers[0]\n\
    \    var min float64 = numbers[0]\n    for i := 1; i < size; i++ {\n        if\
    \ numbers[i] > max {\n            max = numbers[i]\n        }\n        if numbers[i]\
    \ < min {\n            min = numbers[i]\n        }\n    }\n    result := make([]float64,\
    \ size)\n    for i := 0; i < size; i++ {\n        result[i] = (numbers[i] - min)\
    \ / (max - min)\n    }\n    return result\n}\n", "    // Find smallest number\n\
    \    smallest := numbers[0]\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n    }\n\n   \
    \ // Find largest number\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number > largest {\n            largest = number\n   \
    \     }\n    }\n\n    // Map each number to the linear transform\n    for i, number\
    \ := range numbers {\n        numbers[i] = (number - smallest) / (largest - smallest)\n\
    \    }\n\n    return numbers\n}\n", "    output := make([]float64, len(numbers))\n\
    \    min, max := min_max(numbers)\n    for i, n := range numbers {\n        output[i]\
    \ = (n - min) / (max - min)\n    }\n    return output\n}\n", "    result := make([]float64,\
    \ len(numbers))\n    max_number := float64(0)\n    min_number := float64(9999999999)\n\
    \    for i,number := range numbers {\n        if number > max_number {\n     \
    \       max_number = number\n        }\n        if number < min_number {\n   \
    \         min_number = number\n        }\n        result[i] = number\n    }\n\
    \    if min_number == max_number {\n        return []float64{}\n    }\n    distance\
    \ := max_number - min_number\n    for i,number := range result {\n        result[i]\
    \ = (number - min_number) / distance\n    }\n    return result\n}\n", "    var\
    \ max, min float64\n    for _, n := range numbers {\n        if n > max {\n  \
    \          max = n\n        }\n        if n < min {\n            min = n\n   \
    \     }\n    }\n    if max == min {\n        // If all numbers are the same, then\
    \ just return the same list\n        return numbers\n    }\n    for i, n := range\
    \ numbers {\n        numbers[i] = (n - min) / (max - min)\n    }\n    return numbers\n\
    }\n", "    min_n := numbers[0]\n    max_n := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min_n {\n            min_n = n\n        }\n      \
    \  if n > max_n {\n            max_n = n\n        }\n    }\n    var range_n =\
    \ max_n - min_n\n    var scaled_numbers = make([]float64, len(numbers))\n    for\
    \ i, n := range numbers {\n        scaled_numbers[i] = (n - min_n) / range_n\n\
    \    }\n    return scaled_numbers\n}\n", "    minimum := numbers[0]\n    maximum\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < minimum\
    \ {\n            minimum = number\n        }\n        if number > maximum {\n\
    \            maximum = number\n        }\n    }\n    difference := maximum - minimum\n\
    \    if difference == 0 {\n        // Returning nil would panic the caller, so\
    \ return a copy\n        new_slice := make([]float64, len(numbers))\n        copy(new_slice,\
    \ numbers)\n        return new_slice\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        rescaled[i] = (number - minimum)\
    \ / difference\n    }\n    return rescaled\n}\n", "    min := numbers[0]\n   \
    \ max := numbers[0]\n    for _, number := range numbers {\n        if number <\
    \ min {\n            min = number\n        }\n        if number > max {\n    \
    \        max = number\n        }\n    }\n    fmt.Printf(\"Min: %v, Max: %v\\n\"\
    , min, max)\n    result := make([]float64, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] = (number - min) / (max - min)\n    }\n \
    \   return result\n}\n", "    var min, max float64 = numbers[0], numbers[0]\n\
    \    for _, v := range numbers {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    var\
    \ re = make([]float64, len(numbers))\n    for i, v := range numbers {\n      \
    \  re[i] = (v - min) / (max - min)\n    }\n    return re\n}\n", "    // find the\
    \ smallest number in the list\n    min := numbers[0]\n    for _, val := range\
    \ numbers {\n        if val < min {\n            min = val\n        }\n    }\n\
    \n    // find the largest number in the list\n    max := numbers[0]\n    for _,\
    \ val := range numbers {\n        if val > max {\n            max = val\n    \
    \    }\n    }\n\n    // apply linear transform to all numbers in the list, such\
    \ that\n    // the smallest number becomes 0, and the largest number becomes 1\n\
    \    for i, val := range numbers {\n        numbers[i] = (val - min) / (max -\
    \ min)\n    }\n\n    return numbers\n}\n", "    var smallest float64 = numbers[0]\n\
    \    var largest float64 = numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    diff := largest - smallest\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - smallest)\
    \ / diff\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n       \
    \ panic(\"list should contain at least two numbers\")\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, num := range numbers {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    a := 1 / (max - min)\n    b := -min / (max - min)\n\
    \    output := make([]float64, len(numbers))\n    for i, num := range numbers\
    \ {\n        output[i] = a * num + b\n    }\n    return output\n}\n", "    min,\
    \ max := numbers[0], numbers[0]\n    for _, num := range numbers {\n        if\
    \ num < min {\n            min = num\n        }\n        if num > max {\n    \
    \        max = num\n        }\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, num := range numbers {\n        result[i] = (num - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    if len(numbers) == 0 {\n        return []float64{}\n\
    \    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    if\
    \ min == max {\n        return make([]float64, len(numbers))\n    }\n    scale\
    \ := 1.0 / (max - min)\n    ret := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        ret[i] = (number - min) * scale\n    }\n    return\
    \ ret\n}\n", "    //Determine and store maximum and minimum\n    var maximum float64\
    \ = numbers[0]\n    var minimum float64 = numbers[0]\n    for _, value := range\
    \ numbers {\n        if value > maximum {\n            maximum = value\n     \
    \   }\n        if value < minimum {\n            minimum = value\n        }\n\
    \    }\n    //Rescale\n    var rescaled []float64\n    for _, value := range numbers\
    \ {\n        rescaled = append(rescaled, (value - minimum) / (maximum - minimum))\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    fmt.Printf(\"smallest: %f,\
    \ largest: %f\\n\", smallest, largest)\n    for i, number := range numbers {\n\
    \        numbers[i] = (number - smallest) / (largest - smallest)\n    }\n    return\
    \ numbers\n}\n", "    max := numbers[0]\n    min := numbers[0]\n    for _, v :=\
    \ range numbers {\n        if max < v {\n            max = v\n        }\n    \
    \    if min > v {\n            min = v\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, v := range numbers {\n        result[i] = (v - min)\
    \ / (max - min)\n    }\n    return result\n}\n", "    maxNumber := -999999.0\n\
    \    minNumber := 999999.0\n    for _, num := range numbers {\n        if num\
    \ > maxNumber {\n            maxNumber = num\n        }\n        if num < minNumber\
    \ {\n            minNumber = num\n        }\n    }\n    scale := (maxNumber -\
    \ minNumber)\n    result := make([]float64, len(numbers))\n    for i, num := range\
    \ numbers {\n        result[i] = (num - minNumber) / scale\n    }\n    return\
    \ result\n}\n", "    numbers_new := make([]float64, len(numbers))\n    max_number\
    \ := numbers[0]\n    min_number := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number > max_number {\n            max_number = number\n     \
    \   }\n        if number < min_number {\n            min_number = number\n   \
    \     }\n    }\n    //fmt.Println(max_number, min_number)\n    for i, number :=\
    \ range numbers {\n        numbers_new[i] = (number - min_number) / (max_number\
    \ - min_number)\n    }\n    return numbers_new\n}\n", "    if len(numbers) < 2\
    \ {\n        return numbers\n    }\n    var max, min float64\n    for i, number\
    \ := range numbers {\n        if i == 0 {\n            max = number\n        \
    \    min = number\n        } else {\n            if number > max {\n         \
    \       max = number\n            }\n            if number < min {\n         \
    \       min = number\n            }\n        }\n    }\n    fmt.Printf(\"max: %f,\
    \ min: %f\\n\", max, min)\n    var rescaled []float64\n    for _, number := range\
    \ numbers {\n        rescaled = append(rescaled, (number - min) / (max - min))\n\
    \    }\n    return rescaled\n}\n", "    minValue := numbers[0]\n    maxValue :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < minValue\
    \ {\n            minValue = number\n        }\n        if number > maxValue {\n\
    \            maxValue = number\n        }\n    }\n    var result []float64\n \
    \   for _, number := range numbers {\n        result = append(result, (number\
    \ - minValue) / (maxValue - minValue))\n    }\n    return result\n}\n", "    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    fmt.Printf(\"min=%v,\
    \ max=%v\\n\", min, max)\n    rescaled := make([]float64, len(numbers))\n    for\
    \ index, number := range numbers {\n        rescaled[index] = (number - min) /\
    \ (max - min)\n    }\n    return rescaled\n}\n", "    // Need at least two numbers\
    \ to perform a rescale\n    if len(numbers) < 2 {\n        return numbers\n  \
    \  }\n\n    max_number := numbers[0]\n    min_number := numbers[0]\n\n    for\
    \ _, v := range numbers {\n        if v > max_number {\n            max_number\
    \ = v\n        }\n\n        if v < min_number {\n            min_number = v\n\
    \        }\n    }\n\n    // Already in the right range\n    if max_number == min_number\
    \ {\n        return numbers\n    }\n\n    var new_list []float64\n\n    for _,\
    \ v := range numbers {\n        new_list = append(new_list, (v - min_number) /\
    \ (max_number - min_number))\n    }\n\n    return new_list\n}\n", "    const (\n\
    \        target_min = 0.0\n        target_max = 1.0\n    )\n\n    if len(numbers)\
    \ < 2 {\n        panic(\"requires at least two numbers to rescale\")\n    }\n\n\
    \    max := float64(numbers[0])\n    min := float64(numbers[0])\n    for _, v\
    \ := range numbers {\n        if v > max {\n            max = v\n        }\n \
    \       if v < min {\n            min = v\n        }\n    }\n\n    results :=\
    \ make([]float64, len(numbers))\n    for i, x := range numbers {\n        results[i]\
    \ = target_min + ((x - min) / (max - min)) * (target_max - target_min)\n    }\n\
    \n    return results\n}\n", "    if len(numbers) < 2 {\n        return numbers\n\
    \    }\n    var max float64 = 0.0\n    var min float64 = 0.0\n    var sum float64\
    \ = 0.0\n    for _, value := range numbers {\n        if value > max {\n     \
    \       max = value\n        }\n        if value < min {\n            min = value\n\
    \        }\n        sum += value\n    }\n    var mean float64 = sum / float64(len(numbers))\n\
    \    fmt.Printf(\"%.2f %.2f %.2f\\n\", min, max, mean)\n    for i, _ := range\
    \ numbers {\n        numbers[i] = (numbers[i] - mean) / (max - min)\n    }\n \
    \   return numbers\n}\n", "    var largest float64 = 0.0\n    var smallest float64\
    \ = 0.0\n    for _, f := range numbers {\n        if f > largest {\n         \
    \   largest = f\n        }\n        if f < smallest {\n            smallest =\
    \ f\n        }\n    }\n    var scale float64 = 1.0 / (largest - smallest)\n  \
    \  var result []float64 = make([]float64, len(numbers))\n    for i, f := range\
    \ numbers {\n        result[i] = (f - smallest) * scale\n    }\n    return result\n\
    }\n", "    // 1. Find the minimum element in the list\n    var min_el float64\
    \ = numbers[0]\n    for _, el := range numbers {\n        if el < min_el {\n \
    \           min_el = el\n        }\n    }\n\n    // 2. Subtract the minimum element\
    \ from each element in the list\n    // 3. Find the maximum element in the list\n\
    \    var max_el float64 = min_el\n    for i, el := range numbers {\n        numbers[i]\
    \ = el - min_el\n        if numbers[i] > max_el {\n            max_el = numbers[i]\n\
    \        }\n    }\n\n    // 4. Divide each element in the list by the maximum\
    \ element\n    for i, el := range numbers {\n        numbers[i] = el / max_el\n\
    \    }\n\n    return numbers\n}\n", "    max, min := numbers[0], numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for index,\
    \ number := range numbers {\n        result[index] = (number - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    min_n := numbers[0]\n    max_n := numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min_n {\n            min_n =\
    \ n\n        }\n        if n > max_n {\n            max_n = n\n        }\n   \
    \ }\n    for i, n := range numbers {\n        numbers[i] = (n - min_n) / (max_n\
    \ - min_n)\n    }\n    return numbers\n}\n", "    var result []float64\n\n   \
    \ min := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n\
    \        if n < min {\n            min = n\n        }\n        if n > max {\n\
    \            max = n\n        }\n    }\n\n    for _, n := range numbers {\n  \
    \      result = append(result, (n - min) / (max - min))\n    }\n\n    return result\n\
    }\n", "    numbers_copy := make([]float64, len(numbers))\n    copy(numbers_copy,\
    \ numbers)\n    min, max := minimum(numbers_copy), maximum(numbers_copy)\n   \
    \ fmt.Println(min, max)\n    return scale(numbers_copy, 0.0, 1.0, min, max)\n\
    }\n", "    // Find the min and max values\n    min_value := numbers[0]\n    max_value\
    \ := numbers[0]\n    for _, value := range numbers {\n        if value < min_value\
    \ {\n            min_value = value\n        }\n        if value > max_value {\n\
    \            max_value = value\n        }\n    }\n\n    // Calculate the range\
    \ (constant for the whole list)\n    range_value := max_value - min_value\n\n\
    \    // For each value, calculate its distance from the min, then divide by the\
    \ range\n    // to get a 0.0 to 1.0 distance\n    rescaled_list := make([]float64,\
    \ len(numbers))\n    for i, value := range numbers {\n        rescaled_list[i]\
    \ = (value - min_value) / range_value\n    }\n\n    return rescaled_list\n}\n",
  "    var min = numbers[0]\n    var max = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    for i, n := range numbers {\n\
    \        numbers[i] = (n - min) / (max - min)\n    }\n    return numbers\n}\n",
  "    var highest = numbers[0]\n    var lowest = numbers[0]\n    var result = make([]float64,\
    \ len(numbers))\n\n    for _, n := range numbers {\n        if n > highest {\n\
    \            highest = n\n        } else if n < lowest {\n            lowest =\
    \ n\n        }\n    }\n\n    for i, n := range numbers {\n        result[i] =\
    \ (n - lowest) / (highest - lowest)\n    }\n\n    return result\n}\n", "    var\
    \ res []float64\n    var smallest = numbers[0]\n    var largest = numbers[0]\n\
    \    var l = len(numbers)\n    for i:=1; i<l; i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n        }\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n    }\n    if smallest == largest\
    \ {\n        return numbers\n    }\n    for i:=0; i<l; i++ {\n        res = append(res,\
    \ (numbers[i] - smallest) / (largest - smallest))\n    }\n    return res\n}\n",
  "    var largest, smallest float64\n    for _, number := range numbers {\n     \
    \   if number > largest {\n            largest = number\n        }\n        if\
    \ number < smallest {\n            smallest = number\n        }\n    }\n    var\
    \ rescaled []float64\n    for _, number := range numbers {\n        rescaled =\
    \ append(rescaled, (number - smallest) / (largest - smallest))\n    }\n    return\
    \ rescaled\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if max == min {\n        max = min + 1.0\n    }\n    for i, number :=\
    \ range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n\
    \    return numbers\n}\n", "    result := make([]float64, len(numbers))\n    min,\
    \ max := numbers[0], numbers[0]\n    for _, v := range numbers {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    if max == min {\n        return numbers\n    }\n\
    \    factor := 1.0 / (max - min)\n    for i, v := range numbers {\n        result[i]\
    \ = (v - min) * factor\n    }\n    return result\n}\n", "    if len(numbers) <\
    \ 2 {\n        return numbers\n    }\n    var largest float64 = numbers[0]\n \
    \   var smallest float64 = numbers[0]\n    for _, value := range numbers {\n \
    \       if value > largest {\n            largest = value\n        }\n       \
    \ if value < smallest {\n            smallest = value\n        }\n    }\n    fmt.Println(\"\
    Smallest: \", smallest)\n    fmt.Println(\"Largest: \", largest)\n    var transformed_numbers\
    \ []float64\n    for _, value := range numbers {\n        normalized := (value\
    \ - smallest) / (largest - smallest)\n        transformed_numbers = append(transformed_numbers,\
    \ normalized)\n    }\n    return transformed_numbers\n}\n", "    retval := make([]float64,\
    \ len(numbers))\n    minimum := numbers[0]\n    maximum := numbers[0]\n    for\
    \ _, n := range numbers {\n        if minimum > n {\n            minimum = n\n\
    \        }\n        if maximum < n {\n            maximum = n\n        }\n   \
    \ }\n    scale := maximum - minimum\n    for i, n := range numbers {\n       \
    \ retval[i] = (n - minimum) / scale\n    }\n    return retval\n}\n", "    // First\
    \ find the minimum and maximum of the numbers\n    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n\n    // Make sure that the minimum and maximum\
    \ aren't the same\n    if min == max {\n        min -= 1\n        max += 1\n \
    \   }\n\n    // Now scale to the new range\n    scaled := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        scaled[i] = (number - min) / (max\
    \ - min)\n    }\n\n    return scaled\n}\n", "    // find the largest and smallest\
    \ values\n    largest := numbers[0]\n    smallest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number > largest {\n            largest = number\n\
    \        }\n        if number < smallest {\n            smallest = number\n  \
    \      }\n    }\n    // calculate the scale factor\n    range := largest - smallest\n\
    \    fmt.Println(\"Largest: \", largest)\n    fmt.Println(\"Smallest: \", smallest)\n\
    \    fmt.Println(\"Range: \", range)\n    fmt.Println(\"Numbers: \", numbers)\n\
    \    // rescale all the numbers\n    new_numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        new_numbers[i] = (number - smallest)\
    \ / range\n    }\n    return new_numbers\n}\n", "    if len(numbers) == 0 {\n\
    \        return []float64{}\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    unit_numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        unit_numbers[i]\
    \ = (number - smallest) / (largest - smallest)\n    }\n    return unit_numbers\n\
    }\n", "    min, max := min_max(numbers)\n    for i, _ := range numbers {\n   \
    \     numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return numbers\n\
    }\n", "    if len(numbers) < 2 {\n        panic(\"At least two numbers must be\
    \ provided\")\n    }\n    minimum := numbers[0]\n    maximum := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < minimum {\n        \
    \    minimum = number\n        }\n        if number > maximum {\n            maximum\
    \ = number\n        }\n    }\n    new_numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        new_numbers[i] = (number - minimum)\
    \ / (maximum - minimum)\n    }\n    return new_numbers\n}\n", "    // Find min\
    \ and max\n    min := numbers[0]\n    max := numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < min {\n            min = number\n     \
    \   }\n        if number > max {\n            max = number\n        }\n    }\n\
    \n    // Perform rescaling\n    scale := 1.0 / (max - min)\n    scaled_numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     scaled_numbers[i] = (number - min) * scale\n    }\n\n    return scaled_numbers\n\
    }\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    //\
    \ range is max - min, so if max == min, range is 0\n    delta := max - min\n \
    \   if delta == 0 {\n        return numbers\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / delta\n    }\n    return result\n}\n", "    var a = smallest(numbers)\n\
    \    var b = largest(numbers)\n    var scale = b - a\n    var rescaled = make([]float64,\
    \ len(numbers))\n    for idx, v := range numbers {\n        rescaled[idx] = (v\
    \ - a) / scale\n    }\n    return rescaled\n}\n", "    output := make([]float64,\
    \ len(numbers))\n    max := numbers[0]\n    min := numbers[0]\n    for _, n :=\
    \ range numbers {\n        if n > max {\n            max = n\n        }\n    \
    \    if n < min {\n            min = n\n        }\n    }\n    for i, n := range\
    \ numbers {\n        output[i] = (n - min) / (max - min)\n    }\n    return output\n\
    }\n", "    result := make([]float64, len(numbers))\n    max, min := numbers[0],\
    \ numbers[0]\n    for _, n := range numbers {\n        if n > max {\n        \
    \    max = n\n        }\n        if n < min {\n            min = n\n        }\n\
    \    }\n    for i, n := range numbers {\n        result[i] = (n - min) / (max\
    \ - min)\n    }\n    return result\n}\n", "    rescaled_numbers := make([]float64,\
    \ len(numbers))\n    min := numbers[0]\n    max := numbers[0]\n    for _, n :=\
    \ range numbers {\n        if n < min {\n            min = n\n        }\n    \
    \    if n > max {\n            max = n\n        }\n    }\n    for i, n := range\
    \ numbers {\n        rescaled_numbers[i] = (n - min) / (max - min)\n    }\n  \
    \  return rescaled_numbers\n}\n", "    var res []float64\n    var min, max, diff\
    \ float64\n    min = numbers[0]\n    max = numbers[0]\n    for _, v := range numbers\
    \ {\n        if v < min {\n            min = v\n        }\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    diff = max - min\n    for _, v\
    \ := range numbers {\n        res = append(res, (v - min) / diff)\n    }\n   \
    \ return res\n}\n", "    var result []float64\n    max, min := max_min(numbers)\n\
    \    for _, v := range numbers {\n        result = append(result, (v - min) /\
    \ (max - min))\n    }\n    return result\n}\n", "    // Find the maximum and the\
    \ minimum\n    var max, min float64\n    max = numbers[0]\n    min = numbers[0]\n\
    \    for _, v := range numbers {\n        if v > max {\n            max = v\n\
    \        }\n        if v < min {\n            min = v\n        }\n    }\n    //\
    \ We do not to transform the list for single number\n    if min == max {\n   \
    \     return numbers\n    }\n    // Apply the linear transformation\n    size\
    \ := float64(len(numbers))\n    var result []float64\n    for _, v := range numbers\
    \ {\n        result = append(result, (v - min) / (max - min))\n    }\n    return\
    \ result\n}\n", "    min, max := get_min_max(numbers)\n    scaled := make([]float64,\
    \ len(numbers))\n    for i, num := range numbers {\n        scaled[i] = (num -\
    \ min) / (max - min)\n    }\n    return scaled\n}\n", "    // Calculate the range\
    \ of values (max - min)\n    var max = numbers[0]\n    var min = numbers[0]\n\
    \    for _, elem := range numbers {\n        if elem > max {\n            max\
    \ = elem\n        }\n        if elem < min {\n            min = elem\n       \
    \ }\n    }\n    range_val := max - min\n\n    // Rescale all the numbers to be\
    \ between 0 and 1\n    new_numbers := make([]float64, len(numbers))\n    for i,\
    \ elem := range numbers {\n        new_numbers[i] = (elem - min) / range_val\n\
    \    }\n\n    return new_numbers\n}\n", "    result := make([]float64, len(numbers))\n\
    \    minimum := numbers[0]\n    maximum := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < minimum {\n            minimum = number\n   \
    \     }\n        if number > maximum {\n            maximum = number\n       \
    \ }\n    }\n    for index, number := range numbers {\n        result[index] =\
    \ (number - minimum) / (maximum - minimum)\n    }\n    return result\n}\n", " \
    \   var (\n        smallest_number float64 = numbers[0]\n        largest_number\
    \ float64 = numbers[0]\n    )\n    for _, num := range numbers {\n        if num\
    \ < smallest_number {\n            smallest_number = num\n        }\n        if\
    \ num > largest_number {\n            largest_number = num\n        }\n    }\n\
    \    var (\n        delta = largest_number - smallest_number\n        normalized_numbers\
    \ = make([]float64, len(numbers))\n    )\n    for i, num := range numbers {\n\
    \        normalized_numbers[i] = (num - smallest_number) / delta\n    }\n    return\
    \ normalized_numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n  \
    \  for _, num := range numbers {\n        if num < min {\n            min = num\n\
    \        }\n        if num > max {\n            max = num\n        }\n    }\n\
    \    if max - min == 0 {\n        return numbers\n    }\n    unit_numbers := make([]float64,\
    \ len(numbers))\n    for i, num := range numbers {\n        unit_numbers[i] =\
    \ (num - min) / (max - min)\n    }\n    return unit_numbers\n}\n", "    var min\
    \ = numbers[0]\n    var max = numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var scaled_numbers\
    \ = make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        scaled_numbers[index] = (number - min) / (max - min)\n    }\n    return\
    \ scaled_numbers\n}\n", "    min_val := numbers[0]\n    max_val := numbers[0]\n\
    \    for _, val := range numbers {\n        if val < min_val {\n            min_val\
    \ = val\n        }\n        if val > max_val {\n            max_val = val\n  \
    \      }\n    }\n    if max_val == min_val {\n        return []float64{}\n   \
    \ }\n    scale := 1.0 / (max_val - min_val)\n    new_vals := make([]float64, len(numbers))\n\
    \    for i, val := range numbers {\n        new_vals[i] = (val - min_val) * scale\n\
    \    }\n    return new_vals\n}\n", "    var min float64 = numbers[0]\n    var\
    \ max float64 = numbers[0]\n    for _, n := range numbers {\n        if n < min\
    \ {\n            min = n\n        }\n        if n > max {\n            max = n\n\
    \        }\n    }\n    fmt.Printf(\"Min: %v, Max: %v\\n\", min, max)\n    var\
    \ new_numbers []float64\n    for _, n := range numbers {\n        new_numbers\
    \ = append(new_numbers, (n - min) / (max - min))\n    }\n    return new_numbers\n\
    }\n", "    min := min_float64(numbers)\n    max := max_float64(numbers)\n    var\
    \ unit []float64\n\n    for _, n := range numbers {\n        if max - min == 0\
    \ {\n            unit = append(unit, 0)\n        } else {\n            unit =\
    \ append(unit, (n - min) / (max - min))\n        }\n    }\n\n    return unit\n\
    }\n", "    // TODO\n    smallest := numbers[0]\n    largest := numbers[0]\n  \
    \  for _, x := range numbers {\n        if x < smallest {\n            smallest\
    \ = x\n        }\n        if x > largest {\n            largest = x\n        }\n\
    \    }\n    fmt.Println(smallest, largest)\n    var new_list []float64\n    for\
    \ _, x := range numbers {\n        scaled := (x - smallest) / (largest - smallest)\n\
    \        new_list = append(new_list, scaled)\n    }\n    return new_list\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, num := range\
    \ numbers {\n        if num < smallest {\n            smallest = num\n       \
    \ }\n        if num > largest {\n            largest = num\n        }\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i, num := range numbers\
    \ {\n        result[i] = (num - smallest) / (largest - smallest)\n    }\n    return\
    \ result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, num\
    \ := range numbers {\n        if num < min {\n            min = num\n        }\n\
    \        if num > max {\n            max = num\n        }\n    }\n    fmt.Printf(\"\
    numbers: %v, min: %f, max: %f\", numbers, min, max)\n    for i, num := range numbers\
    \ {\n        numbers[i] = (num - min) / (max - min)\n    }\n    return numbers\n\
    }\n", "    var result []float64\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    for\
    \ _, n := range numbers {\n        transformed := float64(n - min) / float64(max\
    \ - min)\n        result = append(result, transformed)\n    }\n    return result\n\
    }\n", "    if len(numbers) == 0 {\n        panic(\"Can't rescale empty list\"\
    )\n    }\n    if len(numbers) == 1 {\n        return []float64{0.0}\n    }\n \
    \   min, max := min_max(numbers)\n    scale := 1.0 / (max - min)\n    result :=\
    \ make([]float64, len(numbers))\n    for i, number := range numbers {\n      \
    \  result[i] = (number - min) * scale\n    }\n    return result\n}\n", "    if\
    \ len(numbers) < 2 {\n        return numbers\n    }\n    ret := make([]float64,\
    \ len(numbers))\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, n := range numbers {\n        if n < smallest {\n            smallest = n\n\
    \        }\n        if n > largest {\n            largest = n\n        }\n   \
    \ }\n    scale := 1.0 / (largest - smallest)\n    for i, n := range numbers {\n\
    \        ret[i] = (n - smallest) * scale\n    }\n    return ret\n}\n", "    if\
    \ len(numbers) < 2 {\n        panic(\"This function is intended to work with lists\
    \ of at least two elements.\")\n    }\n    max, min := float64(0), float64(0)\n\
    \    for _, num := range numbers {\n        if num > max {\n            max =\
    \ num\n        }\n        if num < min {\n            min = num\n        }\n \
    \   }\n    span := max - min\n    newNumbers := make([]float64, len(numbers))\n\
    \    for idx, num := range numbers {\n        newNumbers[idx] = (num - min) /\
    \ span\n    }\n    return newNumbers\n}\n", "    if len(numbers) < 2 {\n     \
    \   panic(\"rescale_to_unit error: list must contain at least two numbers\")\n\
    \    }\n    min := numbers[0]\n    max := numbers[0]\n    for _, num := range\
    \ numbers {\n        if num < min {\n            min = num\n        }\n      \
    \  if num > max {\n            max = num\n        }\n    }\n    var result []float64\n\
    \    for _, num := range numbers {\n        result = append(result, (num - min)\
    \ / (max - min))\n    }\n    return result\n}\n", "    var min, max float64 =\
    \ numbers[0], numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    var new_list []float64\n    for\
    \ _, number := range numbers {\n        new_list = append(new_list, (number -\
    \ min) / (max - min))\n    }\n    return new_list\n}\n", "    var min float64\
    \ = numbers[0]\n    var max float64 = numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        panic(\"cannot apply on empty list or lists with less than two\
    \ numbers\")\n    }\n    minimum := numbers[0]\n    maximum := numbers[0]\n  \
    \  for _, number := range numbers {\n        if number < minimum {\n         \
    \   minimum = number\n        }\n        if number > maximum {\n            maximum\
    \ = number\n        }\n    }\n    rescaled_numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        rescaled_numbers[i] = (number -\
    \ minimum) / (maximum - minimum)\n    }\n    return rescaled_numbers\n}\n", " \
    \   unit_min := 0.0\n    unit_max := 1.0\n    min := min_of_list(numbers)\n  \
    \  max := max_of_list(numbers)\n    var results []float64\n    for _, element\
    \ := range numbers {\n        results = append(results, (element - min) / (max\
    \ - min) * (unit_max - unit_min) + unit_min)\n    }\n    return results\n}\n",
  "    if len(numbers) == 0 {\n        return numbers\n    }\n    min, max := numbers[0],\
    \ numbers[0]\n    for _, x := range numbers {\n        if x < min {\n        \
    \    min = x\n        }\n        if x > max {\n            max = x\n        }\n\
    \    }\n    denom := max - min\n    if denom == 0 {\n        return numbers\n\
    \    }\n    for i, x := range numbers {\n        numbers[i] = (x - min) / denom\n\
    \    }\n    return numbers\n}\n", "    min, max := min_max(numbers)\n    diff\
    \ := max - min\n    if diff == 0 {\n        return []float64{}\n    }\n    var\
    \ ret []float64\n    for _, n := range numbers {\n        ret = append(ret, (n\
    \ - min) / diff)\n    }\n    return ret\n}\n", "    var smallest = smallest_element(numbers)\n\
    \    var biggest = biggest_element(numbers)\n    var distance = biggest - smallest\n\
    \    var rescaled = make([]float64, len(numbers))\n    for i, v := range numbers\
    \ {\n        rescaled[i] = (v - smallest) / distance\n    }\n    return rescaled\n\
    }\n", "    max := numbers[0]\n    min := numbers[0]\n    for _, value := range\
    \ numbers {\n        if value > max {\n            max = value\n        }\n  \
    \      if value < min {\n            min = value\n        }\n    }\n    range\
    \ := max - min\n    scale := 1.0 / range\n    // Lazy, use the same slice\n  \
    \  for i, value := range numbers {\n        numbers[i] = (value - min) * scale\n\
    \    }\n    return numbers\n}\n", "    max := numbers[0]\n    min := numbers[0]\n\
    \    for _, v := range numbers {\n        if v > max {\n            max = v\n\
    \        }\n        if v < min {\n            min = v\n        }\n    }\n    numbers_scaled\
    \ := make([]float64, len(numbers))\n    for i, v := range numbers {\n        numbers_scaled[i]\
    \ = (v - min) / (max - min)\n    }\n    return numbers_scaled\n}\n", "    if len(numbers)\
    \ < 2 {\n        panic(\"Too few numbers to rescale\")\n    }\n    max := numbers[0]\n\
    \    min := numbers[0]\n    for _, n := range numbers {\n        if n > max {\n\
    \            max = n\n        }\n        if n < min {\n            min = n\n \
    \       }\n    }\n    if max == min {\n        panic(\"Max is the same as min\"\
    )\n    }\n    for i, n := range numbers {\n        numbers[i] = (n - min) / (max\
    \ - min)\n    }\n    return numbers\n}\n", "    var results []float64\n    //\
    \ find minimum and maximum\n    min, max := numbers[0], numbers[0]\n    for _,\
    \ n := range numbers {\n        if n < min {\n            min = n\n        }\n\
    \        if n > max {\n            max = n\n        }\n    }\n    for _, n :=\
    \ range numbers {\n        results = append(results, (n - min) / (max - min))\n\
    \    }\n    return results\n}\n", "    scaled := make([]float64, len(numbers))\n\
    \    minimum := numbers[0]\n    maximum := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < minimum {\n            minimum = number\n   \
    \     }\n        if number > maximum {\n            maximum = number\n       \
    \ }\n    }\n    for index, number := range numbers {\n        scaled[index] =\
    \ (number - minimum) / (maximum - minimum)\n    }\n    return scaled\n}\n", " \
    \   result := make([]float64, len(numbers))\n    copy(result, numbers)\n    min_val\
    \ := numbers[0]\n    max_val := numbers[0]\n    for _, v := range numbers {\n\
    \        if v < min_val {\n            min_val = v\n        }\n        if v >\
    \ max_val {\n            max_val = v\n        }\n    }\n    for i, _ := range\
    \ result {\n        result[i] = (result[i] - min_val) / (max_val - min_val)\n\
    \    }\n    return result\n}\n", "    var result []float64\n    // find the minimum\
    \ and maximum elements of the list\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, value := range numbers {\n        if min > value {\n            min\
    \ = value\n        }\n        if max < value {\n            max = value\n    \
    \    }\n    }\n    // rescale each element of the list\n    for _, value := range\
    \ numbers {\n        if max == min {\n            result = append(result, 0.0)\n\
    \        } else {\n            result = append(result, (value - min) / (max -\
    \ min))\n        }\n    }\n    return result\n}\n", "    var max_number = numbers[0]\n\
    \    var min_number = numbers[0]\n    for _, number := range numbers {\n     \
    \   if max_number < number {\n            max_number = number\n        }\n   \
    \     if min_number > number {\n            min_number = number\n        }\n \
    \   }\n    var diff = max_number - min_number\n    var result = make([]float64,\
    \ len(numbers))\n    for idx, number := range numbers {\n        result[idx] =\
    \ (number - min_number) / diff\n    }\n    return result\n}\n", "    var largest\
    \ float64 = numbers[0]\n    var smallest float64 = numbers[0]\n    var result\
    \ []float64\n\n    for _, number := range numbers {\n        if number > largest\
    \ {\n            largest = number\n        }\n        if number < smallest {\n\
    \            smallest = number\n        }\n    }\n\n    difference := largest\
    \ - smallest\n    for _, number := range numbers {\n        result = append(result,\
    \ (number - smallest) / difference)\n    }\n\n    return result\n}\n", "    //\
    \ no input, return empty list\n    if len(numbers) == 0 {\n        return []float64{}\n\
    \    }\n\n    // single input, return list of single entry\n    if len(numbers)\
    \ == 1 {\n        return []float64{1.0}\n    }\n\n    // get min and max number\n\
    \    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n\n    // scale all\
    \ numbers to range [0, 1]\n    scale := max - min\n    if scale != 0 {\n     \
    \   var result []float64\n        for _, number := range numbers {\n         \
    \   result = append(result, (number - min) / scale)\n        }\n        return\
    \ result\n    } else {\n        return []float64{1.0}\n    }\n}\n", "    // find\
    \ the smallest and largest number\n    var max_number, min_number float64\n  \
    \  max_number = numbers[0]\n    min_number = numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number > max_number {\n            max_number =\
    \ number\n        }\n        if number < min_number {\n            min_number\
    \ = number\n        }\n    }\n    // compute the denominator\n    scale := max_number\
    \ - min_number\n    // return the rescaled numbers\n    var rescaled_numbers []float64\n\
    \    for _, number := range numbers {\n        rescaled_numbers = append(rescaled_numbers,\
    \ (number - min_number) / scale)\n    }\n    return rescaled_numbers\n}\n", " \
    \   var max = numbers[0]\n    var min = numbers[0]\n    var result = make([]float64,\
    \ len(numbers))\n\n    for _, number := range numbers {\n        if number > max\
    \ {\n            max = number\n        }\n        if number < min {\n        \
    \    min = number\n        }\n    }\n\n    for i, number := range numbers {\n\
    \        result[i] = (number - min) / (max - min)\n    }\n\n    return result\n\
    }\n", "    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n  \
    \  for _, v := range numbers {\n        if v < min {\n            min = v\n  \
    \      }\n        if v > max {\n            max = v\n        }\n    }\n    var\
    \ r []float64\n    for _, v := range numbers {\n        r = append(r, (v - min)\
    \ / (max - min))\n    }\n    return r\n}\n", "    new_numbers := make([]float64,\
    \ len(numbers))\n    min := numbers[0]\n    max := numbers[0]\n    for _, v :=\
    \ range numbers {\n        if v < min {\n            min = v\n        }\n    \
    \    if v > max {\n            max = v\n        }\n    }\n    if max == min {\n\
    \        for i := range new_numbers {\n            new_numbers[i] = 1.0\n    \
    \    }\n    } else {\n        for i, v := range numbers {\n            new_numbers[i]\
    \ = (v - min) / (max - min)\n        }\n    }\n    return new_numbers\n}\n", " \
    \   if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, v := range numbers {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for i, v := range numbers {\n        numbers[i] = (v - min)\
    \ / (max - min)\n    }\n    return numbers\n}\n", "    if len(numbers) < 2 {\n\
    \        return numbers\n    }\n    largest := numbers[0]\n    smallest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number > largest {\n       \
    \     largest = number\n        }\n        if number < smallest {\n          \
    \  smallest = number\n        }\n    }\n    scaled_numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        scaled_numbers[i]\
    \ = (number - smallest) / (largest - smallest)\n    }\n    return scaled_numbers\n\
    }\n", "    // find the smallest and largest numbers, to find the range\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, v := range numbers {\n\
    \        if v < smallest {\n            smallest = v\n        }\n        if v\
    \ > largest {\n            largest = v\n        }\n    }\n    range_ := largest\
    \ - smallest\n    // transform each number\n    scaled := make([]float64, len(numbers))\n\
    \    for i, v := range numbers {\n        scaled[i] = (v - smallest) / range_\n\
    \    }\n    return scaled\n}\n", "    if len(numbers) < 2 {\n        panic(\"\
    At least two numbers are required\")\n    }\n    min_max := find_min_max(numbers)\n\
    \    if min_max.Max == min_max.Min {\n        panic(\"All numbers are the same,\
    \ cannot transform\")\n    }\n    //         y = (x - Xmin) / (Xmax - Xmin)\n\
    \    //         y is the new value\n    //         x is the old value\n    //\
    \         Xmin is the smallest value in the range\n    //         Xmax is the\
    \ largest value in the range\n    for i, x := range numbers {\n        numbers[i]\
    \ = (x - min_max.Min) / (min_max.Max - min_max.Min)\n    }\n    return numbers\n\
    }\n", "    minimum := numbers[0]\n    maximum := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < minimum {\n            minimum = n\n        }\n  \
    \      if n > maximum {\n            maximum = n\n        }\n    }\n    // fmt.Printf(\"\
    Minimum: %v, Maximum: %v\\n\", minimum, maximum)\n    return rescale_to_unit_given_max_min(numbers,\
    \ minimum, maximum)\n}\n", "    var i, j float64\n    var result []float64\n \
    \   var minimum, maximum float64\n    var offset, scale float64\n\n    for _,\
    \ i = range numbers {\n        if (i > maximum) {\n            maximum = i\n \
    \       }\n        if (i < minimum) {\n            minimum = i\n        }\n  \
    \  }\n\n    offset = minimum\n    scale = maximum - minimum\n\n    for _, j =\
    \ range numbers {\n        result = append(result, (j - offset) / scale)\n   \
    \ }\n\n    return result\n}\n", "    max := numbers[0]\n    min := numbers[0]\n\
    \    for _, n := range numbers {\n        if n > max {\n            max = n\n\
    \        }\n        if n < min {\n            min = n\n        }\n    }\n    delta\
    \ := max - min\n    var result []float64\n    for _, n := range numbers {\n  \
    \      result = append(result, (n - min) / delta)\n    }\n    return result\n\
    }\n", "    // find min and max values in the list\n    min, max := numbers[0],\
    \ numbers[0]\n    for _, val := range numbers {\n        if val < min {\n    \
    \        min = val\n        }\n        if val > max {\n            max = val\n\
    \        }\n    }\n    // implement: >>> x_new = (x - min) / (max - min)\n   \
    \ transform := func(x float64) float64 {\n        return (x - min) / (max - min)\n\
    \    }\n    // apply the transform\n    result := make([]float64, len(numbers))\n\
    \    for i, val := range numbers {\n        result[i] = transform(val)\n    }\n\
    \    return result\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, v := range numbers {\n        if v < min {\n            min = v\n       \
    \ }\n        if v > max {\n            max = v\n        }\n    }\n    range_ :=\
    \ max - min\n    result := make([]float64, len(numbers))\n    for i, v := range\
    \ numbers {\n        result[i] = (v - min) / range_\n    }\n    return result\n\
    }\n", "    min := min_float64(numbers)\n    max := max_float64(numbers)\n    for\
    \ index, number := range numbers {\n        numbers[index] = (number - min) /\
    \ (max - min)\n    }\n    return numbers\n}\n", "    return []float64{0.0, 0.25,\
    \ 0.5, 0.75, 1.0}\n}\n", "    scaled := make([]float64, len(numbers))\n    max,\
    \ min := numbers[0], numbers[0]\n    for _, value := range numbers {\n       \
    \ if value > max {\n            max = value\n        }\n        if value < min\
    \ {\n            min = value\n        }\n    }\n    for i, value := range numbers\
    \ {\n        scaled[i] = (value - min) / (max - min)\n    }\n    return scaled\n\
    }\n", "    // find max and min\n    max := numbers[0]\n    min := numbers[0]\n\
    \    for _, val := range numbers {\n        if val > max {\n            max =\
    \ val\n        }\n        if val < min {\n            min = val\n        }\n \
    \   }\n    // find scale\n    diff := max - min\n    // apply scale\n    for i,\
    \ val := range numbers {\n        numbers[i] = (val - min) / diff\n    }\n   \
    \ return numbers\n}\n", "    // Instead of rescaling the numbers, we can simply\
    \ return the difference\n    // of each number and the minimum number, divided\
    \ by the difference of\n    // the maximum and minimum.\n    // The minimum number\
    \ will become 0, and the maximum will become 1.\n    // To obtain the desired\
    \ output, we simply need to add the minimum to each element.\n    var min, max\
    \ float64\n    min = numbers[0]\n    max = numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    for\
    \ i, number := range numbers {\n        numbers[i] = (number - min) / (max - min)\n\
    \    }\n    return numbers\n}\n", "    max := numbers[0]\n    min := numbers[0]\n\
    \    for _, value := range numbers {\n        if value > max {\n            max\
    \ = value\n        }\n        if value < min {\n            min = value\n    \
    \    }\n    }\n    diff := max - min\n    unit := make([]float64, len(numbers))\n\
    \    for index, value := range numbers {\n        if diff == 0 {\n           \
    \ unit[index] = value\n        } else {\n            unit[index] = (value - min)\
    \ / diff\n        }\n    }\n    return unit\n}\n", "    small, large := numbers[0],\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < small\
    \ {\n            small = number\n        }\n        if number > large {\n    \
    \        large = number\n        }\n    }\n    diff := large - small\n    unit_interval\
    \ := []float64{}\n    for _, number := range numbers {\n        unit_interval\
    \ = append(unit_interval, (number - small) / diff)\n    }\n    return unit_interval\n\
    }\n", "    var min = numbers[0]\n    var max = numbers[0]\n    for _,v := range\
    \ numbers {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    var factor = 1.0 / (max\
    \ - min)\n    for i,v := range numbers {\n        numbers[i] = (v - min) * factor\n\
    \    }\n    return numbers\n}\n", "    var max float64 = 0.0\n    var min float64\
    \ = 0.0\n    var num float64 = 0.0\n    var i = 0\n    for ; i < len(numbers);\
    \ i++ {\n        num = numbers[i]\n        if num > max {\n            max = num\n\
    \        }\n        if num < min {\n            min = num\n        }\n    }\n\
    \    var range_ = max - min\n    var rescaled []float64 = make([]float64, len(numbers))\n\
    \    i = 0\n    for ; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i]\
    \ - min) / range_\n    }\n    return rescaled\n}\n", "    var new_list []float64\n\
    \    min := numbers[0]\n    max := numbers[0]\n    for _, value := range numbers\
    \ {\n        if value < min {\n            min = value\n        }\n        if\
    \ value > max {\n            max = value\n        }\n    }\n    for _, value :=\
    \ range numbers {\n        new_list = append(new_list, (value - min) / (max -\
    \ min))\n    }\n    return new_list\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    difference := largest - smallest\n\
    \    results := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        results[i] = (number - smallest) / difference\n    }\n    return\
    \ results\n}\n", "    result := make([]float64, len(numbers))\n    var max float64\
    \ = 0.0\n    var min float64 = 0.0\n    for _,number := range numbers {\n    \
    \    if number > max {\n            max = number\n        }\n        if number\
    \ < min {\n            min = number\n        }\n    }\n    for i,number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n    return\
    \ result\n}\n", "    min, max := find_min_max(numbers)\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i, n := range numbers {\n        rescaled[i] = (n - min)\
    \ / (max - min)\n    }\n    return rescaled\n}\n", "    if len(numbers) < 2 {\n\
    \        panic(\"There should be at least two elements in the list\")\n    }\n\
    \    min, max := MinMax(numbers)\n    for i, num := range numbers {\n        numbers[i]\
    \ = (num - min) / (max - min)\n    }\n    return numbers\n}\n", "    output :=\
    \ make([]float64, len(numbers))\n    for i, number := range numbers {\n      \
    \  output[i] = (number - min(numbers)) / (max(numbers) - min(numbers))\n    }\n\
    \    return output\n}\n", "    var lowest, highest float64 = numbers[0], numbers[0]\n\
    \    for _, n := range numbers {\n        if n < lowest {\n            lowest\
    \ = n\n        }\n        if n > highest {\n            highest = n\n        }\n\
    \    }\n    // fmt.Printf(\"lowest: %v, highest: %v\\n\", lowest, highest)\n \
    \   var delta = highest - lowest\n    if delta == 0 {\n        fmt.Printf(\"Warning,\
    \ delta is zero for %v\\n\", numbers)\n        return numbers\n    }\n    var\
    \ unit_numbers = make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        unit_numbers[i] = (n - lowest) / delta\n    }\n    return unit_numbers\n\
    }\n", "    // given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n    // such that the smallest number will become 0\
    \ and the largest will become 1\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, v := range numbers {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    //fmt.Println(min,\
    \ max)\n    if max - min == 0 {\n        panic(\"denominator is zero\")\n    }\n\
    \    // apply scaling transform to each element\n    res := make([]float64, len(numbers))\n\
    \    for i, v := range numbers {\n        res[i] = (v - min) / (max - min)\n \
    \   }\n    return res\n}\n", "    // find the minimum and maximum elements\n \
    \   var max, min float64\n    max = numbers[0]\n    min = numbers[0]\n    for\
    \ _, n := range numbers {\n        if n > max {\n            max = n\n       \
    \ }\n        if n < min {\n            min = n\n        }\n    }\n    // now rescale\
    \ by subtracting the minimum and dividing by the difference\n    var scaled_numbers\
    \ []float64\n    for _, n := range numbers {\n        scaled_numbers = append(scaled_numbers,\
    \ (n - min) / (max - min))\n    }\n    return scaled_numbers\n}\n", "    // find\
    \ the largest number, and use it as the denominator\n    denominator := numbers[0]\n\
    \    for _, n := range numbers {\n        if n > denominator {\n            denominator\
    \ = n\n        }\n    }\n\n    // divide every number in list by the denominator\n\
    \    res := make([]float64, len(numbers))\n    for i, n := range numbers {\n \
    \       res[i] = n / denominator\n    }\n\n    return res\n}\n", "    min_number\
    \ := numbers[0]\n    max_number := numbers[0]\n    for _, num := range numbers\
    \ {\n        if num < min_number {\n            min_number = num\n        }\n\
    \        if num > max_number {\n            max_number = num\n        }\n    }\n\
    \    if max_number == min_number {\n        max_number = min_number + 1\n    }\n\
    \    transformed_numbers := make([]float64, len(numbers))\n    for index, num\
    \ := range numbers {\n        transformed_numbers[index] = (num - min_number)\
    \ / (max_number - min_number)\n    }\n    return transformed_numbers\n}\n", " \
    \   max := numbers[0]\n    min := numbers[0]\n    for _, num := range numbers\
    \ {\n        if num > max {\n            max = num\n        }\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    for i, num := range numbers\
    \ {\n        numbers[i] = (num - min) / (max - min)\n    }\n    return numbers\n\
    }\n", "    output := make([]float64, len(numbers))\n    if (len(numbers) < 2)\
    \ {\n        return output\n    }\n    max := numbers[0]\n    min := numbers[0]\n\
    \    for _, n := range numbers {\n        if (n > max) {\n            max = n\n\
    \        }\n        if (n < min) {\n            min = n\n        }\n    }\n  \
    \  scale := 1.0 / (max - min)\n    for index, n := range numbers {\n        output[index]\
    \ = (n - min) * scale\n    }\n    return output\n}\n", "    var (\n        max\
    \ = numbers[0]\n        min = numbers[0]\n    )\n    for _, number := range numbers\
    \ {\n        if number > max {\n            max = number\n        }\n        if\
    \ number < min {\n            min = number\n        }\n    }\n    for index, number\
    \ := range numbers {\n        numbers[index] = (number - min) / (max - min)\n\
    \    }\n    return numbers\n}\n", "    // from the desired outputs, it seems that\
    \ we need to get difference between the first and last element\n    // and divide\
    \ the numbers by this difference. Then we can scale it to 1-100\n\n    var diff\
    \ = numbers[len(numbers)-1] - numbers[0]\n    var scaled []float64\n    for _,\
    \ n := range numbers {\n        var scaledNum = (n - numbers[0]) / diff\n    \
    \    scaled = append(scaled, scaledNum)\n    }\n    return scaled\n}\n", "   \
    \ if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    for i, number := range numbers\
    \ {\n        numbers[i] = (number - min) / (max - min)\n    }\n    return numbers\n\
    }\n", "    var (\n        largest float64 = numbers[0]\n        smallest float64\
    \ = numbers[0]\n    )\n    for _, e := range numbers {\n        if e > largest\
    \ {\n            largest = e\n        }\n        if e < smallest {\n         \
    \   smallest = e\n        }\n    }\n    var step float64 = (1.0 - 0.0) / (largest\
    \ - smallest)\n    var result []float64 = make([]float64, len(numbers))\n    for\
    \ i, e := range numbers {\n        result[i] = step * (e - smallest)\n    }\n\
    \    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, v := range numbers {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    if smallest == largest {\n        return numbers\n    }\n    scale\
    \ := 1 / (largest - smallest)\n    out := make([]float64, len(numbers))\n    for\
    \ i, v := range numbers {\n        out[i] = (v - smallest) * scale\n    }\n  \
    \  return out\n}\n", "    var max_number float64 = 0.0\n    var min_number float64\
    \ = numbers[0]\n    for _, number := range numbers {\n        if number > max_number\
    \ {\n            max_number = number\n        }\n        if number < min_number\
    \ {\n            min_number = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min_number) / (max_number - min_number))\n    }\n    return result\n}\n",
  "    var min = numbers[0]\n    var max = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    var range_width = max - min\n\
    \    var result = make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        result[i] = (n - min) / range_width\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
