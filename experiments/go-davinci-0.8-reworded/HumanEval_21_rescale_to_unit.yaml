name: HumanEval_21_rescale_to_unit
language: go_test.go
prompt: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n//\
  \ []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
  \ []float64 {\n"
tests: "func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
  \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
  \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
  \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
  \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n    \
  \ { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
  \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) < 2 {\n        panic(\"Illegal argument. Needs\
    \ at least two elements.\")\n    }\n    // Find the minimum and maximum elements\
    \ of the slice\n    min, max := numbers[0], numbers[0]\n    for _, value := range\
    \ numbers {\n        if value < min {\n            min = value\n        }\n  \
    \      if value > max {\n            max = value\n        }\n    }\n    // Keep\
    \ track of the index, as the for loop doesn't allow that\n    for i := 0; i <\
    \ len(numbers); i++ {\n        numbers[i] = (numbers[i] - min) / (max - min)\n\
    \    }\n    return numbers\n}\n", "    if len(numbers) == 0 {\n        return\
    \ []float64{}\n    }\n\n    lowest := numbers[0]\n    highest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < lowest {\n        \
    \    lowest = number\n        }\n        if number > highest {\n            highest\
    \ = number\n        }\n    }\n\n    if lowest == highest {\n        return []float64{0.0}\n\
    \    }\n\n    result := make([]float64, len(numbers))\n    for index, number :=\
    \ range numbers {\n        result[index] = (number - lowest) / (highest - lowest)\n\
    \    }\n\n    return result\n}\n", "    var min float64 = 9999999\n    var max\
    \ float64 = -9999999\n    var res []float64\n\n    for _, value := range numbers\
    \ {\n        if value < min {\n            min = value\n        }\n        if\
    \ value > max {\n            max = value\n        }\n    }\n\n    for _, value\
    \ := range numbers {\n        res = append(res, (value - min) / (max - min))\n\
    \    }\n\n    return res\n}\n", "    // find the maximum and minimum value in\
    \ the list\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ n := range numbers {\n        if n < smallest {\n            smallest = n\n\
    \        }\n        if n > largest {\n            largest = n\n        }\n   \
    \ }\n    // create new list that is scaled\n    scaled := make([]float64, len(numbers))\n\
    \    for i, n := range numbers {\n        scaled[i] = (n - smallest) / (largest\
    \ - smallest)\n    }\n    return scaled\n}\n", "    max := numbers[0]\n    min\
    \ := numbers[0]\n    for _, n := range numbers {\n        if n > max {\n     \
    \       max = n\n        }\n        if n < min {\n            min = n\n      \
    \  }\n    }\n    if max == min {\n        return numbers\n    }\n    scale :=\
    \ 1.0 / (max - min)\n    for i, n := range numbers {\n        numbers[i] = (n\
    \ - min) * scale\n    }\n    return numbers\n}\n", "    min_value := find_min(numbers)\n\
    \    max_value := find_max(numbers)\n    if max_value == min_value {\n       \
    \ fmt.Println(\"Numbers are all the same.\")\n        return numbers\n    }\n\
    \    scaled_numbers := []float64{}\n    for _, v := range numbers {\n        //\
    \ TODO: implement scaling algorithm\n        scaled_numbers = append(scaled_numbers,\
    \ (v - min_value) / (max_value - min_value))\n    }\n    return scaled_numbers\n\
    }\n", "    if len(numbers) < 2 {\n        return numbers\n    }\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, num := range numbers {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    diff := max - min\n    if diff == 0 {\n       \
    \ return numbers\n    }\n    result := make([]float64, len(numbers))\n    for\
    \ i, num := range numbers {\n        result[i] = (num - min) / diff\n    }\n \
    \   return result\n}\n", "    output := make([]float64, len(numbers))\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, num := range numbers {\n  \
    \      if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    scale := max - min\n    for\
    \ i, num := range numbers {\n        output[i] = (num - min) / scale\n    }\n\
    \    return output\n}\n", "    var lowest = numbers[0]\n    var highest = numbers[0]\n\
    \    for _, n := range numbers {\n        if n < lowest {\n            lowest\
    \ = n\n        }\n        if n > highest {\n            highest = n\n        }\n\
    \    }\n    var range_ = highest - lowest\n    var scaled = make([]float64, len(numbers))\n\
    \    for i, n := range numbers {\n        scaled[i] = (n - lowest) / range_\n\
    \    }\n    return scaled\n}\n", "    // Find the smallest and largest numbers\n\
    \    var small, large float64 = numbers[0], numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < small {\n            small = number\n       \
    \ }\n        if number > large {\n            large = number\n        }\n    }\n\
    \    // Calculate the scale\n    scale := large - small\n    // Apply the scale\
    \ to each number\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - small) / scale)\n    }\n    return\
    \ result\n}\n", "    var res = make([]float64, len(numbers))\n    min := min_in_list(numbers)\n\
    \    max := max_in_list(numbers)\n    if max - min == 0 {\n        return res\n\
    \    }\n    for i, num := range numbers {\n        res[i] = (num - min) / (max\
    \ - min)\n    }\n    return res\n}\n", "    min, max := min_max(numbers)\n   \
    \ range_ := max - min\n    result := make([]float64, len(numbers))\n    for i,\
    \ num := range numbers {\n        result[i] = (num - min) / range_\n    }\n  \
    \  return result\n}\n", "    if len(numbers) < 2 {\n        panic(\"\")\n    }\n\
    \    var max float64 = numbers[0]\n    var min float64 = numbers[0]\n    for _,\
    \ item := range numbers {\n        if item > max {\n            max = item\n \
    \       }\n        if item < min {\n            min = item\n        }\n    }\n\
    \    var result []float64\n    for _, item := range numbers {\n        result\
    \ = append(result, (item - min) / (max - min))\n    }\n    return result\n}\n",
  "    var ret []float64\n    // If the length of the given numbers is 0 or 1, then\
    \ we can't rescale anything...\n    if len(numbers) <= 1 {\n        return numbers\n\
    \    }\n    // So, we find the minimum and maximum numbers\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, num := range numbers {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    // And then we scale each number between 0 and\
    \ 1 using the formula\n    // \"the scaled number = (the number - the minimum)\
    \ / (the maximum - the minimum)\"\n    for _, num := range numbers {\n       \
    \ ret = append(ret, (num - min) / (max - min))\n    }\n    return ret\n}\n", " \
    \   if len(numbers) < 2 {\n        return []float64{}\n    }\n    var min, max\
    \ float64\n    min = numbers[0]\n    max = numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ diff float64\n    diff = max - min\n    var rescaled []float64\n    for _, number\
    \ := range numbers {\n        rescaled = append(rescaled, (number - min) / diff)\n\
    \    }\n    return rescaled\n}\n", "    min := min(numbers)\n    max := max(numbers)\n\
    \    size := max - min\n    if size == 0 {\n        return numbers\n    }\n  \
    \  output := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        output[i] = (number - min) / size\n    }\n    return output\n}\n",
  "    var min = numbers[0]\n    var max = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n < min {\n            min = n\n        }\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    var m float64 = 1.0 / (max - min)\n\
    \    var result = make([]float64, len(numbers))\n    for i, n := range numbers\
    \ {\n        result[i] = (n - min) * m\n    }\n    return result\n}\n", "    if\
    \ len(numbers) == 0 {\n        return numbers\n    }\n    max := numbers[0]\n\
    \    min := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ > max {\n            max = number\n        }\n        if number < min {\n  \
    \          min = number\n        }\n    }\n    range_ := max - min\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     rescaled[i] = (number - min) / range_\n    }\n    return rescaled\n}\n",
  "    if len(numbers) < 2 {\n        panic(\"Cannot rescale a list of less than two\
    \ numbers\")\n    }\n    max, min := get_min_max(numbers)\n    var result []float64\n\
    \    for _, n := range numbers {\n        scaled := (n - min) / (max - min)\n\
    \        result = append(result, scaled)\n    }\n    return result\n}\n", "  \
    \  var max = numbers[0]\n    var min = numbers[0]\n    for _, n := range numbers\
    \ {\n        if n > max {\n            max = n\n        }\n        if n < min\
    \ {\n            min = n\n        }\n    }\n    var range_ = max - min\n    if\
    \ range_ == 0 {\n        return numbers\n    }\n    var results = make([]float64,\
    \ len(numbers))\n    for i, n := range numbers {\n        results[i] = (n - min)\
    \ / range_\n    }\n    return results\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
