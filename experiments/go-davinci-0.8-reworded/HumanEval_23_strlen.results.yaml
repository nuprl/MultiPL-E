language: go_test.go
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var length int\n    length =\
    \ len(myString)\n    return length\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate\
    \ := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n   \
    \  { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"\
    ), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    len := 0\n    for _, _ = range\
    \ myString {\n        len += 1\n    }\n    return len\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    len := 0\n    for range myString\
    \ {\n        len++\n    }\n    return len\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if myString == \"\" {\n     \
    \   return 0\n    }\n    return 1 + strlen(myString[1:])\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    retVal := 0\n    for _, r :=\
    \ range myString {\n        retVal++\n    }\n    return retVal\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcikwalot_test.go:15:12: r declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var counter int = 0\n    for\
    \ range myString {\n        counter += 1\n    }\n    return counter\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    counter := 0\n    for range myString\
    \ {\n        counter++\n    }\n    return counter\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // TODO\n    return len(myString)\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    i := 0\n    // Iterate over string,\
    \ increment i.\n    for _, _ = range myString {\n        i++\n    }\n    return\
    \ i\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 1
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var l int\n    for i := range\
    \ myString {\n        l = i\n    }\n    return l + 1\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrlen (0.00s)\n    --- FAIL: TestStrlen/test_num__0 (0.00s)\n\
    \        tmpk8fz6n4p_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // testing.T.Logf(\"Length of\
    \ %q is %d\", myString, len(myString))\n    return len(myString)\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    counter := 0\n    for i := range\
    \ myString {\n        counter += 1\n    }\n    return counter\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpew_drb3e_test.go:15:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    for range myString {\n      \
    \  return len(myString)\n    }\n    return 0\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 1
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    len := 0\n    for i := range\
    \ myString {\n        len = i\n    }\n    return len + 1\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrlen (0.00s)\n    --- FAIL: TestStrlen/test_num__0 (0.00s)\n\
    \        tmp9megrgc6_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    strLen := 0\n    for range myString\
    \ {\n        strLen++\n    }\n    return strLen\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    fmt.Println(myString)\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var result int = 0\n    for _,\
    \ char := range myString {\n        if char != 0 {\n            result++\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate\
    \ := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n   \
    \  { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"\
    ), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 1
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // TODO\n    return 0\n}\n\n\
    func TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrlen (0.00s)\n    --- FAIL: TestStrlen/test_num__1 (0.00s)\n\
    \        tmpwf4zic6e_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestStrlen/test_num__2 (0.00s)\n        tmpwf4zic6e_test.go:33: expected\
    \ '%!s(int=9)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for _, _ = range\
    \ myString {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var count int\n    count = 0\n\
    \    for range myString {\n        count++\n    }\n    return count\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for range myString\
    \ {\n        length += 1\n    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for _, char :=\
    \ range myString {\n        count += 1\n    }\n    return count\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxwtwx5q_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    s := 0\n    for range myString\
    \ {\n        s++\n    }\n    return s\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if len(myString) == 0 {\n   \
    \     return 0\n    }\n    // Return 1 more than the result of strlen on the string\
    \ without the first character\n    return 1 + strlen(myString[1:])\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for range myString\
    \ {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for range myString\
    \ {\n        length += 1\n    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    myStringRune := []rune(myString)\n\
    \    length := 0\n    for i := range myStringRune {\n        length = i + 1\n\
    \    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate :=\
    \ strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n   \
    \  { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"\
    ), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for _, char\
    \ := range myString {\n        length += 1\n    }\n    return length\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrtnm89z_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    i := 0\n    for range myString\
    \ {\n        i++\n    }\n    return i\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    i := 0\n    for range myString\
    \ {\n        i++\n    }\n    return i\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for _, _ = range\
    \ myString {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var result int\n    for range\
    \ myString {\n        result++\n    }\n    return result\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 1
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for i := range\
    \ myString {\n        count = i\n    }\n    return count + 1\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrlen (0.00s)\n    --- FAIL: TestStrlen/test_num__0 (0.00s)\n\
    \        tmp3n6zawcb_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for range myString\
    \ {\n        count += 1\n    }\n    return count\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // TODO: implement\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if myString == \"\" {\n     \
    \   return 0\n    } else {\n        return 1 + strlen(myString[1:])\n    }\n}\n\
    \nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    myLen := 0\n    for range myString\
    \ {\n        myLen += 1\n    }\n    return myLen\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if myString == \"\" {\n     \
    \   return 0\n    }\n    return 1 + strlen(myString[1:])\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if len(myString) == 0 {\n   \
    \     return 0\n    }\n    return 1 + strlen(myString[1:])\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073223
- exit_code: 1
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if myString == \"\" {\n     \
    \   return 0\n    }\n    l := 1\n    for i := 0; i < len(myString); i++ {\n  \
    \      if myString[i] == myString[i+1] {\n            l += 1\n        } else {\n\
    \            break\n        }\n    }\n    return l\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrlen (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001c4000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.strlen(...)\n\t/tmp/tmpbt434wx6_test.go:19\n\
    command-line-arguments_test.TestStrlen(0x0?)\n\t/tmp/tmpbt434wx6_test.go:36 +0x2c5\n\
    testing.tRunner(0xc000185380, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // TODO: Write code here\n  \
    \  //return 0\n    return len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var result int\n    for range\
    \ myString {\n        result += 1\n    }\n    return result\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if len(myString) == 0 {\n   \
    \     return 0\n    }\n    return 1 + strlen(myString[1:])\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // TODO: Implement me\n    return\
    \ 0\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrlen (0.00s)\n    --- FAIL: TestStrlen/test_num__1 (0.00s)\n\
    \        tmpzpefb59c_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestStrlen/test_num__2 (0.00s)\n        tmpzpefb59c_test.go:33: expected\
    \ '%!s(int=9)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    counter := 0\n    for range myString\
    \ {\n        counter += 1\n    }\n    return counter\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    n := 0\n    for range myString\
    \ {\n        n++\n    }\n    return n\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for _, _ = range\
    \ myString {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    i := 0\n    for range myString\
    \ {\n        i++\n    }\n    return i\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // use rune to iterate over UTF-8\
    \ string\n    var length int = 0\n    for _, _ = range myString {\n        length++\n\
    \    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate :=\
    \ strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n   \
    \  { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"\
    ), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    ret := 0\n    for range myString\
    \ {\n        ret += 1\n    }\n    return ret\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // Initialize length to 0\n \
    \   var myLength int = 0\n\n    // Loop through string till end of string\n  \
    \  for index := range myString {\n        // Increment length for each character\n\
    \        myLength++\n    }\n\n    // Return length\n    return myLength\n}\n\n\
    func TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu05zeoul_test.go:18:9: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for i := range\
    \ myString {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp15e1lc07_test.go:15:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    i := 0\n    for range myString\
    \ {\n        i++\n    }\n    return i\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for i := range\
    \ myString {\n        length = i + 1\n    }\n    return length\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // if len(myString) == 0 {\n\
    \    //     return 0\n    // } else {\n    //     return 1 + strlen(myString[1:])\n\
    \    // }\n    return len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate\
    \ := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n   \
    \  { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"\
    ), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var count int\n    for range\
    \ myString {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var length int\n    length =\
    \ len(myString)\n    return length\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate\
    \ := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n   \
    \  { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"\
    ), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // Initialize length with 0\n\
    \    length := 0\n    // Iterate over runes\n    for _, _ = range myString {\n\
    \        // Count rune\n        length++\n    }\n    // Return length\n    return\
    \ length\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var len int\n    for _, c :=\
    \ range myString {\n        len += 1\n    }\n    return len\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfhg8_7_q_test.go:15:12: c declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var len int\n    for index :=\
    \ range myString {\n        len = index + 1\n    }\n    return len\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    len := 0\n    for range myString\
    \ {\n        len += 1\n    }\n    return len\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var length int\n    for range\
    \ myString {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    myLength := 0\n    for _, character\
    \ := range myString {\n        myLength += 1\n    }\n    return myLength\n}\n\n\
    func TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy5vx8rcz_test.go:15:12: character declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073225
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for _, char\
    \ := range myString {\n        length += 1\n    }\n    return length\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrtnm89z_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if myString == \"\" {\n     \
    \   return 0\n    } else {\n        return 1 + strlen(myString[1:])\n    }\n}\n\
    \nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for range myString\
    \ {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    n := 0\n    for range myString\
    \ {\n        n++\n    }\n    return n\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for range myString\
    \ {\n        count += 1\n    }\n    return count\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var c byte\n    c = 0\n    for\
    \ _, c = range myString {\n        c++\n    }\n    return int(c)\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4n7ngwmk_test.go:16:12: cannot use c (value of type rune) as type byte
    in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for range myString\
    \ {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    n := 0\n    for range myString\
    \ {\n        n++\n    }\n    return n\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for range myString\
    \ {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    l := 0\n    for range myString\
    \ {\n        l++\n    }\n    return l\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    i := 0\n    for range myString\
    \ {\n        i++\n    }\n    return i\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for _, v :=\
    \ range myString {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8msgbkig_test.go:15:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var length int\n    length =\
    \ len(myString)\n    return length\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate\
    \ := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n   \
    \  { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"\
    ), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if len(myString) == 0 {\n   \
    \     return 0\n    }\n    //return 1 + strlen(myString[1:])\n    return 1 + strlen(myString[:len(myString)-1])\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if myString == \"\" {\n     \
    \   return 0\n    } else {\n        return len(myString)\n    }\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for range myString\
    \ {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // do something\n    return len(myString)\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for _, char :=\
    \ range myString {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_kkon8_s_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for range myString\
    \ {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for range myString\
    \ {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    strlen := 0\n    for range myString\
    \ {\n        strlen++\n    }\n    return strlen\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var ret int = 0\n    for i :=\
    \ range myString {\n        ret = i + 1\n    }\n    return ret\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073225
- exit_code: 1
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // Your code here\n    return\
    \ 0\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"\
    x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrlen (0.00s)\n    --- FAIL: TestStrlen/test_num__1 (0.00s)\n\
    \        tmp9mik_66m_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestStrlen/test_num__2 (0.00s)\n        tmp9mik_66m_test.go:33: expected\
    \ '%!s(int=9)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    i := 0\n    for range myString\
    \ {\n        i++\n    }\n    return i\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var i int\n    for range myString\
    \ {\n        i++\n    }\n    return i\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var length int\n    for range\
    \ myString {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    i := 0\n    for range myString\
    \ {\n        i++\n    }\n    return i\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if len(myString) == 0 {\n   \
    \     return 0\n    } else {\n        return 1 + strlen(myString[1:])\n    }\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    fmt.Println(myString)\n    return\
    \ len(myString)\n}\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
    \ candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected:\
    \ 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if myString == \"\" {\n     \
    \   return 0\n    }\n    return 1 + strlen(myString[1:])\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073221
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    n := 0\n    for range myString\
    \ {\n        n++\n    }\n    return n\n}\n\nfunc TestStrlen(t *testing.T) {\n\
    \  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual: candidate(\"\
    asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if myString == \"\" {\n     \
    \   return 0\n    } else {\n        return 1 + strlen(myString[1:])\n    }\n}\n\
    \nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    count := 0\n    for range myString\
    \ {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073223
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    if len(myString) > 0 {\n    \
    \    return 1 + strlen(myString[1:])\n    } else {\n        return 0\n    }\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    // return len(myString)\n   \
    \ count := 0\n    for range myString {\n        count++\n    }\n    return count\n\
    }\n\nfunc TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"\
    ), expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073226
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    var count int\n    for range\
    \ myString {\n        count++\n    }\n    return count\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073225
- exit_code: 2
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    length := 0\n    for _, char\
    \ := range myString {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t\
    \ *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rmlsfzc_test.go:15:12: char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073225
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\"\
    )\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
