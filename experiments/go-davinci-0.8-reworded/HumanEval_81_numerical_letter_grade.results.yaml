language: go_test.go
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letters := []string{}\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade > 4.0:\n            letters =\
    \ append(letters, \"A+\")\n        case grade > 3.7:\n            letters = append(letters,\
    \ \"A\")\n        case grade > 3.3:\n            letters = append(letters, \"\
    A-\")\n        case grade > 3.0:\n            letters = append(letters, \"B+\"\
    )\n        case grade > 2.7:\n            letters = append(letters, \"B\")\n \
    \       case grade > 2.3:\n            letters = append(letters, \"B-\")\n   \
    \     case grade > 2.0:\n            letters = append(letters, \"C+\")\n     \
    \   case grade > 1.7:\n            letters = append(letters, \"C\")\n        case\
    \ grade > 1.3:\n            letters = append(letters, \"C-\")\n        case grade\
    \ > 1.0:\n            letters = append(letters, \"D+\")\n        case grade >\
    \ 0.7:\n            letters = append(letters, \"D\")\n        case grade > 0.0:\n\
    \            letters = append(letters, \"D-\")\n        default:\n           \
    \ letters = append(letters, \"E\")\n        }\n    }\n    return letters\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpiw3535q3_test.go:83: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    res := make([]string, len(grades))\n    for i, grade\
    \ := range grades {\n        switch {\n        case grade == 4.0:\n          \
    \  res[i] = \"A+\"\n        case grade >= 3.7:\n            res[i] = \"A\"\n \
    \       case grade >= 3.3:\n            res[i] = \"A-\"\n        case grade >=\
    \ 3.0:\n            res[i] = \"B+\"\n        case grade >= 2.7:\n            res[i]\
    \ = \"B\"\n        case grade >= 2.3:\n            res[i] = \"B-\"\n        case\
    \ grade >= 2.0:\n            res[i] = \"C+\"\n        case grade >= 1.7:\n   \
    \         res[i] = \"C\"\n        case grade >= 1.3:\n            res[i] = \"\
    C-\"\n        case grade >= 1.0:\n            res[i] = \"D+\"\n        case grade\
    \ >= 0.7:\n            res[i] = \"D\"\n        case grade >= 0.0:\n          \
    \  res[i] = \"D-\"\n        default:\n            res[i] = \"E\"\n        }\n\
    \    }\n    return res\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpqt4j0f5f_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpqt4j0f5f_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpqt4j0f5f_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpqt4j0f5f_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tvar letterGrades []string\n\tfor _, element := range\
    \ grades {\n\t\tif element == 4.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"A+\")\n\t\t} else if element > 3.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"A\")\n\t\t} else if element > 3.3 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"A-\")\n\t\t} else if element > 3.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"B+\")\n\t\t} else if element > 2.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"B\")\n\t\t} else if element > 2.3 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"B-\")\n\t\t} else if element > 2.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"C+\")\n\t\t} else if element > 1.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"C\")\n\t\t} else if element > 1.3 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"C-\")\n\t\t} else if element > 1.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"D+\")\n\t\t} else if element > 0.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"D\")\n\t\t} else if element > 0.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"D-\")\n\t\t} else {\n\t\t\tletterGrades = append(letterGrades, \"E\")\n\t\t\
    }\n\t}\n\treturn letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade == 4.0 {\n            letterGrades = append(letterGrades,\
    \ \"A+\")\n        } else if grade > 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade > 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpwl3483cf_test.go:82: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpwl3483cf_test.go:82:\
    \ expected '[E D-]', got '[D- D-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        switch {\n        case grade >= 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case grade >= 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case grade >= 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case grade >= 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case grade >= 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case grade >= 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case grade >= 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case grade >= 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case grade >= 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case grade >= 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case grade >= 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case grade >= 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        default:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7cdazjd5_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp7cdazjd5_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp7cdazjd5_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp7cdazjd5_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // your code here\n    var letter_grades []string\n\
    \    for _, grade := range grades {\n        if grade > 4.0 {\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        } else if grade > 3.7 {\n         \
    \   letter_grades = append(letter_grades, \"A\")\n        } else if grade > 3.3\
    \ {\n            letter_grades = append(letter_grades, \"A-\")\n        } else\
    \ if grade > 3.0 {\n            letter_grades = append(letter_grades, \"B+\")\n\
    \        } else if grade > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpjbtmsbq8_test.go:83: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, val := range\
    \ grades {\n        if val >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if val >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if val >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if val >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if val >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if val >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if val >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if val >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if val >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if val >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if val >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if val >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpi9fs69ao_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpi9fs69ao_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpi9fs69ao_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpi9fs69ao_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp__0monto_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp__0monto_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp__0monto_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp__0monto_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_vutr6w_test.go:31:12: cannot use grades (variable of type []float64)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Implement your code here\n\n    return []string{}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpeoo4rsaw_test.go:54: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpeoo4rsaw_test.go:54:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpeoo4rsaw_test.go:54: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpeoo4rsaw_test.go:54:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpeoo4rsaw_test.go:54: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpeoo4rsaw_test.go:54:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        if grade == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075284
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, g := range\
    \ grades {\n        var letter_grade string\n        if g >= 4.0 {\n         \
    \   letter_grade = \"A+\"\n        } else if g >= 3.7 {\n            letter_grade\
    \ = \"A\"\n        } else if g >= 3.3 {\n            letter_grade = \"A-\"\n \
    \       } else if g >= 3.0 {\n            letter_grade = \"B+\"\n        } else\
    \ if g >= 2.7 {\n            letter_grade = \"B\"\n        } else if g >= 2.3\
    \ {\n            letter_grade = \"B-\"\n        } else if g >= 2.0 {\n       \
    \     letter_grade = \"C+\"\n        } else if g >= 1.7 {\n            letter_grade\
    \ = \"C\"\n        } else if g >= 1.3 {\n            letter_grade = \"C-\"\n \
    \       } else if g >= 1.0 {\n            letter_grade = \"D+\"\n        } else\
    \ if g >= 0.7 {\n            letter_grade = \"D\"\n        } else if g >= 0.0\
    \ {\n            letter_grade = \"D-\"\n        } else {\n            letter_grade\
    \ = \"E\"\n        }\n        letter_grades = append(letter_grades, letter_grade)\n\
    \    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpsbfwr1bb_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpsbfwr1bb_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpsbfwr1bb_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpsbfwr1bb_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tl := len(grades)\n\tx := make([]string, l)\n\tfor i\
    \ := 0; i < l; i++ {\n\t\tv := grades[i]\n\t\tif v >= 4.0 {\n\t\t\tx[i] = \"A+\"\
    \n\t\t} else if v >= 3.7 {\n\t\t\tx[i] = \"A\"\n\t\t} else if v >= 3.3 {\n\t\t\
    \tx[i] = \"A-\"\n\t\t} else if v >= 3.0 {\n\t\t\tx[i] = \"B+\"\n\t\t} else if\
    \ v >= 2.7 {\n\t\t\tx[i] = \"B\"\n\t\t} else if v >= 2.3 {\n\t\t\tx[i] = \"B-\"\
    \n\t\t} else if v >= 2.0 {\n\t\t\tx[i] = \"C+\"\n\t\t} else if v >= 1.7 {\n\t\t\
    \tx[i] = \"C\"\n\t\t} else if v >= 1.3 {\n\t\t\tx[i] = \"C-\"\n\t\t} else if v\
    \ >= 1.0 {\n\t\t\tx[i] = \"D+\"\n\t\t} else if v >= 0.7 {\n\t\t\tx[i] = \"D\"\n\
    \t\t} else if v >= 0.0 {\n\t\t\tx[i] = \"D-\"\n\t\t} else {\n\t\t\tx[i] = \"E\"\
    \n\t\t}\n\t}\n\treturn x\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp4rwmzvjr_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp4rwmzvjr_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp4rwmzvjr_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp4rwmzvjr_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    return []string{}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpph01ls4t_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpph01ls4t_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpph01ls4t_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpph01ls4t_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpph01ls4t_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpph01ls4t_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade >= 4.0:\n            letterGrades\
    \ = append(letterGrades, \"A+\")\n        case grade >= 3.7:\n            letterGrades\
    \ = append(letterGrades, \"A\")\n        case grade >= 3.3:\n            letterGrades\
    \ = append(letterGrades, \"A-\")\n        case grade >= 3.0:\n            letterGrades\
    \ = append(letterGrades, \"B+\")\n        case grade >= 2.7:\n            letterGrades\
    \ = append(letterGrades, \"B\")\n        case grade >= 2.3:\n            letterGrades\
    \ = append(letterGrades, \"B-\")\n        case grade >= 2.0:\n            letterGrades\
    \ = append(letterGrades, \"C+\")\n        case grade >= 1.7:\n            letterGrades\
    \ = append(letterGrades, \"C\")\n        case grade >= 1.3:\n            letterGrades\
    \ = append(letterGrades, \"C-\")\n        case grade >= 1.0:\n            letterGrades\
    \ = append(letterGrades, \"D+\")\n        case grade >= 0.7:\n            letterGrades\
    \ = append(letterGrades, \"D\")\n        case grade >= 0.0:\n            letterGrades\
    \ = append(letterGrades, \"D-\")\n        default:\n            letterGrades =\
    \ append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp1uo55h1a_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp1uo55h1a_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp1uo55h1a_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp1uo55h1a_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_vutr6w_test.go:31:12: cannot use grades (variable of type []float64)
    as type []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, i := range\
    \ grades {\n        if i >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if i >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if i >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if i >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if i >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if i >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if i >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if i >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if i >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if i >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if i >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if i >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppivwkzxs_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmppivwkzxs_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmppivwkzxs_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmppivwkzxs_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var output []string\n    for _, score := range grades\
    \ {\n        if score >= 4.0 {\n            output = append(output, \"A+\")\n\
    \        } else if score >= 3.7 {\n            output = append(output, \"A\")\n\
    \        } else if score >= 3.3 {\n            output = append(output, \"A-\"\
    )\n        } else if score >= 3.0 {\n            output = append(output, \"B+\"\
    )\n        } else if score >= 2.7 {\n            output = append(output, \"B\"\
    )\n        } else if score >= 2.3 {\n            output = append(output, \"B-\"\
    )\n        } else if score >= 2.0 {\n            output = append(output, \"C+\"\
    )\n        } else if score >= 1.7 {\n            output = append(output, \"C\"\
    )\n        } else if score >= 1.3 {\n            output = append(output, \"C-\"\
    )\n        } else if score >= 1.0 {\n            output = append(output, \"D+\"\
    )\n        } else if score >= 0.7 {\n            output = append(output, \"D\"\
    )\n        } else if score >= 0.0 {\n            output = append(output, \"D-\"\
    )\n        } else {\n            output = append(output, \"E\")\n        }\n \
    \   }\n    return output\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpe6ryauvq_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpe6ryauvq_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpe6ryauvq_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpe6ryauvq_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // your solution here\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2bdr0k__test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, i := range grades\
    \ {\n        if i >= 4.0 {\n            result = append(result, \"A+\")\n    \
    \    } else if i >= 3.7 {\n            result = append(result, \"A\")\n      \
    \  } else if i >= 3.3 {\n            result = append(result, \"A-\")\n       \
    \ } else if i >= 3.0 {\n            result = append(result, \"B+\")\n        }\
    \ else if i >= 2.7 {\n            result = append(result, \"B\")\n        } else\
    \ if i >= 2.3 {\n            result = append(result, \"B-\")\n        } else if\
    \ i >= 2.0 {\n            result = append(result, \"C+\")\n        } else if i\
    \ >= 1.7 {\n            result = append(result, \"C\")\n        } else if i >=\
    \ 1.3 {\n            result = append(result, \"C-\")\n        } else if i >= 1.0\
    \ {\n            result = append(result, \"D+\")\n        } else if i >= 0.7 {\n\
    \            result = append(result, \"D\")\n        } else if i >= 0.0 {\n  \
    \          result = append(result, \"D-\")\n        } else {\n            result\
    \ = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpbw_4lnkt_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpbw_4lnkt_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpbw_4lnkt_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpbw_4lnkt_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp__0monto_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp__0monto_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp__0monto_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp__0monto_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades = append(letterGrades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpe3l8i1tu_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpe3l8i1tu_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpe3l8i1tu_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpe3l8i1tu_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade == 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case grade > 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case grade > 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case grade > 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case grade > 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case grade > 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case grade > 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case grade > 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case grade > 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case grade > 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case grade > 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case grade > 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        case grade == 0.0:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var (\n        grade_letter []string\n        grade_key\
    \    = []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"\
    C-\", \"D+\", \"D\", \"D-\", \"E\"}\n        grade_values = []float64{4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0}\n    )\n    for _, v\
    \ := range grades {\n        for i, val := range grade_values {\n            if\
    \ v >= val {\n                grade_letter = append(grade_letter, grade_key[i])\n\
    \                break\n            }\n        }\n    }\n    return grade_letter\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpks5ep5e0_test.go:65: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpks5ep5e0_test.go:65: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpks5ep5e0_test.go:65: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpks5ep5e0_test.go:65: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here!\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8x6ng6bx_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var output []string\n    for _, grade := range grades\
    \ {\n        switch {\n        case grade >= 4.0:\n            output = append(output,\
    \ \"A+\")\n        case grade >= 3.7:\n            output = append(output, \"\
    A\")\n        case grade >= 3.3:\n            output = append(output, \"A-\")\n\
    \        case grade >= 3.0:\n            output = append(output, \"B+\")\n   \
    \     case grade >= 2.7:\n            output = append(output, \"B\")\n       \
    \ case grade >= 2.3:\n            output = append(output, \"B-\")\n        case\
    \ grade >= 2.0:\n            output = append(output, \"C+\")\n        case grade\
    \ >= 1.7:\n            output = append(output, \"C\")\n        case grade >= 1.3:\n\
    \            output = append(output, \"C-\")\n        case grade >= 1.0:\n   \
    \         output = append(output, \"D+\")\n        case grade >= 0.7:\n      \
    \      output = append(output, \"D\")\n        case grade >= 0.0:\n          \
    \  output = append(output, \"D-\")\n        default:\n            output = append(output,\
    \ \"E\")\n        }\n    }\n    return output\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0iez5dht_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp0iez5dht_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp0iez5dht_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp0iez5dht_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n\n    for _, grade :=\
    \ range grades {\n        if grade >= 4.0 {\n            letterGrades = append(letterGrades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp3oof_jt2_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp3oof_jt2_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp3oof_jt2_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp3oof_jt2_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here.\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpby1xa_pu_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n  return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpxts2k58j_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpxts2k58j_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpxts2k58j_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpxts2k58j_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpxts2k58j_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpxts2k58j_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, g := range grades\
    \ {\n        var r string\n        switch {\n        case g == 4.0:\n        \
    \    r = \"A+\"\n        case g > 3.7:\n            r = \"A\"\n        case g\
    \ > 3.3:\n            r = \"A-\"\n        case g > 3.0:\n            r = \"B+\"\
    \n        case g > 2.7:\n            r = \"B\"\n        case g > 2.3:\n      \
    \      r = \"B-\"\n        case g > 2.0:\n            r = \"C+\"\n        case\
    \ g > 1.7:\n            r = \"C\"\n        case g > 1.3:\n            r = \"C-\"\
    \n        case g > 1.0:\n            r = \"D+\"\n        case g > 0.7:\n     \
    \       r = \"D\"\n        case g > 0.0:\n            r = \"D-\"\n        default:\n\
    \            r = \"E\"\n        }\n        result = append(result, r)\n    }\n\
    \    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\t// Write your code here\n    letterGrades := []string{}\n\
    \    for _, value := range grades {\n        if value >= 4.0 {\n            letterGrades\
    \ = append(letterGrades, \"A+\")\n        } else if value >= 3.7 {\n         \
    \   letterGrades = append(letterGrades, \"A\")\n        } else if value >= 3.3\
    \ {\n            letterGrades = append(letterGrades, \"A-\")\n        } else if\
    \ value >= 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n  \
    \      } else if value >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if value >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if value >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if value >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if value >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if value >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if value >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if value >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpvmkwbmt1_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpvmkwbmt1_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpvmkwbmt1_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpvmkwbmt1_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp__0monto_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp__0monto_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp__0monto_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp__0monto_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letterGrades := []string{}\n    for _, grade := range\
    \ grades {\n        if grade == 4.0 {\n            letterGrades = append(letterGrades,\
    \ \"A+\")\n        } else if grade > 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade > 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, v := range\
    \ grades {\n        switch {\n        case v >= 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case v >= 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case v >= 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case v >= 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case v >= 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case v >= 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case v >= 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case v >= 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case v >= 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case v >= 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case v >= 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case v >= 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        case v < 0.0:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpz633du3n_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpz633du3n_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpz633du3n_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpz633du3n_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        letter_grade := \"\"\n        if grade >= 4.0 {\n  \
    \          letter_grade = \"A+\"\n        } else if grade >= 3.7 {\n         \
    \   letter_grade = \"A\"\n        } else if grade >= 3.3 {\n            letter_grade\
    \ = \"A-\"\n        } else if grade >= 3.0 {\n            letter_grade = \"B+\"\
    \n        } else if grade >= 2.7 {\n            letter_grade = \"B\"\n       \
    \ } else if grade >= 2.3 {\n            letter_grade = \"B-\"\n        } else\
    \ if grade >= 2.0 {\n            letter_grade = \"C+\"\n        } else if grade\
    \ >= 1.7 {\n            letter_grade = \"C\"\n        } else if grade >= 1.3 {\n\
    \            letter_grade = \"C-\"\n        } else if grade >= 1.0 {\n       \
    \     letter_grade = \"D+\"\n        } else if grade >= 0.7 {\n            letter_grade\
    \ = \"D\"\n        } else if grade >= 0.0 {\n            letter_grade = \"D-\"\
    \n        } else {\n            letter_grade = \"E\"\n        }\n        letter_grades\
    \ = append(letter_grades, letter_grade)\n    }\n    return letter_grades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprm_vv95j_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmprm_vv95j_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprm_vv95j_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmprm_vv95j_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here.\n    return []string{}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp9u0_9vb__test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp9u0_9vb__test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp9u0_9vb__test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp9u0_9vb__test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp9u0_9vb__test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp9u0_9vb__test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n\n    for _, grade := range\
    \ grades {\n        if grade > 4.0 {\n            result = append(result, \"A+\"\
    )\n        } else if grade > 3.7 {\n            result = append(result, \"A\"\
    )\n        } else if grade > 3.3 {\n            result = append(result, \"A-\"\
    )\n        } else if grade > 3.0 {\n            result = append(result, \"B+\"\
    )\n        } else if grade > 2.7 {\n            result = append(result, \"B\"\
    )\n        } else if grade > 2.3 {\n            result = append(result, \"B-\"\
    )\n        } else if grade > 2.0 {\n            result = append(result, \"C+\"\
    )\n        } else if grade > 1.7 {\n            result = append(result, \"C\"\
    )\n        } else if grade > 1.3 {\n            result = append(result, \"C-\"\
    )\n        } else if grade > 1.0 {\n            result = append(result, \"D+\"\
    )\n        } else if grade > 0.7 {\n            result = append(result, \"D\"\
    )\n        } else if grade > 0.0 {\n            result = append(result, \"D-\"\
    )\n        } else {\n            result = append(result, \"E\")\n        }\n \
    \   }\n\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmphz7subnm_test.go:84: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gpa := []float64{4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7, 0.0}\n    letters := []string{\"A+\", \"A\", \"A-\", \"\
    B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n  \
    \  var result []string\n    for _, n := range grades {\n        if n == 4.0 {\n\
    \            result = append(result, \"A+\")\n        } else {\n            for\
    \ i, _ := range gpa {\n                if n >= gpa[i] {\n                    result\
    \ = append(result, letters[i])\n                    break\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpekd1ruro_test.go:67: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpekd1ruro_test.go:67: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpekd1ruro_test.go:67: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpekd1ruro_test.go:67: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        switch {\n        case grade == 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case grade > 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case grade > 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case grade > 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case grade > 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case grade > 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case grade > 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case grade > 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case grade > 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case grade > 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case grade > 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case grade > 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        case grade == 0.0:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write code here and remove the panic()\n    panic(\"\
    Not implemented\")\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: Not implemented [recovered]\n\
    \tpanic: Not implemented\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x4fcd60,\
    \ 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x4fcd60, 0x548940})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade(...)\n\t/tmp/tmpmw8cwbyp_test.go:32\n\
    command-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\t/tmp/tmpmw8cwbyp_test.go:42\
    \ +0x27\ntesting.tRunner(0xc0001a01a0, 0x527d58)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    output := make([]string, len(grades))\n    for i,\
    \ grade := range grades {\n        letter_grade := \"\"\n        if grade >= 4.0\
    \ {\n            letter_grade = \"A+\"\n        } else if grade >= 3.7 {\n   \
    \         letter_grade = \"A\"\n        } else if grade >= 3.3 {\n           \
    \ letter_grade = \"A-\"\n        } else if grade >= 3.0 {\n            letter_grade\
    \ = \"B+\"\n        } else if grade >= 2.7 {\n            letter_grade = \"B\"\
    \n        } else if grade >= 2.3 {\n            letter_grade = \"B-\"\n      \
    \  } else if grade >= 2.0 {\n            letter_grade = \"C+\"\n        } else\
    \ if grade >= 1.7 {\n            letter_grade = \"C\"\n        } else if grade\
    \ >= 1.3 {\n            letter_grade = \"C-\"\n        } else if grade >= 1.0\
    \ {\n            letter_grade = \"D+\"\n        } else if grade >= 0.7 {\n   \
    \         letter_grade = \"D\"\n        } else if grade >= 0.0 {\n           \
    \ letter_grade = \"D-\"\n        } else {\n            letter_grade = \"E\"\n\
    \        }\n        output[i] = letter_grade\n    }\n    return output\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpqgbbss4f_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpqgbbss4f_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpqgbbss4f_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpqgbbss4f_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // TODO: fill in the blanks\n    return nil\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpmaeo_fgj_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpmaeo_fgj_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpmaeo_fgj_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpmaeo_fgj_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpmaeo_fgj_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpmaeo_fgj_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    mapping := map[float64]string{\n        4.0: \"A+\"\
    ,\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7:\
    \ \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n  \
    \      1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"\
    D-\",\n    }\n    letterGrades := make([]string, len(grades))\n    for i, grade\
    \ := range grades {\n        for gpa, letterGrade := range mapping {\n       \
    \     if grade >= gpa {\n                letterGrades[i] = letterGrade\n     \
    \           break\n            }\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp9j2n4km8_test.go:75: expected '[A+ B C- C A-]', got '[A\
    \ D C C+ D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n \
    \       tmp9j2n4km8_test.go:75: expected '[D+]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp9j2n4km8_test.go:75: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp9j2n4km8_test.go:75:\
    \ expected '[D D- C- B B+]', got '[D- D- D- C C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp9j2n4km8_test.go:75: expected '[E D-]', got '[D- D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    const (\n        A_plus = iota\n        A\n     \
    \   A_minus\n        B_plus\n        B\n        B_minus\n        C_plus\n    \
    \    C\n        C_minus\n        D_plus\n        D\n        D_minus\n        E\n\
    \    )\n    var grade_string []string\n    for _, grade := range grades {\n  \
    \      switch {\n        case grade == 4.0:\n            grade_string = append(grade_string,\
    \ \"A+\")\n        case grade > 3.7:\n            grade_string = append(grade_string,\
    \ \"A\")\n        case grade > 3.3:\n            grade_string = append(grade_string,\
    \ \"A-\")\n        case grade > 3.0:\n            grade_string = append(grade_string,\
    \ \"B+\")\n        case grade > 2.7:\n            grade_string = append(grade_string,\
    \ \"B\")\n        case grade > 2.3:\n            grade_string = append(grade_string,\
    \ \"B-\")\n        case grade > 2.0:\n            grade_string = append(grade_string,\
    \ \"C+\")\n        case grade > 1.7:\n            grade_string = append(grade_string,\
    \ \"C\")\n        case grade > 1.3:\n            grade_string = append(grade_string,\
    \ \"C-\")\n        case grade > 1.0:\n            grade_string = append(grade_string,\
    \ \"D+\")\n        case grade > 0.7:\n            grade_string = append(grade_string,\
    \ \"D\")\n        case grade > 0.0:\n            grade_string = append(grade_string,\
    \ \"D-\")\n        case grade == 0.0:\n            grade_string = append(grade_string,\
    \ \"E\")\n        }\n    }\n    return grade_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here.\n    return nil\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp56h866hm_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp56h866hm_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp56h866hm_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp56h866hm_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp56h866hm_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp56h866hm_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    for i, grade := range\
    \ grades {\n        switch {\n        case grade > 4.0:\n            grades[i]\
    \ = 4.0\n        case grade < 0.0:\n            grades[i] = 0.0\n        }\n \
    \   }\n    fmt.Println(grades)\n    result := make([]string, len(grades))\n  \
    \  for i, grade := range grades {\n        switch {\n        case grade == 4.0:\n\
    \            result[i] = \"A+\"\n        case grade >= 3.7:\n            result[i]\
    \ = \"A\"\n        case grade >= 3.3:\n            result[i] = \"A-\"\n      \
    \  case grade >= 3.0:\n            result[i] = \"B+\"\n        case grade >= 2.7:\n\
    \            result[i] = \"B\"\n        case grade >= 2.3:\n            result[i]\
    \ = \"B-\"\n        case grade >= 2.0:\n            result[i] = \"C+\"\n     \
    \   case grade >= 1.7:\n            result[i] = \"C\"\n        case grade >= 1.3:\n\
    \            result[i] = \"C-\"\n        case grade >= 1.0:\n            result[i]\
    \ = \"D+\"\n        case grade >= 0.7:\n            result[i] = \"D\"\n      \
    \  case grade >= 0.0:\n            result[i] = \"D-\"\n        default:\n    \
    \        result[i] = \"E\"\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[4 3 1.7 2 3.5]\n[1.2]\n[0.5]\n[0]\n[1 0.3 1.5 2.8 3.3]\n[0 0.7]\n--- FAIL:\
    \ TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpu_mmbrg4_test.go:93: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpu_mmbrg4_test.go:93: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpu_mmbrg4_test.go:93: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpu_mmbrg4_test.go:93: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    return []string{}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpph01ls4t_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpph01ls4t_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpph01ls4t_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpph01ls4t_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpph01ls4t_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpph01ls4t_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letters []string\n    for _, v := range grades\
    \ {\n        if v == 4.0 {\n            letters = append(letters, \"A+\")\n  \
    \      } else if v > 3.7 {\n            letters = append(letters, \"A\")\n   \
    \     } else if v > 3.3 {\n            letters = append(letters, \"A-\")\n   \
    \     } else if v > 3.0 {\n            letters = append(letters, \"B+\")\n   \
    \     } else if v > 2.7 {\n            letters = append(letters, \"B\")\n    \
    \    } else if v > 2.3 {\n            letters = append(letters, \"B-\")\n    \
    \    } else if v > 2.0 {\n            letters = append(letters, \"C+\")\n    \
    \    } else if v > 1.7 {\n            letters = append(letters, \"C\")\n     \
    \   } else if v > 1.3 {\n            letters = append(letters, \"C-\")\n     \
    \   } else if v > 1.0 {\n            letters = append(letters, \"D+\")\n     \
    \   } else if v > 0.7 {\n            letters = append(letters, \"D\")\n      \
    \  } else if v > 0.0 {\n            letters = append(letters, \"D-\")\n      \
    \  } else {\n            letters = append(letters, \"E\")\n        }\n    }\n\
    \    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\toutput := make([]string, len(grades))\n\tfor i, g :=\
    \ range grades {\n\t\tswitch {\n\t\tcase g >= 4.0:\n\t\t\toutput[i] = \"A+\"\n\
    \t\tcase g >= 3.7:\n\t\t\toutput[i] = \"A\"\n\t\tcase g >= 3.3:\n\t\t\toutput[i]\
    \ = \"A-\"\n\t\tcase g >= 3.0:\n\t\t\toutput[i] = \"B+\"\n\t\tcase g >= 2.7:\n\
    \t\t\toutput[i] = \"B\"\n\t\tcase g >= 2.3:\n\t\t\toutput[i] = \"B-\"\n\t\tcase\
    \ g >= 2.0:\n\t\t\toutput[i] = \"C+\"\n\t\tcase g >= 1.7:\n\t\t\toutput[i] = \"\
    C\"\n\t\tcase g >= 1.3:\n\t\t\toutput[i] = \"C-\"\n\t\tcase g >= 1.0:\n\t\t\t\
    output[i] = \"D+\"\n\t\tcase g >= 0.7:\n\t\t\toutput[i] = \"D\"\n\t\tcase g >=\
    \ 0.0:\n\t\t\toutput[i] = \"D-\"\n\t\tdefault:\n\t\t\toutput[i] = \"E\"\n\t\t\
    }\n\t}\n\treturn output\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpkcba48p2_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpkcba48p2_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpkcba48p2_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpkcba48p2_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    return []string{}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpph01ls4t_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpph01ls4t_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpph01ls4t_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpph01ls4t_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpph01ls4t_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpph01ls4t_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpreano26x_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpreano26x_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpreano26x_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpreano26x_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // create a map of GPA to letter grade\n    grades_map\
    \ := map[float64]string{\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3:\
    \ \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n \
    \       2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0:\
    \ \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n    }\n    // initialize\
    \ a new map to hold the result\n    result := make([]string, len(grades))\n  \
    \  // loop through the array\n    for i, grade := range grades {\n        for\
    \ gpa, letter := range grades_map {\n            if grade >= gpa {\n         \
    \       result[i] = letter\n                break\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpf6gbdr1a_test.go:78: expected '[A+ B C- C A-]', got '[B+\
    \ B+ C D+ B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpf6gbdr1a_test.go:78: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpf6gbdr1a_test.go:78: expected '[D D- C- B B+]', got '[D\
    \ D- C- C D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpf6gbdr1a_test.go:78: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letterGrades = append(letterGrades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpe3l8i1tu_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpe3l8i1tu_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpe3l8i1tu_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpe3l8i1tu_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n\n    for _, grade :=\
    \ range grades {\n        if grade >= 4.0 {\n            letterGrades = append(letterGrades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp3oof_jt2_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp3oof_jt2_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp3oof_jt2_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp3oof_jt2_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n\n    for _, x := range grades\
    \ {\n        if x >= 4.0 {\n            result = append(result, \"A+\")\n    \
    \    } else if x >= 3.7 {\n            result = append(result, \"A\")\n      \
    \  } else if x >= 3.3 {\n            result = append(result, \"A-\")\n       \
    \ } else if x >= 3.0 {\n            result = append(result, \"B+\")\n        }\
    \ else if x >= 2.7 {\n            result = append(result, \"B\")\n        } else\
    \ if x >= 2.3 {\n            result = append(result, \"B-\")\n        } else if\
    \ x >= 2.0 {\n            result = append(result, \"C+\")\n        } else if x\
    \ >= 1.7 {\n            result = append(result, \"C\")\n        } else if x >=\
    \ 1.3 {\n            result = append(result, \"C-\")\n        } else if x >= 1.0\
    \ {\n            result = append(result, \"D+\")\n        } else if x >= 0.7 {\n\
    \            result = append(result, \"D\")\n        } else if x >= 0.0 {\n  \
    \          result = append(result, \"D-\")\n        } else {\n            result\
    \ = append(result, \"E\")\n        }\n    }\n\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpjglkrliu_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpjglkrliu_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpjglkrliu_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpjglkrliu_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // To solve this problem, we need to find a way to\
    \ relate the inputs and\n    // outputs. Since the inputs are floats and the outputs\
    \ are strings, we\n    // can create a map of float:string. This will create a\
    \ key:value pair\n    // which will allow us to map inputs to outputs\n    grade_map\
    \ := map[float64]string{\n        4.0: \"A+\",\n        3.7: \"A\",\n        3.3:\
    \ \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n \
    \       2.0: \"C+\",\n        1.7: \"C\",\n        1.3: \"C-\",\n        1.0:\
    \ \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n        -1.0: \"E\",\n \
    \   }\n    // Now that we have a map, we need to create an empty slice of strings\n\
    \    // to store the values we will return.\n    letter_grades := []string{}\n\
    \    // Now we will iterate through the input slice and assign each value to\n\
    \    // the temp_gpa variable\n    for _, temp_gpa := range grades {\n       \
    \ // If the grade is less than 0.7 but greater than 0.0, we will add\n       \
    \ // 0.1 to the grade to handle rounding errors.\n        if temp_gpa >= 0.0 &&\
    \ temp_gpa < 0.7 {\n            temp_gpa += 0.1\n        }\n        // We will\
    \ use the int() function to convert the float grade to an\n        // integer.\
    \ Next, we will divide the grade by 0.1 and convert the\n        // result back\
    \ to a float. This will allow us to use only the\n        // integer portion of\
    \ the grade.\n        temp_gpa = float64(int(temp_gpa/0.1))*0.1\n        // To\
    \ handle non-integer grades (such as 1.9999), we will add 0.1 if\n        // the\
    \ grade is greater than 3.4 and less than 4.0. This will ensure\n        // that\
    \ the grade is rounded up to the next grade.\n        if temp_gpa >=\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1d752wh_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return []string{}\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075288
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tvar letter_grades []string\n\tfor _, grade := range\
    \ grades {\n\t\tif grade >= 4.0 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"A+\")\n\t\t} else if grade >= 3.7 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"A\")\n\t\t} else if grade >= 3.3 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"A-\")\n\t\t} else if grade >= 3.0 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"B+\")\n\t\t} else if grade >= 2.7 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"B\")\n\t\t} else if grade >= 2.3 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"B-\")\n\t\t} else if grade >= 2.0 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"C+\")\n\t\t} else if grade >= 1.7 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"C\")\n\t\t} else if grade >= 1.3 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"C-\")\n\t\t} else if grade >= 1.0 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"D+\")\n\t\t} else if grade >= 0.7 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"D\")\n\t\t} else if grade >= 0.0 {\n\t\t\tletter_grades = append(letter_grades,\
    \ \"D-\")\n\t\t} else {\n\t\t\tletter_grades = append(letter_grades, \"E\")\n\t\
    \t}\n\t}\n\treturn letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpq6zejj8n_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpq6zejj8n_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpq6zejj8n_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpq6zejj8n_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075288
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n  var letter_grades []string\n  for _, grade := range\
    \ grades {\n    if grade >= 4.0 {\n      letter_grades = append(letter_grades,\
    \ \"A+\")\n    } else if grade >= 3.7 {\n      letter_grades = append(letter_grades,\
    \ \"A\")\n    } else if grade >= 3.3 {\n      letter_grades = append(letter_grades,\
    \ \"A-\")\n    } else if grade >= 3.0 {\n      letter_grades = append(letter_grades,\
    \ \"B+\")\n    } else if grade >= 2.7 {\n      letter_grades = append(letter_grades,\
    \ \"B\")\n    } else if grade >= 2.3 {\n      letter_grades = append(letter_grades,\
    \ \"B-\")\n    } else if grade >= 2.0 {\n      letter_grades = append(letter_grades,\
    \ \"C+\")\n    } else if grade >= 1.7 {\n      letter_grades = append(letter_grades,\
    \ \"C\")\n    } else if grade >= 1.3 {\n      letter_grades = append(letter_grades,\
    \ \"C-\")\n    } else if grade >= 1.0 {\n      letter_grades = append(letter_grades,\
    \ \"D+\")\n    } else if grade >= 0.7 {\n      letter_grades = append(letter_grades,\
    \ \"D\")\n    } else if grade >= 0.0 {\n      letter_grades = append(letter_grades,\
    \ \"D-\")\n    } else {\n      letter_grades = append(letter_grades, \"E\")\n\
    \    }\n  }\n  return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7qmg_p86_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp7qmg_p86_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp7qmg_p86_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp7qmg_p86_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppudw2u26_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmppudw2u26_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmppudw2u26_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmppudw2u26_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmppudw2u26_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmppudw2u26_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var results []string\n    for _, grade := range grades\
    \ {\n        if grade == 4.0 {\n            results = append(results, \"A+\")\n\
    \        } else if grade > 3.7 {\n            results = append(results, \"A\"\
    )\n        } else if grade > 3.3 {\n            results = append(results, \"A-\"\
    )\n        } else if grade > 3.0 {\n            results = append(results, \"B+\"\
    )\n        } else if grade > 2.7 {\n            results = append(results, \"B\"\
    )\n        } else if grade > 2.3 {\n            results = append(results, \"B-\"\
    )\n        } else if grade > 2.0 {\n            results = append(results, \"C+\"\
    )\n        } else if grade > 1.7 {\n            results = append(results, \"C\"\
    )\n        } else if grade > 1.3 {\n            results = append(results, \"C-\"\
    )\n        } else if grade > 1.0 {\n            results = append(results, \"D+\"\
    )\n        } else if grade > 0.7 {\n            results = append(results, \"D\"\
    )\n        } else if grade > 0.0 {\n            results = append(results, \"D-\"\
    )\n        } else {\n            results = append(results, \"E\")\n        }\n\
    \    }\n    return results\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075289
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tvar newGrades []string\n\tfor _, grade := range grades\
    \ {\n\t\tif grade == 4.0 {\n\t\t\tnewGrades = append(newGrades, \"A+\")\n\t\t\
    } else if grade > 3.7 {\n\t\t\tnewGrades = append(newGrades, \"A\")\n\t\t} else\
    \ if grade > 3.3 {\n\t\t\tnewGrades = append(newGrades, \"A-\")\n\t\t} else if\
    \ grade > 3.0 {\n\t\t\tnewGrades = append(newGrades, \"B+\")\n\t\t} else if grade\
    \ > 2.7 {\n\t\t\tnewGrades = append(newGrades, \"B\")\n\t\t} else if grade > 2.3\
    \ {\n\t\t\tnewGrades = append(newGrades, \"B-\")\n\t\t} else if grade > 2.0 {\n\
    \t\t\tnewGrades = append(newGrades, \"C+\")\n\t\t} else if grade > 1.7 {\n\t\t\
    \tnewGrades = append(newGrades, \"C\")\n\t\t} else if grade > 1.3 {\n\t\t\tnewGrades\
    \ = append(newGrades, \"C-\")\n\t\t} else if grade > 1.0 {\n\t\t\tnewGrades =\
    \ append(newGrades, \"D+\")\n\t\t} else if grade > 0.7 {\n\t\t\tnewGrades = append(newGrades,\
    \ \"D\")\n\t\t} else if grade > 0.0 {\n\t\t\tnewGrades = append(newGrades, \"\
    D-\")\n\t\t} else {\n\t\t\tnewGrades = append(newGrades, \"E\")\n\t\t}\n\t}\n\t\
    return newGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    res := make([]string,\
    \ len(grades))\n    for k, v := range grades {\n        switch {\n        case\
    \ v > 4.0:\n            res[k] = \"A+\"\n        case v > 3.7:\n            res[k]\
    \ = \"A\"\n        case v > 3.3:\n            res[k] = \"A-\"\n        case v\
    \ > 3.0:\n            res[k] = \"B+\"\n        case v > 2.7:\n            res[k]\
    \ = \"B\"\n        case v > 2.3:\n            res[k] = \"B-\"\n        case v\
    \ > 2.0:\n            res[k] = \"C+\"\n        case v > 1.7:\n            res[k]\
    \ = \"C\"\n        case v > 1.3:\n            res[k] = \"C-\"\n        case v\
    \ > 1.0:\n            res[k] = \"D+\"\n        case v > 0.7:\n            res[k]\
    \ = \"D\"\n        case v > 0.0:\n            res[k] = \"D-\"\n        default:\n\
    \            res[k] = \"E\"\n        }\n    }\n    return res\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpr34z6lty_test.go:84: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade == 4.0 {\n            letterGrades = append(letterGrades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppk1iyiql_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmppk1iyiql_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmppk1iyiql_test.go:82:\
    \ expected '[E D-]', got '[E D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grade_scale := []float64{4.0, 3.7, 3.3, 3.0, 2.7,\
    \ 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0}\n    letters := []string{\"A+\", \"A\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    E\"}\n    letter_grades := []string{}\n    for _,g := range grades {\n       \
    \ i := 0\n        for ; i < len(grade_scale) && g < grade_scale[i]; i++ {\n  \
    \      }\n        letter_grades = append(letter_grades, letters[i])\n    }\n \
    \   return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpe48nufxb_test.go:61: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpe48nufxb_test.go:61: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpe48nufxb_test.go:61: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpe48nufxb_test.go:61: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var f_grades []string\n    for _, score := range\
    \ grades {\n        if score >= 4.0 {\n            f_grades = append(f_grades,\
    \ \"A+\")\n        } else if score >= 3.7 {\n            f_grades = append(f_grades,\
    \ \"A\")\n        } else if score >= 3.3 {\n            f_grades = append(f_grades,\
    \ \"A-\")\n        } else if score >= 3.0 {\n            f_grades = append(f_grades,\
    \ \"B+\")\n        } else if score >= 2.7 {\n            f_grades = append(f_grades,\
    \ \"B\")\n        } else if score >= 2.3 {\n            f_grades = append(f_grades,\
    \ \"B-\")\n        } else if score >= 2.0 {\n            f_grades = append(f_grades,\
    \ \"C+\")\n        } else if score >= 1.7 {\n            f_grades = append(f_grades,\
    \ \"C\")\n        } else if score >= 1.3 {\n            f_grades = append(f_grades,\
    \ \"C-\")\n        } else if score >= 1.0 {\n            f_grades = append(f_grades,\
    \ \"D+\")\n        } else if score >= 0.7 {\n            f_grades = append(f_grades,\
    \ \"D\")\n        } else if score >= 0.0 {\n            f_grades = append(f_grades,\
    \ \"D-\")\n        } else {\n            f_grades = append(f_grades, \"E\")\n\
    \        }\n    }\n    return f_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpc0uk65ky_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpc0uk65ky_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpc0uk65ky_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpc0uk65ky_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // your code here\n    var letterGrades []string\n\
    \    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpjsaqdic9_test.go:54: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpjsaqdic9_test.go:54:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpjsaqdic9_test.go:54: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpjsaqdic9_test.go:54:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpjsaqdic9_test.go:54: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpjsaqdic9_test.go:54:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // loop through each grade\n    // convert each grade\
    \ to a letter grade according to the grading system\n    // return the array of\
    \ letter grades\n    var letter_grades []string\n    for _, grade := range grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_ww0qac__test.go:85: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp_ww0qac__test.go:85: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_ww0qac__test.go:85: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp_ww0qac__test.go:85: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075046
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, value :=\
    \ range grades {\n        if value == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if value > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if value > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if value > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if value > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if value > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if value > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if value > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if value > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if value > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if value > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if value > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var students_grades []string\n    for _, grade :=\
    \ range grades {\n        if grade >= 4.0 {\n            students_grades = append(students_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            students_grades = append(students_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            students_grades = append(students_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            students_grades = append(students_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            students_grades = append(students_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            students_grades = append(students_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            students_grades = append(students_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            students_grades = append(students_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            students_grades = append(students_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            students_grades = append(students_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            students_grades = append(students_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            students_grades = append(students_grades,\
    \ \"D-\")\n        } else {\n            students_grades = append(students_grades,\
    \ \"E\")\n        }\n    }\n    return students_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp94qjivg3_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp94qjivg3_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp94qjivg3_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp94qjivg3_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    for i,\
    \ num := range grades {\n        letter := \"\"\n        if num >= 4.0 {\n   \
    \         letter = \"A+\"\n        } else if num >= 3.7 {\n            letter\
    \ = \"A\"\n        } else if num >= 3.3 {\n            letter = \"A-\"\n     \
    \   } else if num >= 3.0 {\n            letter = \"B+\"\n        } else if num\
    \ >= 2.7 {\n            letter = \"B\"\n        } else if num >= 2.3 {\n     \
    \       letter = \"B-\"\n        } else if num >= 2.0 {\n            letter =\
    \ \"C+\"\n        } else if num >= 1.7 {\n            letter = \"C\"\n       \
    \ } else if num >= 1.3 {\n            letter = \"C-\"\n        } else if num >=\
    \ 1.0 {\n            letter = \"D+\"\n        } else if num >= 0.7 {\n       \
    \     letter = \"D\"\n        } else if num >= 0.0 {\n            letter = \"\
    D-\"\n        } else {\n            letter = \"E\"\n        }\n        result[i]\
    \ = letter\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp01sng3n7_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp01sng3n7_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp01sng3n7_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp01sng3n7_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Declare a variable to store results (a slice of\
    \ strings)\n    var letter_grades []string\n\n    // Create a map that stores\
    \ grade points\n    grade_points := map[float64]string{\n        4.0: \"A+\",\n\
    \        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7:\
    \ \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n  \
    \      1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"\
    D-\",\n    }\n\n    // Iterate over each numeric grade and append the letter grade\n\
    \    // to the list of results\n    for _, grade := range grades {\n        //\
    \ Reset the letter grade to an empty string\n        letter_grade := \"\"\n\n\
    \        // Iterate over each possible grade point in the map\n        for grade_point,\
    \ letter := range grade_points {\n            // Find the grade point that the\
    \ current numeric grade is greater than\n            if grade >= grade_point {\n\
    \                // Then set the letter grade to that letter grade\n         \
    \       letter_grade = letter\n                break\n            }\n        }\n\
    \n        // No letter grade was found, so set the letter grade to E\n       \
    \ if letter_grade == \"\" {\n            letter_grade = \"E\"\n        }\n\n \
    \       // Append the letter grade to the list of results\n        letter_grades\
    \ = append(letter_grades, letter_grade)\n    }\n\n    // Return the list of results\n\
    \    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmply4urk_8_test.go:97: expected '[A+ B C- C A-]', got '[C+\
    \ D C- C B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n \
    \       tmply4urk_8_test.go:97: expected '[D+]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmply4urk_8_test.go:97: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmply4urk_8_test.go:97:\
    \ expected '[D D- C- B B+]', got '[D+ D- D+ B- A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmply4urk_8_test.go:97: expected '[E D-]', got '[D- D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var res []string\n    for _, g := range grades {\n\
    \        switch {\n        case g >= 4.0:\n            res = append(res, \"A+\"\
    )\n        case g >= 3.7:\n            res = append(res, \"A\")\n        case\
    \ g >= 3.3:\n            res = append(res, \"A-\")\n        case g >= 3.0:\n \
    \           res = append(res, \"B+\")\n        case g >= 2.7:\n            res\
    \ = append(res, \"B\")\n        case g >= 2.3:\n            res = append(res,\
    \ \"B-\")\n        case g >= 2.0:\n            res = append(res, \"C+\")\n   \
    \     case g >= 1.7:\n            res = append(res, \"C\")\n        case g >=\
    \ 1.3:\n            res = append(res, \"C-\")\n        case g >= 1.0:\n      \
    \      res = append(res, \"D+\")\n        case g >= 0.7:\n            res = append(res,\
    \ \"D\")\n        case g >= 0.0:\n            res = append(res, \"D-\")\n    \
    \    default:\n            res = append(res, \"E\")\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpv0s5ys_c_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpv0s5ys_c_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpv0s5ys_c_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpv0s5ys_c_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    letter_grades = append(letter_grades,\
    \ \"E\")\n    letter_grades = append(letter_grades, \"D-\")\n    letter_grades\
    \ = append(letter_grades, \"D\")\n    letter_grades = append(letter_grades, \"\
    D+\")\n    letter_grades = append(letter_grades, \"C-\")\n    letter_grades =\
    \ append(letter_grades, \"C\")\n    letter_grades = append(letter_grades, \"C+\"\
    )\n    letter_grades = append(letter_grades, \"B-\")\n    letter_grades = append(letter_grades,\
    \ \"B\")\n    letter_grades = append(letter_grades, \"B+\")\n    letter_grades\
    \ = append(letter_grades, \"A-\")\n    letter_grades = append(letter_grades, \"\
    A\")\n    letter_grades = append(letter_grades, \"A+\")\n    var output []string\n\
    \    for _, grade := range grades {\n        if grade >= 4.0 {\n            output\
    \ = append(output, letter_grades[12])\n        } else if grade >= 3.7 {\n    \
    \        output = append(output, letter_grades[11])\n        } else if grade >=\
    \ 3.3 {\n            output = append(output, letter_grades[10])\n        } else\
    \ if grade >= 3.0 {\n            output = append(output, letter_grades[9])\n \
    \       } else if grade >= 2.7 {\n            output = append(output, letter_grades[8])\n\
    \        } else if grade >= 2.3 {\n            output = append(output, letter_grades[7])\n\
    \        } else if grade >= 2.0 {\n            output = append(output, letter_grades[6])\n\
    \        } else if grade >= 1.7 {\n            output = append(output, letter_grades[5])\n\
    \        } else if grade >= 1.3 {\n            output = append(output, letter_grades[4])\n\
    \        } else if grade >= 1.0 {\n            output = append(output, letter_grades[3])\n\
    \        } else if grade >= 0.7 {\n            output = append(output, letter_grades[2])\n\
    \        } else if grade >= 0.0 {\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvb84gp9q_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075288
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Convert numerical grade to letter grade\n    var\
    \ letterGrade string\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        switch {\n       \
    \ case grades[i] == 4.0:\n            letterGrade = \"A+\"\n        case grades[i]\
    \ > 3.7:\n            letterGrade = \"A\"\n        case grades[i] > 3.3:\n   \
    \         letterGrade = \"A-\"\n        case grades[i] > 3.0:\n            letterGrade\
    \ = \"B+\"\n        case grades[i] > 2.7:\n            letterGrade = \"B\"\n \
    \       case grades[i] > 2.3:\n            letterGrade = \"B-\"\n        case\
    \ grades[i] > 2.0:\n            letterGrade = \"C+\"\n        case grades[i] >\
    \ 1.7:\n            letterGrade = \"C\"\n        case grades[i] > 1.3:\n     \
    \       letterGrade = \"C-\"\n        case grades[i] > 1.0:\n            letterGrade\
    \ = \"D+\"\n        case grades[i] > 0.7:\n            letterGrade = \"D\"\n \
    \       case grades[i] >= 0.0:\n            letterGrade = \"D-\"\n        default:\n\
    \            letterGrade = \"E\"\n        }\n        letterGrades[i] = letterGrade\n\
    \    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpkmy8jfuv_test.go:87: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpkmy8jfuv_test.go:87:\
    \ expected '[E D-]', got '[D- D-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Insert your code here\n    fmt.Printf(\"\\n\"\
    )\n    // return []string\n    return []string{\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"}\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\n--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpis10oanx_test.go:55:\
    \ expected '[D+]', got '[A+ B C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpis10oanx_test.go:55: expected '[D-]', got '[A+ B C- C A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpis10oanx_test.go:55:\
    \ expected '[E]', got '[A+ B C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpis10oanx_test.go:55: expected '[D D- C- B B+]', got '[A+\
    \ B C- C A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpis10oanx_test.go:55: expected '[E D-]', got '[A+ B C- C A-]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letters := []string{\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    numerical\
    \ := []float64{4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0}\n\
    \    result := []string{}\n    for _, grade := range grades {\n        for i,\
    \ num := range numerical {\n            if grade >= num {\n                result\
    \ = append(result, letters[i])\n                break\n            }\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprmbm8hyt_test.go:63: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmprmbm8hyt_test.go:63: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprmbm8hyt_test.go:63: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmprmbm8hyt_test.go:63: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade >= 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case grade >= 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case grade >= 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case grade >= 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case grade >= 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case grade >= 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case grade >= 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case grade >= 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case grade >= 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case grade >= 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case grade >= 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case grade > 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        default:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpwe13hyh6_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmpwe13hyh6_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpwe13hyh6_test.go:83:\
    \ expected '[E D-]', got '[E D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075289
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tvar result []string\n\t\n\tfor _, e := range grades\
    \ {\n\t\tif e >= 4.0 {\n\t\t\tresult = append(result, \"A+\")\n\t\t} else if e\
    \ > 3.7 {\n\t\t\tresult = append(result, \"A\")\n\t\t} else if e > 3.3 {\n\t\t\
    \tresult = append(result, \"A-\")\n\t\t} else if e > 3.0 {\n\t\t\tresult = append(result,\
    \ \"B+\")\n\t\t} else if e > 2.7 {\n\t\t\tresult = append(result, \"B\")\n\t\t\
    } else if e > 2.3 {\n\t\t\tresult = append(result, \"B-\")\n\t\t} else if e >\
    \ 2.0 {\n\t\t\tresult = append(result, \"C+\")\n\t\t} else if e > 1.7 {\n\t\t\t\
    result = append(result, \"C\")\n\t\t} else if e > 1.3 {\n\t\t\tresult = append(result,\
    \ \"C-\")\n\t\t} else if e > 1.0 {\n\t\t\tresult = append(result, \"D+\")\n\t\t\
    } else if e > 0.7 {\n\t\t\tresult = append(result, \"D\")\n\t\t} else if e > 0.0\
    \ {\n\t\t\tresult = append(result, \"D-\")\n\t\t} else {\n\t\t\tresult = append(result,\
    \ \"E\")\n\t\t}\n\t}\n\t\n\treturn result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075289
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var res []string\n    for _, val := range grades\
    \ {\n        if val == 4.0 {\n            res = append(res, \"A+\")\n        }\
    \ else if val > 3.7 {\n            res = append(res, \"A\")\n        } else if\
    \ val > 3.3 {\n            res = append(res, \"A-\")\n        } else if val >\
    \ 3.0 {\n            res = append(res, \"B+\")\n        } else if val > 2.7 {\n\
    \            res = append(res, \"B\")\n        } else if val > 2.3 {\n       \
    \     res = append(res, \"B-\")\n        } else if val > 2.0 {\n            res\
    \ = append(res, \"C+\")\n        } else if val > 1.7 {\n            res = append(res,\
    \ \"C\")\n        } else if val > 1.3 {\n            res = append(res, \"C-\"\
    )\n        } else if val > 1.0 {\n            res = append(res, \"D+\")\n    \
    \    } else if val > 0.7 {\n            res = append(res, \"D\")\n        } else\
    \ if val > 0.0 {\n            res = append(res, \"D-\")\n        } else {\n  \
    \          res = append(res, \"E\")\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_letters := []string{}\n    return grades_letters\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpk79jrtar_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpk79jrtar_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpk79jrtar_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpk79jrtar_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpk79jrtar_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpk79jrtar_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    //Your code here\n    return []string{}\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpxq2q9nj3_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpxq2q9nj3_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpxq2q9nj3_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpxq2q9nj3_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpxq2q9nj3_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpxq2q9nj3_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    num_to_letter := map[float64]string{\n        4.0:\
    \ \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n \
    \       2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7:\
    \ \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n  \
    \      0.0: \"D-\",\n        -1.0: \"E\",\n    }\n    var letter_grades []string\n\
    \    for _, g := range grades {\n        for num, letter := range num_to_letter\
    \ {\n            if g > num {\n                letter_grades = append(letter_grades,\
    \ letter)\n                break\n            }\n        }\n    }\n    return\
    \ letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpjfdbvegz_test.go:76: expected '[A+ B C- C A-]', got '[A-\
    \ B D D+ C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmpjfdbvegz_test.go:76: expected '[D D- C- B B+]', got '[D D- C- C+ D+]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpjfdbvegz_test.go:76:\
    \ expected '[E D-]', got '[E E]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, val := range grades\
    \ {\n        if val >= 4.0 {\n            result = append(result, \"A+\")\n  \
    \      } else if val >= 3.7 {\n            result = append(result, \"A\")\n  \
    \      } else if val >= 3.3 {\n            result = append(result, \"A-\")\n \
    \       } else if val >= 3.0 {\n            result = append(result, \"B+\")\n\
    \        } else if val >= 2.7 {\n            result = append(result, \"B\")\n\
    \        } else if val >= 2.3 {\n            result = append(result, \"B-\")\n\
    \        } else if val >= 2.0 {\n            result = append(result, \"C+\")\n\
    \        } else if val >= 1.7 {\n            result = append(result, \"C\")\n\
    \        } else if val >= 1.3 {\n            result = append(result, \"C-\")\n\
    \        } else if val >= 1.0 {\n            result = append(result, \"D+\")\n\
    \        } else if val >= 0.7 {\n            result = append(result, \"D\")\n\
    \        } else if val >= 0.0 {\n            result = append(result, \"D-\")\n\
    \        } else {\n            result = append(result, \"E\")\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpn6bwfq0m_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpn6bwfq0m_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpn6bwfq0m_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpn6bwfq0m_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tvar letter_grades []string\n\tfor _, grade := range\
    \ grades {\n\t\tswitch {\n\t\tcase grade >= 4.0:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"A+\")\n\t\tcase grade >= 3.7:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"A\")\n\t\tcase grade >= 3.3:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"A-\")\n\t\tcase grade >= 3.0:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"B+\")\n\t\tcase grade >= 2.7:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"B\")\n\t\tcase grade >= 2.3:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"B-\")\n\t\tcase grade >= 2.0:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"C+\")\n\t\tcase grade >= 1.7:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"C\")\n\t\tcase grade >= 1.3:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"C-\")\n\t\tcase grade >= 1.0:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"D+\")\n\t\tcase grade >= 0.7:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"D\")\n\t\tcase grade >= 0.0:\n\t\t\tletter_grades = append(letter_grades,\
    \ \"D-\")\n\t\tdefault:\n\t\t\tletter_grades = append(letter_grades, \"E\")\n\t\
    \t}\n\t}\n\treturn letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfdq34i6n_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfdq34i6n_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfdq34i6n_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfdq34i6n_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    var grade_char string\n\
    \    var grade float64\n    var grade_max float64\n    grade_max = 4.0\n    for\
    \ _, grade = range grades {\n        switch {\n        case grade == grade_max:\n\
    \            grade_char = \"A+\"\n        case grade > 3.7:\n            grade_char\
    \ = \"A\"\n        case grade > 3.3:\n            grade_char = \"A-\"\n      \
    \  case grade > 3.0:\n            grade_char = \"B+\"\n        case grade > 2.7:\n\
    \            grade_char = \"B\"\n        case grade > 2.3:\n            grade_char\
    \ = \"B-\"\n        case grade > 2.0:\n            grade_char = \"C+\"\n     \
    \   case grade > 1.7:\n            grade_char = \"C\"\n        case grade > 1.3:\n\
    \            grade_char = \"C-\"\n        case grade > 1.0:\n            grade_char\
    \ = \"D+\"\n        case grade > 0.7:\n            grade_char = \"D\"\n      \
    \  case grade > 0.0:\n            grade_char = \"D-\"\n        case grade == 0.0:\n\
    \            grade_char = \"E\"\n        }\n        letter_grades = append(letter_grades,\
    \ grade_char)\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        // fmt.Println(grade)\n        if grade == 4.0 {\n \
    \           letter_grades = append(letter_grades, \"A+\")\n        } else if grade\
    \ >= 3.7 {\n            letter_grades = append(letter_grades, \"A\")\n       \
    \ } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpruszcmgw_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpruszcmgw_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpruszcmgw_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpruszcmgw_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // YOUR CODE HERE\n    return []string{}\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmphfa3b01e_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmphfa3b01e_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmphfa3b01e_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphfa3b01e_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmphfa3b01e_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphfa3b01e_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppudw2u26_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmppudw2u26_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmppudw2u26_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmppudw2u26_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmppudw2u26_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmppudw2u26_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return []string{}\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075288
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade > 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case grade > 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case grade > 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case grade > 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case grade > 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case grade > 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case grade > 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case grade > 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case grade > 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case grade > 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case grade > 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case grade > 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        case grade == 0.0:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7hnat9b9_test.go:83: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    fmt.Println(grades)\n    var result []string\n  \
    \  for _, g := range grades {\n        switch {\n        case g >= 4.0:\n    \
    \        result = append(result, \"A+\")\n        case g >= 3.7:\n           \
    \ result = append(result, \"A\")\n        case g >= 3.3:\n            result =\
    \ append(result, \"A-\")\n        case g >= 3.0:\n            result = append(result,\
    \ \"B+\")\n        case g >= 2.7:\n            result = append(result, \"B\")\n\
    \        case g >= 2.3:\n            result = append(result, \"B-\")\n       \
    \ case g >= 2.0:\n            result = append(result, \"C+\")\n        case g\
    \ >= 1.7:\n            result = append(result, \"C\")\n        case g >= 1.3:\n\
    \            result = append(result, \"C-\")\n        case g >= 1.0:\n       \
    \     result = append(result, \"D+\")\n        case g >= 0.7:\n            result\
    \ = append(result, \"D\")\n        case g >= 0.0:\n            result = append(result,\
    \ \"D-\")\n        default:\n            result = append(result, \"E\")\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[4 3 1.7 2 3.5]\n[1.2]\n[0.5]\n[0]\n[1 0.3 1.5 2.8 3.3]\n[0 0.7]\n--- FAIL:\
    \ TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpbvs4_bq1_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpbvs4_bq1_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpbvs4_bq1_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpbvs4_bq1_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letterGrades := []string{}\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade == 4.0:\n            letterGrades\
    \ = append(letterGrades, \"A+\")\n        case grade >= 3.7:\n            letterGrades\
    \ = append(letterGrades, \"A\")\n        case grade >= 3.3:\n            letterGrades\
    \ = append(letterGrades, \"A-\")\n        case grade >= 3.0:\n            letterGrades\
    \ = append(letterGrades, \"B+\")\n        case grade >= 2.7:\n            letterGrades\
    \ = append(letterGrades, \"B\")\n        case grade >= 2.3:\n            letterGrades\
    \ = append(letterGrades, \"B-\")\n        case grade >= 2.0:\n            letterGrades\
    \ = append(letterGrades, \"C+\")\n        case grade >= 1.7:\n            letterGrades\
    \ = append(letterGrades, \"C\")\n        case grade >= 1.3:\n            letterGrades\
    \ = append(letterGrades, \"C-\")\n        case grade >= 1.0:\n            letterGrades\
    \ = append(letterGrades, \"D+\")\n        case grade >= 0.7:\n            letterGrades\
    \ = append(letterGrades, \"D\")\n        case grade >= 0.0:\n            letterGrades\
    \ = append(letterGrades, \"D-\")\n        case grade == 0.0:\n            letterGrades\
    \ = append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfyvygx5i_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfyvygx5i_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfyvygx5i_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfyvygx5i_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tvar letterGrades []string\n\tfor _, grade := range\
    \ grades {\n\t\tif grade == 4.0 {\n\t\t\tletterGrades = append(letterGrades, \"\
    A+\")\n\t\t} else if grade >= 3.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"A\")\n\t\t} else if grade >= 3.3 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"A-\")\n\t\t} else if grade >= 3.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"B+\")\n\t\t} else if grade >= 2.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"B\")\n\t\t} else if grade >= 2.3 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"B-\")\n\t\t} else if grade >= 2.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"C+\")\n\t\t} else if grade >= 1.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"C\")\n\t\t} else if grade >= 1.3 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"C-\")\n\t\t} else if grade >= 1.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"D+\")\n\t\t} else if grade >= 0.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"D\")\n\t\t} else if grade >= 0.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"D-\")\n\t\t} else {\n\t\t\tletterGrades = append(letterGrades, \"E\")\n\t\t\
    }\n\t}\n\treturn letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpy1ymaa2u_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpy1ymaa2u_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpy1ymaa2u_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpy1ymaa2u_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade >= 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case grade >= 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case grade >= 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case grade >= 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case grade >= 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case grade >= 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case grade >= 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case grade >= 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case grade >= 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case grade >= 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case grade >= 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case grade >= 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        default:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0rlm04av_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp0rlm04av_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp0rlm04av_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp0rlm04av_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tletterGrades := []string{}\n\tfor _, grade := range\
    \ grades {\n\t\tif grade >= 4.0 {\n\t\t\tletterGrades = append(letterGrades, \"\
    A+\")\n\t\t} else if grade >= 3.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"A\")\n\t\t} else if grade >= 3.3 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"A-\")\n\t\t} else if grade >= 3.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"B+\")\n\t\t} else if grade >= 2.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"B\")\n\t\t} else if grade >= 2.3 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"B-\")\n\t\t} else if grade >= 2.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"C+\")\n\t\t} else if grade >= 1.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"C\")\n\t\t} else if grade >= 1.3 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"C-\")\n\t\t} else if grade >= 1.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"D+\")\n\t\t} else if grade >= 0.7 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"D\")\n\t\t} else if grade >= 0.0 {\n\t\t\tletterGrades = append(letterGrades,\
    \ \"D-\")\n\t\t} else {\n\t\t\tletterGrades = append(letterGrades, \"E\")\n\t\t\
    }\n\t}\n\treturn letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0wnmgbne_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp0wnmgbne_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp0wnmgbne_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp0wnmgbne_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letters []string\n    for _, grade := range grades\
    \ {\n        switch {\n        case grade == 4.0:\n            letters = append(letters,\
    \ \"A+\")\n        case grade > 3.7:\n            letters = append(letters, \"\
    A\")\n        case grade > 3.3:\n            letters = append(letters, \"A-\"\
    )\n        case grade > 3.0:\n            letters = append(letters, \"B+\")\n\
    \        case grade > 2.7:\n            letters = append(letters, \"B\")\n   \
    \     case grade > 2.3:\n            letters = append(letters, \"B-\")\n     \
    \   case grade > 2.0:\n            letters = append(letters, \"C+\")\n       \
    \ case grade > 1.7:\n            letters = append(letters, \"C\")\n        case\
    \ grade > 1.3:\n            letters = append(letters, \"C-\")\n        case grade\
    \ > 1.0:\n            letters = append(letters, \"D+\")\n        case grade >\
    \ 0.7:\n            letters = append(letters, \"D\")\n        case grade > 0.0:\n\
    \            letters = append(letters, \"D-\")\n        case grade == 0.0:\n \
    \           letters = append(letters, \"E\")\n        }\n    }\n    return letters\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n\n    for _, grade :=\
    \ range grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp2e1xdvw5_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp2e1xdvw5_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp2e1xdvw5_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp2e1xdvw5_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n  letter_grades := []string{}\n  for _, g := range grades\
    \ {\n    switch {\n    case g >= 4.0:\n      letter_grades = append(letter_grades,\
    \ \"A+\")\n    case g >= 3.7:\n      letter_grades = append(letter_grades, \"\
    A\")\n    case g >= 3.3:\n      letter_grades = append(letter_grades, \"A-\")\n\
    \    case g >= 3.0:\n      letter_grades = append(letter_grades, \"B+\")\n   \
    \ case g >= 2.7:\n      letter_grades = append(letter_grades, \"B\")\n    case\
    \ g >= 2.3:\n      letter_grades = append(letter_grades, \"B-\")\n    case g >=\
    \ 2.0:\n      letter_grades = append(letter_grades, \"C+\")\n    case g >= 1.7:\n\
    \      letter_grades = append(letter_grades, \"C\")\n    case g >= 1.3:\n    \
    \  letter_grades = append(letter_grades, \"C-\")\n    case g >= 1.0:\n      letter_grades\
    \ = append(letter_grades, \"D+\")\n    case g >= 0.7:\n      letter_grades = append(letter_grades,\
    \ \"D\")\n    case g >= 0.0:\n      letter_grades = append(letter_grades, \"D-\"\
    )\n    default:\n      letter_grades = append(letter_grades, \"E\")\n    }\n \
    \ }\n  return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpetajmnth_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpetajmnth_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpetajmnth_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpetajmnth_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var answer []string\n    for _, v := range grades\
    \ {\n        if v == 4.0 {\n            answer = append(answer, \"A+\")\n    \
    \    } else if v >= 3.7 {\n            answer = append(answer, \"A\")\n      \
    \  } else if v >= 3.3 {\n            answer = append(answer, \"A-\")\n       \
    \ } else if v >= 3.0 {\n            answer = append(answer, \"B+\")\n        }\
    \ else if v >= 2.7 {\n            answer = append(answer, \"B\")\n        } else\
    \ if v >= 2.3 {\n            answer = append(answer, \"B-\")\n        } else if\
    \ v >= 2.0 {\n            answer = append(answer, \"C+\")\n        } else if v\
    \ >= 1.7 {\n            answer = append(answer, \"C\")\n        } else if v >=\
    \ 1.3 {\n            answer = append(answer, \"C-\")\n        } else if v >= 1.0\
    \ {\n            answer = append(answer, \"D+\")\n        } else if v >= 0.7 {\n\
    \            answer = append(answer, \"D\")\n        } else if v >= 0.0 {\n  \
    \          answer = append(answer, \"D-\")\n        } else {\n            answer\
    \ = append(answer, \"E\")\n        }\n    }\n    return answer\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmps9psmsyz_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmps9psmsyz_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmps9psmsyz_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmps9psmsyz_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // START: CODE HERE\n    var alphabets []string\n\
    \    for _, item := range grades {\n        if item == 4.0 {\n            alphabets\
    \ = append(alphabets, \"A+\")\n        } else if item > 3.7 {\n            alphabets\
    \ = append(alphabets, \"A\")\n        } else if item > 3.3 {\n            alphabets\
    \ = append(alphabets, \"A-\")\n        } else if item > 3.0 {\n            alphabets\
    \ = append(alphabets, \"B+\")\n        } else if item > 2.7 {\n            alphabets\
    \ = append(alphabets, \"B\")\n        } else if item > 2.3 {\n            alphabets\
    \ = append(alphabets, \"B-\")\n        } else if item > 2.0 {\n            alphabets\
    \ = append(alphabets, \"C+\")\n        } else if item > 1.7 {\n            alphabets\
    \ = append(alphabets, \"C\")\n        } else if item > 1.3 {\n            alphabets\
    \ = append(alphabets, \"C-\")\n        } else if item > 1.0 {\n            alphabets\
    \ = append(alphabets, \"D+\")\n        } else if item > 0.7 {\n            alphabets\
    \ = append(alphabets, \"D\")\n        } else if item > 0.0 {\n            alphabets\
    \ = append(alphabets, \"D-\")\n        } else {\n            alphabets = append(alphabets,\
    \ \"E\")\n        }\n    }\n    return alphabets\n    // END: CODE HERE\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letterGradeList := []string{}\n    for _, grade :=\
    \ range grades {\n        letterGrade := \"\"\n        switch {\n        case\
    \ grade >= 4.0:\n            letterGrade = \"A+\"\n        case grade >= 3.7:\n\
    \            letterGrade = \"A\"\n        case grade >= 3.3:\n            letterGrade\
    \ = \"A-\"\n        case grade >= 3.0:\n            letterGrade = \"B+\"\n   \
    \     case grade >= 2.7:\n            letterGrade = \"B\"\n        case grade\
    \ >= 2.3:\n            letterGrade = \"B-\"\n        case grade >= 2.0:\n    \
    \        letterGrade = \"C+\"\n        case grade >= 1.7:\n            letterGrade\
    \ = \"C\"\n        case grade >= 1.3:\n            letterGrade = \"C-\"\n    \
    \    case grade >= 1.0:\n            letterGrade = \"D+\"\n        case grade\
    \ >= 0.7:\n            letterGrade = \"D\"\n        case grade >= 0.0:\n     \
    \       letterGrade = \"D-\"\n        default:\n            letterGrade = \"E\"\
    \n        }\n        letterGradeList = append(letterGradeList, letterGrade)\n\
    \    }\n    return letterGradeList\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpy51n_hxj_test.go:85: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpy51n_hxj_test.go:85: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpy51n_hxj_test.go:85: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpy51n_hxj_test.go:85: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        letter_grade := \"\"\n        if grade >= 4.0 {\n  \
    \          letter_grade = \"A+\"\n        } else if grade >= 3.7 {\n         \
    \   letter_grade = \"A\"\n        } else if grade >= 3.3 {\n            letter_grade\
    \ = \"A-\"\n        } else if grade >= 3.0 {\n            letter_grade = \"B+\"\
    \n        } else if grade >= 2.7 {\n            letter_grade = \"B\"\n       \
    \ } else if grade >= 2.3 {\n            letter_grade = \"B-\"\n        } else\
    \ if grade >= 2.0 {\n            letter_grade = \"C+\"\n        } else if grade\
    \ >= 1.7 {\n            letter_grade = \"C\"\n        } else if grade >= 1.3 {\n\
    \            letter_grade = \"C-\"\n        } else if grade >= 1.0 {\n       \
    \     letter_grade = \"D+\"\n        } else if grade >= 0.7 {\n            letter_grade\
    \ = \"D\"\n        } else if grade >= 0.0 {\n            letter_grade = \"D-\"\
    \n        } else {\n            letter_grade = \"E\"\n        }\n        letter_grades\
    \ = append(letter_grades, letter_grade)\n    }\n    return letter_grades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprm_vv95j_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmprm_vv95j_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprm_vv95j_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmprm_vv95j_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here.\n    return []string{}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp9u0_9vb__test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp9u0_9vb__test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp9u0_9vb__test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp9u0_9vb__test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp9u0_9vb__test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp9u0_9vb__test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letters := []string{\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n    points\
    \ := []float64{4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0}\n\
    \    var results []string\n    for _,g := range grades {\n        for i,p := range\
    \ points {\n            if g >= p {\n                results = append(results,\
    \ letters[i])\n                break\n            }\n        }\n    }\n    return\
    \ results\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpd7xjrtlt_test.go:63: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpd7xjrtlt_test.go:63: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpd7xjrtlt_test.go:63: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpd7xjrtlt_test.go:63: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var ans []string\n    for _, grade := range grades\
    \ {\n        if grade == 4.0 {\n            ans = append(ans, \"A+\")\n      \
    \  } else if grade >= 3.7 {\n            ans = append(ans, \"A\")\n        } else\
    \ if grade >= 3.3 {\n            ans = append(ans, \"A-\")\n        } else if\
    \ grade >= 3.0 {\n            ans = append(ans, \"B+\")\n        } else if grade\
    \ >= 2.7 {\n            ans = append(ans, \"B\")\n        } else if grade >= 2.3\
    \ {\n            ans = append(ans, \"B-\")\n        } else if grade >= 2.0 {\n\
    \            ans = append(ans, \"C+\")\n        } else if grade >= 1.7 {\n   \
    \         ans = append(ans, \"C\")\n        } else if grade >= 1.3 {\n       \
    \     ans = append(ans, \"C-\")\n        } else if grade >= 1.0 {\n          \
    \  ans = append(ans, \"D+\")\n        } else if grade >= 0.7 {\n            ans\
    \ = append(ans, \"D\")\n        } else if grade >= 0.0 {\n            ans = append(ans,\
    \ \"D-\")\n        } else {\n            ans = append(ans, \"E\")\n        }\n\
    \    }\n    return ans\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprkn_2ilj_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmprkn_2ilj_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprkn_2ilj_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmprkn_2ilj_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, g := range\
    \ grades {\n        if g == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if g > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if g > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if g > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if g > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if g > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if g > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if g > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if g > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if g > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if g > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if g > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letters []string\n    for _, g := range grades\
    \ {\n        if g >= 4.0 {\n            letters = append(letters, \"A+\")\n  \
    \      } else if g >= 3.7 {\n            letters = append(letters, \"A\")\n  \
    \      } else if g >= 3.3 {\n            letters = append(letters, \"A-\")\n \
    \       } else if g >= 3.0 {\n            letters = append(letters, \"B+\")\n\
    \        } else if g >= 2.7 {\n            letters = append(letters, \"B\")\n\
    \        } else if g >= 2.3 {\n            letters = append(letters, \"B-\")\n\
    \        } else if g >= 2.0 {\n            letters = append(letters, \"C+\")\n\
    \        } else if g >= 1.7 {\n            letters = append(letters, \"C\")\n\
    \        } else if g >= 1.3 {\n            letters = append(letters, \"C-\")\n\
    \        } else if g >= 1.0 {\n            letters = append(letters, \"D+\")\n\
    \        } else if g >= 0.7 {\n            letters = append(letters, \"D\")\n\
    \        } else if g >= 0.0 {\n            letters = append(letters, \"D-\")\n\
    \        } else {\n            letters = append(letters, \"E\")\n        }\n \
    \   }\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpkxo98qt8_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpkxo98qt8_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpkxo98qt8_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpkxo98qt8_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tletter_grades := []string{}\n\tfor _, v := range grades\
    \ {\n\t\tif v >= 4.0 {\n\t\t\tletter_grades = append(letter_grades, \"A+\")\n\t\
    \t} else if v >= 3.7 {\n\t\t\tletter_grades = append(letter_grades, \"A\")\n\t\
    \t} else if v >= 3.3 {\n\t\t\tletter_grades = append(letter_grades, \"A-\")\n\t\
    \t} else if v >= 3.0 {\n\t\t\tletter_grades = append(letter_grades, \"B+\")\n\t\
    \t} else if v >= 2.7 {\n\t\t\tletter_grades = append(letter_grades, \"B\")\n\t\
    \t} else if v >= 2.3 {\n\t\t\tletter_grades = append(letter_grades, \"B-\")\n\t\
    \t} else if v >= 2.0 {\n\t\t\tletter_grades = append(letter_grades, \"C+\")\n\t\
    \t} else if v >= 1.7 {\n\t\t\tletter_grades = append(letter_grades, \"C\")\n\t\
    \t} else if v >= 1.3 {\n\t\t\tletter_grades = append(letter_grades, \"C-\")\n\t\
    \t} else if v >= 1.0 {\n\t\t\tletter_grades = append(letter_grades, \"D+\")\n\t\
    \t} else if v >= 0.7 {\n\t\t\tletter_grades = append(letter_grades, \"D\")\n\t\
    \t} else if v >= 0.0 {\n\t\t\tletter_grades = append(letter_grades, \"D-\")\n\t\
    \t} else {\n\t\t\tletter_grades = append(letter_grades, \"E\")\n\t\t}\n\t}\n\t\
    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n \
    \ candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_mo277n__test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp_mo277n__test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_mo277n__test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp_mo277n__test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n\n    for _, grade :=\
    \ range grades {\n        letter_grade := \"E\"\n        if grade > 4.0 {\n  \
    \          letter_grade = \"A+\"\n        } else if grade > 3.7 {\n          \
    \  letter_grade = \"A\"\n        } else if grade > 3.3 {\n            letter_grade\
    \ = \"A-\"\n        } else if grade > 3.0 {\n            letter_grade = \"B+\"\
    \n        } else if grade > 2.7 {\n            letter_grade = \"B\"\n        }\
    \ else if grade > 2.3 {\n            letter_grade = \"B-\"\n        } else if\
    \ grade > 2.0 {\n            letter_grade = \"C+\"\n        } else if grade >\
    \ 1.7 {\n            letter_grade = \"C\"\n        } else if grade > 1.3 {\n \
    \           letter_grade = \"C-\"\n        } else if grade > 1.0 {\n         \
    \   letter_grade = \"D+\"\n        } else if grade > 0.7 {\n            letter_grade\
    \ = \"D\"\n        } else if grade > 0.0 {\n            letter_grade = \"D-\"\n\
    \        } else if grade == 0.0 {\n            letter_grade = \"E\"\n        }\n\
    \        letter_grades = append(letter_grades, letter_grade)\n    }\n    return\
    \ letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpzpjbu8w3_test.go:85: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    //TODO: implement\n    var result []string\n    for\
    \ _, value := range grades {\n        if value == 4.0 {\n            result =\
    \ append(result, \"A+\")\n        } else if value > 3.7 {\n            result\
    \ = append(result, \"A\")\n        } else if value > 3.3 {\n            result\
    \ = append(result, \"A-\")\n        } else if value > 3.0 {\n            result\
    \ = append(result, \"B+\")\n        } else if value > 2.7 {\n            result\
    \ = append(result, \"B\")\n        } else if value > 2.3 {\n            result\
    \ = append(result, \"B-\")\n        } else if value > 2.0 {\n            result\
    \ = append(result, \"C+\")\n        } else if value > 1.7 {\n            result\
    \ = append(result, \"C\")\n        } else if value > 1.3 {\n            result\
    \ = append(result, \"C-\")\n        } else if value > 1.0 {\n            result\
    \ = append(result, \"D+\")\n        } else if value > 0.7 {\n            result\
    \ = append(result, \"D\")\n        } else if value > 0.0 {\n            result\
    \ = append(result, \"D-\")\n        } else {\n            result = append(result,\
    \ \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075293
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppudw2u26_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmppudw2u26_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmppudw2u26_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmppudw2u26_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmppudw2u26_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmppudw2u26_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075289
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    letter_grades = append(letter_grades,\
    \ \"A+\")\n    letter_grades = append(letter_grades, \"A\")\n    letter_grades\
    \ = append(letter_grades, \"A-\")\n    letter_grades = append(letter_grades, \"\
    B+\")\n    letter_grades = append(letter_grades, \"B\")\n    letter_grades = append(letter_grades,\
    \ \"B-\")\n    letter_grades = append(letter_grades, \"C+\")\n    letter_grades\
    \ = append(letter_grades, \"C\")\n    letter_grades = append(letter_grades, \"\
    C-\")\n    letter_grades = append(letter_grades, \"D+\")\n    letter_grades =\
    \ append(letter_grades, \"D\")\n    letter_grades = append(letter_grades, \"D-\"\
    )\n    letter_grades = append(letter_grades, \"E\")\n    var output []string\n\
    \    var i int\n    for _, grade := range grades {\n        if grade >= 4.0 {\n\
    \            output = append(output, letter_grades[0])\n        } else if grade\
    \ >= 3.7 {\n            output = append(output, letter_grades[1])\n        } else\
    \ if grade >= 3.3 {\n            output = append(output, letter_grades[2])\n \
    \       } else if grade >= 3.0 {\n            output = append(output, letter_grades[3])\n\
    \        } else if grade >= 2.7 {\n            output = append(output, letter_grades[4])\n\
    \        } else if grade >= 2.3 {\n            output = append(output, letter_grades[5])\n\
    \        } else if grade >= 2.0 {\n            output = append(output, letter_grades[6])\n\
    \        } else if grade >= 1.7 {\n            output = append(output, letter_grades[7])\n\
    \        } else if grade >= 1.3 {\n            output = append(output, letter_grades[8])\n\
    \        } else if grade >= 1.0 {\n            output = append(output, letter_grades[9])\n\
    \        } else if grade >= 0.7 {\n            output = append(output, letter_grades[10])\n\
    \        } else if grade >=\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqftnwcea_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075292
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade > 4.0 {\n            result = append(result, \"A+\")\n \
    \       } else if grade > 3.7 {\n            result = append(result, \"A\")\n\
    \        } else if grade > 3.3 {\n            result = append(result, \"A-\")\n\
    \        } else if grade > 3.0 {\n            result = append(result, \"B+\")\n\
    \        } else if grade > 2.7 {\n            result = append(result, \"B\")\n\
    \        } else if grade > 2.3 {\n            result = append(result, \"B-\")\n\
    \        } else if grade > 2.0 {\n            result = append(result, \"C+\")\n\
    \        } else if grade > 1.7 {\n            result = append(result, \"C\")\n\
    \        } else if grade > 1.3 {\n            result = append(result, \"C-\")\n\
    \        } else if grade > 1.0 {\n            result = append(result, \"D+\")\n\
    \        } else if grade > 0.7 {\n            result = append(result, \"D\")\n\
    \        } else if grade > 0.0 {\n            result = append(result, \"D-\")\n\
    \        } else {\n            result = append(result, \"E\")\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp6ax4xwyp_test.go:82: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075293
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0iyy4skw_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp0iyy4skw_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp0iyy4skw_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp0iyy4skw_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp0iyy4skw_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp0iyy4skw_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        letter_grade := \"\"\n        if grade == 4.0 {\n        \
    \    letter_grade = \"A+\"\n        } else if grade > 3.7 {\n            letter_grade\
    \ = \"A\"\n        } else if grade > 3.3 {\n            letter_grade = \"A-\"\n\
    \        } else if grade > 3.0 {\n            letter_grade = \"B+\"\n        }\
    \ else if grade > 2.7 {\n            letter_grade = \"B\"\n        } else if grade\
    \ > 2.3 {\n            letter_grade = \"B-\"\n        } else if grade > 2.0 {\n\
    \            letter_grade = \"C+\"\n        } else if grade > 1.7 {\n        \
    \    letter_grade = \"C\"\n        } else if grade > 1.3 {\n            letter_grade\
    \ = \"C-\"\n        } else if grade > 1.0 {\n            letter_grade = \"D+\"\
    \n        } else if grade > 0.7 {\n            letter_grade = \"D\"\n        }\
    \ else if grade > 0.0 {\n            letter_grade = \"D-\"\n        } else {\n\
    \            letter_grade = \"E\"\n        }\n        letter_grades = append(letter_grades,\
    \ letter_grade)\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, num := range\
    \ grades {\n        if num >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if num >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if num >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if num >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if num >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if num >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if num >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if num >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if num >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if num >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if num >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if num >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmptoo3i765_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmptoo3i765_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmptoo3i765_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmptoo3i765_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, g := range grades\
    \ {\n        if g >= 4.0 {\n            result = append(result, \"A+\")\n    \
    \    } else if g >= 3.7 {\n            result = append(result, \"A\")\n      \
    \  } else if g >= 3.3 {\n            result = append(result, \"A-\")\n       \
    \ } else if g >= 3.0 {\n            result = append(result, \"B+\")\n        }\
    \ else if g >= 2.7 {\n            result = append(result, \"B\")\n        } else\
    \ if g >= 2.3 {\n            result = append(result, \"B-\")\n        } else if\
    \ g >= 2.0 {\n            result = append(result, \"C+\")\n        } else if g\
    \ >= 1.7 {\n            result = append(result, \"C\")\n        } else if g >=\
    \ 1.3 {\n            result = append(result, \"C-\")\n        } else if g >= 1.0\
    \ {\n            result = append(result, \"D+\")\n        } else if g >= 0.7 {\n\
    \            result = append(result, \"D\")\n        } else if g >= 0.0 {\n  \
    \          result = append(result, \"D-\")\n        } else {\n            result\
    \ = append(result, \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0jtj2a0e_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp0jtj2a0e_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp0jtj2a0e_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp0jtj2a0e_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, g := range grades\
    \ {\n        result = append(result, grade_equation(g))\n    }\n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpujq1tf1v_test.go:33:33: undefined: grade_equation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075294
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    scores := []string{}\n    for _, grade := range grades\
    \ {\n        if grade == 4.0 {\n            scores = append(scores, \"A+\")\n\
    \        } else if grade > 3.7 {\n            scores = append(scores, \"A\")\n\
    \        } else if grade > 3.3 {\n            scores = append(scores, \"A-\")\n\
    \        } else if grade > 3.0 {\n            scores = append(scores, \"B+\")\n\
    \        } else if grade > 2.7 {\n            scores = append(scores, \"B\")\n\
    \        } else if grade > 2.3 {\n            scores = append(scores, \"B-\")\n\
    \        } else if grade > 2.0 {\n            scores = append(scores, \"C+\")\n\
    \        } else if grade > 1.7 {\n            scores = append(scores, \"C\")\n\
    \        } else if grade > 1.3 {\n            scores = append(scores, \"C-\")\n\
    \        } else if grade > 1.0 {\n            scores = append(scores, \"D+\")\n\
    \        } else if grade > 0.7 {\n            scores = append(scores, \"D\")\n\
    \        } else if grade > 0.0 {\n            scores = append(scores, \"D-\")\n\
    \        } else {\n            scores = append(scores, \"E\")\n        }\n   \
    \ }\n    return scores\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade >= 4.0:\n            letterGrades\
    \ = append(letterGrades, \"A+\")\n        case grade >= 3.7:\n            letterGrades\
    \ = append(letterGrades, \"A\")\n        case grade >= 3.3:\n            letterGrades\
    \ = append(letterGrades, \"A-\")\n        case grade >= 3.0:\n            letterGrades\
    \ = append(letterGrades, \"B+\")\n        case grade >= 2.7:\n            letterGrades\
    \ = append(letterGrades, \"B\")\n        case grade >= 2.3:\n            letterGrades\
    \ = append(letterGrades, \"B-\")\n        case grade >= 2.0:\n            letterGrades\
    \ = append(letterGrades, \"C+\")\n        case grade >= 1.7:\n            letterGrades\
    \ = append(letterGrades, \"C\")\n        case grade >= 1.3:\n            letterGrades\
    \ = append(letterGrades, \"C-\")\n        case grade >= 1.0:\n            letterGrades\
    \ = append(letterGrades, \"D+\")\n        case grade >= 0.7:\n            letterGrades\
    \ = append(letterGrades, \"D\")\n        case grade >= 0.0:\n            letterGrades\
    \ = append(letterGrades, \"D-\")\n        default:\n            letterGrades =\
    \ append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp1uo55h1a_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp1uo55h1a_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp1uo55h1a_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp1uo55h1a_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075284
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, v := range grades\
    \ {\n        switch {\n        case v == 4.0:\n            result = append(result,\
    \ \"A+\")\n        case v > 3.7:\n            result = append(result, \"A\")\n\
    \        case v > 3.3:\n            result = append(result, \"A-\")\n        case\
    \ v > 3.0:\n            result = append(result, \"B+\")\n        case v > 2.7:\n\
    \            result = append(result, \"B\")\n        case v > 2.3:\n         \
    \   result = append(result, \"B-\")\n        case v > 2.0:\n            result\
    \ = append(result, \"C+\")\n        case v > 1.7:\n            result = append(result,\
    \ \"C\")\n        case v > 1.3:\n            result = append(result, \"C-\")\n\
    \        case v > 1.0:\n            result = append(result, \"D+\")\n        case\
    \ v > 0.7:\n            result = append(result, \"D\")\n        case v > 0.0:\n\
    \            result = append(result, \"D-\")\n        case v == 0.0:\n       \
    \     result = append(result, \"E\")\n        }\n    }\n    return result\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, grade :=\
    \ range grades {\n        switch {\n        case grade >= 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case grade >= 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case grade >= 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case grade >= 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case grade >= 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case grade >= 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case grade >= 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case grade >= 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case grade >= 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case grade >= 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case grade >= 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case grade >= 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        default:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7cdazjd5_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp7cdazjd5_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp7cdazjd5_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp7cdazjd5_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // TODO: Implementation\n    return []string{}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpkzgws9gh_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpkzgws9gh_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpkzgws9gh_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpkzgws9gh_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpkzgws9gh_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpkzgws9gh_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // write the function body here\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_s7g1cht_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, x := range\
    \ grades {\n        var grade string\n        if x >= 4.0 {\n            grade\
    \ = \"A+\"\n        } else if x >= 3.7 {\n            grade = \"A\"\n        }\
    \ else if x >= 3.3 {\n            grade = \"A-\"\n        } else if x >= 3.0 {\n\
    \            grade = \"B+\"\n        } else if x >= 2.7 {\n            grade =\
    \ \"B\"\n        } else if x >= 2.3 {\n            grade = \"B-\"\n        } else\
    \ if x >= 2.0 {\n            grade = \"C+\"\n        } else if x >= 1.7 {\n  \
    \          grade = \"C\"\n        } else if x >= 1.3 {\n            grade = \"\
    C-\"\n        } else if x >= 1.0 {\n            grade = \"D+\"\n        } else\
    \ if x >= 0.7 {\n            grade = \"D\"\n        } else if x >= 0.0 {\n   \
    \         grade = \"D-\"\n        } else {\n            grade = \"E\"\n      \
    \  }\n        letterGrades = append(letterGrades, grade)\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpef2vmgl9_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpef2vmgl9_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpef2vmgl9_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpef2vmgl9_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    var l_grade string\n\
    \    for _, i := range grades {\n        if i == 4.0 {\n            l_grade =\
    \ \"A+\"\n        } else if i >= 3.7 {\n            l_grade = \"A\"\n        }\
    \ else if i >= 3.3 {\n            l_grade = \"A-\"\n        } else if i >= 3.0\
    \ {\n            l_grade = \"B+\"\n        } else if i >= 2.7 {\n            l_grade\
    \ = \"B\"\n        } else if i >= 2.3 {\n            l_grade = \"B-\"\n      \
    \  } else if i >= 2.0 {\n            l_grade = \"C+\"\n        } else if i >=\
    \ 1.7 {\n            l_grade = \"C\"\n        } else if i >= 1.3 {\n         \
    \   l_grade = \"C-\"\n        } else if i >= 1.0 {\n            l_grade = \"D+\"\
    \n        } else if i >= 0.7 {\n            l_grade = \"D\"\n        } else if\
    \ i >= 0.0 {\n            l_grade = \"D-\"\n        } else {\n            l_grade\
    \ = \"E\"\n        }\n        letter_grades = append(letter_grades, l_grade)\n\
    \    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpz8_r7e8v_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpz8_r7e8v_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpz8_r7e8v_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpz8_r7e8v_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n  // Write your code here\n  return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpev_1eczi_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpev_1eczi_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpev_1eczi_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpev_1eczi_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpev_1eczi_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpev_1eczi_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_length := len(grades)\n    var letter_grades\
    \ []string\n    for i := 0; i < grades_length; i++ {\n        if grades[i] >=\
    \ 4.0 {\n            letter_grades = append(letter_grades, \"A+\")\n        }\
    \ else if grades[i] >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grades[i] >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grades[i] >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grades[i] >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grades[i] >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grades[i] >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grades[i] >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grades[i] >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grades[i] >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grades[i] >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grades[i] >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpak_qmekw_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpak_qmekw_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpak_qmekw_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpak_qmekw_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // your code here\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpofnv5t60_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpofnv5t60_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpofnv5t60_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpofnv5t60_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpofnv5t60_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpofnv5t60_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, value := range\
    \ grades {\n        if value == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if value > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if value > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if value > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if value > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if value > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if value > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if value > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if value > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if value > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if value > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if value == 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tvar result []string\n\tfor _, grade := range grades\
    \ {\n\t\tswitch {\n\t\tcase grade == 4.0:\n\t\t\tresult = append(result, \"A+\"\
    )\n\t\tcase grade > 3.7:\n\t\t\tresult = append(result, \"A\")\n\t\tcase grade\
    \ > 3.3:\n\t\t\tresult = append(result, \"A-\")\n\t\tcase grade > 3.0:\n\t\t\t\
    result = append(result, \"B+\")\n\t\tcase grade > 2.7:\n\t\t\tresult = append(result,\
    \ \"B\")\n\t\tcase grade > 2.3:\n\t\t\tresult = append(result, \"B-\")\n\t\tcase\
    \ grade > 2.0:\n\t\t\tresult = append(result, \"C+\")\n\t\tcase grade > 1.7:\n\
    \t\t\tresult = append(result, \"C\")\n\t\tcase grade > 1.3:\n\t\t\tresult = append(result,\
    \ \"C-\")\n\t\tcase grade > 1.0:\n\t\t\tresult = append(result, \"D+\")\n\t\t\
    case grade > 0.7:\n\t\t\tresult = append(result, \"D\")\n\t\tcase grade > 0.0:\n\
    \t\t\tresult = append(result, \"D-\")\n\t\tcase grade == 0.0:\n\t\t\tresult =\
    \ append(result, \"E\")\n\t\t}\n\t}\n\treturn result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n\
    \        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n\
    \        } else if grade >= 3.3 {\n            result = append(result, \"A-\"\
    )\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\"\
    )\n        } else if grade >= 2.7 {\n            result = append(result, \"B\"\
    )\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\"\
    )\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\"\
    )\n        } else if grade >= 1.7 {\n            result = append(result, \"C\"\
    )\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\"\
    )\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\"\
    )\n        } else if grade >= 0.7 {\n            result = append(result, \"D\"\
    )\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\"\
    )\n        } else {\n            result = append(result, \"E\")\n        }\n \
    \   }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp6deq0h_v_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp6deq0h_v_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp6deq0h_v_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp6deq0h_v_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _,g := range\
    \ grades {\n        if g == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if g > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if g > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if g > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if g > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if g > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if g > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if g > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if g > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if g > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if g > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if g > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grade_str []string\n    for _, g := range grades\
    \ {\n        if g >= 4.0 {\n            grade_str = append(grade_str, \"A+\")\n\
    \        } else if g >= 3.7 {\n            grade_str = append(grade_str, \"A\"\
    )\n        } else if g >= 3.3 {\n            grade_str = append(grade_str, \"\
    A-\")\n        } else if g >= 3.0 {\n            grade_str = append(grade_str,\
    \ \"B+\")\n        } else if g >= 2.7 {\n            grade_str = append(grade_str,\
    \ \"B\")\n        } else if g >= 2.3 {\n            grade_str = append(grade_str,\
    \ \"B-\")\n        } else if g >= 2.0 {\n            grade_str = append(grade_str,\
    \ \"C+\")\n        } else if g >= 1.7 {\n            grade_str = append(grade_str,\
    \ \"C\")\n        } else if g >= 1.3 {\n            grade_str = append(grade_str,\
    \ \"C-\")\n        } else if g >= 1.0 {\n            grade_str = append(grade_str,\
    \ \"D+\")\n        } else if g >= 0.7 {\n            grade_str = append(grade_str,\
    \ \"D\")\n        } else if g >= 0.0 {\n            grade_str = append(grade_str,\
    \ \"D-\")\n        } else {\n            grade_str = append(grade_str, \"E\")\n\
    \        }\n    }\n    return grade_str\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpx6qb7w17_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpx6qb7w17_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpx6qb7w17_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpx6qb7w17_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var output []string\n    for _, i := range grades\
    \ {\n        if i >= 4.0 {\n            output = append(output, \"A+\")\n    \
    \    } else if i >= 3.7 {\n            output = append(output, \"A\")\n      \
    \  } else if i >= 3.3 {\n            output = append(output, \"A-\")\n       \
    \ } else if i >= 3.0 {\n            output = append(output, \"B+\")\n        }\
    \ else if i >= 2.7 {\n            output = append(output, \"B\")\n        } else\
    \ if i >= 2.3 {\n            output = append(output, \"B-\")\n        } else if\
    \ i >= 2.0 {\n            output = append(output, \"C+\")\n        } else if i\
    \ >= 1.7 {\n            output = append(output, \"C\")\n        } else if i >=\
    \ 1.3 {\n            output = append(output, \"C-\")\n        } else if i >= 1.0\
    \ {\n            output = append(output, \"D+\")\n        } else if i >= 0.7 {\n\
    \            output = append(output, \"D\")\n        } else if i >= 0.0 {\n  \
    \          output = append(output, \"D-\")\n        } else {\n            output\
    \ = append(output, \"E\")\n        }\n    }\n    return output\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpt5de8y36_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpt5de8y36_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpt5de8y36_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpt5de8y36_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075294
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tvar result []string\n\tfor _, v := range grades {\n\
    \t\tswitch {\n\t\tcase v == 4.0:\n\t\t\tresult = append(result, \"A+\")\n\t\t\
    case v > 3.7:\n\t\t\tresult = append(result, \"A\")\n\t\tcase v > 3.3:\n\t\t\t\
    result = append(result, \"A-\")\n\t\tcase v > 3.0:\n\t\t\tresult = append(result,\
    \ \"B+\")\n\t\tcase v > 2.7:\n\t\t\tresult = append(result, \"B\")\n\t\tcase v\
    \ > 2.3:\n\t\t\tresult = append(result, \"B-\")\n\t\tcase v > 2.0:\n\t\t\tresult\
    \ = append(result, \"C+\")\n\t\tcase v > 1.7:\n\t\t\tresult = append(result, \"\
    C\")\n\t\tcase v > 1.3:\n\t\t\tresult = append(result, \"C-\")\n\t\tcase v > 1.0:\n\
    \t\t\tresult = append(result, \"D+\")\n\t\tcase v > 0.7:\n\t\t\tresult = append(result,\
    \ \"D\")\n\t\tcase v > 0.0:\n\t\t\tresult = append(result, \"D-\")\n\t\tcase v\
    \ == 0.0:\n\t\t\tresult = append(result, \"E\")\n\t\t}\n\t}\n\treturn result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075294
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, value :=\
    \ range grades {\n        if value > 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if value > 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if value > 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if value > 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if value > 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if value > 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if value > 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if value > 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if value > 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if value > 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if value > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if value > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpo5s6oy3t_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpo5s6oy3t_test.go:82: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpo5s6oy3t_test.go:82: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpo5s6oy3t_test.go:82:\
    \ expected '[D D- C- B B+]', got '[D+ D C B+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpo5s6oy3t_test.go:82: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075295
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Your code here\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpgol2a95t_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpgol2a95t_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpgol2a95t_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpgol2a95t_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpgol2a95t_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpgol2a95t_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075296
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpjuvh6dml_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpjuvh6dml_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpjuvh6dml_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpjuvh6dml_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpjuvh6dml_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpjuvh6dml_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075296
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var results []string\n    for _, val := range grades\
    \ {\n        if val >= 4.0 {\n            results = append(results, \"A+\")\n\
    \        } else if val >= 3.7 {\n            results = append(results, \"A\")\n\
    \        } else if val >= 3.3 {\n            results = append(results, \"A-\"\
    )\n        } else if val >= 3.0 {\n            results = append(results, \"B+\"\
    )\n        } else if val >= 2.7 {\n            results = append(results, \"B\"\
    )\n        } else if val >= 2.3 {\n            results = append(results, \"B-\"\
    )\n        } else if val >= 2.0 {\n            results = append(results, \"C+\"\
    )\n        } else if val >= 1.7 {\n            results = append(results, \"C\"\
    )\n        } else if val >= 1.3 {\n            results = append(results, \"C-\"\
    )\n        } else if val >= 1.0 {\n            results = append(results, \"D+\"\
    )\n        } else if val >= 0.7 {\n            results = append(results, \"D\"\
    )\n        } else if val >= 0.0 {\n            results = append(results, \"D-\"\
    )\n        } else {\n            results = append(results, \"E\")\n        }\n\
    \    }\n    return results\n}\n\n//\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpv5hwi_d9_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpv5hwi_d9_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpv5hwi_d9_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpv5hwi_d9_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075296
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letter_grades := []string{}\n    for _, g := range\
    \ grades {\n        switch {\n        case g >= 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case g >= 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case g >= 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case g >= 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case g >= 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case g >= 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case g >= 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case g >= 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case g >= 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case g >= 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case g >= 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case g > 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        default:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp77v6bzpf_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmp77v6bzpf_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp77v6bzpf_test.go:83:\
    \ expected '[E D-]', got '[E D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075296
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write code here\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpei6csbyh_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075296
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var results []string\n    for _, v := range grades\
    \ {\n        if v == 4.0 {\n            results = append(results, \"A+\")\n  \
    \      } else if v > 3.7 {\n            results = append(results, \"A\")\n   \
    \     } else if v > 3.3 {\n            results = append(results, \"A-\")\n   \
    \     } else if v > 3.0 {\n            results = append(results, \"B+\")\n   \
    \     } else if v > 2.7 {\n            results = append(results, \"B\")\n    \
    \    } else if v > 2.3 {\n            results = append(results, \"B-\")\n    \
    \    } else if v > 2.0 {\n            results = append(results, \"C+\")\n    \
    \    } else if v > 1.7 {\n            results = append(results, \"C\")\n     \
    \   } else if v > 1.3 {\n            results = append(results, \"C-\")\n     \
    \   } else if v > 1.0 {\n            results = append(results, \"D+\")\n     \
    \   } else if v > 0.7 {\n            results = append(results, \"D\")\n      \
    \  } else if v > 0.0 {\n            results = append(results, \"D-\")\n      \
    \  } else {\n            results = append(results, \"E\")\n        }\n    }\n\
    \    return results\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var results []string\n    for _, g := range grades\
    \ {\n        switch {\n        case g == 4.0:\n            results = append(results,\
    \ \"A+\")\n        case g >= 3.7:\n            results = append(results, \"A\"\
    )\n        case g >= 3.3:\n            results = append(results, \"A-\")\n   \
    \     case g >= 3.0:\n            results = append(results, \"B+\")\n        case\
    \ g >= 2.7:\n            results = append(results, \"B\")\n        case g >= 2.3:\n\
    \            results = append(results, \"B-\")\n        case g >= 2.0:\n     \
    \       results = append(results, \"C+\")\n        case g >= 1.7:\n          \
    \  results = append(results, \"C\")\n        case g >= 1.3:\n            results\
    \ = append(results, \"C-\")\n        case g >= 1.0:\n            results = append(results,\
    \ \"D+\")\n        case g >= 0.7:\n            results = append(results, \"D\"\
    )\n        case g > 0.0:\n            results = append(results, \"D-\")\n    \
    \    case g == 0.0:\n            results = append(results, \"E\")\n        }\n\
    \    }\n    return results\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp4fck0wmf_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmp4fck0wmf_test.go:83: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp4fck0wmf_test.go:83:\
    \ expected '[E D-]', got '[E D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letters []string\n    for _, grade := range grades\
    \ {\n        if grade >= 4.0 {\n            letters = append(letters, \"A+\")\n\
    \        } else if grade >= 3.7 {\n            letters = append(letters, \"A\"\
    )\n        } else if grade >= 3.3 {\n            letters = append(letters, \"\
    A-\")\n        } else if grade >= 3.0 {\n            letters = append(letters,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letters = append(letters,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letters = append(letters,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letters = append(letters,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letters = append(letters,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letters = append(letters,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letters = append(letters,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letters = append(letters,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letters = append(letters,\
    \ \"D-\")\n        } else {\n            letters = append(letters, \"E\")\n  \
    \      }\n    }\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpnzbtmt8e_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpnzbtmt8e_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpnzbtmt8e_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpnzbtmt8e_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var output []string\n    var gradeMap = map[float64]string{\n\
    \        4.0: \"A+\",\n        3.7: \"A\",\n        3.3: \"A-\",\n        3.0:\
    \ \"B+\",\n        2.7: \"B\",\n        2.3: \"B-\",\n        2.0: \"C+\",\n \
    \       1.7: \"C\",\n        1.3: \"C-\",\n        1.0: \"D+\",\n        0.7:\
    \ \"D\",\n        0.0: \"D-\",\n        -1.0: \"E\",\n    }\n    for _, val :=\
    \ range grades {\n        var grade string\n        for gpa, letter := range gradeMap\
    \ {\n            if val >= gpa {\n                grade = letter\n           \
    \     break\n            }\n        }\n        output = append(output, grade)\n\
    \    }\n    return output\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp49pbh9qu_test.go:78: expected '[A+ B C- C A-]', got '[B-\
    \ D C C+ D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp49pbh9qu_test.go:78: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp49pbh9qu_test.go:78: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp49pbh9qu_test.go:78:\
    \ expected '[D D- C- B B+]', got '[D+ E C- C B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp49pbh9qu_test.go:78: expected '[E D-]', got '[D- D-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, value := range\
    \ grades {\n        if value == 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if value >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if value >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if value >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if value >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if value >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if value >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if value >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if value >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if value >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if value >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if value > 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppk_o4uzw_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmppk_o4uzw_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmppk_o4uzw_test.go:82:\
    \ expected '[E D-]', got '[E D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    // grade_a := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0}\n    grade_a := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0}\n    // grade_b := []string{\"\
    A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"\
    D\", \"D-\"}\n    grade_b := []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"\
    B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"}\n    len_a := len(grade_a)\n\
    \    for _, g := range grades {\n        i := 0\n        for ; i < len_a; i++\
    \ {\n            if g < grade_a[i] {\n                break\n            }\n \
    \       }\n        result = append(result, grade_b[i])\n    }\n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [12] with length 12 [recovered]\n\tpanic: runtime error: index\
    \ out of range [12] with length 12\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x514720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x514720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade(...)\n\t/tmp/tmpws0wo027_test.go:44\n\
    command-line-arguments_test.TestNumerical_Letter_Grade(0xc0001a0340?)\n\t/tmp/tmpws0wo027_test.go:56\
    \ +0x2018\ntesting.tRunner(0xc0001a0340, 0x52a060)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        switch {\n        case grade >= 4.0:\n            result = append(result,\
    \ \"A+\")\n        case grade >= 3.7:\n            result = append(result, \"\
    A\")\n        case grade >= 3.3:\n            result = append(result, \"A-\")\n\
    \        case grade >= 3.0:\n            result = append(result, \"B+\")\n   \
    \     case grade >= 2.7:\n            result = append(result, \"B\")\n       \
    \ case grade >= 2.3:\n            result = append(result, \"B-\")\n        case\
    \ grade >= 2.0:\n            result = append(result, \"C+\")\n        case grade\
    \ >= 1.7:\n            result = append(result, \"C\")\n        case grade >= 1.3:\n\
    \            result = append(result, \"C-\")\n        case grade >= 1.0:\n   \
    \         result = append(result, \"D+\")\n        case grade >= 0.7:\n      \
    \      result = append(result, \"D\")\n        case grade >= 0.0:\n          \
    \  result = append(result, \"D-\")\n        default:\n            result = append(result,\
    \ \"E\")\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp94r04ax4_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp94r04ax4_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp94r04ax4_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp94r04ax4_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075164
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string = []string{}\n    for\
    \ _, g := range grades {\n        letter_grades = append(letter_grades, numerical_letter_grade_helper(g))\n\
    \    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszacu47j_test.go:33:47: undefined: numerical_letter_grade_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here.\n    return []string{}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp9u0_9vb__test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp9u0_9vb__test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp9u0_9vb__test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp9u0_9vb__test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp9u0_9vb__test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp9u0_9vb__test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075286
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var str []string\n    for _, grade := range grades\
    \ {\n        var s string\n        if grade >= 4.0 {\n            s = \"A+\"\n\
    \        } else if grade >= 3.7 {\n            s = \"A\"\n        } else if grade\
    \ >= 3.3 {\n            s = \"A-\"\n        } else if grade >= 3.0 {\n       \
    \     s = \"B+\"\n        } else if grade >= 2.7 {\n            s = \"B\"\n  \
    \      } else if grade >= 2.3 {\n            s = \"B-\"\n        } else if grade\
    \ >= 2.0 {\n            s = \"C+\"\n        } else if grade >= 1.7 {\n       \
    \     s = \"C\"\n        } else if grade >= 1.3 {\n            s = \"C-\"\n  \
    \      } else if grade >= 1.0 {\n            s = \"D+\"\n        } else if grade\
    \ >= 0.7 {\n            s = \"D\"\n        } else if grade >= 0.0 {\n        \
    \    s = \"D-\"\n        } else {\n            s = \"E\"\n        }\n        str\
    \ = append(str, s)\n    }\n    return str\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpblcet6___test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpblcet6___test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpblcet6___test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpblcet6___test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        letter_grade := \"E\"\n        if grade >= 4.0 {\n       \
    \     letter_grade = \"A+\"\n        } else if grade >= 3.7 {\n            letter_grade\
    \ = \"A\"\n        } else if grade >= 3.3 {\n            letter_grade = \"A-\"\
    \n        } else if grade >= 3.0 {\n            letter_grade = \"B+\"\n      \
    \  } else if grade >= 2.7 {\n            letter_grade = \"B\"\n        } else\
    \ if grade >= 2.3 {\n            letter_grade = \"B-\"\n        } else if grade\
    \ >= 2.0 {\n            letter_grade = \"C+\"\n        } else if grade >= 1.7\
    \ {\n            letter_grade = \"C\"\n        } else if grade >= 1.3 {\n    \
    \        letter_grade = \"C-\"\n        } else if grade >= 1.0 {\n           \
    \ letter_grade = \"D+\"\n        } else if grade >= 0.7 {\n            letter_grade\
    \ = \"D\"\n        } else if grade >= 0.0 {\n            letter_grade = \"D-\"\
    \n        }\n        letter_grades = append(letter_grades, letter_grade)\n   \
    \ }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp5lj38_y6_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp5lj38_y6_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp5lj38_y6_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp5lj38_y6_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n\
    \        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n\
    \        } else if grade >= 3.3 {\n            result = append(result, \"A-\"\
    )\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\"\
    )\n        } else if grade >= 2.7 {\n            result = append(result, \"B\"\
    )\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\"\
    )\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\"\
    )\n        } else if grade >= 1.7 {\n            result = append(result, \"C\"\
    )\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\"\
    )\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\"\
    )\n        } else if grade >= 0.7 {\n            result = append(result, \"D\"\
    )\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\"\
    )\n        } else {\n            result = append(result, \"E\")\n        }\n \
    \   }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp6deq0h_v_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp6deq0h_v_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp6deq0h_v_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp6deq0h_v_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    /* Write your code here */\n    letters := []string{}\n\
    \    for _, g := range grades {\n        switch {\n        case g > 4.0:\n   \
    \         letters = append(letters, \"A+\")\n        case g > 3.7:\n         \
    \   letters = append(letters, \"A\")\n        case g > 3.3:\n            letters\
    \ = append(letters, \"A-\")\n        case g > 3.0:\n            letters = append(letters,\
    \ \"B+\")\n        case g > 2.7:\n            letters = append(letters, \"B\"\
    )\n        case g > 2.3:\n            letters = append(letters, \"B-\")\n    \
    \    case g > 2.0:\n            letters = append(letters, \"C+\")\n        case\
    \ g > 1.7:\n            letters = append(letters, \"C\")\n        case g > 1.3:\n\
    \            letters = append(letters, \"C-\")\n        case g > 1.0:\n      \
    \      letters = append(letters, \"D+\")\n        case g > 0.7:\n            letters\
    \ = append(letters, \"D\")\n        case g > 0.0:\n            letters = append(letters,\
    \ \"D-\")\n        default:\n            letters = append(letters, \"E\")\n  \
    \      }\n    }\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpvi5pyi_s_test.go:84: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075297
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, v := range\
    \ grades {\n        letter_grades = append(letter_grades, grade_equation(v))\n\
    \    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy0zlwrsq_test.go:33:47: undefined: grade_equation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075297
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, g := range\
    \ grades {\n        var l string\n        switch {\n        case g == 4.0:\n \
    \           l = \"A+\"\n        case g > 3.7:\n            l = \"A\"\n       \
    \ case g > 3.3:\n            l = \"A-\"\n        case g > 3.0:\n            l\
    \ = \"B+\"\n        case g > 2.7:\n            l = \"B\"\n        case g > 2.3:\n\
    \            l = \"B-\"\n        case g > 2.0:\n            l = \"C+\"\n     \
    \   case g > 1.7:\n            l = \"C\"\n        case g > 1.3:\n            l\
    \ = \"C-\"\n        case g > 1.0:\n            l = \"D+\"\n        case g > 0.7:\n\
    \            l = \"D\"\n        case g > 0.0:\n            l = \"D-\"\n      \
    \  default:\n            l = \"E\"\n        }\n        letterGrades = append(letterGrades,\
    \ l)\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return []string{}\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075288
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Fill this in.\n    return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmphwrm8ty5_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmphwrm8ty5_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmphwrm8ty5_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmphwrm8ty5_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmphwrm8ty5_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmphwrm8ty5_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n  // Your code here\n  return nil\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpw8a0bk9w_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpw8a0bk9w_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpw8a0bk9w_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpw8a0bk9w_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpw8a0bk9w_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpw8a0bk9w_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075297
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade == 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case grade > 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case grade > 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case grade > 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case grade > 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case grade > 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case grade > 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case grade > 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case grade > 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case grade > 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case grade > 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case grade > 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        case grade == 0.0:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075283
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, val := range\
    \ grades {\n        switch {\n        case val >= 4.0:\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        case val >= 3.7:\n            letter_grades\
    \ = append(letter_grades, \"A\")\n        case val >= 3.3:\n            letter_grades\
    \ = append(letter_grades, \"A-\")\n        case val >= 3.0:\n            letter_grades\
    \ = append(letter_grades, \"B+\")\n        case val >= 2.7:\n            letter_grades\
    \ = append(letter_grades, \"B\")\n        case val >= 2.3:\n            letter_grades\
    \ = append(letter_grades, \"B-\")\n        case val >= 2.0:\n            letter_grades\
    \ = append(letter_grades, \"C+\")\n        case val >= 1.7:\n            letter_grades\
    \ = append(letter_grades, \"C\")\n        case val >= 1.3:\n            letter_grades\
    \ = append(letter_grades, \"C-\")\n        case val >= 1.0:\n            letter_grades\
    \ = append(letter_grades, \"D+\")\n        case val >= 0.7:\n            letter_grades\
    \ = append(letter_grades, \"D\")\n        case val >= 0.0:\n            letter_grades\
    \ = append(letter_grades, \"D-\")\n        default:\n            letter_grades\
    \ = append(letter_grades, \"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpcbro8aww_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpcbro8aww_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpcbro8aww_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpcbro8aww_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, val := range grades\
    \ {\n        if val >= 4.0 {\n            result = append(result, \"A+\")\n  \
    \      } else if val >= 3.7 {\n            result = append(result, \"A\")\n  \
    \      } else if val >= 3.3 {\n            result = append(result, \"A-\")\n \
    \       } else if val >= 3.0 {\n            result = append(result, \"B+\")\n\
    \        } else if val >= 2.7 {\n            result = append(result, \"B\")\n\
    \        } else if val >= 2.3 {\n            result = append(result, \"B-\")\n\
    \        } else if val >= 2.0 {\n            result = append(result, \"C+\")\n\
    \        } else if val >= 1.7 {\n            result = append(result, \"C\")\n\
    \        } else if val >= 1.3 {\n            result = append(result, \"C-\")\n\
    \        } else if val >= 1.0 {\n            result = append(result, \"D+\")\n\
    \        } else if val >= 0.7 {\n            result = append(result, \"D\")\n\
    \        } else if val >= 0.0 {\n            result = append(result, \"D-\")\n\
    \        } else {\n            result = append(result, \"E\")\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpn6bwfq0m_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpn6bwfq0m_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpn6bwfq0m_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpn6bwfq0m_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075291
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var (\n        grade_list []string\n        grade\
    \ string\n    )\n    for _, g := range grades {\n        if g > 4.0 {\n      \
    \      grade = \"A+\"\n        } else if g > 3.7 {\n            grade = \"A\"\n\
    \        } else if g > 3.3 {\n            grade = \"A-\"\n        } else if g\
    \ > 3.0 {\n            grade = \"B+\"\n        } else if g > 2.7 {\n         \
    \   grade = \"B\"\n        } else if g > 2.3 {\n            grade = \"B-\"\n \
    \       } else if g > 2.0 {\n            grade = \"C+\"\n        } else if g >\
    \ 1.7 {\n            grade = \"C\"\n        } else if g > 1.3 {\n            grade\
    \ = \"C-\"\n        } else if g > 1.0 {\n            grade = \"D+\"\n        }\
    \ else if g > 0.7 {\n            grade = \"D\"\n        } else if g > 0.0 {\n\
    \            grade = \"D-\"\n        } else {\n            grade = \"E\"\n   \
    \     }\n        grade_list = append(grade_list, grade)\n    }\n    return grade_list\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp05ts8688_test.go:86: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075297
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    res := make([]string, len(grades))\n    for i, grade\
    \ := range grades {\n        if grade == 4.0 {\n            res[i] = \"A+\"\n\
    \        } else if grade > 3.7 {\n            res[i] = \"A\"\n        } else if\
    \ grade > 3.3 {\n            res[i] = \"A-\"\n        } else if grade > 3.0 {\n\
    \            res[i] = \"B+\"\n        } else if grade > 2.7 {\n            res[i]\
    \ = \"B\"\n        } else if grade > 2.3 {\n            res[i] = \"B-\"\n    \
    \    } else if grade > 2.0 {\n            res[i] = \"C+\"\n        } else if grade\
    \ > 1.7 {\n            res[i] = \"C\"\n        } else if grade > 1.3 {\n     \
    \       res[i] = \"C-\"\n        } else if grade > 1.0 {\n            res[i] =\
    \ \"D+\"\n        } else if grade > 0.7 {\n            res[i] = \"D\"\n      \
    \  } else if grade > 0.0 {\n            res[i] = \"D-\"\n        } else {\n  \
    \          res[i] = \"E\"\n        }\n    }\n    return res\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n\
    \        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n\
    \        } else if grade >= 3.3 {\n            result = append(result, \"A-\"\
    )\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\"\
    )\n        } else if grade >= 2.7 {\n            result = append(result, \"B\"\
    )\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\"\
    )\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\"\
    )\n        } else if grade >= 1.7 {\n            result = append(result, \"C\"\
    )\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\"\
    )\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\"\
    )\n        } else if grade >= 0.7 {\n            result = append(result, \"D\"\
    )\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\"\
    )\n        } else {\n            result = append(result, \"E\")\n        }\n \
    \   }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp6deq0h_v_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp6deq0h_v_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp6deq0h_v_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp6deq0h_v_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, g := range\
    \ grades {\n        letter_grades = append(letter_grades, grade_equation(g))\n\
    \    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wnv2i37_test.go:33:47: undefined: grade_equation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075297
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    res := make([]string, len(grades))\n    for i, value\
    \ := range grades {\n        if value == 4.0 {\n            res[i] = \"A+\"\n\
    \        } else if value >= 3.7 {\n            res[i] = \"A\"\n        } else\
    \ if value >= 3.3 {\n            res[i] = \"A-\"\n        } else if value >= 3.0\
    \ {\n            res[i] = \"B+\"\n        } else if value >= 2.7 {\n         \
    \   res[i] = \"B\"\n        } else if value >= 2.3 {\n            res[i] = \"\
    B-\"\n        } else if value >= 2.0 {\n            res[i] = \"C+\"\n        }\
    \ else if value >= 1.7 {\n            res[i] = \"C\"\n        } else if value\
    \ >= 1.3 {\n            res[i] = \"C-\"\n        } else if value >= 1.0 {\n  \
    \          res[i] = \"D+\"\n        } else if value >= 0.7 {\n            res[i]\
    \ = \"D\"\n        } else if value >= 0.0 {\n            res[i] = \"D-\"\n   \
    \     } else {\n            res[i] = \"E\"\n        }\n    }\n    return res\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprhaqpgj1_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmprhaqpgj1_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprhaqpgj1_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmprhaqpgj1_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075298
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grade_index := []float64{4.0, 3.7, 3.3, 3.0, 2.7,\
    \ 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0}\n    grade_label := []string{\"A+\", \"A\"\
    , \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"}\n    if len(grades) < 1 {\n        fmt.Println(\"Empty input\")\n   \
    \     return nil\n    }\n    result := make([]string, len(grades))\n    for i\
    \ := 0; i < len(grades); i++ {\n        if grades[i] < 0.0 {\n            fmt.Println(\"\
    Input grade less than 0\")\n            return nil\n        }\n        if grades[i]\
    \ == 0.0 {\n            result[i] = \"E\"\n            continue\n        }\n \
    \       for j := 0; j < len(grade_index); j++ {\n            if grades[i] >= grade_index[j]\
    \ {\n                result[i] = grade_label[j]\n                break\n     \
    \       }\n        }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7c92cg_1_test.go:75: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmp7c92cg_1_test.go:75: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp7c92cg_1_test.go:75:\
    \ expected '[E D-]', got '[E D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075298
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // WRITE YOUR CODE HERE.\n    var letter_grades []string\n\
    \    for _, grade := range grades {\n        if grade >= 4.0 {\n            letter_grades\
    \ = append(letter_grades, \"A+\")\n        } else if grade >= 3.7 {\n        \
    \    letter_grades = append(letter_grades, \"A\")\n        } else if grade >=\
    \ 3.3 {\n            letter_grades = append(letter_grades, \"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades = append(letter_grades, \"\
    B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp9dlryleb_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp9dlryleb_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp9dlryleb_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp9dlryleb_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075299
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    res := make([]string, len(grades))\n    for i, grade\
    \ := range grades {\n        if grade == 4.0 {\n            res[i] = \"A+\"\n\
    \        } else if grade >= 3.7 {\n            res[i] = \"A\"\n        } else\
    \ if grade >= 3.3 {\n            res[i] = \"A-\"\n        } else if grade >= 3.0\
    \ {\n            res[i] = \"B+\"\n        } else if grade >= 2.7 {\n         \
    \   res[i] = \"B\"\n        } else if grade >= 2.3 {\n            res[i] = \"\
    B-\"\n        } else if grade >= 2.0 {\n            res[i] = \"C+\"\n        }\
    \ else if grade >= 1.7 {\n            res[i] = \"C\"\n        } else if grade\
    \ >= 1.3 {\n            res[i] = \"C-\"\n        } else if grade >= 1.0 {\n  \
    \          res[i] = \"D+\"\n        } else if grade >= 0.7 {\n            res[i]\
    \ = \"D\"\n        } else if grade > 0.0 {\n            res[i] = \"D-\"\n    \
    \    } else {\n            res[i] = \"E\"\n        }\n    }\n    return res\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0rzfzdx2_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmp0rzfzdx2_test.go:82: expected '[D D- C- B B+]', got '[D+ D- C- B A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp0rzfzdx2_test.go:82:\
    \ expected '[E D-]', got '[E D]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075298
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade >= 4.0 {\n            result = append(result, \"A+\")\n\
    \        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n\
    \        } else if grade >= 3.3 {\n            result = append(result, \"A-\"\
    )\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\"\
    )\n        } else if grade >= 2.7 {\n            result = append(result, \"B\"\
    )\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\"\
    )\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\"\
    )\n        } else if grade >= 1.7 {\n            result = append(result, \"C\"\
    )\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\"\
    )\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\"\
    )\n        } else if grade >= 0.7 {\n            result = append(result, \"D\"\
    )\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\"\
    )\n        } else {\n            result = append(result, \"E\")\n        }\n \
    \   }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp6deq0h_v_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp6deq0h_v_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp6deq0h_v_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp6deq0h_v_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade == 4.0 {\n            result = append(result, \"A+\")\n\
    \        } else if grade >= 3.7 {\n            result = append(result, \"A\")\n\
    \        } else if grade >= 3.3 {\n            result = append(result, \"A-\"\
    )\n        } else if grade >= 3.0 {\n            result = append(result, \"B+\"\
    )\n        } else if grade >= 2.7 {\n            result = append(result, \"B\"\
    )\n        } else if grade >= 2.3 {\n            result = append(result, \"B-\"\
    )\n        } else if grade >= 2.0 {\n            result = append(result, \"C+\"\
    )\n        } else if grade >= 1.7 {\n            result = append(result, \"C\"\
    )\n        } else if grade >= 1.3 {\n            result = append(result, \"C-\"\
    )\n        } else if grade >= 1.0 {\n            result = append(result, \"D+\"\
    )\n        } else if grade >= 0.7 {\n            result = append(result, \"D\"\
    )\n        } else if grade >= 0.0 {\n            result = append(result, \"D-\"\
    )\n        } else {\n            result = append(result, \"E\")\n        }\n \
    \   }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprf74pern_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmprf74pern_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprf74pern_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmprf74pern_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075164
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    for i,\
    \ val := range grades {\n        if val >= 4.0 {\n            result[i] = \"A+\"\
    \n        } else if val >= 3.7 {\n            result[i] = \"A\"\n        } else\
    \ if val >= 3.3 {\n            result[i] = \"A-\"\n        } else if val >= 3.0\
    \ {\n            result[i] = \"B+\"\n        } else if val >= 2.7 {\n        \
    \    result[i] = \"B\"\n        } else if val >= 2.3 {\n            result[i]\
    \ = \"B-\"\n        } else if val >= 2.0 {\n            result[i] = \"C+\"\n \
    \       } else if val >= 1.7 {\n            result[i] = \"C\"\n        } else\
    \ if val >= 1.3 {\n            result[i] = \"C-\"\n        } else if val >= 1.0\
    \ {\n            result[i] = \"D+\"\n        } else if val >= 0.7 {\n        \
    \    result[i] = \"D\"\n        } else if val >= 0.0 {\n            result[i]\
    \ = \"D-\"\n        } else {\n            result[i] = \"E\"\n        }\n    }\n\
    \    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpezgkn3tn_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpezgkn3tn_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpezgkn3tn_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpezgkn3tn_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075298
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    output := make([]string, len(grades))\n    for i,\
    \ grade := range grades {\n        switch {\n        case grade >= 4.0:\n    \
    \        output[i] = \"A+\"\n        case grade >= 3.7:\n            output[i]\
    \ = \"A\"\n        case grade >= 3.3:\n            output[i] = \"A-\"\n      \
    \  case grade >= 3.0:\n            output[i] = \"B+\"\n        case grade >= 2.7:\n\
    \            output[i] = \"B\"\n        case grade >= 2.3:\n            output[i]\
    \ = \"B-\"\n        case grade >= 2.0:\n            output[i] = \"C+\"\n     \
    \   case grade >= 1.7:\n            output[i] = \"C\"\n        case grade >= 1.3:\n\
    \            output[i] = \"C-\"\n        case grade >= 1.0:\n            output[i]\
    \ = \"D+\"\n        case grade >= 0.7:\n            output[i] = \"D\"\n      \
    \  case grade >= 0.0:\n            output[i] = \"D-\"\n        default:\n    \
    \        output[i] = \"E\"\n        }\n    }\n    return output\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmph6l2xbcm_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmph6l2xbcm_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmph6l2xbcm_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmph6l2xbcm_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075298
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzd6m9vr_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075298
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tresult := make([]string, len(grades))\n\tfor i, grade\
    \ := range grades {\n\t\tif grade >= 4.0 {\n\t\t\tresult[i] = \"A+\"\n\t\t} else\
    \ if grade >= 3.7 {\n\t\t\tresult[i] = \"A\"\n\t\t} else if grade >= 3.3 {\n\t\
    \t\tresult[i] = \"A-\"\n\t\t} else if grade >= 3.0 {\n\t\t\tresult[i] = \"B+\"\
    \n\t\t} else if grade >= 2.7 {\n\t\t\tresult[i] = \"B\"\n\t\t} else if grade >=\
    \ 2.3 {\n\t\t\tresult[i] = \"B-\"\n\t\t} else if grade >= 2.0 {\n\t\t\tresult[i]\
    \ = \"C+\"\n\t\t} else if grade >= 1.7 {\n\t\t\tresult[i] = \"C\"\n\t\t} else\
    \ if grade >= 1.3 {\n\t\t\tresult[i] = \"C-\"\n\t\t} else if grade >= 1.0 {\n\t\
    \t\tresult[i] = \"D+\"\n\t\t} else if grade >= 0.7 {\n\t\t\tresult[i] = \"D\"\n\
    \t\t} else if grade >= 0.0 {\n\t\t\tresult[i] = \"D-\"\n\t\t} else {\n\t\t\tresult[i]\
    \ = \"E\"\n\t\t}\n\t}\n\treturn result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpng2z01ki_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpng2z01ki_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpng2z01ki_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpng2z01ki_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075299
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letters []string\n\n    for _, grade := range\
    \ grades {\n        switch {\n        case grade >= 4.0:\n            letters\
    \ = append(letters, \"A+\")\n        case grade >= 3.7:\n            letters =\
    \ append(letters, \"A\")\n        case grade >= 3.3:\n            letters = append(letters,\
    \ \"A-\")\n        case grade >= 3.0:\n            letters = append(letters, \"\
    B+\")\n        case grade >= 2.7:\n            letters = append(letters, \"B\"\
    )\n        case grade >= 2.3:\n            letters = append(letters, \"B-\")\n\
    \        case grade >= 2.0:\n            letters = append(letters, \"C+\")\n \
    \       case grade >= 1.7:\n            letters = append(letters, \"C\")\n   \
    \     case grade >= 1.3:\n            letters = append(letters, \"C-\")\n    \
    \    case grade >= 1.0:\n            letters = append(letters, \"D+\")\n     \
    \   case grade >= 0.7:\n            letters = append(letters, \"D\")\n       \
    \ case grade >= 0.0:\n            letters = append(letters, \"D-\")\n        default:\n\
    \            letters = append(letters, \"E\")\n        }\n    }\n\n    return\
    \ letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmphxo8ojlt_test.go:85: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmphxo8ojlt_test.go:85: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmphxo8ojlt_test.go:85: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmphxo8ojlt_test.go:85: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075299
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    letters := []string{}\n    for _, grade := range\
    \ grades {\n        if grade > 4.0 {\n            letters = append(letters, \"\
    D+\")\n        } else if grade == 4.0 {\n            letters = append(letters,\
    \ \"A+\")\n        } else if grade > 3.7 {\n            letters = append(letters,\
    \ \"A\")\n        } else if grade > 3.3 {\n            letters = append(letters,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            letters = append(letters,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letters = append(letters,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letters = append(letters,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letters = append(letters,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letters = append(letters,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letters = append(letters,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letters = append(letters,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letters = append(letters,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letters = append(letters,\
    \ \"D-\")\n        } else {\n            letters = append(letters, \"E\")\n  \
    \      }\n    }\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075299
- exit_code: 0
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, val := range grades\
    \ {\n        if val == 4.0 {\n            result = append(result, \"A+\")\n  \
    \      } else if val > 3.7 {\n            result = append(result, \"A\")\n   \
    \     } else if val > 3.3 {\n            result = append(result, \"A-\")\n   \
    \     } else if val > 3.0 {\n            result = append(result, \"B+\")\n   \
    \     } else if val > 2.7 {\n            result = append(result, \"B\")\n    \
    \    } else if val > 2.3 {\n            result = append(result, \"B-\")\n    \
    \    } else if val > 2.0 {\n            result = append(result, \"C+\")\n    \
    \    } else if val > 1.7 {\n            result = append(result, \"C\")\n     \
    \   } else if val > 1.3 {\n            result = append(result, \"C-\")\n     \
    \   } else if val > 1.0 {\n            result = append(result, \"D+\")\n     \
    \   } else if val > 0.7 {\n            result = append(result, \"D\")\n      \
    \  } else if val > 0.0 {\n            result = append(result, \"D-\")\n      \
    \  } else {\n            result = append(result, \"E\")\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075299
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return grade_equation_list_comp(grades)\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnwji_76_test.go:31:12: undefined: grade_equation_list_comp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075299
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            result = append(result, \"\
    A+\")\n        } else if grade >= 3.7 {\n            result = append(result, \"\
    A\")\n        } else if grade >= 3.3 {\n            result = append(result, \"\
    A-\")\n        } else if grade >= 3.0 {\n            result = append(result, \"\
    B+\")\n        } else if grade >= 2.7 {\n            result = append(result, \"\
    B\")\n        } else if grade >= 2.3 {\n            result = append(result, \"\
    B-\")\n        } else if grade >= 2.0 {\n            result = append(result, \"\
    C+\")\n        } else if grade >= 1.7 {\n            result = append(result, \"\
    C\")\n        } else if grade >= 1.3 {\n            result = append(result, \"\
    C-\")\n        } else if grade >= 1.0 {\n            result = append(result, \"\
    D+\")\n        } else if grade >= 0.7 {\n            result = append(result, \"\
    D\")\n        } else if grade >= 0.0 {\n            result = append(result, \"\
    D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n\
    \    }\n\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpd_lc42rf_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpd_lc42rf_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpd_lc42rf_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpd_lc42rf_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075299
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n\tvar letter_grades []string\n\tfor _, grade := range\
    \ grades {\n\t\tletter_grade := get_letter_grade(grade)\n\t\tletter_grades = append(letter_grades,\
    \ letter_grade)\n\t}\n\treturn letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7126c1n9_test.go:33:19: undefined: get_letter_grade

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075299
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter_grades []string\n    for _, grade := range\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        } else if grade >= 3.7 {\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        } else if grade >= 3.3 {\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        } else {\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfpepgr01_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfpepgr01_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075046
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    alphas := []string{}\n    for _, g := range grades\
    \ {\n        if g > 4.0 {\n            alphas = append(alphas, \"A+\")\n     \
    \   } else if g > 3.7 {\n            alphas = append(alphas, \"A\")\n        }\
    \ else if g > 3.3 {\n            alphas = append(alphas, \"A-\")\n        } else\
    \ if g > 3.0 {\n            alphas = append(alphas, \"B+\")\n        } else if\
    \ g > 2.7 {\n            alphas = append(alphas, \"B\")\n        } else if g >\
    \ 2.3 {\n            alphas = append(alphas, \"B-\")\n        } else if g > 2.0\
    \ {\n            alphas = append(alphas, \"C+\")\n        } else if g > 1.7 {\n\
    \            alphas = append(alphas, \"C\")\n        } else if g > 1.3 {\n   \
    \         alphas = append(alphas, \"C-\")\n        } else if g > 1.0 {\n     \
    \       alphas = append(alphas, \"D+\")\n        } else if g > 0.7 {\n       \
    \     alphas = append(alphas, \"D\")\n        } else if g > 0.0 {\n          \
    \  alphas = append(alphas, \"D-\")\n        } else {\n            alphas = append(alphas,\
    \ \"E\")\n        }\n    }\n    return alphas\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0gbc5dsq_test.go:82: expected '[A+ B C- C A-]', got '[A\
    \ B C- C A-]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075299
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var (\n        letter_grades []string\n        grade\
    \ float64\n    )\n    for i := 0; i < len(grades); i++ {\n        switch {\n \
    \       case grades[i] >= 4.0:\n            letter_grades = append(letter_grades,\
    \ \"A+\")\n        case grades[i] >= 3.7:\n            letter_grades = append(letter_grades,\
    \ \"A\")\n        case grades[i] >= 3.3:\n            letter_grades = append(letter_grades,\
    \ \"A-\")\n        case grades[i] >= 3.0:\n            letter_grades = append(letter_grades,\
    \ \"B+\")\n        case grades[i] >= 2.7:\n            letter_grades = append(letter_grades,\
    \ \"B\")\n        case grades[i] >= 2.3:\n            letter_grades = append(letter_grades,\
    \ \"B-\")\n        case grades[i] >= 2.0:\n            letter_grades = append(letter_grades,\
    \ \"C+\")\n        case grades[i] >= 1.7:\n            letter_grades = append(letter_grades,\
    \ \"C\")\n        case grades[i] >= 1.3:\n            letter_grades = append(letter_grades,\
    \ \"C-\")\n        case grades[i] >= 1.0:\n            letter_grades = append(letter_grades,\
    \ \"D+\")\n        case grades[i] >= 0.7:\n            letter_grades = append(letter_grades,\
    \ \"D\")\n        case grades[i] >= 0.0:\n            letter_grades = append(letter_grades,\
    \ \"D-\")\n        case grades[i] >= 0.0:\n            letter_grades = append(letter_grades,\
    \ \"E\")\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprkyudhmf_test.go:33:9: grade declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075299
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    // Write your code here\n    return nil\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpjuvh6dml_test.go:53: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpjuvh6dml_test.go:53:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpjuvh6dml_test.go:53: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpjuvh6dml_test.go:53:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpjuvh6dml_test.go:53: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpjuvh6dml_test.go:53:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075296
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    return []string{}\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[A+ B C- C A-]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_srwq95q_test.go:52: expected '[D D- C- B B+]', got '[]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmp_srwq95q_test.go:52:\
    \ expected '[E D-]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075288
