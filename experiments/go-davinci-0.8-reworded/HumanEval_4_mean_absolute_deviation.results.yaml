language: go_test.go
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum, mean := 0.0, 0.0\n    for _, number := range numbers {\n       \
    \ sum += number\n    }\n    mean = sum / float64(len(numbers))\n    sum_of_abs_deviations\
    \ := 0.0\n    for _, number := range numbers {\n        sum_of_abs_deviations\
    \ += math.Abs(number - mean)\n    }\n    return sum_of_abs_deviations / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp49ry_1j__test.go:23:34: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean_of_numbers float64 = mean(numbers)\n\
    \    for _, number := range numbers {\n        sum += abs(number - mean_of_numbers)\n\
    \    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8kg_q387_test.go:17:35: undefined: mean

    /tmp/tmp8kg_q387_test.go:19:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum_difference float64 = 0.0\n    var mean float64 = mean(numbers)\n\
    \    for _, number := range numbers {\n        sum_difference += abs(number -\
    \ mean)\n    }\n    return sum_difference / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6g87gxkf_test.go:17:24: undefined: mean

    /tmp/tmp6g87gxkf_test.go:19:27: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var average float64 = 0.0\n    var difference float64 = 0.0\n    var\
    \ sum float64 = 0.0\n    for _, value := range numbers {\n        sum += value\n\
    \    }\n    average = sum / float64(len(numbers))\n    for _, value := range numbers\
    \ {\n        difference += value - average\n    }\n    return difference / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpwna1u6x1_test.go:44: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpwna1u6x1_test.go:44:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpwna1u6x1_test.go:44: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64 = 0.0\n    for _, num := range numbers {\n        total\
    \ += num\n    }\n    mean := total / float64(len(numbers))\n    fmt.Printf(\"\
    Mean is %.1f\\n\", mean)\n    var total_deviation float64 = 0.0\n    for _, num\
    \ := range numbers {\n        total_deviation += abs(num - mean)\n    }\n    return\
    \ total_deviation / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8bzc0zn_test.go:24:28: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    sum := 0.0\n    for _, x := range numbers {\n\
    \        sum += x\n    }\n    mean := sum / float64(len(numbers))\n\n    // Calculate\
    \ mean absolute deviation\n    sum = 0.0\n    for _, x := range numbers {\n  \
    \      sum += abs(x - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi16vm93a_test.go:26:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum, mean float64 = 0.0, 0.0\n    for _, v := range numbers {\n \
    \       sum += v\n    }\n    mean = sum / float64(len(numbers))\n    var sum_of_deviation\
    \ float64 = 0.0\n    for _, v := range numbers {\n        sum_of_deviation +=\
    \ abs(v - mean)\n    }\n    return sum_of_deviation / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcdg2m9_2_test.go:23:29: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO: return value here\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpmp3xdtz4_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpmp3xdtz4_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpmp3xdtz4_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean = arithmetic_mean(numbers)\n    var sum = 0.0\n    for _, num\
    \ := range numbers {\n        sum += math.Abs(num - mean)\n    }\n    return sum\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphlxwlfw5_test.go:16:16: undefined: arithmetic_mean

    /tmp/tmphlxwlfw5_test.go:19:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64 = 0.0\n    var sum float64 = 0.0\n    for _, val :=\
    \ range numbers {\n        sum += val\n    }\n    var mean float64 = sum / float64(len(numbers))\n\
    \    for _, val := range numbers {\n        total += math.Abs(val - mean)\n  \
    \  }\n    return total / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcxrlzff6_test.go:23:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum, avg, diff, deviation float64\n    for _, num := range numbers\
    \ {\n        sum += num\n    }\n    avg = sum / float64(len(numbers))\n    for\
    \ _, num := range numbers {\n        diff = num - avg\n        deviation += diff\n\
    \    }\n    return deviation / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpr946p44m_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpr946p44m_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpr946p44m_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean\n    mean := 0.0\n    for _, x := range numbers\
    \ {\n        mean += x\n    }\n    mean /= float64(len(numbers))\n\n    // Calculate\
    \ the mean absolute deviation\n    mad := 0.0\n    for _, x := range numbers {\n\
    \        mad += abs(x - mean)\n    }\n    mad /= float64(len(numbers))\n\n   \
    \ return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvon1vfms_test.go:26:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    sum := 0.0\n    for _, number := range numbers {\n        sum += math.Abs(number\
    \ - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupherzu0_test.go:19:13: undefined: mean

    /tmp/tmpupherzu0_test.go:22:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    for _, n := range numbers {\n        sum +=\
    \ n\n    }\n    mean := sum / float64(len(numbers))\n    var sum_diffs float64\
    \ = 0.0\n    for _, n := range numbers {\n        sum_diffs += (n - mean)\n  \
    \  }\n    mad := sum_diffs / float64(len(numbers))\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp_6w113bz_test.go:44: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp_6w113bz_test.go:44:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp_6w113bz_test.go:44: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    // 1. Calculate mean\n    mean := sum_float_slice(numbers)\
    \ / float64(len(numbers))\n    // 2. Calculate mean absolute deviation\n    for\
    \ _, number := range numbers {\n        sum += float64(abs_float(number - mean))\n\
    \    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptyy78wga_test.go:18:13: undefined: sum_float_slice

    /tmp/tmptyy78wga_test.go:21:24: undefined: abs_float

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    for _, num := range numbers {\n        sum\
    \ += num\n    }\n    mean := sum / float64(len(numbers))\n    var sum_of_deviations\
    \ float64 = 0.0\n    for _, num := range numbers {\n        sum_of_deviations\
    \ += abs(num - mean)\n    }\n    return sum_of_deviations / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k4a216h_test.go:23:30: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Given that the average is\n    // x_mean = (sum(x) / len(x))\n   \
    \ // the absolute difference is x - x_mean\n    // and the absolute value of a\
    \ number x is\n    // |x| = x if x >= 0\n    // |x| = -x if x < 0\n    // we can\
    \ implement mean_absolute_deviation like so:\n    var sum float64 = 0.0\n    for\
    \ _, n := range numbers {\n        sum += n\n    }\n    x_mean := sum / float64(len(numbers))\n\
    \    var diff_sum float64 = 0.0\n    for _, n := range numbers {\n        diff_sum\
    \ += n - x_mean\n    }\n    return diff_sum / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp_qyradi5_test.go:50: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp_qyradi5_test.go:50:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp_qyradi5_test.go:50: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum_difference float64 = 0.0\n    var length float64 = float64(len(numbers))\n\
    \    for _, number := range numbers {\n        sum_difference += number\n    }\n\
    \    average := sum_difference / length\n    sum_difference = 0.0\n    for _,\
    \ number := range numbers {\n        sum_difference += abs(number - average)\n\
    \    }\n    return sum_difference / length\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0nu_7bv4_test.go:24:27: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, x := range numbers {\n        sum += x\n    }\n\
    \    mean := sum / float64(len(numbers))\n    sum = 0.0\n    for _, x := range\
    \ numbers {\n        sum += abs(x - mean)\n    }\n    return sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppsxxawnj_test.go:23:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    // Calculate mean\
    \ value of the dataset\n    var mean float64 = 0.0\n    for _, number := range\
    \ numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \    // Calculate average of absolute differences from the mean value\n    var\
    \ mad float64 = 0.0\n    for _, number := range numbers {\n        mad += math.Abs(number\
    \ - mean)\n    }\n    mad /= float64(len(numbers))\n    return mad\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6l3to6tb_test.go:28:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var n = len(numbers)\n    if n == 0 {\n        return 0.0\n    }\n  \
    \  var numbers_sum = 0.0\n    for _, x := range numbers {\n        numbers_sum\
    \ += x\n    }\n    var mean = numbers_sum / float64(n)\n    var absolute_deviations_sum\
    \ = 0.0\n    for _, x := range numbers {\n        absolute_deviations_sum += (x\
    \ - mean)\n    }\n    return absolute_deviations_sum / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp7hrm30wv_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp7hrm30wv_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp7hrm30wv_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074079
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    size := len(numbers)\n    x_sum := 0.0\n    for _, value := range numbers\
    \ {\n        x_sum += value\n    }\n    x_mean := x_sum / float64(size)\n    x_sum\
    \ = 0.0\n    for _, value := range numbers {\n        x_sum += math.Abs(value\
    \ - x_mean)\n    }\n    return x_sum / float64(size)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp50m7w4bj_test.go:24:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64 = 0.0\n    mean := Mean(numbers)\n    length := len(numbers)\n\
    \    for i := 0; i < length; i++ {\n        total += Abs(numbers[i] - mean)\n\
    \    }\n    return total / float64(length)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnklk1go_test.go:17:13: undefined: Mean

    /tmp/tmplnklk1go_test.go:20:18: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074078
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    mean := 0.0\n    for _, n := range numbers {\n\
    \        mean += n\n    }\n    mean /= float64(len(numbers))\n\n    // Calculate\
    \ difference between each element and mean\n    deviations := make([]float64,\
    \ len(numbers))\n    for i, n := range numbers {\n        deviations[i] = n -\
    \ mean\n    }\n\n    // Calculate average absolute deviation\n    absolute_deviations\
    \ := make([]float64, len(numbers))\n    for i, d := range deviations {\n     \
    \   absolute_deviations[i] = d\n        if d < 0 {\n            absolute_deviations[i]\
    \ = -d\n        }\n    }\n    sum := 0.0\n    for _, a := range absolute_deviations\
    \ {\n        sum += a\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := sum(numbers) / float64(len(numbers))\n    deviations := make([]float64,\
    \ len(numbers))\n    for i, n := range numbers {\n        deviations[i] = n -\
    \ mean\n    }\n    deviations = absolute(deviations)\n    return sum(deviations)\
    \ / float64(len(deviations))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbo4o51bt_test.go:16:13: undefined: sum

    /tmp/tmpbo4o51bt_test.go:21:18: undefined: absolute

    /tmp/tmpbo4o51bt_test.go:22:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    total := float64(0.0)\n\
    \    mean := float64(0.0)\n    size := float64(len(numbers))\n    for _, x :=\
    \ range numbers {\n        total += x\n    }\n    mean = total / size\n    deviations\
    \ := []float64{}\n    for _, x := range numbers {\n        deviations = append(deviations,\
    \ x - mean)\n    }\n    total = float64(0.0)\n    for _, dev := range deviations\
    \ {\n        total += dev\n    }\n    return total / size\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpc_jmn0tz_test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpc_jmn0tz_test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpc_jmn0tz_test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    total := 0.0\n    mean := 0.0\n    n := 0.0\n    for _, num := range\
    \ numbers {\n        total += num\n        n += 1.0\n    }\n    mean = total /\
    \ n\n    fmt.Printf(\"mean: %f\\n\", mean)\n    total = 0.0\n    for _, num :=\
    \ range numbers {\n        total += math.Abs(num - mean)\n    }\n    return total\
    \ / n\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41qb6n6m_test.go:27:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n\tsum := 0.0\n\tfor _, v := range numbers {\n\t\tsum += v\n\t}\n\tx_mean\
    \ := sum / float64(len(numbers))\n\tres := 0.0\n\tfor _, v := range numbers {\n\
    \t\tres += math.Abs(v - x_mean)\n\t}\n\treturn res / float64(len(numbers))\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqee4oz_b_test.go:23:10: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    for _, number := range numbers {\n       \
    \ sum += number\n    }\n    var mean float64 = sum / float64(len(numbers))\n \
    \   var absolute_deviations []float64 = make([]float64, len(numbers))\n    for\
    \ index, number := range numbers {\n        absolute_deviations[index] = float64(int64(number\
    \ - mean))\n    }\n    var sum_absolute_deviations float64 = 0.0\n    for _, absolute_deviation\
    \ := range absolute_deviations {\n        sum_absolute_deviations += absolute_deviation\n\
    \    }\n    return sum_absolute_deviations / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmprn96oiuz_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmprn96oiuz_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmprn96oiuz_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj6n78an5_test.go:34:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    n_sum := 0.0\n\
    \    for _, n := range numbers {\n        n_sum += n\n    }\n    x_mean := n_sum\
    \ / float64(len(numbers))\n    abs_diff_sum := 0.0\n    for _, n := range numbers\
    \ {\n        abs_diff_sum += math.Abs(n - x_mean)\n    }\n    return abs_diff_sum\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfm71awik_test.go:26:25: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    count := len(numbers)\n    var total float64 = 0\n    for _, number :=\
    \ range numbers {\n        total += number\n    }\n    mean := total / float64(count)\n\
    \    // fmt.Printf(\"Mean: %0.2f\\n\", mean)\n    var sum_of_deviations float64\
    \ = 0\n    for _, number := range numbers {\n        deviation := math.Abs(number\
    \ - mean)\n        sum_of_deviations += deviation\n    }\n    return sum_of_deviations\
    \ / float64(count)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoxryturw_test.go:25:22: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj6n78an5_test.go:34:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var n float64 = float64(len(numbers))\n    var x_mean float64 = sum(numbers)\
    \ / n\n    var result float64 = 0.0\n    for _, x := range numbers {\n       \
    \ var x_diff float64 = x - x_mean\n        var x_diff_abs float64 = x_diff\n \
    \       if x_diff < 0.0 {\n            x_diff_abs = -x_diff\n        }\n     \
    \   result += x_diff_abs\n    }\n    result /= n\n    return result\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw0nq994_test.go:17:26: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n\tmean := mean(numbers)\n\tdeviations := []float64{}\n\t\n\tfor _, number\
    \ := range numbers {\n\t\tdeviations = append(deviations, abs(number - mean))\n\
    \t}\n\t\n\treturn mean(deviations)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1yqchks_test.go:16:10: undefined: mean

    /tmp/tmpg1yqchks_test.go:20:35: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := average(numbers)\n    abs_diff := make([]float64, len(numbers))\n\
    \    for i, x := range numbers {\n        abs_diff[i] = absolute_difference(x,\
    \ mean)\n    }\n    return average(abs_diff)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplg8gifkc_test.go:16:13: undefined: average

    /tmp/tmplg8gifkc_test.go:19:23: undefined: absolute_difference

    /tmp/tmplg8gifkc_test.go:21:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj6n78an5_test.go:34:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO: implement this.\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmph6sxv_g9_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmph6sxv_g9_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmph6sxv_g9_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64 = 0.0\n    for _, number := range numbers {\n     \
    \   total += number\n    }\n    mean := total / float64(len(numbers))\n    var\
    \ abs_deviation float64 = 0.0\n    for _, number := range numbers {\n        abs_deviation\
    \ += abs(number - mean)\n    }\n    return abs_deviation / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvldy1tpt_test.go:23:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // ...\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp2ijq0ww4_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp2ijq0ww4_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp2ijq0ww4_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var count float64 = 0.0\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1.0\n    }\n   \
    \ var mean float64 = sum / count\n    var sum_abs_deviations float64 = 0.0\n \
    \   for _, number := range numbers {\n        sum_abs_deviations += abs(number\
    \ - mean)\n    }\n    return sum_abs_deviations / count\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpngn44d56_test.go:25:31: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074080
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO: Calculate Mean Absolute Deviation from list of numbers.\n  \
    \  return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpdssaqh73_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpdssaqh73_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpdssaqh73_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum_numbers float64 = 0.0\n    var sum_absolute_difference float64\
    \ = 0.0\n    var mean float64 = 0.0\n    for _, x := range numbers {\n       \
    \ sum_numbers += x\n    }\n    mean = sum_numbers / float64(len(numbers))\n  \
    \  for _, x := range numbers {\n        sum_absolute_difference += abs(x - mean)\n\
    \    }\n    return sum_absolute_difference / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8s92pn4_test.go:24:36: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074081
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    total := 0.0\n    for _, num := range numbers {\n        total += num\n\
    \    }\n    mean := total / float64(len(numbers))\n    variance := 0.0\n    for\
    \ _, num := range numbers {\n        variance += (num - mean) * (num - mean)\n\
    \    }\n    return variance / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpw1e76xcb_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpw1e76xcb_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpw1e76xcb_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n\tvar sum float64 = 0\n\tvar count float64 = 0\n\tvar mean float64 = 0\n\t\
    var mad float64 = 0\n\tfor _, number := range numbers {\n\t\tsum += number\n\t\
    \tcount += 1\n\t}\n\tmean = sum / count\n\tfmt.Printf(\"Mean is %f\\n\", mean)\n\
    \tfor _, number := range numbers {\n\t\tvar diff float64 = number - mean\n\t\t\
    if diff < 0 {\n\t\t\tdiff = -diff\n\t\t}\n\t\tmad += diff\n\t}\n\tmad = mad /\
    \ count\n\treturn mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := 0.0\n\
    \    for _, number := range numbers {\n        mean += number\n    }\n    mean\
    \ /= float64(len(numbers))\n    sum_of_absolute_deviations := 0.0\n    for _,\
    \ number := range numbers {\n        sum_of_absolute_deviations += math.Abs(number\
    \ - mean)\n    }\n    return sum_of_absolute_deviations / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3zpffev7_test.go:26:39: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n\tn := len(numbers)\n\tvar sum float64 = 0.0\n\tfor _, v := range numbers\
    \ {\n\t\tsum += v\n\t}\n\tmean := sum / float64(n)\n\tvar sum_of_deviations float64\
    \ = 0.0\n\tfor _, v := range numbers {\n\t\tsum_of_deviations += math.Abs(v -\
    \ mean)\n\t}\n\treturn sum_of_deviations / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplwztqs8c_test.go:24:24: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074081
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // ...\n    var sum float64 = 0.0\n    var length float64 = float64(len(numbers))\n\
    \    if length == 0.0 {\n        return 0.0\n    }\n    for _, num := range numbers\
    \ {\n        sum += num\n    }\n    mean := sum / length\n    //fmt.Println(\"\
    sum:\", sum, \"len:\", length, \"mean:\", mean)\n    var absolute float64 = 0.0\n\
    \    for _, num := range numbers {\n        absolute += num - mean\n    }\n  \
    \  return absolute / length\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp6okiimi3_test.go:49: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp6okiimi3_test.go:49:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp6okiimi3_test.go:49: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := float64(len(numbers))\n    sum := 0.0\n    for _, v := range numbers\
    \ {\n        sum += v\n    }\n    mean := sum / n\n    sum_diff := 0.0\n    for\
    \ _, v := range numbers {\n        sum_diff += absolute_difference(v, mean)\n\
    \    }\n    return sum_diff / n\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7mxai_cn_test.go:24:21: undefined: absolute_difference

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    for _, val := range numbers {\n        sum\
    \ += val\n    }\n    mean := sum / float64(len(numbers))\n    var diff float64\
    \ = 0.0\n    for _, val := range numbers {\n        diff += abs_val(val - mean)\n\
    \    }\n    return diff / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_7vv5szu_test.go:23:17: undefined: abs_val

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // 1. Calculate mean of dataset\n    // -- sum all elements in dataset\n\
    \    sum := 0.0\n    for _, v := range numbers {\n        sum += v\n    }\n  \
    \  // -- divide by the length of the dataset\n    mean := sum / float64(len(numbers))\n\
    \n    // 2. Calculate absolute difference between each element and mean\n    //\
    \ -- create a new array\n    differences := make([]float64, len(numbers))\n  \
    \  // -- fill with values\n    for i, v := range numbers {\n        differences[i]\
    \ = v - mean\n    }\n    // -- square differences\n    for i, v := range differences\
    \ {\n        differences[i] = v * v\n    }\n    // -- sum squared differences\n\
    \    squared_sum := 0.0\n    for _, v := range differences {\n        squared_sum\
    \ += v\n    }\n    // -- divide by length\n    mean_of_squared_differences :=\
    \ squared_sum / float64(len(numbers))\n    // -- take square root\n    root_mean_of_squared_differences\
    \ := Sqrt(mean_of_squared_differences)\n\n    return root_mean_of_squared_differences\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi102cy8m_test.go:44:41: undefined: Sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum_differences float64 = 0.0\n    var mean float64 = get_mean(numbers)\n\
    \    for _, e := range numbers {\n        sum_differences += abs(e - mean)\n \
    \   }\n    return sum_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1qv2l27_test.go:17:24: undefined: get_mean

    /tmp/tmpp1qv2l27_test.go:19:28: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mean_absolute_deviation\
    \ float64 = 0.0\n    var l float64 = float64(len(numbers))\n\n    for _, n :=\
    \ range numbers {\n        sum += n\n    }\n    mean = sum / l\n\n    for _, n\
    \ := range numbers {\n        mean_absolute_deviation += abs_f64(n - mean)\n \
    \   }\n    mean_absolute_deviation /= l\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeawce1nx_test.go:27:36: undefined: abs_f64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    n := len(numbers)\n    mean := sum / float64(n)\n   \
    \ for _, number := range numbers {\n        sum += number\n    }\n    for _, number\
    \ := range numbers {\n        sum += abs(number - mean)\n    }\n    return sum\
    \ / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw4qjeoqd_test.go:23:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    return average(abs_diff(numbers, mean))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59l65tzm_test.go:19:13: undefined: sum

    /tmp/tmp59l65tzm_test.go:20:12: undefined: average

    /tmp/tmp59l65tzm_test.go:20:20: undefined: abs_diff

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean value of slice\n    mean := mean(numbers)\n    // Calculate\
    \ difference between each element and mean\n    deviation := []float64{}\n   \
    \ for _, num := range numbers {\n        deviation = append(deviation, (num -\
    \ mean))\n    }\n    // Get absolute value of each element\n    for i, num :=\
    \ range deviation {\n        deviation[i] = num * (num / math.Abs(num))\n    }\n\
    \    // Calculate average of the absolute value of each element\n    return average(deviation)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqe41_zu_test.go:17:13: undefined: mean

    /tmp/tmpwqe41_zu_test.go:25:37: undefined: math

    /tmp/tmpwqe41_zu_test.go:28:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    N := len(numbers)\n    result := 0.0\n    sum := 0.0\n    for _, num\
    \ := range numbers {\n        sum += num\n    }\n    mean := sum / float64(N)\n\
    \    for _, num := range numbers {\n        result += abs_float64(num - mean)\n\
    \    }\n    return result / float64(N)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgo2m5fr6_test.go:24:19: undefined: abs_float64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    mean := 0.0\n    n := len(numbers)\n    if n == 0 {\n\
    \        return 0.0\n    }\n\n    // calculate sum\n    for _, x := range numbers\
    \ {\n        sum += x\n    }\n\n    // calculate mean\n    mean = sum / float64(n)\n\
    \n    // calculate sum of absolute deviations\n    absDevSum := 0.0\n    for _,\
    \ x := range numbers {\n        absDevSum += math.Abs(x - mean)\n    }\n\n   \
    \ return absDevSum / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjah98i8y_test.go:34:22: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074082
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64\n    mean := mean(numbers)\n    for _, number := range\
    \ numbers {\n        total += math.Abs(number - mean)\n    }\n    return total\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9bt_wla_test.go:17:13: undefined: mean

    /tmp/tmpv9bt_wla_test.go:19:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074083
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum_of_numbers := 0.0\n    sum_of_squares := 0.0\n    count := 0\n  \
    \  for _, number := range numbers {\n        sum_of_numbers += number\n      \
    \  sum_of_squares += number * number\n        count += 1\n    }\n    mean := sum_of_numbers\
    \ / float64(count)\n    sum_of_absolute_deviations := 0.0\n    for _, number :=\
    \ range numbers {\n        sum_of_absolute_deviations += float64(int64(number\
    \ - mean))\n    }\n    return sum_of_absolute_deviations / float64(count)\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpbxwp8qfc_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpbxwp8qfc_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpbxwp8qfc_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074083
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    for _, number := range numbers {\n       \
    \ sum += number\n    }\n    mean := sum / float64(len(numbers))\n    return mean\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpnpg5ksaa_test.go:39: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpnpg5ksaa_test.go:39:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpnpg5ksaa_test.go:39: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074083
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // find the sum of the numbers\n    var total float64 = 0.0\n    for\
    \ _, value := range numbers {\n        total += value\n    }\n    // calculate\
    \ the mean\n    mean := total / float64(len(numbers))\n    // find the sum of\
    \ the absolute differences between each\n    // number and the mean\n    total\
    \ = 0.0\n    for _, value := range numbers {\n        total += math.Abs(value\
    \ - mean)\n    }\n    // return the mean of the absolute differences\n    return\
    \ total / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr5tsh2l_test.go:27:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074083
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    var total float64\
    \ = 0.0\n    for _, value := range numbers {\n        total += value\n    }\n\
    \    mean := total / float64(len(numbers))\n    var squared_diffs float64 = 0.0\n\
    \    for _, value := range numbers {\n        squared_diffs += (value - mean)\
    \ * (value - mean)\n    }\n    var root_squared_diffs float64 = squared_diffs\
    \ / float64(len(numbers))\n    return root_squared_diffs\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj8fkmg6q_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj8fkmg6q_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj8fkmg6q_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074083
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    sum_of_diffs := 0.0\n    num_of_numbers :=\
    \ len(numbers)\n    for _, num := range numbers {\n        sum_of_diffs += abs(num\
    \ - mean)\n    }\n    return sum_of_diffs / float64(num_of_numbers)\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7um69ip0_test.go:16:13: undefined: mean

    /tmp/tmp7um69ip0_test.go:20:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074083
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate mean\n    var sum float64 = 0.0\n    for _, x := range numbers\
    \ {\n        sum += x\n    }\n    var mean float64 = sum / float64(len(numbers))\n\
    \n    // Calculate Mean Absolute Deviation from the mean\n    var sum_abs_dev\
    \ float64 = 0.0\n    for _, x := range numbers {\n        sum_abs_dev += Abs(x\
    \ - mean)\n    }\n    return sum_abs_dev / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9o3urlb_test.go:26:24: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074083
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    length := len(numbers)\n    mean := sum(numbers) / float64(length)\n\
    \    var sum_of_differences float64 = 0.0\n    for _, number := range numbers\
    \ {\n        difference := number - mean\n        sum_of_differences += abs(difference)\n\
    \    }\n    return sum_of_differences / float64(length)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpccfndfe6_test.go:17:13: undefined: sum

    /tmp/tmpccfndfe6_test.go:21:31: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074083
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // sum all the differences from the mean\n    var sum_diffs float64 =\
    \ 0.0\n    n := len(numbers)\n    mean := sum(numbers) / float64(n)\n    for _,\
    \ number := range numbers {\n        sum_diffs += abs(number - mean)\n    }\n\
    \    return sum_diffs / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpshvhufhh_test.go:19:13: undefined: sum

    /tmp/tmpshvhufhh_test.go:21:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074083
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return 1.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpl5jb2vsx_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__2 (0.00s)\n        tmpl5jb2vsx_test.go:34:\
    \ expected '%!s(float64=1.2)', got '%!s(float64=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074083
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n    var sum_of_absolute_differences\
    \ float64\n    for _, v := range numbers {\n        sum += v\n    }\n    mean\
    \ = sum / float64(len(numbers))\n    for _, v := range numbers {\n        absolute_difference\
    \ := v - mean\n        if absolute_difference < 0 {\n            absolute_difference\
    \ = -absolute_difference\n        }\n        sum_of_absolute_differences += absolute_difference\n\
    \    }\n    return sum_of_absolute_differences / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074084
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, num := range numbers {\n        sum += num\n \
    \   }\n    mean := sum / float64(len(numbers))\n    mad := 0.0\n    for _, num\
    \ := range numbers {\n        mad += abs(num - mean)\n    }\n    return mad /\
    \ float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpje421krz_test.go:23:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074083
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Find mean\n    var total float64 = 0.0\n    for _, value := range\
    \ numbers {\n        total += value\n    }\n    mean := total / float64(len(numbers))\n\
    \n    // Calculate sum of absolute differences from mean\n    var sum_of_absolute_differences\
    \ float64 = 0.0\n    for _, value := range numbers {\n        sum_of_absolute_differences\
    \ += abs(value - mean)\n    }\n\n    // Return absolute deviation\n    return\
    \ sum_of_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxithvcn_test.go:26:40: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074083
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := average(numbers)\n    var absolute_deviations []float64\n   \
    \ for _, num := range numbers {\n        deviation := absolute(num - mean)\n \
    \       absolute_deviations = append(absolute_deviations, deviation)\n    }\n\
    \    return average(absolute_deviations)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3jwz7zo_test.go:16:13: undefined: average

    /tmp/tmpc3jwz7zo_test.go:19:22: undefined: absolute

    /tmp/tmpc3jwz7zo_test.go:22:12: undefined: average

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074084
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var m float64\n    for _, x := range numbers {\n        m += x\n    }\n\
    \    m /= float64(len(numbers))\n    var ret float64\n    for _, x := range numbers\
    \ {\n        ret += x - m\n    }\n    ret /= float64(len(numbers))\n    return\
    \ ret\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpv__bu4u4_test.go:44: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpv__bu4u4_test.go:44:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpv__bu4u4_test.go:44: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Start with a mean\n    mean := sum(numbers) / float64(len(numbers))\n\
    \    // Calculate deviation of each element\n    var deviations []float64\n  \
    \  for _, number := range numbers {\n        deviations = append(deviations, number\
    \ - mean)\n    }\n    // Calculate absolute value of the deviations\n    absolute_deviations\
    \ := absolute_value(deviations)\n    // Return the mean absolute deviation\n \
    \   return sum(absolute_deviations) / float64(len(absolute_deviations))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiyenqusf_test.go:17:13: undefined: sum

    /tmp/tmpiyenqusf_test.go:24:28: undefined: absolute_value

    /tmp/tmpiyenqusf_test.go:26:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074084
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return -1.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmppakwbaln_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmppakwbaln_test.go:34:\
    \ expected '%!s(float64=1)', got '%!s(float64=-1)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmppakwbaln_test.go:34: expected '%!s(float64=1.2)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    n := float64(len(numbers))\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    mean := sum / n\n    var v float64\n\
    \    for _, number := range numbers {\n        v += math.Abs(number - mean)\n\
    \    }\n    return v / n\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg3w2uyc1_test.go:24:14: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074084
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    total := 0.0\n    mean := 0.0\n    for _, n := range numbers {\n    \
    \    total += n\n    }\n    mean = total / float64(len(numbers))\n    // Calculate\
    \ the absolute distance each number is from the mean\n    abs_dist := []float64{}\n\
    \    for _, n := range numbers {\n        dist := n - mean\n        abs_dist =\
    \ append(abs_dist, dist)\n    }\n    return mean\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpx_7lxe6l_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpx_7lxe6l_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=2.5)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpx_7lxe6l_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074085
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    count := float64(len(numbers))\n    mean := 0.0\n   \
    \ diff := 0.0\n    result := 0.0\n\n    // calculate sum of the numbers\n    for\
    \ _, number := range numbers {\n        sum += number\n    }\n\n    // calculate\
    \ mean\n    mean = sum / count\n\n    // calculate each difference\n    for _,\
    \ number := range numbers {\n        diff += number - mean\n    }\n\n    // calculate\
    \ absolute differences\n    for _, number := range numbers {\n        result +=\
    \ number - mean\n    }\n\n    // calculate mean of all absolute differences\n\
    \    result = result / count\n\n    return result\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp36_22t2__test.go:61: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp36_22t2__test.go:61:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp36_22t2__test.go:61: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    total := 0.0\n    for _, num := range numbers {\n        total += num\n\
    \    }\n    mean := total / float64(len(numbers))\n    deviation := 0.0\n    for\
    \ _, num := range numbers {\n        deviation += math.Abs(num - mean)\n    }\n\
    \    return deviation / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbowrm03o_test.go:23:22: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074084
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    for _, value := range numbers {\n        sum\
    \ += value\n    }\n    mean := sum / float64(len(numbers))\n    var average_absolute_deviation\
    \ float64 = 0.0\n    for _, value := range numbers {\n        absolute_deviation\
    \ := mean - value\n        if absolute_deviation < 0 {\n            absolute_deviation\
    \ = -1 * absolute_deviation\n        }\n        average_absolute_deviation +=\
    \ absolute_deviation\n    }\n    return average_absolute_deviation / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074085
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var output float64 = 0.0\n    var sum float64 = 0.0\n    var sum_absolute_deviation\
    \ float64 = 0.0\n    var abs_deviation float64 = 0.0\n    for _, n := range numbers\
    \ {\n        sum += n\n    }\n    mean := sum / float64(len(numbers))\n    for\
    \ _, n := range numbers {\n        abs_deviation = n - mean\n        if abs_deviation\
    \ < 0 {\n            abs_deviation = -abs_deviation\n        }\n        sum_absolute_deviation\
    \ += abs_deviation\n    }\n    output = sum_absolute_deviation / float64(len(numbers))\n\
    \    return output\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    total := 0.0\n    for _, num := range numbers {\n        total += num\n\
    \    }\n    mean := total / float64(len(numbers))\n    deviations := 0.0\n   \
    \ for _, num := range numbers {\n        deviations += absolute_difference(num,\
    \ mean)\n    }\n    return deviations / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz0ascyvy_test.go:23:23: undefined: absolute_difference

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    deviations := make([]float64, len(numbers))\n    for i, v := range numbers\
    \ {\n        deviations[i] = v - mean\n    }\n    return mean(fabs(deviations))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph2k0x2x4_test.go:19:13: undefined: mean

    /tmp/tmph2k0x2x4_test.go:24:17: undefined: fabs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    sum := 0.0\n \
    \   for _, x := range numbers {\n        sum += x\n    }\n    mean := sum / float64(len(numbers))\n\
    \    deviation_sum := 0.0\n    for _, x := range numbers {\n        deviation_sum\
    \ += abs(x - mean)\n    }\n    return deviation_sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0r984m3_test.go:26:26: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074085
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // calculate mean\n    var mean float64 = 0.0\n    for _, number := range\
    \ numbers {\n        mean += number\n    }\n    mean /= float64(len(numbers))\n\
    \n    // calculate absolute deviations from mean\n    deviations := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        deviations[i] =\
    \ mean - number\n        if deviations[i] < 0 {\n            deviations[i] *=\
    \ -1\n        }\n    }\n\n    // calculate average absolute deviation\n    var\
    \ sum float64 = 0.0\n    for _, deviation := range deviations {\n        sum +=\
    \ deviation\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074085
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // calculate the sum\n    var sum float64 = 0.0\n    for _, number :=\
    \ range numbers {\n        sum += number\n    }\n    // find mean\n    mean :=\
    \ sum / float64(len(numbers))\n    // calculate the absolute differences between\
    \ all elements and mean\n    var absolute_differences []float64\n    for _, number\
    \ := range numbers {\n        absolute_differences = append(absolute_differences,\
    \ number - mean)\n    }\n    // calculate sum of absolute differences\n    var\
    \ sum_of_absolute_differences float64 = 0.0\n    for _, number := range absolute_differences\
    \ {\n        sum_of_absolute_differences += number\n    }\n    // return absolute\
    \ difference mean\n    return sum_of_absolute_differences / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp1anivl___test.go:52: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp1anivl___test.go:52:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp1anivl___test.go:52: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = mean(numbers)\n    for\
    \ _, i := range numbers {\n        sum += absolute_value(i - mean)\n    }\n  \
    \  return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpln4ene8v_test.go:17:24: undefined: mean

    /tmp/tmpln4ene8v_test.go:19:16: undefined: absolute_value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    len := float64(len(numbers))\n    mean := sum / len\n\
    \    for _, number := range numbers {\n        sum += number\n    }\n    for _,\
    \ number := range numbers {\n        sum += math.Abs(number - mean)\n    }\n \
    \   return sum / len\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzgifp_4z_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean first\n    mean := Sum(numbers) / float64(len(numbers))\n\
    \    var num_abs_difference float64\n    for _, n := range numbers {\n       \
    \ num_abs_difference += Abs(n - mean)\n    }\n    return num_abs_difference /\
    \ float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw91v7mq5_test.go:17:13: undefined: Sum

    /tmp/tmpw91v7mq5_test.go:20:31: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    N := len(numbers)\n    if N == 0 {\n        return 0.0\n    }\n    sum\
    \ := 0.0\n    mean := 0.0\n    for _, val := range numbers {\n        sum += val\n\
    \    }\n    mean = sum / float64(N)\n    sum = 0.0\n    for _, val := range numbers\
    \ {\n        sum += abs(val - mean)\n    }\n    return sum / float64(N)\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp759fgz8e_test.go:28:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074085
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Your code here\n    var total float64 = 0\n    var count float64 =\
    \ 0\n    for _, number := range numbers {\n        total += number\n        count\
    \ += 1\n    }\n    mean := total / count\n    var sum_distances float64 = 0\n\
    \    for _, number := range numbers {\n        sum_distances += math.Abs(number\
    \ - mean)\n    }\n    return sum_distances / count\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5qdg10u7_test.go:26:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074085
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj6n78an5_test.go:34:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n_len := len(numbers)\n    if n_len == 0 {\n        return 0.0\n    }\n\
    \    _mean := mean(numbers)\n    sum := 0.0\n    for _, x := range numbers {\n\
    \        sum += float64(int64(x - _mean))\n    }\n    return sum / float64(n_len)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9t1pcqq_test.go:20:14: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074085
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    // find the sum of all the numbers\n    for _, element\
    \ := range numbers {\n        sum += element\n    }\n    // calculate the mean\
    \ of all the numbers\n    mean := sum / float64(len(numbers))\n    // calculate\
    \ the absolute differences from the mean\n    absolute_differences := make([]float64,\
    \ len(numbers))\n    for i, element := range numbers {\n        absolute_differences[i]\
    \ = element - mean\n        if absolute_differences[i] < 0 {\n            absolute_differences[i]\
    \ *= -1\n        }\n    }\n    // find the sum of the absolute differences\n \
    \   sum = 0.0\n    for _, element := range absolute_differences {\n        sum\
    \ += element\n    }\n    // return the average absolute difference\n    return\
    \ sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074085
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Verify the input is not empty\n    if len(numbers) == 0 {\n      \
    \  return 0.0\n    }\n\n    // First, calculate the mean\n    sum := 0.0\n   \
    \ for _, number := range numbers {\n        sum += number\n    }\n    mean :=\
    \ sum / float64(len(numbers))\n\n    // Second, sum the differences between mean\
    \ and each element\n    differences := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        difference := number - mean\n        differences[i]\
    \ = difference\n    }\n\n    // Third, calculate the average of differences\n\
    \    sum = 0.0\n    for _, difference := range differences {\n        sum += difference\n\
    \    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpnzx3sveg_test.go:58: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpnzx3sveg_test.go:58:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpnzx3sveg_test.go:58: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074086
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var length float64 = float64(len(numbers))\n\
    \    for _, num := range numbers {\n        sum += num\n    }\n    mean := sum\
    \ / length\n    var mad float64 = 0.0\n    for _, num := range numbers {\n   \
    \     mad += abs(num - mean)\n    }\n    return mad / length\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0q3t4fwz_test.go:24:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074086
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // use Average() to calculate average of a slice of numbers\n    mean\
    \ := Average(numbers)\n    var absolute_differences float64\n    for _, x := range\
    \ numbers {\n        absolute_differences += math.Abs(x - mean)\n    }\n    return\
    \ absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3nioi26_test.go:17:13: undefined: Average

    /tmp/tmpv3nioi26_test.go:20:33: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074086
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, n := range numbers {\n        sum += n\n    }\n\
    \    mean := sum / float64(len(numbers))\n    mad := 0.0\n    for _, n := range\
    \ numbers {\n        mad += abs_f64(n - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl25477qe_test.go:23:16: undefined: abs_f64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074086
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var len int = len(numbers)\n    for _, number\
    \ := range numbers {\n        sum += number\n    }\n    mean := sum / float64(len)\n\
    \    var diff float64 = 0.0\n    for _, number := range numbers {\n        diff\
    \ += math.Abs(number - mean)\n    }\n    return diff / float64(len)\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf0t718_t_test.go:24:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074086
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var mad float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var count int = 0\n\n    // Do a quick\
    \ and dirty pass to calculate mean, can't calculate MAD\n    // without it.\n\
    \    for _, number := range numbers {\n        sum += number\n        count +=\
    \ 1\n    }\n    mean = sum / float64(count)\n\n    // Build up the MAD calculation\
    \ as we iterate again over the dataset\n    for _, number := range numbers {\n\
    \        diff = number - mean\n        if diff < 0 {\n            diff = -diff\n\
    \        }\n        mad += diff\n    }\n    return mad / float64(count)\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074087
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO: Implement this function\n    n := len(numbers)\n    mean :=\
    \ 0.0\n    for _, v := range numbers {\n        mean += v\n    }\n    mean /=\
    \ float64(n)\n    total := 0.0\n    for _, v := range numbers {\n        total\
    \ += math.Abs(v - mean)\n    }\n    return total / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpydclldji_test.go:25:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074087
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // When there are no numbers,\n    // we return the zero value of float.\n\
    \    if len(numbers) == 0 {\n        return 0.0\n    }\n\n    // Find the mean\
    \ (average) of the numbers\n    var sum float64 = 0.0\n    for _, number := range\
    \ numbers {\n        sum += number\n    }\n    var mean float64 = sum / float64(len(numbers))\n\
    \n    // For each number, find the absolute difference\n    // between it and\
    \ the mean.\n    // Then sum all of these absolute differences.\n    var total_difference\
    \ float64 = 0.0\n    for _, number := range numbers {\n        var difference\
    \ float64 = number - mean\n        if difference < 0 {\n            difference\
    \ = -difference\n        }\n        total_difference += difference\n    }\n\n\
    \    // Finally, divide this sum by the number of elements\n    // to get the\
    \ mean absolute deviation.\n    return total_difference / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074087
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := sum(numbers)\
    \ / float64(len(numbers))\n    deviation := 0.0\n    for _, number := range numbers\
    \ {\n        deviation += abs(number - mean)\n    }\n    return deviation / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplunmigba_test.go:19:13: undefined: sum

    /tmp/tmplunmigba_test.go:22:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074087
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        panic(\"Expected at least one number.\"\
    )\n    }\n    if len(numbers) == 1 {\n        return 0.0\n    }\n    numbers_mean\
    \ := 0.0\n    for _, number := range numbers {\n        numbers_mean += number\n\
    \    }\n    numbers_mean /= float64(len(numbers))\n    absolute_deviations :=\
    \ make([]float64, len(numbers))\n    for i, number := range numbers {\n      \
    \  absolute_deviations[i] = number - numbers_mean\n        if absolute_deviations[i]\
    \ < 0 {\n            absolute_deviations[i] *= -1.0\n        }\n    }\n    absolute_deviations_sum\
    \ := 0.0\n    for _, deviation := range absolute_deviations {\n        absolute_deviations_sum\
    \ += deviation\n    }\n    return absolute_deviations_sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074087
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // find the mean of the dataset\n    mean := 0.0\n    for _, v := range\
    \ numbers {\n        mean += v\n    }\n    mean /= float64(len(numbers))\n\n \
    \   // find the absolute distance from the mean for each number\n    // and compute\
    \ the mean of these numbers\n    absolute_deviations := make([]float64, len(numbers))\n\
    \    for i, v := range numbers {\n        absolute_deviations[i] = v - mean\n\
    \        if absolute_deviations[i] < 0 {\n            absolute_deviations[i] *=\
    \ -1\n        }\n    }\n    mean_absolute_deviation := 0.0\n    for _, v := range\
    \ absolute_deviations {\n        mean_absolute_deviation += v\n    }\n    mean_absolute_deviation\
    \ /= float64(len(absolute_deviations))\n\n    return mean_absolute_deviation\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074087
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, number := range numbers {\n        mean += number\n\
    \    }\n    mean /= float64(len(numbers))\n\n    deviation := 0.0\n    for _,\
    \ number := range numbers {\n        deviation += abs(number - mean)\n    }\n\
    \    deviation /= float64(len(numbers))\n\n    return deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy7myzvub_test.go:24:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074087
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO\n    //return 0.0\n    var sum,num float64\n    for _, value\
    \ := range numbers {\n        sum += value\n    }\n    mean := sum / float64(len(numbers))\n\
    \    for _, value := range numbers {\n        num += value - mean\n    }\n   \
    \ return num / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpjnxpr4ji_test.go:44: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpjnxpr4ji_test.go:44:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpjnxpr4ji_test.go:44: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074087
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64 = 0.0\n    var sum = 0.0\n    for _, element := range\
    \ numbers {\n        sum += element\n    }\n    mean = sum / float64(len(numbers))\n\
    \    var mad float64 = 0.0\n    for _, element := range numbers {\n        mad\
    \ += absolute_difference(element, mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkywiclxd_test.go:24:16: undefined: absolute_difference

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074087
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        panic(\"mean_absolute_deviation(): input\
    \ must have at least one element\")\n    }\n    //\n    var sum float64 = 0.0\n\
    \    for _, number := range numbers {\n        sum += number\n    }\n    //\n\
    \    mean := sum / float64(len(numbers))\n    //\n    var sum_of_squares float64\
    \ = 0.0\n    for _, number := range numbers {\n        sum_of_squares += (number\
    \ - mean) * (number - mean)\n    }\n    //\n    return sum_of_squares / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp_122xxdu_test.go:50: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp_122xxdu_test.go:50:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp_122xxdu_test.go:50: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074087
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp26rexpns_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp26rexpns_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp26rexpns_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074087
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var x_mean float64\n    x_mean = mean(numbers)\n    return arithmetic_mean(deviations(numbers,\
    \ x_mean))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb_x4lwdv_test.go:17:14: undefined: mean

    /tmp/tmpb_x4lwdv_test.go:18:12: undefined: arithmetic_mean

    /tmp/tmpb_x4lwdv_test.go:18:28: undefined: deviations

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074087
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    mean := arithmetic_mean(numbers)\n    for _, num := range\
    \ numbers {\n        sum += math.Abs(num - mean)\n    }\n    return sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdsghipor_test.go:17:13: undefined: arithmetic_mean

    /tmp/tmpdsghipor_test.go:19:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074087
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Find the sum of all numbers\n    var sum float64 = 0.0\n    for _,\
    \ number := range numbers {\n        sum += number\n    }\n    // Calculate the\
    \ average of all numbers\n    average := sum / float64(len(numbers))\n    // Calculate\
    \ the absolute difference between each number and the average,\n    // and sum\
    \ them\n    var sum_absolute_deviation float64 = 0.0\n    for _, number := range\
    \ numbers {\n        sum_absolute_deviation += number - average\n    }\n    //\
    \ Finally calculate the Mean Absolute Deviation by dividing the summed\n    //\
    \ absolute deviations by the number of input numbers\n    return sum_absolute_deviation\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp9mk_mwco_test.go:49: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp9mk_mwco_test.go:49:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp9mk_mwco_test.go:49: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074087
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    len := float64(len(numbers))\n    mean := sum / len\n\
    \    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n\
    \    }\n    return sum / len\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt5dr971m_test.go:20:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074087
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, v := range numbers {\n        mean += v\n   \
    \ }\n    mean /= float64(len(numbers))\n\n    abs_deviation := 0.0\n    for _,\
    \ v := range numbers {\n        abs_deviation += math.Abs(v - mean)\n    }\n \
    \   abs_deviation /= float64(len(numbers))\n\n    return abs_deviation\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_2chuz6i_test.go:24:26: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074087
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    var sum float64\
    \ = 0.0\n    for _, x := range numbers {\n        sum += x\n    }\n    mean :=\
    \ sum / float64(len(numbers))\n    var sum_sq float64 = 0.0\n    for _, x := range\
    \ numbers {\n        sum_sq += (x - mean) * (x - mean)\n    }\n    variance :=\
    \ sum_sq / float64(len(numbers))\n    return variance\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpo6cq310g_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpo6cq310g_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpo6cq310g_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074087
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj6n78an5_test.go:34:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Set a variable for the mean of the dataset\n    // Use a variable\
    \ for the sum of the dataset (float64 for accuracy)\n    // Loop over the dataset\n\
    \    // Add the current number to sum\n    // Calculate the mean of the dataset\n\
    \    // Set a variable for the sum of the absolute differences from the mean\n\
    \    // Loop over the dataset\n    // Add the absolute difference between the\
    \ current number and the mean\n    // Calculate the mean absolute deviation of\
    \ the dataset\n    // Return the mean absolute deviation of the dataset\n    //\
    \ <YOUR CODE GOES HERE>\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmprw3i4qx1_test.go:45: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmprw3i4qx1_test.go:45:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmprw3i4qx1_test.go:45: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074088
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum, m float64 = 0.0, 0.0\n    for _, num := range numbers {\n  \
    \      sum += num\n    }\n    mean := sum / float64(len(numbers))\n    for _,\
    \ num := range numbers {\n        m += math.Abs(num - mean)\n    }\n    return\
    \ m / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1efnb9hn_test.go:22:14: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074088
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp26rexpns_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp26rexpns_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp26rexpns_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074087
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64 = 0.0\n    for _, number := range numbers {\n     \
    \   total += number\n    }\n    // Calculate mean\n    mean := total / float64(len(numbers))\n\
    \    // Calculate absolute deviation between each element and the mean\n    deviations\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     deviations[i] = float64(number - mean)\n    }\n    // Calculate average\
    \ of absolute values of these deviations\n    var total_deviation float64 = 0.0\n\
    \    for _, deviation := range deviations {\n        total_deviation += float64(deviation)\n\
    \    }\n    average_deviation := total_deviation / float64(len(numbers))\n   \
    \ return average_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpc2rp11yc_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpc2rp11yc_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpc2rp11yc_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074088
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    var result float64\
    \ = 0.0\n    var mean float64 = mean_of_numbers(numbers)\n    for _, element :=\
    \ range numbers {\n        result += math.Abs(element - mean)\n    }\n    return\
    \ result / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsm735v1i_test.go:20:24: undefined: mean_of_numbers

    /tmp/tmpsm735v1i_test.go:22:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074088
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := len(numbers)\n    mean := 0.0\n    for _, elem := range numbers\
    \ {\n        mean += elem\n    }\n    mean /= float64(n)\n    MAD := 0.0\n   \
    \ for _, elem := range numbers {\n        diff := elem - mean\n        if diff\
    \ < 0 {\n            diff = -diff\n        }\n        MAD += diff\n    }\n   \
    \ MAD /= float64(n)\n    return MAD\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074088
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum, count := 0.0, 0.0\n    for _, x := range numbers {\n        sum\
    \ += x\n        count += 1.0\n    }\n    mean := sum / count\n    sum_distances,\
    \ count_distances := 0.0, 0.0\n    for _, x := range numbers {\n        sum_distances\
    \ += x - mean\n        count_distances += 1.0\n    }\n    return sum_distances\
    \ / count_distances\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp17tpglkh_test.go:45: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp17tpglkh_test.go:45:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp17tpglkh_test.go:45: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074088
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Implement your solution here\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpsnaj2llr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpsnaj2llr_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpsnaj2llr_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum_of_differences float64 = 0.0\n    mean := average(numbers)\n\
    \    for _, number := range numbers {\n        sum_of_differences += absolute_difference(number,\
    \ mean)\n    }\n    return sum_of_differences / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpch8chza2_test.go:17:13: undefined: average

    /tmp/tmpch8chza2_test.go:19:31: undefined: absolute_difference

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074088
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n\tnum_numbers := len(numbers)\n\tsum := 0.0\n\tfor _, num := range numbers\
    \ {\n\t\tsum += num\n\t}\n\tmean := sum / float64(num_numbers)\n\tresult := 0.0\n\
    \tfor _, num := range numbers {\n\t\tresult += abs(num - mean)\n\t}\n\treturn\
    \ result / float64(num_numbers)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcrw9gs9x_test.go:24:13: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074088
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64 = 0.0\n    var length int = len(numbers)\n    var mean\
    \ float64 = 0.0\n    var mad float64 = 0.0\n\n    // if there are no numbers,\
    \ return 0\n    if length == 0 {\n        return 0.0\n    }\n\n    // find mean\
    \ of dataset\n    for _, number := range numbers {\n        total += number\n\
    \    }\n    mean = total / float64(length)\n\n    // calculate sum of deviations\n\
    \    for _, number := range numbers {\n        dev := number - mean\n        if\
    \ dev < 0 {\n            dev = -dev\n        }\n        mad += dev\n    }\n\n\
    \    // mean absolute deviation is MAD divided by length\n    return mad / float64(length)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    length := len(numbers)\n    if length == 0\
    \ {\n        return 0.0\n    }\n    mean := sum_of_numbers(numbers) / float64(length)\n\
    \    for _, number := range numbers {\n        sum += absolute_difference(number,\
    \ mean)\n    }\n    return sum / float64(length)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwkq5vjr2_test.go:21:13: undefined: sum_of_numbers

    /tmp/tmpwkq5vjr2_test.go:23:16: undefined: absolute_difference

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, number := range numbers {\n        mean += number\n\
    \    }\n    mean /= float64(len(numbers))\n\n    // Now get the deviations around\
    \ the mean\n    deviations := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        deviations[i] = number - mean\n    }\n\n    // Get\
    \ their absolute values\n    for i, _ := range deviations {\n        if deviations[i]\
    \ < 0 {\n            deviations[i] *= -1\n        }\n    }\n\n    // Now sum them\
    \ up\n    abs_deviations := 0.0\n    for _, deviation := range deviations {\n\
    \        abs_deviations += deviation\n    }\n\n    // And get their average\n\
    \    mean_absolute_deviation := abs_deviations / float64(len(numbers))\n\n   \
    \ return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var sum_of_squares float64 = 0.0\n    // Calculate\
    \ the mean of the dataset\n    for _, value := range numbers {\n        sum +=\
    \ value\n        sum_of_squares += value * value\n    }\n    var mean float64\
    \ = sum / float64(len(numbers))\n    // Calculate the average absolute distance\
    \ from the mean\n    var mad float64 = 0.0\n    for _, value := range numbers\
    \ {\n        mad += math.Abs(value - mean)\n    }\n    mad /= float64(len(numbers))\n\
    \    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uui41y7_test.go:27:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Calculate the mean\n    var sum float64 = 0.0\n    for _, number :=\
    \ range numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\
    \n    // Calculate the sum of absolute differences from the mean\n    var sum_of_absolute_differences\
    \ float64 = 0.0\n    for _, number := range numbers {\n        sum_of_absolute_differences\
    \ += Abs(number - mean)\n    }\n\n    // Divide by the number of elements\n  \
    \  return sum_of_absolute_differences / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvl5m_370_test.go:26:40: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // find mean\n    mean := sum(numbers) / float64(len(numbers))\n    //\
    \ for each number in numbers, find difference with mean\n    diffs := make([]float64,\
    \ len(numbers))\n    for i, val := range numbers {\n        diffs[i] = val - mean\n\
    \    }\n    // for each number in diffs, take absolute value\n    for i, val :=\
    \ range diffs {\n        diffs[i] = abs(val)\n    }\n    // calculate mean of\
    \ diffs\n    mean_absolute_deviation := sum(diffs) / float64(len(diffs))\n   \
    \ return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3dqm5nv_test.go:17:13: undefined: sum

    /tmp/tmpz3dqm5nv_test.go:25:20: undefined: abs

    /tmp/tmpz3dqm5nv_test.go:28:32: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    n := float64(len(numbers))\n    for _, num := range numbers\
    \ {\n        sum += num\n    }\n    x_mean := sum / n\n    sum = 0.0\n    for\
    \ _, num := range numbers {\n        sum += abs(num - x_mean)\n    }\n    return\
    \ sum / n\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqy15yoix_test.go:24:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := average(numbers)\n    if (len(numbers) == 0) {\n        return\
    \ 0.0\n    }\n    sum_of_absolute_deviations := 0.0\n    for _, value := range\
    \ numbers {\n        sum_of_absolute_deviations += absolute_deviation(value, mean)\n\
    \    }\n    return sum_of_absolute_deviations / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ylkc1qc_test.go:16:13: undefined: average

    /tmp/tmp6ylkc1qc_test.go:22:39: undefined: absolute_deviation

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    avg := mean(numbers)\n    var sum float64 = 0.0\n    for _, f := range\
    \ numbers {\n        sum += abs(f - avg)\n    }\n    return sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp993iatpe_test.go:16:12: undefined: mean

    /tmp/tmp993iatpe_test.go:19:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum_of_deviations float64\n    var mean float64\n    var average_deviation\
    \ float64\n    var total_elements int\n    var deviation float64\n\n    // Calculate\
    \ the mean from given numbers\n    for _, number := range numbers {\n        mean\
    \ += number\n        total_elements += 1\n    }\n    mean = mean / float64(total_elements)\n\
    \n    // Calculate and sum absolute deviation of each number from the mean\n \
    \   for _, number := range numbers {\n        deviation = number - mean\n    \
    \    if deviation < 0 {\n            deviation = -deviation\n        }\n     \
    \   sum_of_deviations += deviation\n    }\n\n    // Return the mean of absolute\
    \ deviations\n    average_deviation = sum_of_deviations / float64(total_elements)\n\
    \    return average_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074089
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    var sum float64\
    \ = 0.0\n    for _, x := range numbers {\n        sum += x\n    }\n    var mean\
    \ float64 = sum / float64(len(numbers))\n    var absolute_deviations []float64\
    \ = make([]float64, len(numbers))\n    for i, x := range numbers {\n        absolute_deviations[i]\
    \ = float64(int64(x - mean))\n    }\n    var average_absolute_deviation float64\
    \ = 0.0\n    for _, x := range absolute_deviations {\n        average_absolute_deviation\
    \ += x\n    }\n    average_absolute_deviation /= float64(len(numbers))\n    return\
    \ average_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp8jsd9o7o_test.go:51: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp8jsd9o7o_test.go:51:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp8jsd9o7o_test.go:51: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // calculate the mean of the list\n    mean := mean(numbers)\n    deviation\
    \ := 0.0\n    // loop over list and compute absolute deviation\n    for _, value\
    \ := range numbers {\n        deviation += abs(value - mean)\n    }\n    // return\
    \ the mean absolute deviation\n    return deviation / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3binyuou_test.go:17:13: undefined: mean

    /tmp/tmp3binyuou_test.go:21:22: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum, mean := 0.0, 0.0\n    for _, number := range numbers {\n       \
    \ sum += number\n    }\n    mean = sum / float64(len(numbers))\n    sum = 0.0\n\
    \    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n\
    \    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm25h6vzr_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    for _, x := range numbers {\n        mean += x\n   \
    \ }\n    mean /= float64(len(numbers))\n    dev := 0.0\n    for _, x := range\
    \ numbers {\n        dev += abs(x - mean)\n    }\n    return dev / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo5us4201_test.go:23:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074089
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    for _, num := range numbers {\n        sum\
    \ += num\n    }\n    mean := sum / float64(len(numbers))\n    var sum_diff float64\
    \ = 0.0\n    for _, num := range numbers {\n        sum_diff += abs(num - mean)\n\
    \    }\n    mean_diff := sum_diff / float64(len(numbers))\n    return mean_diff\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5892g8tu_test.go:23:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074090
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := 0.0\n    dev_sum := 0.0\n    for _, x := range numbers {\n  \
    \      mean += x\n    }\n    mean /= float64(len(numbers))\n    for _, x := range\
    \ numbers {\n        dev_sum += float64(x - mean)\n    }\n    return dev_sum /\
    \ float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n\
    \  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpfx6daq0k_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpfx6daq0k_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpfx6daq0k_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074090
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    fmt.Println(\"numbers:\", numbers)\n    size := len(numbers)\n    if\
    \ size == 0 {\n        panic(\"Cannot calculate the mean of an empty list\")\n\
    \    }\n    mean := sum(numbers) / float64(size)\n    fmt.Println(\"mean:\", mean)\n\
    \    var deviations []float64\n    for _, number := range numbers {\n        deviation\
    \ := float64(number) - mean\n        absolute_deviation := float64(0)\n      \
    \  if deviation < 0 {\n            absolute_deviation = deviation * -1\n     \
    \   } else {\n            absolute_deviation = deviation\n        }\n        deviations\
    \ = append(deviations, absolute_deviation)\n    }\n    fmt.Println(\"deviations:\"\
    , deviations)\n    average_deviation := sum(deviations) / float64(size)\n    return\
    \ average_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8ohew93_test.go:21:13: undefined: sum

    /tmp/tmpj8ohew93_test.go:35:26: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074090
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // for the given list of numbers, calculate the mean\n    mean := mean(numbers)\n\
    \    // for each element in the numbers array, subtract the mean, take the\n \
    \   // absolute value, and sum it into the \"sum\" variable\n    sum := 0.0\n\
    \    for _, number := range numbers {\n        sum += math.Abs(number - mean)\n\
    \    }\n    // divide the sum by the length of the numbers array to get the mean\n\
    \    // absolute deviation\n    return sum / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24a75wwc_test.go:17:13: undefined: mean

    /tmp/tmp24a75wwc_test.go:22:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean, num, dev, mad float64\n    var n int\n\n    n = len(numbers)\n\
    \    if n == 0 {\n        panic(\"Empty list\")\n    }\n\n    mean = 0.0\n   \
    \ for _, num = range numbers {\n        mean += num\n    }\n    mean /= float64(n)\n\
    \n    mad = 0.0\n    for _, num = range numbers {\n        dev = num - mean\n\
    \        if dev < 0 {\n            dev = -dev\n        }\n        mad += dev\n\
    \    }\n    mad /= float64(n)\n\n    return mad\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074091
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    sum := 0.0\n \
    \   for _, number := range numbers {\n        sum += number\n    }\n    mean :=\
    \ sum / float64(len(numbers))\n    // calculate MAD\n    sum_of_deviations :=\
    \ 0.0\n    for _, number := range numbers {\n        sum_of_deviations += float64(Abs(number\
    \ - mean))\n    }\n    return sum_of_deviations / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4gath57x_test.go:27:38: undefined: Abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    count := float64(len(numbers))\n    if count <= 0 {\n\
    \        panic(\"Cannot calculate MAD for empty dataset\")\n    }\n    mean :=\
    \ sum / count\n    for _, number := range numbers {\n        sum += math.Abs(number\
    \ - mean)\n    }\n    return sum / count\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0y80u36_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    numElements := len(numbers)\n    runningTotal := 0.0\n    mean := 0.0\n\
    \    mean_absolute_deviation := 0.0\n\n    // Calculate the mean\n    for _, element\
    \ := range numbers {\n        runningTotal += element\n    }\n    mean = runningTotal\
    \ / float64(numElements)\n\n    // Calculate the deviation\n    for _, element\
    \ := range numbers {\n        deviation := element - mean\n        if deviation\
    \ < 0 {\n            deviation = deviation * -1\n        }\n        mean_absolute_deviation\
    \ += deviation\n    }\n    mean_absolute_deviation = mean_absolute_deviation /\
    \ float64(numElements)\n\n    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    //\n    // Your code goes here.\n    //\n    sum := 0.0\n    mean :=\
    \ 0.0\n    for _, val := range numbers {\n        sum += val\n    }\n    mean\
    \ = sum / float64(len(numbers))\n    mad := 0.0\n    for _, val := range numbers\
    \ {\n        mad += (val - mean)\n    }\n    return mad / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpb9trpf8z_test.go:47: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpb9trpf8z_test.go:47:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpb9trpf8z_test.go:47: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074091
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total float64 = 0.0\n    var center float64 = 0.0\n    for _, x :=\
    \ range numbers {\n        total += x\n    }\n    if len(numbers) > 0 {\n    \
    \    center = total / float64(len(numbers))\n    }\n    result := 0.0\n    for\
    \ _, x := range numbers {\n        result += abs(x - center)\n    }\n    if len(numbers)\
    \ > 0 {\n        result /= float64(len(numbers))\n    }\n    return result\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jj7xu3w_test.go:26:19: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    var sum float64\
    \ = 0.0\n    var mean float64 = 0.0\n    var mad float64 = 0.0\n    var n float64\
    \ = float64(len(numbers))\n    for _, value := range numbers {\n        sum +=\
    \ value\n    }\n    mean = sum / n\n    for _, value := range numbers {\n    \
    \    mad += abs_float64(value - mean)\n    }\n    return mad / n\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhl1wqq6_test.go:28:16: undefined: abs_float64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    n := len(numbers)\n\
    \    for _, x := range numbers {\n        sum += x\n    }\n    mean = sum / float64(n)\n\
    \    sum = 0.0\n    for _, x := range numbers {\n        sum += abs(x - mean)\n\
    \    }\n    return sum / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp66cxbvjg_test.go:25:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := float64(len(numbers))\n    total := float64(0)\n    for _, v :=\
    \ range numbers {\n        total += v\n    }\n    mean := total / n\n    variance\
    \ := float64(0)\n    for _, v := range numbers {\n        variance += (v - mean)\
    \ * (v - mean)\n    }\n    return variance / n\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpbiuql24w_test.go:44: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpbiuql24w_test.go:44:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpbiuql24w_test.go:44: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074092
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO - Add your code here\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpsw26w9hr_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpsw26w9hr_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpsw26w9hr_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074092
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := arithmetic_mean(numbers)\n    abs_deviations := make([]float64,\
    \ len(numbers))\n    for i, x := range numbers {\n        abs_deviations[i] =\
    \ math.Abs(x - mean)\n    }\n    return arithmetic_mean(abs_deviations)\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwu5f3hjw_test.go:16:13: undefined: arithmetic_mean

    /tmp/tmpwu5f3hjw_test.go:19:29: undefined: math

    /tmp/tmpwu5f3hjw_test.go:21:12: undefined: arithmetic_mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO\n    // return 0.0\n    return 3.2\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmprss83sr2_test.go:36: expected '%!s(float64=0.5)', got '%!s(float64=3.2)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmprss83sr2_test.go:36:\
    \ expected '%!s(float64=1)', got '%!s(float64=3.2)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmprss83sr2_test.go:36: expected '%!s(float64=1.2)', got '%!s(float64=3.2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074092
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj6n78an5_test.go:34:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    var sum float64\
    \ = 0.0\n    var mean float64 = 0.0\n    var diff float64 = 0.0\n    for _, num\
    \ := range numbers {\n        sum += num\n    }\n    mean = sum / float64(len(numbers))\n\
    \    var sum_deviations float64 = 0.0\n    for _, num := range numbers {\n   \
    \     diff = num - mean\n        if diff < 0 {\n            diff = -diff\n   \
    \     }\n        sum_deviations += diff\n    }\n    return sum_deviations / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074092
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var count float64 = 0.0\n    for _, number\
    \ := range numbers {\n        sum += number\n        count += 1.0\n    }\n   \
    \ mean := sum / count\n    var sum_of_differences float64 = 0.0\n    for _, number\
    \ := range numbers {\n        difference := number - mean\n        sum_of_differences\
    \ += difference\n    }\n    return sum_of_differences / count\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpxxht8bq7_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpxxht8bq7_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpxxht8bq7_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074092
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    /* Fill in the code for this function below */\n    var sum float64 =\
    \ 0\n    for _, value := range numbers {\n        sum += value\n    }\n    var\
    \ len float64 = float64(len(numbers))\n    var mean float64 = sum / len\n    var\
    \ sum_of_absolute_deviation float64 = 0\n    for _, value := range numbers {\n\
    \        var current_absolute_deviation float64 = value - mean\n        if current_absolute_deviation\
    \ < 0 {\n            current_absolute_deviation = -current_absolute_deviation\n\
    \        }\n        sum_of_absolute_deviation += current_absolute_deviation\n\
    \    }\n    var average_absolute_deviation float64 = sum_of_absolute_deviation\
    \ / len\n    return average_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074092
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) < 1 {\n        return 0.0\n    }\n    mean := average(numbers)\n\
    \    var diff float64\n    for _, n := range numbers {\n        diff += abs(n\
    \ - mean)\n    }\n    return diff / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_zyjvnf1_test.go:19:13: undefined: average

    /tmp/tmp_zyjvnf1_test.go:22:17: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074091
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean, dev float64 = 0.0, 0.0\n    var n = len(numbers)\n    for _,\
    \ x := range numbers {\n        mean += x\n    }\n    mean /= float64(n)\n   \
    \ for _, x := range numbers {\n        dev += float64(abs(x - mean))\n    }\n\
    \    return dev / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1h7i3opp_test.go:23:24: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074092
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64 = 0.0\n    sum := 0.0\n    len := float64(len(numbers))\n\
    \    for _, number := range numbers {\n        sum += number\n    }\n    mean\
    \ = sum / len\n    // calculate mean absolute deviation\n    sum = 0.0\n    for\
    \ _, number := range numbers {\n        sum += abs_float64(number - mean)\n  \
    \  }\n    return sum / len\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ih7je5y_test.go:26:16: undefined: abs_float64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074092
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var (\n        mean float64 = 0.0\n        sum float64 = 0.0\n      \
    \  total float64 = 0.0\n    )\n    for _, val := range numbers {\n        sum\
    \ += val\n    }\n    mean = sum / float64(len(numbers))\n    for _, val := range\
    \ numbers {\n        total += (mean - val)\n    }\n    return total / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpm0lopa03_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpm0lopa03_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpm0lopa03_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074092
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Step 1: Find the mean of the numbers.\n    var mean float64 = 0.0\n\
    \    for _, element := range numbers {\n        mean += element\n    }\n    mean\
    \ /= float64(len(numbers))\n\n    // Step 2: Now that we have the mean, calculate\
    \ the deviations.\n    var deviations []float64 = make([]float64, len(numbers))\n\
    \    for i, element := range numbers {\n        deviations[i] = element - mean\n\
    \    }\n\n    // Step 3: Take the absolute value of the deviations.\n    for i,\
    \ element := range deviations {\n        if element < 0 {\n            deviations[i]\
    \ = -element\n        }\n    }\n\n    // Step 4: Calculate the average deviation\n\
    \    var avg_deviation float64 = 0.0\n    for _, element := range deviations {\n\
    \        avg_deviation += element\n    }\n    avg_deviation /= float64(len(numbers))\n\
    \n    return avg_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074092
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    var sum float64 = 0.0\n    for _, n := range\
    \ numbers {\n        sum += math.Abs(n - mean)\n    }\n    return sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8k7isc8q_test.go:16:13: undefined: mean

    /tmp/tmp8k7isc8q_test.go:19:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074092
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    // Calculate the\
    \ mean\n    var sum float64 = 0.0\n    for _, number := range numbers {\n    \
    \    sum += number\n    }\n    mean := sum / float64(len(numbers))\n    // Now\
    \ calculate the absolute differences from the mean\n    var absolute_deviations\
    \ []float64 = make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        absolute_deviations[i] = number - mean\n        if absolute_deviations[i]\
    \ < 0 {\n            absolute_deviations[i] = -absolute_deviations[i]\n      \
    \  }\n    }\n    // Now sum and average the absolute deviations\n    var sum_absolute_deviations\
    \ float64 = 0.0\n    for _, absolute_deviation := range absolute_deviations {\n\
    \        sum_absolute_deviations += absolute_deviation\n    }\n    return sum_absolute_deviations\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // calculate the mean of the dataset\n    mean := sum(numbers) / float64(len(numbers))\n\
    \    // loop over each element in the slice and calculate the\n    // absolute\
    \ difference between each element and the mean\n    var differences []float64\n\
    \    for _, value := range numbers {\n        differences = append(differences,\
    \ absolute_difference(value, mean))\n    }\n    // calculate the mean of the differences\n\
    \    return sum(differences) / float64(len(differences))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphg_dhz9b_test.go:17:13: undefined: sum

    /tmp/tmphg_dhz9b_test.go:22:43: undefined: absolute_difference

    /tmp/tmphg_dhz9b_test.go:25:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum_of_numbers := 0.0\n    for _, value := range numbers {\n        sum_of_numbers\
    \ += value\n    }\n    mean := sum_of_numbers / float64(len(numbers))\n    sum_of_difference\
    \ := 0.0\n    for _, value := range numbers {\n        sum_of_difference += abs(value\
    \ - mean)\n    }\n    return sum_of_difference / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd7cov__m_test.go:23:30: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var total_distance float64\n    num_elements := len(numbers)\n    if\
    \ num_elements == 0 {\n        return 0.0\n    }\n    mean := sum(numbers) / float64(num_elements)\n\
    \    for _, element := range numbers {\n        distance := element - mean\n \
    \       if distance < 0 {\n            distance = -distance\n        }\n     \
    \   total_distance += distance\n    }\n    mean_absolute_deviation := total_distance\
    \ / float64(num_elements)\n    return mean_absolute_deviation\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00rc3b_6_test.go:21:13: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var n float64 = float64(len(numbers))\n    var mean float64 = sum(numbers)\
    \ / n\n    var abs_diffs []float64 = make([]float64, len(numbers))\n    for i,\
    \ number := range numbers {\n        abs_diffs[i] = abs(number - mean)\n    }\n\
    \    return sum(abs_diffs) / n\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxen9v0zq_test.go:17:24: undefined: sum

    /tmp/tmpxen9v0zq_test.go:20:24: undefined: abs

    /tmp/tmpxen9v0zq_test.go:22:12: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var count float64 = 0.0\n    var mean float64\
    \ = 0.0\n    var result float64 = 0.0\n    for _, value := range numbers {\n \
    \       sum += value\n        count += 1.0\n    }\n    mean = sum / count\n  \
    \  for _, value := range numbers {\n        result += (value - mean)\n    }\n\
    \    return result / count\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpftpw921w_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpftpw921w_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpftpw921w_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, num := range numbers {\n        sum += num\n \
    \   }\n    mean := sum / float64(len(numbers))\n    absolute_deviations := make([]float64,\
    \ len(numbers))\n    for i, num := range numbers {\n        absolute_deviations[i]\
    \ = math.Abs(num - mean)\n    }\n    absolute_deviations_sum := 0.0\n    for _,\
    \ num := range absolute_deviations {\n        absolute_deviations_sum += num\n\
    \    }\n    return absolute_deviations_sum / float64(len(numbers))\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkkcaejlb_test.go:23:34: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // TODO\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp26rexpns_test.go:35: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp26rexpns_test.go:35:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp26rexpns_test.go:35: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074087
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj6n78an5_test.go:34:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    abs_deviations\
    \ := make([]float64, len(numbers))\n    mean := mean(numbers)\n    for i, _ :=\
    \ range numbers {\n        abs_deviations[i] = math.Abs(numbers[i] - mean)\n \
    \   }\n    return mean(abs_deviations)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1s8w96xm_test.go:20:13: undefined: mean

    /tmp/tmp1s8w96xm_test.go:22:29: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, x := range numbers {\n        sum += x\n    }\n\
    \    mean := sum / float64(len(numbers))\n    var sum_sq_diffs float64 = 0.0\n\
    \    for _, x := range numbers {\n        sum_sq_diffs += (x - mean) * (x - mean)\n\
    \    }\n    return sum_sq_diffs / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpymb57aiq_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpymb57aiq_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpymb57aiq_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean := sum / float64(len(numbers))\n    sum = 0.0\n    for _, number\
    \ := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return\
    \ sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2bxnksi2_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073937
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    x_mean := mean(numbers)\n    x_sum := 0.0\n    for _, x := range numbers\
    \ {\n        x_sum += math.Abs(x - x_mean)\n    }\n    return x_sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8x1_er70_test.go:16:15: undefined: mean

    /tmp/tmp8x1_er70_test.go:19:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    n := float64(len(numbers))\n    var sum float64\n    for _, x := range\
    \ numbers {\n        sum += x\n    }\n    mean := sum / n\n    var mad float64\n\
    \    for _, x := range numbers {\n        mad += math.Abs(x - mean)\n    }\n \
    \   return mad / n\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate\
    \ := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt97dqjkw_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074093
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var length int\
    \ = len(numbers)\n    for i := 0; i < length; i++ {\n        sum += numbers[i]\n\
    \    }\n    mean = sum / float64(length)\n    var sumsq float64 = 0.0\n    for\
    \ i := 0; i < length; i++ {\n        sumsq += (numbers[i] - mean) * (numbers[i]\
    \ - mean)\n    }\n    return float64(sumsq) / float64(length)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp434dn_se_test.go:45: expected '%!s(float64=0.5)', got '%!s(float64=0.25)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp434dn_se_test.go:45:\
    \ expected '%!s(float64=1)', got '%!s(float64=1.25)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp434dn_se_test.go:45: expected '%!s(float64=1.2)', got '%!s(float64=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // get the mean of the dataset\n    mean := mean(numbers)\n    // iterate\
    \ over the dataset and calculate the absolute value of the\n    // difference\
    \ of each item vs the mean\n    var sum_of_absolute_deviations float64 = 0.0\n\
    \    for _, number := range numbers {\n        sum_of_absolute_deviations += absolute_value(number\
    \ - mean)\n    }\n    return sum_of_absolute_deviations / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb0kgf07c_test.go:17:13: undefined: mean

    /tmp/tmpb0kgf07c_test.go:22:39: undefined: absolute_value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // calculate the mean of this dataset\n    mean := 0.0\n    for _, num\
    \ := range numbers {\n        mean += num\n    }\n    mean /= float64(len(numbers))\n\
    \n    // calculate the average absolute difference between each\n    // element\
    \ and the mean:\n    abs_diff_sum := 0.0\n    for _, num := range numbers {\n\
    \        abs_diff_sum += math.Abs(num - mean)\n    }\n    return abs_diff_sum\
    \ / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa170y189_test.go:27:25: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum_diff := 0.0\n    sum_numbers := 0.0\n    for _, elem := range numbers\
    \ {\n        sum_numbers += elem\n    }\n    mean := sum_numbers / float64(len(numbers))\n\
    \    for _, elem := range numbers {\n        sum_diff += float64(int64(elem -\
    \ mean))\n    }\n    return sum_diff / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp8fahihrm_test.go:43: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp8fahihrm_test.go:43:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp8fahihrm_test.go:43: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var mean float64 = 0.0\n    var res float64\
    \ = 0.0\n    for _, num := range numbers {\n        sum += num\n    }\n    mean\
    \ = sum / float64(len(numbers))\n    for _, num := range numbers {\n        res\
    \ += math.Abs(num - mean)\n    }\n    return res / float64(len(numbers))\n}\n\n\
    func TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo5cdi_6_test.go:24:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    sum_abs_diff := 0.0\n    for _, num := range\
    \ numbers {\n        sum_abs_diff += absolute_difference(num, mean)\n    }\n \
    \   return sum_abs_diff / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg1gk1qu6_test.go:16:13: undefined: mean

    /tmp/tmpg1gk1qu6_test.go:19:25: undefined: absolute_difference

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        panic(\"no numbers\")\n    }\n    sum\
    \ := 0.0\n    for _, number := range numbers {\n        sum += number\n    }\n\
    \    mean := sum / float64(len(numbers))\n    var diffs []float64\n    for _,\
    \ number := range numbers {\n        diffs = append(diffs, math.Abs(number - mean))\n\
    \    }\n    return mean_of_slice(diffs)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10mvozuj_test.go:26:31: undefined: math

    /tmp/tmp10mvozuj_test.go:28:12: undefined: mean_of_slice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    return 0.0\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n \
    \ candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}),\
    \ expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpj6n78an5_test.go:34:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpj6n78an5_test.go:34: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074081
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    // Get number of numbers\n    n := len(numbers)\n    if n == 0 {\n  \
    \      return 0.0\n    }\n\n    // Get sum of all numbers\n    sum := 0.0\n  \
    \  for _, number := range numbers {\n        sum += number\n    }\n\n    // Get\
    \ mean of all numbers\n    mean := sum / float64(n)\n\n    // Get absolute difference\
    \ between each number and mean\n    sum_of_absolute_differences := 0.0\n    for\
    \ _, number := range numbers {\n        sum_of_absolute_differences += math.Abs(number\
    \ - mean)\n    }\n\n    // Return average absolute difference between each number\
    \ and mean\n    return sum_of_absolute_differences / float64(n)\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjy872160_test.go:34:40: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, number := range numbers {\n        sum += number\n\
    \    }\n    mean := sum / float64(len(numbers))\n    sum = 0.0\n    for _, number\
    \ := range numbers {\n        sum += math.Abs(number - mean)\n    }\n    return\
    \ sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2bxnksi2_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073937
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    length := len(numbers)\n    if length == 0 {\n      \
    \  return 0.0\n    }\n    mean := average(numbers)\n    for _, number := range\
    \ numbers {\n        sum += abs(number - mean)\n    }\n    return sum / float64(length)\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqc2scw7w_test.go:21:13: undefined: average

    /tmp/tmpqc2scw7w_test.go:23:16: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 0
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var mean float64\n    var sum float64\n\n    for _, number := range numbers\
    \ {\n        sum += number\n    }\n    mean = sum / float64(len(numbers))\n\n\
    \    var sum_diff float64\n    for _, number := range numbers {\n        diff\
    \ := number - mean\n        if diff < 0 {\n            diff = -diff\n        }\n\
    \        sum_diff += diff\n    }\n\n    return sum_diff / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    sum := 0.0\n \
    \   for _, number := range numbers {\n        sum += number\n    }\n    mean :=\
    \ sum / float64(len(numbers))\n    sum = 0.0\n    for _, number := range numbers\
    \ {\n        sum += float64(int64(number - mean))\n    }\n    return sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmpoeevca1m_test.go:46: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmpoeevca1m_test.go:46:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmpoeevca1m_test.go:46: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074094
- exit_code: 1
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    var sum float64 = 0.0\n    var count float64 = 0.0\n    var mean float64\
    \ = 0.0\n    var diff float64 = 0.0\n    var abs_diff float64 = 0.0\n    var mad\
    \ float64 = 0.0\n\n    // Calculate the mean of the input numbers.\n    for _,\
    \ value := range numbers {\n        sum += value\n        count += 1.0\n    }\n\
    \    mean = sum / count\n\n    // Calculate the absolute difference between each\
    \ input number and the mean.\n    for _, value := range numbers {\n        diff\
    \ = value - mean\n        abs_diff += diff\n    }\n\n    // Calculate the average\
    \ absolute difference (MAD).\n    mad = abs_diff / count\n\n    return mad\n}\n\
    \nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMean_Absolute_Deviation (0.00s)\n    --- FAIL: TestMean_Absolute_Deviation/test_num__0\
    \ (0.00s)\n        tmp0ta2u9fw_test.go:57: expected '%!s(float64=0.5)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestMean_Absolute_Deviation/test_num__1 (0.00s)\n        tmp0ta2u9fw_test.go:57:\
    \ expected '%!s(float64=1)', got '%!s(float64=0)'\n    --- FAIL: TestMean_Absolute_Deviation/test_num__2\
    \ (0.00s)\n        tmp0ta2u9fw_test.go:57: expected '%!s(float64=1.2)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        panic(\"numbers must not be empty\")\n\
    \    }\n    mean := mean(numbers)\n    diffs := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        diffs[i] = number - mean\n    }\n\
    \    return mean(abs(diffs))\n}\n\nfunc TestMean_Absolute_Deviation(t *testing.T)\
    \ {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0, 2.0,\
    \ 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8llikmv_test.go:19:13: undefined: mean

    /tmp/tmpd8llikmv_test.go:24:17: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    sum := 0.0\n    for _, v := range numbers {\n        sum += v\n    }\n\
    \    mean := sum / float64(len(numbers))\n    sum = 0.0\n    for _, v := range\
    \ numbers {\n        sum += math.Abs(v - mean)\n    }\n    return sum / float64(len(numbers))\n\
    }\n\nfunc TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz42o86qs_test.go:23:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    var sum float64 = 0.0\n    for _, value :=\
    \ range numbers {\n        diff := mean - value\n        sum += diff\n    }\n\
    \    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8q8s0y_q_test.go:16:13: undefined: mean

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    if len(numbers) == 0 {\n        return 0.0\n    }\n    mean := mean(numbers)\n\
    \    var sum float64 = 0.0\n    for _, x := range numbers {\n        sum += math.Abs(x\
    \ - mean)\n    }\n    return sum / float64(len(numbers))\n}\n\nfunc TestMean_Absolute_Deviation(t\
    \ *testing.T) {\n  candidate := mean_absolute_deviation\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0}), expected: 0.5 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0b82n3r_test.go:19:13: undefined: mean

    /tmp/tmpv0b82n3r_test.go:22:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
- exit_code: 2
  program: "package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is\
    \ the average absolute difference between each\n// element and a centerpoint (mean\
    \ in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0,\
    \ 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64\
    \ {\n    mean := mean(numbers)\n    abs_differences := []float64{}\n    for _,\
    \ number := range numbers {\n        abs_differences = append(abs_differences,\
    \ math.Abs(number - mean))\n    }\n    return mean(abs_differences)\n}\n\nfunc\
    \ TestMean_Absolute_Deviation(t *testing.T) {\n  candidate := mean_absolute_deviation\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0}), expected:\
    \ 0.5 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0}), expected: 1.0\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ 1.2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptqzcy8po_test.go:16:13: undefined: mean

    /tmp/tmptqzcy8po_test.go:19:51: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074094
