name: HumanEval_117_select_words
language: go_test.go
prompt: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s and a natural number n, you have been tasked to implement \n\
  // a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"\
  Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary\
  \ had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"\
  simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n\
  // []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"\
  }\nfunc select_words(s string, n int) []string {\n"
tests: "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
  \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\",\
  \ 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
  \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\"\
  , 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\",\
  \ 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected:\
  \ []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"\
  b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    res := []string{}\n    if s == \"\" {\n        return res\n   \
    \ }\n    words := strings.Split(s, \" \")\n    for _,word := range words {\n \
    \       if is_match(word, n) {\n            res = append(res, word)\n        }\n\
    \    }\n    return res\n}\n", "    sel_words := []string{}\n    words := strings.Split(s,\
    \ \" \")\n    for _, word := range words {\n        n_cons := 0\n        for _,\
    \ c := range word {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                n_cons++\n            }\n        }\n        if\
    \ n_cons == n {\n            sel_words = append(sel_words, word)\n        }\n\
    \    }\n    return sel_words\n}\n", "    words := []string{}\n    chars := []rune(s)\n\
    \    begin, end := 0, 0\n    for i, c := range chars {\n        if c == ' ' {\n\
    \            if (end - begin) == n {\n                words = append(words, string(chars[begin:end]))\n\
    \            }\n            begin = i + 1\n            end = i + 1\n        }\
    \ else {\n            end = i + 1\n        }\n    }\n    if (end - begin) == n\
    \ {\n        words = append(words, string(chars[begin:end]))\n    }\n    return\
    \ words\n}\n", "    return []string{}\n}\n", "    var words []string\n    for\
    \ _, word := range words_from_string(s) {\n        consonants := 0\n        for\
    \ _, r := range word {\n            if is_consonant(r) {\n                consonants\
    \ += 1\n            }\n        }\n        if consonants == n {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    return\
    \ nil\n}\n", "    return nil\n}\n", "    strArr := strings.Split(s, \" \")\n \
    \   var resultArr []string\n    for _, word := range strArr {\n        if len(word)\
    \ == 0 {\n            continue\n        }\n        fmt.Println(word)\n       \
    \ count := 0\n        for _, char := range word {\n            if char == 'a'\
    \ || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            \
    \    count += 1\n            }\n        }\n        if count == n {\n         \
    \   resultArr = append(resultArr, word)\n        }\n    }\n    return resultArr\n\
    }\n", "    var words []string\n    word := \"\"\n    consonants := 0\n    for\
    \ _, c := range s {\n        if c == ' ' {\n            if consonants == n {\n\
    \                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    res := []string{}\n    words := strings.Split(s,\
    \ \" \")\n    for _, w := range words {\n        if len(select_consonants(w))\
    \ == n {\n            res = append(res, w)\n        }\n    }\n    return res\n\
    }\n", "    var matchedWords []string\n\n    words := strings.Split(s, \" \")\n\
    \    for _, word := range words {\n        if consonantsCount(word) == n {\n \
    \           matchedWords = append(matchedWords, word)\n        }\n    }\n\n  \
    \  return matchedWords\n}\n", "    var words []string\n    is_consonant := func(r\
    \ byte) bool {\n        return r != 'a' && r != 'e' && r != 'i' && r != 'o' &&\
    \ r != 'u'\n    }\n    is_vowel := func(r byte) bool {\n        return !is_consonant(r)\n\
    \    }\n    var last_char byte\n    var current_word string\n    for _, char :=\
    \ range s {\n        c := byte(char)\n        if char == ' ' || char == '\\t'\
    \ || char == '\\n' {\n            if current_word != \"\" {\n                if\
    \ is_consonant(last_char) {\n                    if n == 1 {\n               \
    \         words = append(words, current_word)\n                    }\n       \
    \         } else {\n                    if n > 1 {\n                        words\
    \ = append(words, current_word)\n                    }\n                }\n  \
    \          }\n            current_word = \"\"\n        } else {\n            current_word\
    \ += string(c)\n            if is_consonant(c) {\n                if !is_consonant(last_char)\
    \ {\n                    if n == 1 {\n                        words = append(words,\
    \ current_word)\n                    }\n                }\n            } else\
    \ {\n                if is_consonant(last_char) {\n                    if n >\
    \ 1 {\n                        words = append(words, current_word)\n         \
    \           }\n                }\n            }\n        }\n        last_char\
    \ = c\n    }\n    if current_word != \"\" {\n        if is_consonant(last_char)\
    \ {\n            if n == 1 {\n                words = append(words, current_word)\n\
    \            }\n        } else {\n            if n > 1 {\n                words\
    \ = append(words, current_word)\n            }\n        }\n    }\n    return words\n\
    }\n", "    return nil\n}\n", "    words := []string{}\n    word := \"\"\n    if\
    \ len(s) == 0 {\n        return words\n    }\n    for _, w := range s {\n    \
    \    if string(w) == \" \" || string(w) == \"\\n\" {\n            if is_valid(word,\
    \ n) {\n                words = append(words, word)\n            }\n         \
    \   word = \"\"\n        } else {\n            word += string(w)\n        }\n\
    \    }\n    if is_valid(word, n) {\n        words = append(words, word)\n    }\n\
    \    return words\n}\n", "    return nil\n}\n", "    words := []string{}\n   \
    \ for _, word := range strings.Split(s, \" \") {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    result := []string{}\n    word := \"\"\n    isConsonant :=\
    \ func(char string) bool {\n        consonants := \"qwrtypsdfghjklzxcvbnm\"\n\
    \        for _, v := range consonants {\n            if v == rune(char[0]) {\n\
    \                return true\n            }\n        }\n        return false\n\
    \    }\n    count := 0\n    for _, char := range s {\n        if char == ' ' {\n\
    \            if count == n {\n                result = append(result, word)\n\
    \            }\n            word = \"\"\n            count = 0\n        } else\
    \ {\n            word += string(char)\n            if isConsonant(string(char))\
    \ {\n                count += 1\n            }\n        }\n    }\n    if count\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    var result []string\n\n    for _, word := range words(s) {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n\n    return\
    \ result\n}\n", "    words := []string{}\n    for _, w := range(strings.Split(s,\
    \ \" \")) {\n        if num_of_const(w) == n {\n            words = append(words,\
    \ w)\n        }\n    }\n    return words\n}\n", "    var res []string\n    if\
    \ n < 0 {\n        return res\n    }\n    word := \"\"\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if num_consonants(word) == n {\n   \
    \             res = append(res, word)\n            }\n            word = \"\"\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if num_consonants(word)\
    \ == n {\n        res = append(res, word)\n    }\n    return res\n}\n", "    words\
    \ := []string{}\n    for _, word := range splitString(s) {\n        if countConsonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    return []string{}\n}\n", "    return nil\n}\n", "    return\
    \ nil\n}\n", "    if len(s) == 0 {\n        return []string{}\n    }\n    var\
    \ words []string\n    for _, word := range words_from_string(s) {\n        if\
    \ consonants_count(word) == n {\n            words = append(words, word)\n   \
    \     }\n    }\n    return words\n}\n", "    s = \"Mary had a little lamb\"\n\
    \    n = 4\n    fmt.Println(s)\n    fmt.Println(n)\n    return []string{\"little\"\
    }\n}\n", "    return []string{}\n}\n\nvar testCases = []", "    words := make([]string,\
    \ 0)\n    current_word := \"\"\n    for _, r := range s {\n        if r == ' '\
    \ {\n            if num_consonants(current_word) == n {\n                words\
    \ = append(words, current_word)\n            }\n            current_word = \"\"\
    \n        } else {\n            current_word += string(r)\n        }\n    }\n\
    \    if num_consonants(current_word) == n {\n        words = append(words, current_word)\n\
    \    }\n    return words\n}\n", "    vowel := map[string]bool{\n        \"a\"\
    : true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n  \
    \      \"u\": true,\n    }\n    words := strings.Split(s, \" \")\n    words_matching\
    \ := []string{}\n    for _, word := range words {\n        total_matching := 0\n\
    \        for _, char := range word {\n            if vowel[strings.ToLower(string(char))]\
    \ {\n                total_matching++\n            }\n        }\n        if total_matching\
    \ == n {\n            words_matching = append(words_matching, word)\n        }\n\
    \    }\n    return words_matching\n}\n", "    var result []string\n    word :=\
    \ \"\"\n    for _,char := range s {\n        if char == 32 {\n            if len(word)\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n        } else {\n            if char != 'a' && char != 'A'\
    \ && char != 'e' && char != 'E' && char != 'i' && char != 'I' && char != 'o' &&\
    \ char != 'O' && char != 'u' && char != 'U' {\n                word += string(char)\n\
    \            }\n        }\n    }\n    if len(word) == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    var result []string\n    for _,\
    \ word := range split(s) {\n        if len(word) == n {\n            result =\
    \ append(result, word)\n        }\n    }\n    return result\n}\n", "    words\
    \ := []string{}\n    for _, word := range SplitIntoWords(s) {\n        if CountConsonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    words := strings.Split(s, \" \")\n    selWords := []string{}\n\
    \    for _, word := range words {\n        count := 0\n        for _, char :=\
    \ range word {\n            if unicode.IsLetter(char) && unicode.IsUpper(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            selWords = append(selWords, word)\n        }\n    }\n    return\
    \ selWords\n}\n", "    str_words := make([]string, 0)\n    words := make([]string,\
    \ 0)\n    len_s := len(s)\n    if len_s > 0 {\n        i := 0\n        for i <\
    \ len_s {\n            if s[i] != ' ' {\n                start := i\n        \
    \        for i < len_s && s[i] != ' ' {\n                    i++\n           \
    \     }\n                end := i\n                str_words = append(str_words,\
    \ s[start:end])\n            }\n            i++\n        }\n    }\n    for _,\
    \ str_word := range str_words {\n        if countConsonants(str_word) == n {\n\
    \            words = append(words, str_word)\n        }\n    }\n    return words\n\
    }\n", "    var ret []string\n    words := strings.Split(s, \" \")\n    for _,\
    \ w := range words {\n        if count_consonants(w) == n {\n            ret =\
    \ append(ret, w)\n        }\n    }\n    return ret\n}\n", "    var words []string\n\
    \    for _, w := range strings.Fields(s) {\n        if n == 0 {\n            return\
    \ words\n        }\n        if n == nc(w) {\n            words = append(words,\
    \ w)\n        }\n    }\n    return words\n}\n", "    var (\n        ret []string\n\
    \        word string\n        count int\n    )\n    for _, c := range s {\n  \
    \      if c == ' ' {\n            if count == n {\n                ret = append(ret,\
    \ word)\n            }\n            word = \"\"\n            count = 0\n     \
    \   } else {\n            word += string(c)\n            if is_consonant(c) {\n\
    \                count += 1\n            }\n        }\n    }\n    if count ==\
    \ n {\n        ret = append(ret, word)\n    }\n    return ret\n}\n", "    var\
    \ words []string\n    var word []rune\n    var consonants int\n\n    for _, c\
    \ := range s {\n        switch c {\n        case ' ', '\\t', '\\n':\n        \
    \    if len(word) > 0 {\n                if consonants == n {\n              \
    \      words = append(words, string(word))\n                }\n              \
    \  word = []rune{}\n                consonants = 0\n            }\n        default:\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \            word = append(word, c)\n        }\n    }\n    if len(word) > 0 {\n\
    \        if consonants == n {\n            words = append(words, string(word))\n\
    \        }\n    }\n    return words\n}\n", "    var result []string\n    for _,\
    \ word := range(words(s)) {\n        if consonants(word) == n {\n            result\
    \ = append(result, word)\n        }\n    }\n    return result\n}\n", "    var\
    \ words []string\n    word := \"\"\n    for _, char := range s {\n        if char\
    \ == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(char)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    // code\n}\n", "    var result []string\n\n    for _, word\
    \ := range split_words(s) {\n        if count_consonants(word) == n {\n      \
    \      result = append(result, word)\n        }\n    }\n\n    return result\n\
    }\n", "\tif s == \"\" {\n\t\treturn []string{}\n\t}\n\tvar strs []string\n\tvar\
    \ str string\n\tword := false\n\tfor _, r := range s {\n\t\tif r == ' ' {\n\t\t\
    \tif word {\n\t\t\t\tstrs = append(strs, str)\n\t\t\t\tstr = \"\"\n\t\t\t\tword\
    \ = false\n\t\t\t}\n\t\t} else {\n\t\t\tif r == 'a' || r == 'e' || r == 'i' ||\
    \ r == 'o' || r == 'u' {\n\t\t\t\tword = true\n\t\t\t}\n\t\t\tstr += string(r)\n\
    \t\t}\n\t}\n\tif word {\n\t\tstrs = append(strs, str)\n\t}\n\tvar res []string\n\
    \tfor _, s := range strs {\n\t\tif count(s) == n {\n\t\t\tres = append(res, s)\n\
    \t\t}\n\t}\n\treturn res\n}\n", "    var words []string\n\n    var prev rune\n\
    \    var cnt int\n    var word string\n    for _,r := range s {\n        if r\
    \ == ' ' {\n            if cnt == n {\n                words = append(words, word)\n\
    \            }\n            cnt = 0\n            word = \"\"\n        } else {\n\
    \            switch r {\n            case 'a', 'e', 'i', 'o', 'u':\n         \
    \       cnt = 0\n            default:\n                cnt++\n            }\n\
    \            word += string(r)\n        }\n        prev = r\n    }\n    if cnt\
    \ == n {\n        words = append(words, word)\n    }\n\n    return words\n}\n",
  "    words := make([]string, 0)\n    start := 0\n    for i, c := range s {\n   \
    \     if string(c) == \" \" {\n            word := s[start:i]\n            if\
    \ len(word) > 0 && count_consonants(word) == n {\n                words = append(words,\
    \ word)\n            }\n            start = i + 1\n        }\n    }\n    if start\
    \ < len(s) && count_consonants(s[start:]) == n {\n        words = append(words,\
    \ s[start:])\n    }\n    return words\n}\n", "    return nil\n}\n", "    // TODO:\
    \ implement this\n    return []string{}\n}\n\nvar tests = []", "    var resp []string\n\
    \    words := strings.Split(s, \" \")\n    for _, word := range words {\n    \
    \    has_n_consonants := true\n        consonants := 0\n        for _, letter\
    \ := range word {\n            if IsVowel(string(letter)) {\n                consonants\
    \ = 0\n            } else {\n                consonants++\n            }\n   \
    \         if consonants > n {\n                has_n_consonants = false\n    \
    \            break\n            }\n        }\n        if has_n_consonants {\n\
    \            resp = append(resp, word)\n        }\n    }\n    return resp\n}\n",
  "    if s == \"\" {\n        return []string{}\n    }\n    var w []string\n    i\
    \ := 0\n    cnt := 0\n    for ; i < len(s); i++ {\n        if s[i] == ' ' {\n\
    \            if cnt == n {\n                w = append(w, s[:i])\n           \
    \ }\n            s = s[i+1:]\n            i = 0\n            cnt = 0\n       \
    \ } else if s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] !=\
    \ 'u' {\n            cnt++\n        }\n    }\n    if cnt == n {\n        w = append(w,\
    \ s)\n    }\n    return w\n}\n", "    var result []string\n    var word string\n\
    \    var vowel bool = false\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == ' ' {\n            if CountVowel(word) == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n            vowel = false\n \
    \       } else {\n            word += string(s[i])\n        }\n    }\n    if CountVowel(word)\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    return nil\n}\n", "    var words []string\n    for _, word := range filter(split(s),\
    \ func(word string) bool {\n        return len(filter(word, func(char rune) bool\
    \ {\n            return !isVowel(char)\n        })) == n\n    }) {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n", "\tvar selected []string\n\
    \tvar current string\n\tfor _, v := range s {\n\t\tif v == ' ' {\n\t\t\tif count_consonants(current)\
    \ == n {\n\t\t\t\tselected = append(selected, current)\n\t\t\t}\n\t\t\tcurrent\
    \ = \"\"\n\t\t} else {\n\t\t\tcurrent += string(v)\n\t\t}\n\t}\n\tif count_consonants(current)\
    \ == n {\n\t\tselected = append(selected, current)\n\t}\n\treturn selected\n}\n",
  "    res := []string{}\n    inword := false\n    j := 0\n    count := 0\n    consonants\
    \ := []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"}\n \
    \   for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if inword\
    \ && count == n {\n                res = append(res, s[j:i])\n            }\n\
    \            inword = false\n            count = 0\n        } else {\n       \
    \     if !inword {\n                j = i\n                inword = true\n   \
    \         }\n            for _, c := range consonants {\n                if string(s[i])\
    \ == c {\n                    count++\n                }\n            }\n    \
    \    }\n    }\n    if inword && count == n {\n        res = append(res, s[j:])\n\
    \    }\n    return res\n}\n", "    var all_words []string\n    var result []string\n\
    \    all_words = strings.Split(s, \" \")\n    for _, word := range all_words {\n\
    \        if (count_consonants(word) == n) {\n            result = append(result,\
    \ word)\n        }\n    }\n    return result\n}\n", "\tvar words []string\n\t\
    if s == \"\" {\n\t\treturn words\n\t}\n\tfor _, word := range strings.Split(s,\
    \ \" \") {\n\t\tif count_consonants(word) == n {\n\t\t\twords = append(words,\
    \ word)\n\t\t}\n\t}\n\treturn words\n}\n", "    var result []string\n    var start\
    \ int = 0\n    for i := 0; i < len(s); i++ {\n        if i == len(s) - 1 || s[i]\
    \ == ' ' {\n            if i - start == n {\n                result = append(result,\
    \ s[start:i])\n            }\n            start = i + 1\n        }\n    }\n  \
    \  return result\n}\n", "    return select_words_by_count(s, n, true)\n}\n", "\t\
    return []string{}\n}\n", "    words := []string{}\n    vowels := map[string]int{\n\
    \        \"a\": 0,\n        \"e\": 0,\n        \"i\": 0,\n        \"o\": 0,\n\
    \        \"u\": 0,\n    }\n    for _, word := range strings.Split(s, \" \") {\n\
    \        for _, char := range word {\n            if _, exists := vowels[string(char)];\
    \ exists {\n                vowels[string(char)]++\n            }\n        }\n\
    \        consonants := len(word) - vowels[\"a\"] - vowels[\"e\"] - vowels[\"i\"\
    ] - vowels[\"o\"] - vowels[\"u\"]\n        if consonants == n {\n            words\
    \ = append(words, word)\n        }\n        vowels[\"a\"] = 0\n        vowels[\"\
    e\"] = 0\n        vowels[\"i\"] = 0\n        vowels[\"o\"] = 0\n        vowels[\"\
    u\"] = 0\n    }\n    return words\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    words := []string{}\n    consonants := 0\n    word\
    \ := \"\"\n    for _, letter := range s {\n        if letter == 32 {\n       \
    \     if consonants == n {\n                words = append(words, word)\n    \
    \        }\n            consonants = 0\n            word = \"\"\n        } else\
    \ {\n            word += string(letter)\n            if !string_in_slice(string(letter),\
    \ vowels) {\n                consonants++\n            }\n        }\n    }\n \
    \   if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    var vowels = map[string]bool{\"a\": true, \"e\": true, \"\
    i\": true, \"o\": true, \"u\": true}\n    var words []string\n    var word string\n\
    \    for _, v := range s {\n        word += string(v)\n        if v == ' ' {\n\
    \            words = append(words, word)\n            word = \"\"\n        }\n\
    \    }\n    if word != \"\" {\n        words = append(words, word)\n    }\n  \
    \  var nwords []string\n    for _, v := range words {\n        if count_consonants(v,\
    \ vowels) == n {\n            nwords = append(nwords, v)\n        }\n    }\n \
    \   return nwords\n}\n", "    var result []string\n    var count int\n    var\
    \ word string\n    for _, v := range s {\n        if v == ' ' {\n            if\
    \ count == n {\n                result = append(result, word)\n            }\n\
    \            count = 0\n            word = \"\"\n        } else {\n          \
    \  if v != 'a' && v != 'e' && v != 'i' && v != 'o' && v != 'u' {\n           \
    \     count++\n            }\n            word += string(v)\n        }\n    }\n\
    \    if count == n {\n        result = append(result, word)\n    }\n    return\
    \ result\n}\n", "    if len(s) == 0 {\n        return nil\n    }\n    var words\
    \ []string\n    var word []rune\n    var consonants int\n    var vowels int\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                words = append(words, string(word))\n            }\n  \
    \          word = nil\n            consonants = 0\n            vowels = 0\n  \
    \      } else {\n            word = append(word, c)\n            if isVowel(c)\
    \ {\n                vowels++\n            } else {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ string(word))\n    }\n    return words\n}\n\nvar vowels = map[rune]bool{\n \
    \   'a': true,\n    'e': true,\n    'i': true,\n    'o': true,\n    'u': true,\n\
    }\n", "    words := []string{}\n    if len(s) == 0 {\n        return words\n \
    \   }\n    word := \"\"\n    vowels := \"aeiouAEIOU\"\n    for _, c := range s\
    \ {\n        if c == ' ' {\n            if len(word) > 0 {\n                if\
    \ count_consonants(word, vowels) == n {\n                    words = append(words,\
    \ word)\n                }\n                word = \"\"\n            }\n     \
    \   } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        if count_consonants(word, vowels) == n {\n            words =\
    \ append(words, word)\n        }\n    }\n    return words\n}\n", "    res := []string{}\n\
    \    s2 := \"\"\n    for _, v := range s {\n        if v == ' ' {\n          \
    \  if consNum(s2) == n {\n                res = append(res, s2)\n            }\n\
    \            s2 = \"\"\n        } else {\n            s2 += string(v)\n      \
    \  }\n    }\n    if consNum(s2) == n {\n        res = append(res, s2)\n    }\n\
    \    return res\n}\n", "    var words []string\n    for _, word := range word_break(s)\
    \ {\n        if count_consonants(word) == n {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    var word string\n    var\
    \ words []string\n    for _, c := range s {\n        if c != ' ' {\n         \
    \   word += string(c)\n        } else {\n            if len(word) != 0 {\n   \
    \             words = append(words, word)\n                word = \"\"\n     \
    \       }\n        }\n    }\n    if len(word) != 0 {\n        words = append(words,\
    \ word)\n    }\n    var result []string\n    for _, word := range words {\n  \
    \      var consonants int\n        for _, c := range word {\n            switch\
    \ c {\n            case 'a', 'e', 'i', 'o', 'u', 'y':\n                continue\n\
    \            default:\n                consonants++\n            }\n        }\n\
    \        if consonants == n {\n            result = append(result, word)\n   \
    \     }\n    }\n    return result\n}\n\ntype TestCase ", "    var words []string\n\
    \    var word string\n    var vowel, consonant int\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if consonant == n {\n                words\
    \ = append(words, word)\n            }\n            word = \"\"\n            vowel\
    \ = 0\n            consonant = 0\n        } else {\n            word += string(c)\n\
    \            switch c {\n            case 'a', 'e', 'i', 'o', 'u':\n         \
    \       vowel++\n            default:\n                consonant++\n         \
    \   }\n        }\n    }\n    if consonant == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    words := make([]string, 0)\n    //\
    \ @TODO: write code here\n    return words\n}\n", "    if len(s) == 0 {\n    \
    \    return []string{}\n    }\n    var words []string\n    var word string\n \
    \   var consonants_in_word int\n    for _, c := range s {\n        if c == ' '\
    \ {\n            if consonants_in_word == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants_in_word\
    \ = 0\n        } else {\n            is_consonant := false\n            switch\
    \ c {\n            case 'a', 'e', 'i', 'o', 'u':\n                is_consonant\
    \ = false\n            default:\n                is_consonant = true\n       \
    \     }\n            if is_consonant {\n                consonants_in_word++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if consonants_in_word\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    return []string{}\n}\n", "    if len(s) == 0 {\n        return []string{}\n\
    \    }\n    words := []string{}\n    current_word := \"\"\n    for _, v := range\
    \ s {\n        if v == ' ' {\n            if len(current_word) > 0 {\n       \
    \         word_consonants := 0\n                for _, w := range current_word\
    \ {\n                    if w != 'a' && w != 'e' && w != 'i' && w != 'o' && w\
    \ != 'u' {\n                        word_consonants++\n                    }\n\
    \                }\n                if word_consonants == n {\n              \
    \      words = append(words, current_word)\n                }\n              \
    \  current_word = \"\"\n            }\n        } else {\n            current_word\
    \ += string(v)\n        }\n    }\n    if len(current_word) > 0 {\n        word_consonants\
    \ := 0\n        for _, w := range current_word {\n            if w != 'a' && w\
    \ != 'e' && w != 'i' && w != 'o' && w != 'u' {\n                word_consonants++\n\
    \            }\n        }\n        if word_consonants == n {\n            words\
    \ = append(words, current_word)\n        }\n    }\n    return words\n}\n", " \
    \   var words []string\n    for _, word := range s.Split(\" \") {\n        wordCons\
    \ := 0\n        for _, char := range word {\n            if char == 'a' || char\
    \ == 'e' || char == 'i' || char == 'o' || char == 'u' {\n                wordCons\
    \ += 1\n            }\n        }\n        if wordCons == n {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    words\
    \ := []string{}\n    currentWord := \"\"\n    // Scan string\n    for _, c :=\
    \ range s {\n        // If we hit a space\n        if c == ' ' {\n           \
    \ // Check if the word has n consonants\n            if hasXConsonants(currentWord,\
    \ n) {\n                words = append(words, currentWord)\n            }\n  \
    \          // Empty current word\n            currentWord = \"\"\n        } else\
    \ {\n            // Add character to current word\n            currentWord +=\
    \ string(c)\n        }\n    }\n    // Check if the word has n consonants\n   \
    \ if hasXConsonants(currentWord, n) {\n        words = append(words, currentWord)\n\
    \    }\n    return words\n}\n", "    if len(s) == 0 {\n        return []string{}\n\
    \    }\n    var words []string\n    var ch rune\n    for i, v := range s {\n \
    \       if v == ' ' || i == len(s)-1 {\n            if i == len(s)-1 {\n     \
    \           ch = v\n            }\n            if consonants(words) == n {\n \
    \               return words\n            }\n            words = []string{}\n\
    \        } else {\n            words = append(words, string(v))\n        }\n \
    \   }\n    return words\n}\n", "    var words []string\n    j := 0\n    for i\
    \ := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if isValid(s[j:i],\
    \ n) {\n                words = append(words, s[j:i])\n            }\n       \
    \     j = i + 1\n        }\n    }\n    if isValid(s[j:], n) {\n        words =\
    \ append(words, s[j:])\n    }\n    return words\n}\n", "    return nil\n}\n",
  "    return nil\n}\n", "    var ret []string\n    words := parse_words(s)\n    for\
    \ _, w := range words {\n        if len(select_consonants(w)) == n {\n       \
    \     ret = append(ret, w)\n        }\n    }\n    return ret\n}\n", "    words\
    \ := make([]string, 0)\n    word := \"\"\n    inWord := false\n    consonants\
    \ := 0\n    for _, char := range s {\n        if char == ' ' {\n            if\
    \ inWord {\n                inWord = false\n                if consonants == n\
    \ {\n                    words = append(words, word)\n                }\n    \
    \            word = \"\"\n                consonants = 0\n            }\n    \
    \    } else {\n            if !inWord {\n                inWord = true\n     \
    \       }\n            word += string(char)\n            if isConsonant(char)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    consonants := map[string]bool{\"b\": true, \"c\": true, \"d\": true, \"f\"\
    : true, \"g\": true,\n                                  \"h\": true, \"j\": true,\
    \ \"k\": true, \"l\": true, \"m\": true,\n                                  \"\
    n\": true, \"p\": true, \"q\": true, \"r\": true, \"s\": true,\n             \
    \                     \"t\": true, \"v\": true, \"w\": true, \"x\": true, \"y\"\
    : true,\n                                  \"z\": true}\n    words := []string{}\n\
    \    buffer := \"\"\n    count := 0\n    for _, c := range s {\n        char :=\
    \ string(c)\n        if char == \" \" {\n            if count == n {\n       \
    \         words = append(words, buffer)\n            }\n            buffer = \"\
    \"\n            count = 0\n        } else {\n            if consonants[char] {\n\
    \                count++\n            }\n            buffer += char\n        }\n\
    \    }\n    if count == n {\n        words = append(words, buffer)\n    }\n  \
    \  return words\n}\n", "    var words []string\n    if len(s) == 0 {\n       \
    \ return words\n    }\n    // Check if consonant by checking if the letter falls\
    \ within the set of \n    // vowels.\n    vowels := map[rune]bool{'a': true, 'e':\
    \ true, 'i': true, 'o': true, 'u': true}\n    for _, word := range wordsInString(s)\
    \ {\n        consonants := 0\n        for _, letter := range word {\n        \
    \    if _, ok := vowels[letter]; !ok {\n                consonants++\n       \
    \     }\n        }\n        if consonants == n {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    if s == \"\" {\n     \
    \   return []string{}\n    }\n    selected_words := []string{}\n    vowels :=\
    \ map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    words\
    \ := strings.Split(s, \" \")\n    for _, word := range words {\n        num_consonants\
    \ := 0\n        for _, letter := range word {\n            if !vowels[letter]\
    \ {\n                num_consonants++\n            }\n        }\n        if num_consonants\
    \ == n {\n            selected_words = append(selected_words, word)\n        }\n\
    \    }\n    return selected_words\n}\n", "    var words = make([]string, 0)\n\
    \    var start = 0\n    for i, c := range s {\n        if c == ' ' {\n       \
    \     var consonants = 0\n            for j := start; j < i; j++ {\n         \
    \       if (s[j] == 'a' || s[j] == 'e' || s[j] == 'i' || s[j] == 'o' || s[j] ==\
    \ 'u') {\n                    consonants += 1\n                }\n           \
    \ }\n            if consonants == n {\n                words = append(words, s[start:i])\n\
    \            }\n            start = i + 1\n        }\n    }\n    return words\n\
    }\n", "    var count int\n    var words []string\n    for _, ch := range s {\n\
    \        switch ch {\n        case 'a', 'e', 'i', 'o', 'u':\n            count\
    \ = 0\n        default:\n            count++\n        }\n        if count == n\
    \ {\n            words = append(words, string(ch))\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    for _, word := range(s.Split(\" \"\
    )) {\n        //check how many consonants in a word\n        var c_cnt int = 0\n\
    \        for _, c := range(word) {\n            if c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u' {\n                c_cnt++\n            }\n    \
    \    }\n        if c_cnt == n {\n            words = append(words, word)\n   \
    \     }\n    }\n    return words\n}\n", "    words := make([]string, 0)\n    for\
    \ _, word := range strings.Split(s, \" \") {\n        if strings.Count(word, \"\
    aeiou\") == n {\n            words = append(words, word)\n        }\n    }\n \
    \   return words\n}\n", "    fmt.Println(\"s = \", s)\n    if s == \"\" {\n  \
    \      return []string{}\n    }\n    result := []string{}\n    words := strings.Split(s,\
    \ \" \")\n    for _, word := range words {\n        num_consonants := get_num_consonants(word)\n\
    \        if num_consonants == n {\n            result = append(result, word)\n\
    \        }\n    }\n    return result\n}\n", "    // Write your code here\n   \
    \ return nil\n}\n", "    words := []string{}\n    for _, word := range(strings.Split(s,\
    \ \" \")) {\n        if len(word) > 0 && count_consonants(word) == n {\n     \
    \       words = append(words, word)\n        }\n    }\n    return words\n}\n",
  "    // TODO: implement select_words\n    return nil\n}\n", "    count := 0\n  \
    \  words := make([]string, 0)\n    currentWord := \"\"\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if count == n {\n                words\
    \ = append(words, currentWord)\n            }\n            count = 0\n       \
    \     currentWord = \"\"\n        } else {\n            currentWord += string(c)\n\
    \            if !isVowel(c) {\n                count++\n            }\n      \
    \  }\n    }\n    if count == n {\n        words = append(words, currentWord)\n\
    \    }\n    return words\n}\n", "    slice := make([]string, 0)\n    for _, item\
    \ := range split_by_whitespace(s) {\n        if len(item) == n + 1 {\n       \
    \     slice = append(slice, item)\n        }\n    }\n    return slice\n}\n", " \
    \   //your code here\n    var words []string\n    var currentword string\n   \
    \ for i := 0; i < len(s); i++ {\n        if s[i] != ' ' {\n            currentword\
    \ += string(s[i])\n        } else {\n            if countConsonants(currentword)\
    \ == n {\n                words = append(words, currentword)\n            }\n\
    \            currentword = \"\"\n        }\n    }\n    if countConsonants(currentword)\
    \ == n {\n        words = append(words, currentword)\n    }\n    return words\n\
    }\n", "    word := \"\"\n    words := []string{}\n    n_conc := 0\n    s = string('\
    \ ') + s + string(' ')\n    for _, c := range s {\n        if string(c) == \"\
    \ \" {\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n            n_conc = 0\n\
    \        } else {\n            word += string(c)\n            switch c {\n   \
    \         case 'a', 'e', 'i', 'o', 'u', 'y':\n                continue\n     \
    \       default:\n                n_conc++\n            }\n        }\n    }\n\
    \    final_words := []string{}\n    for _, word := range words {\n        if n_conc\
    \ == n {\n            final_words = append(final_words, word)\n        }\n   \
    \ }\n    return final_words\n}\n", "    return select_words_filter(s, n)\n}\n",
  "    words := make([]string, 0)\n    current_word := \"\"\n    n_consonants := 0\n\
    \    for _, char := range s {\n        if char == ' ' {\n            if n_consonants\
    \ == n {\n                words = append(words, current_word)\n            }\n\
    \            current_word = \"\"\n            n_consonants = 0\n        } else\
    \ {\n            if is_consonant(char) {\n                n_consonants += 1\n\
    \            }\n            current_word += string(char)\n        }\n    }\n \
    \   if n_consonants == n {\n        words = append(words, current_word)\n    }\n\
    \    return words\n}\n", "    var words []string\n    var current_word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, current_word)\n\
    \            }\n            current_word = \"\"\n            consonants = 0\n\
    \        } else {\n            current_word += string(c)\n            if is_consonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, current_word)\n    }\n    return words\n\
    }\n", "    var v []string\n\n    for _, w := range words(s) {\n        if n_consonants(w)\
    \ == n {\n            v = append(v, w)\n        }\n    }\n\n    return v\n}\n",
  "    return []string{}\n}\n", "    // # your code here\n    var words []string\n\
    \    var count int\n    var word string\n    for _, letter := range s {\n    \
    \    if letter == ' ' {\n            if count == n {\n                words =\
    \ append(words, word)\n            }\n            count = 0\n            word\
    \ = \"\"\n        } else {\n            word += string(letter)\n            if\
    \ letter != 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter !=\
    \ 'u' {\n                count++\n            }\n        }\n    }\n    if count\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    words := []string{}\n    nb_words := 0\n    nb_consonants := 0\n    nb_vowels\
    \ := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n        \
    \    if nb_consonants == n {\n                words = append(words, s[i-nb_words:i])\n\
    \            }\n            nb_words = 0\n            nb_consonants = 0\n    \
    \        nb_vowels = 0\n        } else {\n            nb_words++\n           \
    \ if is_vowel(s[i]) {\n                nb_vowels++\n            } else {\n   \
    \             nb_consonants++\n            }\n        }\n    }\n    if nb_consonants\
    \ == n {\n        words = append(words, s[len(s)-nb_words:])\n    }\n    return\
    \ words\n}\n", "    return []string{}\n}\n", "    res := []string{}\n    // Implement\
    \ me\n    word := \"\"\n    for _, c := range s {\n        if c != ' ' {\n   \
    \         word += string(c)\n        } else {\n            if len(word) != 0 {\n\
    \                if isValid(word, n) {\n                    res = append(res,\
    \ word)\n                }\n                word = \"\"\n            }\n     \
    \   }\n    }\n    if len(word) != 0 {\n        if isValid(word, n) {\n       \
    \     res = append(res, word)\n        }\n    }\n    return res\n}\n", "    b\
    \ := []byte(s)\n    var result []string\n    var word []byte\n    for i := 0;\
    \ i < len(b); i++ {\n        if b[i] == ' ' {\n            if len(word) == n {\n\
    \                result = append(result, string(word))\n            }\n      \
    \      word = nil\n        } else {\n            if isConsonant(b[i]) {\n    \
    \            word = append(word, b[i])\n            }\n        }\n    }\n    if\
    \ len(word) == n {\n        result = append(result, string(word))\n    }\n   \
    \ return result\n}\n", "    return []string{}\n}\n", "    // TODO: implement me\n\
    \    var selectedWords []string\n    return selectedWords\n}\n", "    // YOUR\
    \ CODE GOES HERE\n    res := []string{}\n    for _, i := range strings.Split(s,\
    \ \" \") {\n        if countVowels(i) == n {\n            res = append(res, i)\n\
    \        }\n    }\n    return res\n}\n", "    var words []string\n    for _, word\
    \ := range string_to_words(s) {\n        if count_consonants(word) == n {\n  \
    \          words = append(words, word)\n        }\n    }\n    return words\n}\n",
  "    var result []string\n    var word string\n    words := strings.Split(s, \"\
    \ \")\n    for _, word = range words {\n        if len(word) == 0 {\n        \
    \    continue\n        }\n        if countConsonants(word) == n {\n          \
    \  result = append(result, word)\n        }\n    }\n    return result\n}\n", " \
    \   result := []string{}\n    word := \"\"\n    consonants := 0\n    for _, v\
    \ := range s {\n        if string(v) == \" \" {\n            if consonants ==\
    \ n {\n                result = append(result, word)\n            }\n        \
    \    word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(v)\n            if v != 'a' && v != 'e' && v != 'i' && v != 'o' &&\
    \ v != 'u' {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        result = append(result, word)\n    }\n    return\
    \ result\n}\n", "    // TODO: should implement your code here.\n    return []string{}\n\
    }\n", "    var selected []string\n    var words []string\n    words = split(s)\n\
    \    for _, word := range words {\n        if count_consonants(word) == n {\n\
    \            selected = append(selected, word)\n        }\n    }\n    return selected\n\
    }\n", "    var consonants []string\n    var words []string\n    // insert consonants\n\
    \    for i := range s {\n        letter := string(s[i])\n        if letter ==\
    \ \"a\" || letter == \"e\" || letter == \"i\" || letter == \"o\" || letter ==\
    \ \"u\" {\n            consonants = append(consonants, letter)\n        }\n  \
    \  }\n    // insert words\n    for i := range s {\n        letter := string(s[i])\n\
    \        if letter == \" \" {\n            words = append(words, \"\")\n     \
    \   } else {\n            words[len(words)-1] += letter\n        }\n    }\n  \
    \  // select words\n    var sWords []string\n    for i := range words {\n    \
    \    count := 0\n        for j := range words[i] {\n            letter := string(words[i][j])\n\
    \            for k := range consonants {\n                if letter == consonants[k]\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \        if count == n {\n            sWords = append(sWords, words[i])\n    \
    \    }\n    }\n    return sWords\n}\n", "    words := strings.Split(s, \" \")\n\
    \    result := []string{}\n    for _, word := range words {\n        if countConsonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    return nil\n}\n", "    words := strings.Split(s, \" \")\n\
    \    result := []string{}\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: Implement me\n    return []string{}\n}\n", "   \
    \ // Words in the result list\n    var words []string\n    // Current word\n \
    \   var word string\n    // Current word consonants count\n    var count int\n\
    \    // Is the last char a consonant\n    var prev_is_con int\n    // Consonants\n\
    \    cons := \"bcdfghjklmnpqrstvwxyz\"\n    // Loop over all chars\n    for _,\
    \ c := range s {\n        // If we're at a space and we're in a word\n       \
    \ if c == ' ' && prev_is_con == 1 {\n            // Add current word to result\
    \ list if it has exactly n consonants\n            if count == n {\n         \
    \       words = append(words, word)\n            }\n            // Reset current\
    \ word, count and is_con\n            word = \"\"\n            count = 0\n   \
    \         prev_is_con = 0\n        } else {\n            // Add char to word\n\
    \            word += string(c)\n            // If the last char was a consonant,\
    \ increase counter\n            if prev_is_con == 1 {\n                count++\n\
    \            }\n            // Check if char is a consonant\n            if cons[c\
    \ - 'a'] == c {\n                prev_is_con = 1\n            } else {\n     \
    \           prev_is_con = 0\n            }\n        }\n    }\n    // Add last\
    \ word if we're in a word and we're at the end of the string\n    if prev_is_con\
    \ == 1 {\n        // Add current word to result list if it has exactly n consonants\n\
    \        if count == n {\n            words = append(words, word)\n        }\n\
    \    }\n    return words\n}\n", "    var list []string\n    words := Words(s)\n\
    \    for _, word := range words {\n        count := 0\n        for _, r := range\
    \ word {\n            if !isVowel(r) {\n                count++\n            }\n\
    \        }\n        if count == n {\n            list = append(list, word)\n \
    \       }\n    }\n    return list\n}\n", "    return []string{}\n}\n\nvar test_cases\
    \ = []", "    var words []string\n    word := \"\"\n    for _, r := range s {\n\
    \        if r != ' ' {\n            word += string(r)\n        } else {\n    \
    \        if count_consonants(word) == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    words := make([]string, 0)\n    // To avoid out of index error when s is \"\
    \", use function len\n    length := len(s)\n    i := 0\n    for i < length {\n\
    \        // the words should start with a letter\n        if (s[i] > 64 && s[i]\
    \ < 91) || (s[i] > 96 && s[i] < 123) {\n            j := i\n            for ;\
    \ j < length && (s[j] > 64 && s[j] < 91) || (s[j] > 96 && s[j] < 123); j++ {\n\
    \            }\n            if is_n_consonants(s[i:j], n) {\n                words\
    \ = append(words, s[i:j])\n            }\n            i = j\n        } else {\n\
    \            i++\n        }\n    }\n    return words\n}\n", "    words := []string{}\n\
    \    for _, word := range strings.Split(s, \" \") {\n        if num_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n\n    word := \"\"\n    ncons := 0\n \
    \   for _, r := range s {\n        switch r {\n        case ' ':\n           \
    \ if ncons == n {\n                words = append(words, word)\n            }\n\
    \            word = \"\"\n            ncons = 0\n        default:\n          \
    \  if ! is_vowel(r) {\n                ncons++\n            }\n            word\
    \ += string(r)\n        }\n    }\n    if ncons == n {\n        words = append(words,\
    \ word)\n    }\n\n    return words\n}\n", "\tvar result []string\n\tvar word string\n\
    \tfor _, c := range s {\n\t\tif c == ' ' {\n\t\t\tif n == count_consonants(word)\
    \ {\n\t\t\t\tresult = append(result, word)\n\t\t\t}\n\t\t\tword = \"\"\n\t\t}\
    \ else {\n\t\t\tword += string(c)\n\t\t}\n\t}\n\treturn result\n}\n", "    words\
    \ := strings.Split(s, \" \")\n    result := []string{}\n    for _, v := range\
    \ words {\n        if len(v) == n {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    if len(s) == 0 {\n        return\
    \ []string{}\n    }\n    words := []string{}\n    count := 0\n    word := \"\"\
    \n    for _, c := range s {\n        if string(c) == \" \" {\n            if count\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     count = 0\n            word = \"\"\n        } else {\n            isConsonant\
    \ := false\n            switch string(c) {\n            case \"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\":\n                isConsonant = false\n            default:\n\
    \                isConsonant = true\n            }\n            if isConsonant\
    \ {\n                count++\n            }\n            word += string(c)\n \
    \       }\n    }\n    if count == n {\n        words = append(words, word)\n \
    \   }\n    return words\n}\n", "    words := []string{}\n    for _,v := range\
    \ s {\n        if v == ' ' {\n            fmt.Println(\"space\")\n        } else\
    \ {\n            fmt.Println(v)\n        }\n    }\n    return words\n}\n", " \
    \   fmt.Println(\"s:\", s)\n    fmt.Println(\"n:\", n)\n    return nil\n}\n",
  "    words := make([]string, 0)\n    var word string\n    var vowels int\n\n   \
    \ for _, c := range s {\n        if c != ' ' {\n            word += string(c)\n\
    \            if is_vowel(string(c)) {\n                vowels++\n            }\n\
    \        } else {\n            if vowels <= len(word) - n {\n                words\
    \ = append(words, word)\n            }\n            word = \"\"\n            vowels\
    \ = 0\n        }\n    }\n\n    if vowels <= len(word) - n {\n        words = append(words,\
    \ word)\n    }\n\n    return words\n}\n", "    return nil\n}\n", "    var words\
    \ []string\n    var word string\n    var r []rune\n    var word_start bool\n \
    \   for _, c := range s {\n        if c == ' ' {\n            word_start = false\n\
    \            if len(r) == n {\n                words = append(words, word)\n \
    \           }\n            word = \"\"\n            r = nil\n        } else {\n\
    \            if word_start == false {\n                word_start = true\n   \
    \         }\n            word += string(c)\n            r = append(r, c)\n   \
    \     }\n    }\n    if len(r) == n {\n        words = append(words, word)\n  \
    \  }\n    return words\n}\n", "    var result []string\n    word := \"\"\n   \
    \ consonants := 0\n    for _, c := range s {\n        if c == ' ' {\n        \
    \    if consonants == n {\n                result = append(result, word)\n   \
    \         }\n            word = \"\"\n            consonants = 0\n        } else\
    \ {\n            word += string(c)\n            if is_consonant(c) {\n       \
    \         consonants++\n            }\n        }\n    }\n    if consonants ==\
    \ n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    words := []string{}\n    for _, word := range strings.Split(s, \" \") {\n \
    \       if count_consonants(word) == n {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    var words []string\n    var word string\n    var wordCount int\n\
    \n    for _, char := range s {\n        if char == ' ' {\n            if wordCount\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            wordCount = 0\n        } else {\n            if\
    \ isConsonant(char) {\n                wordCount += 1\n            }\n       \
    \     word += string(char)\n        }\n    }\n\n    if wordCount == n {\n    \
    \    words = append(words, word)\n    }\n\n    return words\n}\n", "\treturn []string{}\n\
    }\n", "    words := []string{}\n    consonants := []rune{'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n\
    \    // get words from string\n    for _, word := range strings.Fields(s) {\n\
    \        // count the consonants in the word\n        consCount := 0\n       \
    \ for _, char := range word {\n            for _, cons := range consonants {\n\
    \                if char == cons {\n                    consCount++\n        \
    \        }\n            }\n        }\n        // if the word has n consonants\
    \ add it to the list\n        if consCount == n {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    if len(s) == 0 {\n   \
    \     return []string{}\n    }\n    words := []string{}\n    word := \"\"\n  \
    \  word_length := 0\n    consonants := 0\n    for _, char := range s {\n     \
    \   if char == ' ' {\n            if word_length == n {\n                words\
    \ = append(words, word)\n            }\n            word = \"\"\n            word_length\
    \ = 0\n            consonants = 0\n        } else {\n            word += string(char)\n\
    \            word_length++\n            if !is_vowel(char) {\n               \
    \ consonants++\n            }\n        }\n    }\n    if word_length == n {\n \
    \       words = append(words, word)\n    }\n    return words\n}\n", "    var vowels\
    \ = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\"\
    : true}\n    var output []string\n    var currentWord string\n    for _, c :=\
    \ range s {\n        currentChar := string(c)\n        if currentChar == \" \"\
    \ {\n            output = append(output, currentWord)\n            currentWord\
    \ = \"\"\n        } else {\n            currentWord += currentChar\n        }\n\
    \    }\n    output = append(output, currentWord)\n    var output2 []string\n \
    \   for _, v := range output {\n        var numberOfConsonants = 0\n        for\
    \ _, l := range v {\n            if _, ok := vowels[string(l)]; !ok {\n      \
    \          numberOfConsonants++\n            }\n        }\n        if numberOfConsonants\
    \ == n {\n            output2 = append(output2, v)\n        }\n    }\n    return\
    \ output2\n}\n", "    var res []string\n    var word string\n    var prevIsSpace\
    \ bool\n    for _, c := range s {\n        if c == ' ' {\n            if !prevIsSpace\
    \ {\n                if len(word) == n {\n                    res = append(res,\
    \ word)\n                }\n                word = \"\"\n            }\n     \
    \       prevIsSpace = true\n        } else {\n            prevIsSpace = false\n\
    \            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n\
    \                word += string(c)\n            }\n        }\n    }\n    if len(word)\
    \ == n {\n        res = append(res, word)\n    }\n    return res\n}\n", "    return\
    \ []string{}\n}\n", "    var result []string\n    var count int\n    var prev_is_space\
    \ bool = true\n    var word []rune\n    for _, c := range s {\n        if c ==\
    \ ' ' {\n            prev_is_space = true\n            if count == n {\n     \
    \           result = append(result, string(word))\n            }\n           \
    \ count = 0\n            word = []rune{}\n        } else {\n            if prev_is_space\
    \ {\n                prev_is_space = false\n                word = append(word,\
    \ c)\n            } else {\n                word = append(word, c)\n         \
    \   }\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\
    \ {\n                count++\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result = append(result, string(word))\n    }\n    return result\n\
    }\n", "    words := []string{}\n    consonants := \"bcdfghjklmnpqrstvwxz\"\n \
    \   word := \"\"\n    vowel := false\n    count := 0\n    for _, v := range s\
    \ {\n        if v == ' ' {\n            if count == n {\n                words\
    \ = append(words, word)\n            }\n            word = \"\"\n            count\
    \ = 0\n            vowel = false\n        } else {\n            word += string(v)\n\
    \            if vowel == false {\n                if consonants[v] == 0 {\n  \
    \                  count += 1\n                } else {\n                    vowel\
    \ = true\n                }\n            }\n        }\n    }\n    if count ==\
    \ n {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u':\
    \ true}\n    var tokens []string\n    var token string\n    var consonants int\n\
    \    for _, r := range s {\n        if r == ' ' {\n            if consonants ==\
    \ n {\n                tokens = append(tokens, token)\n            }\n       \
    \     token = \"\"\n            consonants = 0\n        } else {\n           \
    \ token += string(r)\n            if !vowels[r] {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        tokens = append(tokens,\
    \ token)\n    }\n    return tokens\n}\n", "\tvar result []string\n\tvar str string\n\
    \tvar consonants int\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] != ' ' {\n\t\
    \t\tstr += string(s[i])\n\t\t\t//fmt.Println(str)\n\t\t\tif s[i] != 'a' && s[i]\
    \ != 'A' && s[i] != 'e' && s[i] != 'E' && s[i] != 'i' && s[i] != 'I' && s[i] !=\
    \ 'o' && s[i] != 'O' && s[i] != 'u' && s[i] != 'U' {\n\t\t\t\tconsonants++\n\t\
    \t\t}\n\t\t} else {\n\t\t\tif consonants == n {\n\t\t\t\tresult = append(result,\
    \ str)\n\t\t\t}\n\t\t\tconsonants = 0\n\t\t\tstr = \"\"\n\t\t}\n\t}\n\tif consonants\
    \ == n {\n\t\tresult = append(result, str)\n\t}\n\treturn result\n}\n", "\tl :=\
    \ []string{}\n\tfor _, w := range s.Split(' ') {\n\t\tif len(filter_consonants(w))\
    \ == n {\n\t\t\tl = append(l, w)\n\t\t}\n\t}\n\treturn l\n}\n", "\tvar words []string\n\
    \tvar word string\n\tvar consonants int\n\tfor _, character := range s {\n\t\t\
    if character == ' ' {\n\t\t\tif consonants == n {\n\t\t\t\twords = append(words,\
    \ word)\n\t\t\t}\n\t\t\tword = \"\"\n\t\t\tconsonants = 0\n\t\t} else {\n\t\t\t\
    word += string(character)\n\t\t\tif character != 'a' && character != 'e' && character\
    \ != 'i' && character != 'o' && character != 'u' {\n\t\t\t\tconsonants++\n\t\t\
    \t}\n\t\t}\n\t}\n\tif consonants == n {\n\t\twords = append(words, word)\n\t}\n\
    \treturn words\n}\n", "    var result []string\n    words := SplitString(s)\n\
    \    for _, word := range words {\n        if n == 0 {\n            result = append(result,\
    \ word)\n        } else {\n            consonants := 0\n            for _, c :=\
    \ range word {\n                if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                    consonants += 1\n                }\n    \
    \        }\n            if consonants == n {\n                result = append(result,\
    \ word)\n            }\n        }\n    }\n    return result\n}\n", "    return\
    \ []string{}\n}\n", "    var result []string\n    return result\n}\n", "    //\
    \ write your code in Go 1.4\n    words := []string{}\n    for i, end := 0, 0;\
    \ end < len(s); end++ {\n        if s[end] == ' ' {\n            if numVowels(s[i:end])\
    \ == n {\n                words = append(words, s[i:end])\n            }\n   \
    \         i = end + 1\n        }\n    }\n    if numVowels(s[i:]) == n {\n    \
    \    words = append(words, s[i:])\n    }\n    return words\n}\n", "    list_words\
    \ := make([]string, 0)\n    var list_letters []string\n    for _, l := range s\
    \ {\n        list_letters = append(list_letters, string(l))\n    }\n    var word\
    \ string\n    for _, l := range list_letters {\n        if l == \" \" {\n    \
    \        nc := count_consonants(word)\n            if nc == n {\n            \
    \    list_words = append(list_words, word)\n            }\n            word =\
    \ \"\"\n        } else {\n            word += l\n        }\n    }\n    if word\
    \ != \"\" {\n        nc := count_consonants(word)\n        if nc == n {\n    \
    \        list_words = append(list_words, word)\n        }\n    }\n    return list_words\n\
    }\n", "    words := []string{}\n    w := \"\"\n    flag := false\n    count :=\
    \ 0\n    for _, c := range s {\n        if c == ' ' {\n            if flag {\n\
    \                words = append(words, w)\n            }\n            w = \"\"\
    \n            flag = false\n            count = 0\n        } else {\n        \
    \    if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n         \
    \       count++\n            }\n            if count == n {\n                flag\
    \ = true\n            }\n            w += string(c)\n        }\n    }\n    if\
    \ flag {\n        words = append(words, w)\n    }\n    return words\n}\n", " \
    \   var result []string\n    words := strings.Split(s, \" \")\n    consonants\
    \ := []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"}\n \
    \   for _, w := range words {\n        count := 0\n        for _, l := range w\
    \ {\n            fmt.Println(string(l))\n            if string(l) in consonants\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result = append(result, w)\n        }\n    }\n    return result\n\
    }\n", "\treturn nil\n}\n", "    return nil\n}\n", "    var words []string\n\n\
    \    for _, word := range strings.Split(s, \" \") {\n        if len(strings.Replace(word,\
    \ \"aeiou\", \"\", -1)) == n {\n            words = append(words, word)\n    \
    \    }\n    }\n\n    return words\n}\n", "    m := make(map[string]int)\n    last\
    \ := 0\n    for i, b := range s {\n        if b == ' ' {\n            m[s[last:i]]\
    \ = countConsonants(s[last:i])\n            last = i + 1\n        }\n    }\n \
    \   m[s[last:]] = countConsonants(s[last:])\n    fmt.Println(m)\n    ret := make([]string,\
    \ 0)\n    for k, v := range m {\n        if v == n {\n            ret = append(ret,\
    \ k)\n        }\n    }\n    return ret\n}\n", "    if s == \"\" {\n        return\
    \ []string{}\n    }\n    wordList := []string{}\n    word := \"\"\n    consonantCount\
    \ := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n        \
    \    if consonantCount == n {\n                wordList = append(wordList, word)\n\
    \            }\n            word = \"\"\n            consonantCount = 0\n    \
    \    } else {\n            word += string(s[i])\n            if isConsonant(s[i])\
    \ {\n                consonantCount++\n            }\n        }\n    }\n    if\
    \ consonantCount == n {\n        wordList = append(wordList, word)\n    }\n  \
    \  return wordList\n}\n", "    var words []string\n    // First, seperate all\
    \ the words into an array.\n    for _, word := range s {\n        if word == 32\
    \ {\n            words = append(words, \" \")\n        } else {\n            words\
    \ = append(words, string(word))\n        }\n    }\n    var result []string\n \
    \   for _, word := range words {\n        if len(word) == 1 {\n            if\
    \ word == \"a\" || word == \"e\" || word == \"i\" || word == \"o\" || word ==\
    \ \"u\" {\n                continue\n            } else {\n                result\
    \ = append(result, word)\n            }\n        } else {\n            var count\
    \ int\n            for _, letter := range word {\n                if letter ==\
    \ 97 || letter == 101 || letter == 105 || letter == 111 || letter == 117 {\n \
    \                   continue\n                } else {\n                    count++\n\
    \                }\n            }\n            if count == n {\n             \
    \   result = append(result, word)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "\treturn nil\n}\n", "    words := []string{}\n    for _, word\
    \ := range strings.Split(s, \" \") {\n        count := 0\n        for _, letter\
    \ := range word {\n            if !isVowel(letter) {\n                count++\n\
    \            }\n        }\n        if count == n {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    var i int\n    var j int\n\
    \    var consonants int\n    var words []string\n    var word string\n    var\
    \ vowels = map[byte]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n\
    \n    for i < len(s) {\n        consonants = 0\n        word = \"\"\n        for\
    \ j = i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n\
    \            }\n            if _, ok := vowels[s[j]]; !ok {\n                consonants++\n\
    \            }\n            word += string(s[j])\n        }\n        if consonants\
    \ == n {\n            words = append(words, word)\n        }\n        i = j +\
    \ 1\n    }\n    return words\n}\n", "    words := strings.Split(s, \" \")\n  \
    \  result := []string{}\n    for _, word := range words {\n        count := 0\n\
    \        for _, char := range word {\n            if !isVowel(char) {\n      \
    \          count++\n            }\n        }\n        if count == n {\n      \
    \      result = append(result, word)\n        }\n    }\n    return result\n}\n",
  "    var words []string\n    start := 0\n    end := 0\n    // Iterate through the\
    \ string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n      \
    \      end = i\n            if end - start == n {\n                words = append(words,\
    \ s[start:end])\n            }\n            start = i + 1\n        }\n    }\n\
    \    return words\n}\n", "    res := []string{}\n    for _, w := range words(s)\
    \ {\n        if len(consonants(w)) == n {\n            res = append(res, w)\n\
    \        }\n    }\n    return res\n}\n", "    var words []string\n    var word\
    \ []rune\n    word_count := 0\n    consonant_count := 0\n    last_space := false\n\
    \    for _, char := range s {\n        if last_space {\n            if char ==\
    \ ' ' {\n                continue\n            }\n            last_space = false\n\
    \        }\n        if char == ' ' {\n            if consonant_count == n {\n\
    \                words = append(words, string(word))\n            }\n        \
    \    word = nil\n            word_count = 0\n            consonant_count = 0\n\
    \            last_space = true\n            continue\n        }\n        word\
    \ = append(word, char)\n        word_count += 1\n        if is_consonant(char)\
    \ {\n            consonant_count += 1\n        }\n        if word_count == len(s)\
    \ {\n            if consonant_count == n {\n                words = append(words,\
    \ string(word))\n            }\n        }\n    }\n    return words\n}\n", "  \
    \  s = \" \" + s\n    words := make([]string, 0)\n    current := \"\"\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(current)\
    \ == n {\n                words = append(words, current)\n            }\n    \
    \        current = \"\"\n        } else {\n            current += string(s[i])\n\
    \        }\n    }\n    return words\n}\n", "    // Write your code here\n    return\
    \ nil\n}\n", "    var res []string\n    var cur string\n    var consonants int\n\
    \n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                res = append(res, cur)\n            }\n            cur\
    \ = \"\"\n            consonants = 0\n        } else {\n            cur += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        res = append(res, cur)\n\
    \    }\n    return res\n}\n", "    count_consonants := func(w string) int {\n\
    \        count := 0\n        for _, c := range w {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1\n\
    \            }\n        }\n        return count\n    }\n\n    result := []string{}\n\
    \    sb := []byte(s)\n    wb := []byte{}\n    for _, b := range sb {\n       \
    \ if b == ' ' {\n            if count_consonants(string(wb)) == n {\n        \
    \        result = append(result, string(wb))\n            }\n            wb =\
    \ []byte{}\n        } else {\n            wb = append(wb, b)\n        }\n    }\n\
    \    if count_consonants(string(wb)) == n {\n        result = append(result, string(wb))\n\
    \    }\n    return result\n}\n", "\twords := []string{}\n\tword := \"\"\n\tcurrent_n\
    \ := 0\n\tfor _, c := range s {\n\t\tif current_n == n {\n\t\t\tif c == ' ' {\n\
    \t\t\t\twords = append(words, word)\n\t\t\t\tword = \"\"\n\t\t\t\tcurrent_n =\
    \ 0\n\t\t\t} else {\n\t\t\t\tword += string(c)\n\t\t\t}\n\t\t} else {\n\t\t\t\
    if c == ' ' {\n\t\t\t\tword = \"\"\n\t\t\t\tcurrent_n = 0\n\t\t\t} else {\n\t\t\
    \t\tswitch c {\n\t\t\t\tcase 'a', 'e', 'i', 'o', 'u':\n\t\t\t\t\tbreak\n\t\t\t\
    \tdefault:\n\t\t\t\t\tcurrent_n++\n\t\t\t\t}\n\t\t\t\tword += string(c)\n\t\t\t\
    }\n\t\t}\n\t}\n\tif current_n == n {\n\t\twords = append(words, word)\n\t}\n\t\
    return words\n}\n", "    var rs []string\n    var nconsonants int\n\n    for i,\
    \ _ := range s {\n        switch s[i] {\n        case 'a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U':\n            nconsonants = 0\n        default:\n  \
    \          nconsonants++\n        }\n        if nconsonants == n {\n         \
    \   var j, k int\n            for j = i; j >= 0; j-- {\n                if s[j]\
    \ == ' ' {\n                    break\n                }\n            }\n    \
    \        for k = i; k < len(s); k++ {\n                if s[k] == ' ' {\n    \
    \                break\n                }\n            }\n            rs = append(rs,\
    \ s[j+1:k])\n            nconsonants = 0\n        }\n    }\n    return rs\n}\n",
  "    var words []string\n    var counter int\n    var current_word string\n    for\
    \ _,ch := range s {\n        if ch == ' ' {\n            if counter == n {\n \
    \               words = append(words, current_word)\n            }\n         \
    \   counter = 0\n            current_word = \"\"\n        } else {\n         \
    \   if ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' {\n     \
    \           counter++\n            }\n            current_word += string(ch)\n\
    \        }\n    }\n    return words\n}\n", "    // parse the string\n    var words\
    \ = []string{}\n    var currentWord = \"\"\n    var matches = []string{}\n   \
    \ for _, char := range s {\n        if char == ' ' {\n            words = append(words,\
    \ currentWord)\n            currentWord = \"\"\n        } else {\n           \
    \ currentWord += string(char)\n        }\n    }\n    if currentWord != \"\" {\n\
    \        words = append(words, currentWord)\n    }\n    // iterate over the words\
    \ and find the matches\n    for _, word := range words {\n        consonants :=\
    \ 0\n        for _, char := range word {\n            switch char {\n        \
    \    case 'a', 'e', 'i', 'o', 'u':\n                break\n            default:\n\
    \                consonants++\n            }\n        }\n        if consonants\
    \ == n {\n            matches = append(matches, word)\n        }\n    }\n    return\
    \ matches\n}\n", "    var result []string\n    words := strings.Split(s, \" \"\
    )\n    for _, word := range words {\n        if ConsonantsCount(word) == n {\n\
    \            result = append(result, word)\n        }\n    }\n    return result\n\
    }\n", "    if len(s) == 0 {\n        return []string{}\n    }\n    result := []string{}\n\
    \    str := \"\"\n    for _, i := range s {\n        if i != ' ' {\n         \
    \   str += string(i)\n        } else {\n            if numConsonants(str) == n\
    \ {\n                result = append(result, str)\n            }\n           \
    \ str = \"\"\n        }\n    }\n    if numConsonants(str) == n {\n        result\
    \ = append(result, str)\n    }\n    return result\n}\n", "    // YOUR CODE HERE\n\
    \    return nil\n}\n", "    // let's first build the map of consonants\n    //\
    \ in English:\n    // if we assume that a, e, i, o, u are vowels,\n    // then\
    \ consonants are all the rest of the letters\n    m := make(map[rune]bool)\n \
    \   for _, c := range s {\n        if c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u' {\n            m[c] = true\n        }\n    }\n    // now let's\
    \ use this map to check if the strings\n    // containt the required number of\
    \ consonants\n    words := make([]string, 0)\n    for _, word := range(strings.Split(s,\
    \ \" \")) {\n        has := 0\n        for _, letter := range(word) {\n      \
    \      if _, ok := m[letter]; ok {\n                has++\n            }\n   \
    \     }\n        if has == n {\n            words = append(words, word)\n    \
    \    }\n    }\n    return words\n}\n", "    var rs []string\n    if s == \"\"\
    \ {\n        return rs\n    }\n    var words []string\n    var buffer []byte\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            words\
    \ = append(words, string(buffer))\n            buffer = []byte{}\n        } else\
    \ {\n            buffer = append(buffer, s[i])\n        }\n    }\n    words =\
    \ append(words, string(buffer))\n    for _, w := range words {\n        if is_n_consonants(w,\
    \ n) {\n            rs = append(rs, w)\n        }\n    }\n    return rs\n}\n",
  "    ans := []string{}\n    words := strings.Split(s, \" \")\n    for _, w := range\
    \ words {\n        if len(w) > 0 && countConsonants(w) == n {\n            ans\
    \ = append(ans, w)\n        }\n    }\n    return ans\n}\n", "    var result []string\n\
    \    var words []string\n    words = get_words(s)\n    for _, w := range words\
    \ {\n        if is_consonant(w, n) {\n            result = append(result, w)\n\
    \        }\n    }\n    return result\n}\n", "    if n <= 0 {\n        return nil\n\
    \    }\n    if len(s) == 0 {\n        return nil\n    }\n    if n == 1 {\n   \
    \     return strings.Split(s, \" \")\n    }\n    words := strings.Split(s, \"\
    \ \")\n    result := make([]string, 0)\n    for _, w := range words {\n      \
    \  if count_consonants(w) == n {\n            result = append(result, w)\n   \
    \     }\n    }\n    return result\n}\n", "    var words []string\n    if len(s)\
    \ == 0 {\n        return words\n    }\n    return words\n}\n", "    return nil\n\
    }\n", "    var r []string\n    if len(s) == 0 {\n        return r\n    }\n   \
    \ start := 0\n    end := 0\n    var word string\n    var consonants int\n    var\
    \ bConsonant = false\n    for ; end < len(s); end++ {\n        bConsonant = true\n\
    \        switch s[end] {\n        case 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U':\n            bConsonant = false\n        }\n        if bConsonant\
    \ {\n            consonants++\n        }\n        if s[end] == ' ' || end == len(s)\
    \ - 1 {\n            if consonants == n {\n                if end == len(s) -\
    \ 1 {\n                    end++\n                }\n                word = s[start:end]\n\
    \                fmt.Println(word)\n                r = append(r, word)\n    \
    \        }\n            start = end + 1\n            consonants = 0\n        }\n\
    \    }\n    return r\n}\n", "    //TODO: Implement this function\n    return []string{}\n\
    }\n", "    return nil\n}\n", "    var words []string\n    count := 0\n    vowel\
    \ := map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n  \
    \  for _, letter := range s {\n        if !vowel[letter] {\n            count++\n\
    \        }\n    }\n    return words\n}\n", "    return nil\n}\n", "    var result\
    \ []string\n    if len(s) == 0 {\n        return result\n    }\n    s = s + \"\
    \ \"\n    var word string\n    counter := 0\n    for _, c := range s {\n     \
    \   if c != ' ' {\n            word = word + string(c)\n            if is_vowel(c)\
    \ {\n                counter = 0\n            } else {\n                counter++\n\
    \            }\n        } else {\n            if counter == n {\n            \
    \    result = append(result, word)\n            }\n            word = \"\"\n \
    \           counter = 0\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, word := range words(s) {\n        if countConsonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    words := []string{}\n    for _, v := range s {\n        if\
    \ v == ' ' {\n            words = append(words, \"\")\n        } else {\n    \
    \        words[len(words)-1] += string(v)\n        }\n    }\n    f := func(r rune)\
    \ bool {\n        switch r {\n        case 'a', 'e', 'i', 'o', 'u':\n        \
    \    return true\n        }\n        return false\n    }\n    result := []string{}\n\
    \    for _, v := range words {\n        count := 0\n        for _, r := range\
    \ v {\n            if !f(r) {\n                count++\n            }\n      \
    \  }\n        if count == n {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n", "    var (\n        result []string\n  \
    \      word   string\n        count  int\n    )\n    for _, char := range s {\n\
    \        if char != ' ' {\n            if 'a' <= char && char <= 'z' || 'A' <=\
    \ char && char <= 'Z' {\n                count++\n            }\n            word\
    \ += string(char)\n        } else {\n            if count == n {\n           \
    \     result = append(result, word)\n            }\n            word = \"\"\n\
    \            count = 0\n        }\n    }\n    if count == n {\n        result\
    \ = append(result, word)\n    }\n    return result\n}\n", "    var words = make([]string,\
    \ 0)\n    if len(s) == 0 {\n        return words\n    }\n    var start, end int\n\
    \    for end = 0; end < len(s); end++ {\n        if s[end] == ' ' {\n        \
    \    var count = count_consonants(s[start:end])\n            if count == n {\n\
    \                words = append(words, s[start:end])\n            }\n        \
    \    start = end + 1\n        }\n    }\n    var count = count_consonants(s[start:end])\n\
    \    if count == n {\n        words = append(words, s[start:end])\n    }\n   \
    \ return words\n}\n", "    var ret []string\n    var flag bool\n    for _, word\
    \ := range split(s) {\n        if len(word) == 0 {\n            continue\n   \
    \     }\n        flag = true\n        for _, c := range word {\n            if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n               \
    \ flag = false\n                break\n            }\n        }\n        if flag\
    \ && n == len(word) {\n            ret = append(ret, word)\n        }\n    }\n\
    \    return ret\n}\n", "    if len(s) == 0 {\n        return []string{}\n    }\n\
    \    // write your solution here...\n    return []string{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
