language: go_test.go
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered_strings\
    \ []string\n    for _, item := range strings {\n        if item[0:1] == prefix\
    \ {\n            filtered_strings = append(filtered_strings, item)\n        }\n\
    \    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpj_rl9oae_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         result = append(result, s)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var output\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            output = append(output, s)\n   \
    \     }\n    }\n    return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, str := range strings {\n        if len(str) > 0 &&\
    \ str[0] == prefix[0] {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp9fiblyeh_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if str[0:1] == prefix {\n\
    \            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpoaohzxac_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    if len(strings)\
    \ == 0 {\n        return []string{}\n    }\n    newSlice := []string{}\n    for\
    \ _, s := range strings {\n        if s[0:1] == prefix {\n            newSlice\
    \ = append(newSlice, s)\n        }\n    }\n    return newSlice\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpqapv9mzh_test.go:40: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if (len(s) > 0 && s[0]\
    \ == prefix[0]) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpaod17q8j_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            filtered = append(filtered, str)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // Naive\
    \ implementation.\n    var filtered_strings []string\n    for _, s := range strings\
    \ {\n        if len(s) >= len(prefix) && s[:len(prefix)] == prefix {\n       \
    \     filtered_strings = append(filtered_strings, s)\n        }\n    }\n    return\
    \ filtered_strings\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073464
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    strings_to_return\
    \ := []string{}\n    for _, elem := range strings {\n        if string(elem[0])\
    \ == prefix {\n            strings_to_return = append(strings_to_return, elem)\n\
    \        }\n    }\n    return strings_to_return\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp1lwnqw4n_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // Filter\
    \ the list of strings and return a slice of only those\n    // starting with the\
    \ given prefix.\n    var filtered_strings []string\n    for _, s := range strings\
    \ {\n        if len(s) > 0 && s[0] == prefix[0] {\n            filtered_strings\
    \ = append(filtered_strings, s)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp8edn3rsv_test.go:39: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, v := range strings {\n        if (v[0:len(prefix)]\
    \ == prefix) {\n            result = append(result, v)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate :=\
    \ filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073464
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // strings[:0]\
    \ creates a new, empty slice that has the same capacity as the\n    // original.\
    \ We can use it to avoid appending items to the slice and thus\n    // reallocating\
    \ it.\n    new_strings := strings[:0]\n    for _, s := range strings {\n     \
    \   if strings.HasPrefix(s, prefix) {\n            new_strings = append(new_strings,\
    \ s)\n        }\n    }\n    return new_strings\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0gku3por_test.go:19:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    output\
    \ := []string{}\n    for _, elem := range strings {\n        if len(elem) < len(prefix)\
    \ {\n            continue\n        }\n        if elem[:len(prefix)] == prefix\
    \ {\n            output = append(output, elem)\n        }\n    }\n    return output\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered_list\
    \ []string\n    for _, value := range strings {\n        if len(value) > 0 &&\
    \ value[0:1] == prefix {\n            filtered_list = append(filtered_list, value)\n\
    \        }\n    }\n    return filtered_list\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp3cws6hqg_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    output\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0]\
    \ == prefix[0] {\n            output = append(output, s)\n        }\n    }\n \
    \   return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpeex5z7ht_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0]\
    \ == prefix[0] {\n            result = append(result, s)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpxk4dx_uq_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, str := range strings {\n        if len(str) < len(prefix)\
    \ {\n            continue\n        }\n        if str[:len(prefix)] == prefix {\n\
    \            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073464
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    res :=\
    \ []string{}\n    for _, item := range strings {\n        if len(item) < len(prefix)\
    \ {\n            continue\n        }\n        if item[:len(prefix)] == prefix\
    \ {\n            res = append(res, item)\n        }\n    }\n    return res\n}\n\
    \nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073464
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    output\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) < len(prefix)\
    \ {\n            continue\n        }\n        if s[:len(prefix)] == prefix {\n\
    \            output = append(output, s)\n        }\n    }\n    return output\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073464
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // Initialize\
    \ the return list.\n    ret := []string{}\n\n    // For every string in the input,\
    \ check if it starts with the prefix.\n    for _, s := range strings {\n     \
    \   if s[0:len(prefix)] == prefix {\n            // It does, so append it to the\
    \ return list.\n            ret = append(ret, s)\n        }\n    }\n\n    // Return\
    \ the return list.\n    return ret\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0]\
    \ == prefix[0] {\n            result = append(result, s)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpxk4dx_uq_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            result = append(result, str)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073464
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if (s[0:len(prefix)]\
    \ == prefix) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate :=\
    \ filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var new_list\
    \ []string\n    for _, value := range strings {\n        if len(value) > 0 &&\
    \ value[0:1] == prefix {\n            new_list = append(new_list, value)\n   \
    \     }\n    }\n    return new_list\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpgko7n2qh_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073465
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var answer\
    \ []string\n    for _, str := range strings {\n        if str[0:len(prefix)] ==\
    \ prefix {\n            answer = append(answer, str)\n        }\n    }\n    return\
    \ answer\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073466
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) > 0 && s[0] ==\
    \ rune(prefix[0]) {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4r9p1ced_test.go:16:34: invalid operation: s[0] == rune(prefix[0]) (mismatched
    types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    i := 0\n\
    \    for _, string := range strings {\n        if len(string) < len(prefix) {\n\
    \            continue\n        }\n        if string[:len(prefix)] == prefix {\n\
    \            strings[i] = string\n            i++\n        }\n    }\n    return\
    \ strings[:i]\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate :=\
    \ filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0]\
    \ == prefix[0] {\n            result = append(result, s)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpxk4dx_uq_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0]\
    \ == prefix[0] {\n            result = append(result, s)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpxk4dx_uq_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered_strings\
    \ []string\n    for _, s := range strings {\n        if (len(s) >= len(prefix))\
    \ && (s[0:len(prefix)] == prefix) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    strings_filtered\
    \ := []string{}\n    for _, s := range strings {\n        if s[0:len(prefix)]\
    \ == prefix {\n            strings_filtered = append(strings_filtered, s)\n  \
    \      }\n    }\n    return strings_filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, v := range strings {\n        if len(v) >= len(prefix)\
    \ && v[:len(prefix)] == prefix {\n            result = append(result, v)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, value := range strings {\n        if value[0:len(prefix)]\
    \ == prefix {\n            result = append(result, value)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if str[0:len(prefix)] ==\
    \ prefix {\n            result = append(result, str)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) > 0 && s[0] ==\
    \ prefix[0] {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp41g0jqa2_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // Create\
    \ a slice that contains the original string\n    // (with an empty string at the\
    \ beginning so that the\n    // first word goes in to the 0th index)\n    prefixLength\
    \ := len(prefix)\n    newStringSlice := make([]string, len(strings)+1)\n    newStringSlice[0]\
    \ = \"\"\n    copy(newStringSlice[1:], strings)\n\n    // Split the string by\
    \ spaces and loop through each word\n    outputSlice := make([]string, 0)\n  \
    \  for _, stringSlice := range newStringSlice {\n        stringSlice = prefix\
    \ + stringSlice\n        if stringSlice[:prefixLength] == prefix {\n         \
    \   outputSlice = append(outputSlice, stringSlice[prefixLength:])\n        }\n\
    \    }\n    return outputSlice\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpq1nqzq_1_test.go:47: expected '[xxx xxxAAA xxx]', got '[\
    \ xxx asd xxy john doe xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    returnstrings\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            returnstrings = append(returnstrings,\
    \ s)\n        }\n    }\n    return returnstrings\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var res\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            res = append(res, s)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if (string(s[0]) ==\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpx_gu8xwa_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         result = append(result, s)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if s[0:len(prefix)] == prefix\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret\
    \ []string\n    for _, word := range strings {\n        if word[0:len(prefix)]\
    \ == prefix {\n            ret = append(ret, word)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073466
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret\
    \ []string\n    for _, s := range strings {\n        if (len(s) > 0 && s[0] ==\
    \ rune(prefix[0])) {\n            ret = append(ret, s)\n        }\n    }\n   \
    \ return ret\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58fhp4ge_test.go:16:35: invalid operation: s[0] == rune(prefix[0]) (mismatched
    types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            filtered = append(filtered, str)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered\
    \ []string\n    for _, s := range strings {\n        if len(s) > 0 && s[0] ==\
    \ prefix[0] {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpsn7cpub7_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073402
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var res\
    \ []string\n    for _, s := range strings {\n        if s[0:len(prefix)] == prefix\
    \ {\n            res = append(res, s)\n        }\n    }\n    return res\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // TODO:\
    \ finish this function\n    return []string{}\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpa_jz0mvr_test.go:32: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // TODO\n\
    \    return []string{}\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpqfo_d1xu_test.go:32: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if s[0:len(prefix)]\
    \ == prefix {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var res\
    \ []string\n    for _, s := range strings {\n        if prefix != \"\" && len(s)\
    \ >= len(prefix) && s[:len(prefix)] == prefix {\n            res = append(res,\
    \ s)\n        }\n    }\n    return res\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, value := range strings {\n        if len(value) > 0 &&\
    \ value[0] == prefix[0] {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpg1di1z1j_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) < len(prefix)\
    \ {\n            continue\n        }\n        if s[:len(prefix)] == prefix {\n\
    \            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if (str[0:len(prefix)]\
    \ == prefix) {\n            result = append(result, str)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpqug31yos_test.go:32: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret\
    \ []string\n    for _, s := range strings {\n        if s[0:len(prefix)] == prefix\
    \ {\n            ret = append(ret, s)\n        }\n    }\n    return ret\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073467
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var prefixed\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            prefixed = append(prefixed, s)\n\
    \        }\n    }\n    return prefixed\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073468
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, value := range strings {\n        if (len(value) >= len(prefix))\
    \ && (value[0:len(prefix)] == prefix) {\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073468
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0]\
    \ == prefix[0] {\n            result = append(result, s)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpxk4dx_uq_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    if len(strings)\
    \ == 0 {\n        return strings\n    }\n    if len(prefix) == 0 {\n        return\
    \ strings\n    }\n    filtered_strings := make([]string, 0)\n    for _, v := range\
    \ strings {\n        if len(v) >= len(prefix) && v[0:len(prefix)] == prefix {\n\
    \            filtered_strings = append(filtered_strings, v)\n        }\n    }\n\
    \    return filtered_strings\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var r []string\n\
    \    for _, s := range strings {\n        if len(s) < len(prefix) {\n        \
    \    continue\n        }\n        if s[:len(prefix)] == prefix {\n           \
    \ r = append(r, s)\n        }\n    }\n    return r\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // YOUR\
    \ CODE HERE\n    return nil\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpufdbtf5u_test.go:32: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if has_prefix(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp43x52t1f_test.go:16:12: undefined: has_prefix

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073468
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // IMPLEMENT\
    \ ME\n    return []string{}\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpqyy0m7ed_test.go:32: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var new_strings\
    \ []string\n    for _, s := range strings {\n        if (s[0:len(prefix)] == prefix)\
    \ {\n            new_strings = append(new_strings, s)\n        }\n    }\n    return\
    \ new_strings\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate :=\
    \ filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var results\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            results = append(results, s)\n \
    \       }\n    }\n    return results\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if (s[0:1] == prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmppq9svwrw_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    output\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) < len(prefix)\
    \ {\n            continue\n        }\n        if s[:len(prefix)] == prefix {\n\
    \            output = append(output, s)\n        }\n    }\n    return output\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073464
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if s[0:len(prefix)]\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) < len(prefix)\
    \ {\n            continue\n        }\n        if s[:len(prefix)] == prefix {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var results\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            results = append(results, str)\n\
    \        }\n    }\n    return results\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    if len(strings)\
    \ == 0 {\n        return strings\n    }\n\n    output := make([]string, 0)\n \
    \   for _, s := range strings {\n        if len(s) > 0 && s[0] == prefix[0] {\n\
    \            output = append(output, s)\n        }\n    }\n    return output\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpvn9lprtm_test.go:41: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // Use\
    \ make to size the slice when allocating memory for the output slice.\n    //\
    \ Use cap to get the length of the slice to pass to make, to avoid having to\n\
    \    // iterate over the whole slice to get the length.\n    output := make([]string,\
    \ 0, cap(strings))\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            output = append(output, s)\n   \
    \     }\n    }\n    return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    results\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            results = append(results, s)\n \
    \       }\n    }\n    return results\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var results\
    \ []string\n    for _, s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         results = append(results, s)\n        }\n    }\n    return results\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, v := range strings {\n        if len(v) >= len(prefix)\
    \ && v[:len(prefix)] == prefix {\n            result = append(result, v)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var r []string\n\
    \    for _, s := range strings {\n        if len(s) > 0 && s[0] == prefix[0] {\n\
    \            r = append(r, s)\n        }\n    }\n    return r\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp3c_qjgdk_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var res\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            res = append(res, s)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered\
    \ []string\n    for _, value := range strings {\n        if value[0:len(prefix)]\
    \ == prefix {\n            filtered = append(filtered, value)\n        }\n   \
    \ }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0]\
    \ == prefix[0] {\n            result = append(result, s)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpxk4dx_uq_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // Iterate\
    \ over the input slice.\n    output := []string{}\n    for _,s := range strings\
    \ {\n        if s[0:len(prefix)] == prefix {\n            output = append(output,\
    \ s)\n        }\n    }\n    return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if len(str) < len(prefix)\
    \ {\n            continue\n        }\n        if str[:len(prefix)] == prefix {\n\
    \            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073402
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // Logic\
    \ is - find a string that starts with 'prefix' and add that to output list. Then\
    \ you are\n    // done. If there are no more strings, then you are done.\n   \
    \ var result []string\n    for _, s := range strings {\n        if len(s) < len(prefix)\
    \ {\n            continue\n        }\n        if s[0:len(prefix)] == prefix {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if s[0:len(prefix)] == prefix\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if (len(s) >= len(prefix))\
    \ && (s[:len(prefix)] == prefix) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered_strings\
    \ []string\n    for _, s := range strings {\n        if string(s[0]) == prefix\
    \ {\n            filtered_strings = append(filtered_strings, s)\n        }\n \
    \   }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpmrjc9_9f_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var results\
    \ []string\n    for _, string := range strings {\n        if string[0:len(prefix)]\
    \ == prefix {\n            results = append(results, string)\n        }\n    }\n\
    \    return results\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073470
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    strings_with_prefix\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            strings_with_prefix = append(strings_with_prefix,\
    \ s)\n        }\n    }\n    return strings_with_prefix\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660073471
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            filtered = append(filtered, str)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073471
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var res\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            res = append(res, s)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) < len(prefix)\
    \ {\n            continue\n        }\n        if s[:len(prefix)] == prefix {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if str[0:len(prefix)] ==\
    \ prefix {\n            result = append(result, str)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var newStrings\
    \ []string\n    for _,s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         newStrings = append(newStrings, s)\n        }\n    }\n    return newStrings\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073471
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         result = append(result, s)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if prefix_match(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq_mhc25h_test.go:16:12: undefined: prefix_match

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    out :=\
    \ []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0] ==\
    \ prefix[0] {\n            out = append(out, s)\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp56rcf6nw_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    out :=\
    \ []string{}\n    for _, s := range strings {\n        if s[0:len(prefix)] ==\
    \ prefix {\n            out = append(out, s)\n        }\n    }\n    return out\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0]\
    \ == prefix[0] {\n            result = append(result, s)\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpxk4dx_uq_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var results\
    \ []string\n    for _, str := range strings {\n        if len(str) > 0 && str[0]\
    \ == prefix[0] {\n            results = append(results, str)\n        }\n    }\n\
    \    return results\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpfehg592i_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    fmt.Println(\"\
    filter_by_prefix:\", strings, prefix)\n    var result []string\n    for _, s :=\
    \ range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)] == prefix\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret\
    \ []string\n    for _, v := range strings {\n        if len(v) >= len(prefix)\
    \ && v[:len(prefix)] == prefix {\n            ret = append(ret, v)\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered_strings\
    \ := []string{}\n    for _, s := range strings {\n        if s[0:len(prefix)]\
    \ == prefix {\n            filtered_strings = append(filtered_strings, s)\n  \
    \      }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, value := range strings {\n        if len(value) > 0 &&\
    \ value[0] == prefix[0] {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpg1di1z1j_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filterd_strings\
    \ []string\n    for _, s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         filterd_strings = append(filterd_strings, s)\n        }\n    }\n   \
    \ return filterd_strings\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if s[0:len(prefix)] == prefix\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, item := range strings {\n        if len(item) < len(prefix)\
    \ {\n            continue\n        }\n        if item[:len(prefix)] == prefix\
    \ {\n            result = append(result, item)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    res :=\
    \ []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            res = append(res, s)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    output\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            output = append(output, s)\n   \
    \     }\n    }\n    return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, value := range strings {\n        if len(value) > 0 &&\
    \ value[0] == prefix[0] {\n            result = append(result, value)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpg1di1z1j_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    results\
    \ := []string{}\n    for _, value := range strings {\n        if string(value[0])\
    \ == prefix {\n            results = append(results, value)\n        }\n    }\n\
    \    return results\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp3q9upwxj_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var i int\n\
    \    filtered_strings := make([]string, 0)\n    for i = 0; i < len(strings); i++\
    \ {\n        if strings[i][0:len(prefix)] == prefix {\n            filtered_strings\
    \ = append(filtered_strings, strings[i])\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            ret = append(ret, s)\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if s[0:len(prefix)]\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _,s := range strings {\n        if (len(s) >= len(prefix))\
    \ && (s[0:len(prefix)] == prefix) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if(len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix) {\n            result = append(result, s)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var output\
    \ []string\n    for _, s := range strings {\n        if(len(s) > 0 && s[0] ==\
    \ prefix[0]) {\n            output = append(output, s)\n        }\n    }\n   \
    \ return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate :=\
    \ filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpolhjyqqv_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    return\
    \ strings\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpftpfzssi_test.go:31: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ asd xxy john doe xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    strings_len\
    \ := len(strings)\n    results := make([]string, 0, strings_len)\n    for _, word\
    \ := range strings {\n        if word[0:1] == prefix {\n            results =\
    \ append(results, word)\n        }\n    }\n    return results\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp2mhy8t4__test.go:38: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073473
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, s := range strings {\n        if (s[0:len(prefix)]\
    \ == prefix) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073473
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if strings.HasPrefix(s, prefix)\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvtvzzkbs_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var output\
    \ []string\n    for _, word := range strings {\n        if word[0:len(prefix)]\
    \ == prefix {\n            output = append(output, word)\n        }\n    }\n \
    \   return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073473
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, elem := range strings {\n        if len(elem) < len(prefix)\
    \ {\n            continue\n        }\n        if elem[:len(prefix)] == prefix\
    \ {\n            result = append(result, elem)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var tmp\
    \ []string\n    for _, str := range strings {\n        if str[0:1] == prefix {\n\
    \            tmp = append(tmp, str)\n        }\n    }\n    return tmp\n}\n\nfunc\
    \ TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}, \"john\"), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpd2r9pvsa_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var results\
    \ []string\n    for _, s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         results = append(results, s)\n        }\n    }\n    return results\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if s[0:1] == prefix\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpx32q4xhv_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var prefixStrings\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            prefixStrings = append(prefixStrings,\
    \ str)\n        }\n    }\n    return prefixStrings\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073475
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    if len(strings)\
    \ == 0 {\n        return strings\n    }\n    length := len(strings)\n    res :=\
    \ make([]string, 0, length)\n    for _, value := range strings {\n        if len(value)\
    \ < len(prefix) {\n            continue\n        }\n        if value[:len(prefix)]\
    \ == prefix {\n            res = append(res, value)\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073475
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, string := range strings {\n        if len(string) > 0 &&\
    \ string[0] == rune(prefix[0]) {\n            result = append(result, string)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpevkxrud3_test.go:16:44: invalid operation: string[0] == rune(prefix[0])
    (mismatched types byte and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073474
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if str[0:len(prefix)] ==\
    \ prefix {\n            result = append(result, str)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, v := range strings {\n        if (v[0:len(prefix)] == prefix)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var strings_with_prefix\
    \ []string\n    for _, str := range strings {\n        if len(str) > 0 && str[0]\
    \ == prefix[0] {\n            strings_with_prefix = append(strings_with_prefix,\
    \ str)\n        }\n    }\n    return strings_with_prefix\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp_nppyv6o_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073475
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            ret = append(ret, str)\n     \
    \   }\n    }\n    return ret\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var new_list\
    \ []string\n    for _, s := range strings {\n        if (s[0:1] == prefix) {\n\
    \            new_list = append(new_list, s)\n        }\n    }\n    return new_list\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpy30ixd5y_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, v := range strings {\n        if prefix == v[0:len(prefix)]\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073475
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    stringsLen\
    \ := len(strings)\n    prefixLen := len(prefix)\n    filteredStrings := make([]string,\
    \ 0, stringsLen)\n    for _, str := range strings {\n        if len(str) >= prefixLen\
    \ && str[:prefixLen] == prefix {\n            filteredStrings = append(filteredStrings,\
    \ str)\n        }\n    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var r []string\n\
    \    for _, s := range strings {\n        if len(s) > 0 && s[0] == prefix[0] {\n\
    \            r = append(r, s)\n        }\n    }\n    return r\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp3c_qjgdk_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    output\
    \ := []string{}\n    for _, str := range strings {\n        if str[0:len(prefix)]\
    \ == prefix {\n            output = append(output, str)\n        }\n    }\n  \
    \  return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret_val\
    \ []string\n\n    for _, str := range strings {\n        if (str[0:1] == prefix)\
    \ {\n            ret_val = append(ret_val, str)\n        }\n    }\n\n    return\
    \ ret_val\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpmreldw65_test.go:39: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         result = append(result, s)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    r := []string{}\n\
    \    for _, s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)]\
    \ == prefix {\n            r = append(r, s)\n        }\n    }\n    return r\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if (len(str) > len(prefix)\
    \ && str[:len(prefix)] == prefix) {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpoi5xycp8_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxxAAA]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    res :=\
    \ []string{}\n    for _, val := range strings {\n        if val[0:1] == prefix\
    \ {\n            res = append(res, val)\n        }\n    }\n    return res\n}\n\
    \nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpgl9cj9vd_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if s[0:len(prefix)] == prefix\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if (s[0:1] == prefix) {\n\
    \            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpp3nkccfv_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret\
    \ []string\n    for _, s := range strings {\n        if len(s) > 0 && s[0] ==\
    \ prefix[0] {\n            ret = append(ret, s)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp5rmu6yde_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, word := range strings {\n        if len(word) >= len(prefix)\
    \ && word[:len(prefix)] == prefix {\n            result = append(result, word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073476
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    matches\
    \ := []string{}\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            matches = append(matches, str)\n\
    \        }\n    }\n    return matches\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073476
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         result = append(result, s)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // Initialize\
    \ the result list.\n    result := []string{}\n\n    // Append all strings in the\
    \ input list that start with the prefix,\n    // to the result list.\n    for\
    \ _, s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)]\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n\n  \
    \  // Return the result list.\n    return result\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073476
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, v := range strings {\n        if len(v) >= len(prefix)\
    \ && v[:len(prefix)] == prefix {\n            result = append(result, v)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret\
    \ []string\n    for _, s := range strings {\n        if s[0:len(prefix)] == prefix\
    \ {\n            ret = append(ret, s)\n        }\n    }\n    return ret\n}\n\n\
    func TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073467
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    if prefix\
    \ == \"\" {\n        return []string{}\n    }\n    result := []string{}\n    for\
    \ _, s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)]\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073476
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073475
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    new_strings\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            new_strings = append(new_strings,\
    \ s)\n        }\n    }\n    return new_strings\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    ret :=\
    \ []string{}\n    for _, val := range strings {\n        if string(val[0]) ==\
    \ prefix {\n            ret = append(ret, val)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp8k7li_14_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    filtered\
    \ := []string{}\n    for _, i := range strings {\n        if i[0:1] == prefix\
    \ {\n            filtered = append(filtered, i)\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpm5gpinmq_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    if len(strings)\
    \ == 0 {\n        return strings\n    }\n    var result []string\n    for _, s\
    \ := range strings {\n        if s[0:1] == prefix {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmp30_e6nqd_test.go:40: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    found :=\
    \ []string{}\n    for _, s := range strings {\n        if len(s) > 0 && s[0] ==\
    \ prefix[0] {\n            found = append(found, s)\n        }\n    }\n    return\
    \ found\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpv1hee0j1_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    if len(strings)\
    \ == 0 {\n        return strings\n    }\n    if len(prefix) == 0 {\n        return\
    \ strings\n    }\n    answer := make([]string, 0)\n    for _, el := range strings\
    \ {\n        if string(el[0]) == prefix {\n            answer = append(answer,\
    \ el)\n        }\n    }\n    return answer\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpq4a9pdhp_test.go:43: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    out :=\
    \ []string{}\n    for _, s := range strings {\n        if s[0:len(prefix)] ==\
    \ prefix {\n            out = append(out, s)\n        }\n    }\n    return out\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073472
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, v := range strings {\n        if strings.HasPrefix(v,\
    \ prefix) {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplaj1_tmv_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered_strings\
    \ []string\n    for _, s := range strings {\n        if s[0:len(prefix)] == prefix\
    \ {\n            filtered_strings = append(filtered_strings, s)\n        }\n \
    \   }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            result = append(result, s)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var matches\
    \ []string\n    for _, s := range strings {\n        if len(s) < len(prefix) {\n\
    \            continue\n        }\n        if s[:len(prefix)] == prefix {\n   \
    \         matches = append(matches, s)\n        }\n    }\n    return matches\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    if len(strings)\
    \ == 0 {\n        return []string{}\n    }\n    if len(prefix) == 0 {\n      \
    \  return strings\n    }\n    filtered := []string{}\n    for _, v := range strings\
    \ {\n        if string(v[0]) == prefix {\n            filtered = append(filtered,\
    \ v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmps9rxer6p_test.go:43: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, s := range strings {\n        if prefix == s[:len(prefix)]\
    \ {\n            result = append(result, s)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var out\
    \ []string\n    for _, string := range strings {\n        if len(string) > 0 &&\
    \ string[0] == prefix[0] {\n            out = append(out, string)\n        }\n\
    \    }\n    return out\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate\
    \ := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpzil3c022_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    newSlice\
    \ := []string{}\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            newSlice = append(newSlice, s)\n\
    \        }\n    }\n    return newSlice\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 2
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if strings.HasPrefix(s,\
    \ prefix) {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4v6sw10_test.go:16:20: strings.HasPrefix undefined (type []string has
    no field or method HasPrefix)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if str[0:len(prefix)] ==\
    \ prefix {\n            result = append(result, str)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var ret\
    \ []string\n    for _, v := range strings {\n        if v[0:1] == prefix {\n \
    \           ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{}, \"john\"), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmptm3q9ltt_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var results\
    \ []string\n    for _, s := range strings {\n        if len(s) >= len(prefix)\
    \ && s[:len(prefix)] == prefix {\n            results = append(results, s)\n \
    \       }\n    }\n    return results\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var filtered\
    \ []string\n    for _, s := range strings {\n        if (len(s) >= len(prefix))\
    \ && (s[:len(prefix)] == prefix) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    prefixLen\
    \ := len(prefix)\n    ret := make([]string, 0)\n    for _, s := range strings\
    \ {\n        if len(s) >= prefixLen && s[:prefixLen] == prefix {\n           \
    \ ret = append(ret, s)\n        }\n    }\n    return ret\n}\n\nfunc TestFilter_By_Prefix(t\
    \ *testing.T) {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{}, \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected:\
    \ []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    results\
    \ := []string{}\n    for _, s := range strings {\n        if (s[0:1] == prefix)\
    \ {\n            results = append(results, s)\n        }\n    }\n    return results\n\
    }\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpt3o3n6df_test.go:37: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    if len(strings)\
    \ == 0 {\n        return []string{}\n    }\n    var out []string\n    for _, s\
    \ := range strings {\n        if s[0:1] == prefix {\n            out = append(out,\
    \ s)\n        }\n    }\n    return out\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpcpf5t18l_test.go:40: expected '[xxx xxxAAA xxx]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    result\
    \ := []string{}\n    for _, s := range strings {\n        if s[0:len(prefix)]\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073469
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var result\
    \ []string\n    for _, str := range strings {\n        if len(str) >= len(prefix)\
    \ && str[:len(prefix)] == prefix {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T)\
    \ {\n  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073342
- exit_code: 0
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    // I believe\
    \ it is better to create a new slice than keep overwriting the input slice\n \
    \   // to avoid bugs in functions that call this one.\n    result := make([]string,\
    \ 0)\n    for _, s := range strings {\n        if len(s) >= len(prefix) && s[:len(prefix)]\
    \ == prefix {\n            result = append(result, s)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n  candidate := filter_by_prefix\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter an input list of strings only for ones that start with a given\
    \ prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"\
    abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\n\
    func filter_by_prefix(strings []string, prefix string) []string {\n    var output\
    \ []string\n    for _, value := range strings {\n        if len(value) > 0 &&\
    \ value[0] == prefix[0] {\n            output = append(output, value)\n      \
    \  }\n    }\n    return output\n}\n\nfunc TestFilter_By_Prefix(t *testing.T) {\n\
    \  candidate := filter_by_prefix\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_By_Prefix (0.00s)\n    --- FAIL: TestFilter_By_Prefix/test_num__1\
    \ (0.00s)\n        tmpmzdjsm1v_test.go:37: expected '[xxx xxxAAA xxx]', got '[xxx\
    \ xxy xxxAAA xxx]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073477
