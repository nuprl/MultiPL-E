name: HumanEval_27_flip_case
language: go_test.go
prompt: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\
  // >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString string) string\
  \ {\n"
tests: "func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
  Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
  \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    myBytes := []byte(myString)\n    flippedBytes := make([]byte, len(myBytes))\n\
    \    for i, char := range myBytes {\n        if char > 64 && char < 91 {\n   \
    \         flippedBytes[i] = char + 32\n        } else if char > 96 && char < 123\
    \ {\n            flippedBytes[i] = char - 32\n        } else {\n            flippedBytes[i]\
    \ = char\n        }\n    }\n    return string(flippedBytes)\n}\n", "    var outputString\
    \ []rune\n    for _, r := range myString {\n        if r >= 'a' && r <= 'z' {\n\
    \            outputString = append(outputString, r-'a'+'A')\n        } else if\
    \ r >= 'A' && r <= 'Z' {\n            outputString = append(outputString, r-'A'+'a')\n\
    \        } else {\n            outputString = append(outputString, r)\n      \
    \  }\n    }\n    return string(outputString)\n}\n", "    for i := 0; i < len(myString);\
    \ i++ {\n        // fmt.Println(i, myString[i], string(myString[i]))\n       \
    \ currentChar := myString[i]\n        if currentChar >= 'a' && currentChar <=\
    \ 'z' {\n            myString = myString[:i] + string(currentChar-32) + myString[i+1:]\n\
    \        } else if currentChar >= 'A' && currentChar <= 'Z' {\n            myString\
    \ = myString[:i] + string(currentChar+32) + myString[i+1:]\n        }\n    }\n\
    \    return myString\n}\n", "    // Write your code here\n    var outputString\
    \ string\n    for _, char := range myString {\n        if char >= 'a' && char\
    \ <= 'z' {\n            outputString += string(char + ('A' - 'a'))\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            outputString += string(char\
    \ - ('A' - 'a'))\n        } else {\n            outputString += string(char)\n\
    \        }\n    }\n    return outputString\n}\n", "    bytes := []byte(myString)\n\
    \    for i := 0; i < len(bytes); i++ {\n        if bytes[i] >= 'a' && bytes[i]\
    \ <= 'z' {\n            bytes[i] = bytes[i] - 32\n        } else if bytes[i] >=\
    \ 'A' && bytes[i] <= 'Z' {\n            bytes[i] = bytes[i] + 32\n        }\n\
    \    }\n    return string(bytes)\n}\n", "    my_string_runes := []rune(myString)\n\
    \    for i, char := range my_string_runes {\n        if char >= 'a' && char <=\
    \ 'z' {\n            my_string_runes[i] = char - 32\n        } else if char >=\
    \ 'A' && char <= 'Z' {\n            my_string_runes[i] = char + 32\n        }\n\
    \    }\n    return string(my_string_runes)\n}\n", "    var s string\n    for _,\
    \ c := range myString {\n        if (c >= 65 && c <= 90) {\n            s += string(c\
    \ + 32)\n        } else if (c >= 97 && c <= 122) {\n            s += string(c\
    \ - 32)\n        } else {\n            s += string(c)\n        }\n    }\n    return\
    \ s\n}\n", "    var res string\n    for _, ch := range myString {\n        switch\
    \ ch {\n        case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':\n    \
    \        res += string(ch - 32)\n        case 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z':\n            res += string(ch + 32)\n        default:\n     \
    \       res += string(ch)\n        }\n    }\n    return res\n}\n", "    result\
    \ := \"\"\n    for _, ch := range myString {\n        if (ch >= 'a' && ch <= 'z')\
    \ {\n            result += string(ch - 32)\n        } else if (ch >= 'A' && ch\
    \ <= 'Z') {\n            result += string(ch + 32)\n        } else {\n       \
    \     result += string(ch)\n        }\n    }\n    return result\n}\n", "    var\
    \ s []rune = []rune(myString)\n    fmt.Println(s)\n    fmt.Println(s[0])\n   \
    \ for i := 0; i < len(s); i++ {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n  \
    \          s[i] = s[i] - 32\n        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            s[i] = s[i] + 32\n        }\n    }\n    return string(s)\n}\n", " \
    \   letters := []rune(myString)\n    for i, char := range letters {\n        if\
    \ char == unicode.ToLower(char) {\n            letters[i] = unicode.ToUpper(char)\n\
    \        } else {\n            letters[i] = unicode.ToLower(char)\n        }\n\
    \    }\n    return string(letters)\n}\n", "    var newString string\n    for _,\
    \ char := range myString {\n        if char >= 'a' && char <= 'z' {\n        \
    \    char = char - 32\n        } else if char >= 'A' && char <= 'Z' {\n      \
    \      char = char + 32\n        }\n        newString += string(char)\n    }\n\
    \    return newString\n}\n", "    // Variables to hold the new string, and the\
    \ characters which make it up.\n    var newString string\n    var myChar byte\n\
    \n    // Loop through the string, one character at a time.\n    for i := 0; i\
    \ < len(myString); i++ {\n        // Assign the character to myChar.\n       \
    \ myChar = myString[i]\n\n        // If the character is uppercase, change it\
    \ to lowercase. If lowercase, change to uppercase.\n        if myChar >= 65 &&\
    \ myChar <= 90 {\n            myChar += 32\n        } else if myChar >= 97 &&\
    \ myChar <= 122 {\n            myChar -= 32\n        }\n\n        // Add the character\
    \ to the new string.\n        newString += string(myChar)\n    }\n\n    // Return\
    \ the new string.\n    return newString\n}\n", "    flip := \"\"\n    for _, v\
    \ := range myString {\n        //fmt.Println(v)\n        if (v >= 'A' && v <=\
    \ 'Z') {\n            flip += string(v + 32)\n        } else if (v >= 'a' && v\
    \ <= 'z') {\n            flip += string(v - 32)\n        } else {\n          \
    \  flip += string(v)\n        }\n    }\n    return flip\n}\n", "    var flippedString\
    \ string\n    for _, letter := range myString {\n        if letter >= 'a' && letter\
    \ <= 'z' {\n            flippedString += string(letter + ('A' - 'a'))\n      \
    \  } else if letter >= 'A' && letter <= 'Z' {\n            flippedString += string(letter\
    \ - ('A' - 'a'))\n        } else {\n            flippedString += string(letter)\n\
    \        }\n    }\n    return flippedString\n}\n", "    // We're going to assume\
    \ we have an ASCII string.\n    var flip []byte\n    for _, b := range []byte(myString)\
    \ {\n        if b >= 65 && b <= 90 {\n            flip = append(flip, b + 32)\n\
    \        } else if b >= 97 && b <= 122 {\n            flip = append(flip, b -\
    \ 32)\n        } else {\n            flip = append(flip, b)\n        }\n    }\n\
    \    return string(flip)\n}\n", "\tvar flippedString string\n\tfor i := 0; i <\
    \ len(myString); i++ {\n\t\tif myString[i] >= 65 && myString[i] <= 90 {\n\t\t\t\
    flippedString += string(myString[i] + 32)\n\t\t} else if myString[i] >= 97 &&\
    \ myString[i] <= 122 {\n\t\t\tflippedString += string(myString[i] - 32)\n\t\t\
    } else {\n\t\t\tflippedString += string(myString[i])\n\t\t}\n\t}\n\treturn flippedString\n\
    }\n", "    var myArray []rune = []rune(myString)\n    var result []rune = []rune{}\n\
    \    for _, c := range myArray {\n        if (c > 64 && c < 91) {\n          \
    \  result = append(result, c + 32)\n        } else if (c > 96 && c < 123) {\n\
    \            result = append(result, c - 32)\n        } else {\n            result\
    \ = append(result, c)\n        }\n    }\n    return string(result)\n}\n", "  \
    \  var flipcaseString string\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            flipcaseString += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            flipcaseString +=\
    \ string(char + 32)\n        } else {\n            flipcaseString += string(char)\n\
    \        }\n    }\n    return flipcaseString\n}\n", "    mySlice := []rune(myString)\n\
    \    for i, char := range mySlice {\n        if char >= 'a' && char <= 'z' {\n\
    \            mySlice[i] = char - 32\n        } else if char >= 'A' && char <=\
    \ 'Z' {\n            mySlice[i] = char + 32\n        }\n    }\n    return string(mySlice)\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
