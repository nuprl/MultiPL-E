name: HumanEval_27_flip_case
language: go_test.go
prompt: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\
  // >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString string) string\
  \ {\n"
tests: "func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
  Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
  \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    myBytes := []byte(myString)\n    flippedBytes := make([]byte, len(myBytes))\n\
    \    for i, char := range myBytes {\n        if char > 64 && char < 91 {\n   \
    \         flippedBytes[i] = char + 32\n        } else if char > 96 && char < 123\
    \ {\n            flippedBytes[i] = char - 32\n        } else {\n            flippedBytes[i]\
    \ = char\n        }\n    }\n    return string(flippedBytes)\n}\n", "    var outputString\
    \ []rune\n    for _, r := range myString {\n        if r >= 'a' && r <= 'z' {\n\
    \            outputString = append(outputString, r-'a'+'A')\n        } else if\
    \ r >= 'A' && r <= 'Z' {\n            outputString = append(outputString, r-'A'+'a')\n\
    \        } else {\n            outputString = append(outputString, r)\n      \
    \  }\n    }\n    return string(outputString)\n}\n", "    for i := 0; i < len(myString);\
    \ i++ {\n        // fmt.Println(i, myString[i], string(myString[i]))\n       \
    \ currentChar := myString[i]\n        if currentChar >= 'a' && currentChar <=\
    \ 'z' {\n            myString = myString[:i] + string(currentChar-32) + myString[i+1:]\n\
    \        } else if currentChar >= 'A' && currentChar <= 'Z' {\n            myString\
    \ = myString[:i] + string(currentChar+32) + myString[i+1:]\n        }\n    }\n\
    \    return myString\n}\n", "    // Write your code here\n    var outputString\
    \ string\n    for _, char := range myString {\n        if char >= 'a' && char\
    \ <= 'z' {\n            outputString += string(char + ('A' - 'a'))\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            outputString += string(char\
    \ - ('A' - 'a'))\n        } else {\n            outputString += string(char)\n\
    \        }\n    }\n    return outputString\n}\n", "    bytes := []byte(myString)\n\
    \    for i := 0; i < len(bytes); i++ {\n        if bytes[i] >= 'a' && bytes[i]\
    \ <= 'z' {\n            bytes[i] = bytes[i] - 32\n        } else if bytes[i] >=\
    \ 'A' && bytes[i] <= 'Z' {\n            bytes[i] = bytes[i] + 32\n        }\n\
    \    }\n    return string(bytes)\n}\n", "    my_string_runes := []rune(myString)\n\
    \    for i, char := range my_string_runes {\n        if char >= 'a' && char <=\
    \ 'z' {\n            my_string_runes[i] = char - 32\n        } else if char >=\
    \ 'A' && char <= 'Z' {\n            my_string_runes[i] = char + 32\n        }\n\
    \    }\n    return string(my_string_runes)\n}\n", "    var s string\n    for _,\
    \ c := range myString {\n        if (c >= 65 && c <= 90) {\n            s += string(c\
    \ + 32)\n        } else if (c >= 97 && c <= 122) {\n            s += string(c\
    \ - 32)\n        } else {\n            s += string(c)\n        }\n    }\n    return\
    \ s\n}\n", "    var res string\n    for _, ch := range myString {\n        switch\
    \ ch {\n        case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':\n    \
    \        res += string(ch - 32)\n        case 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z':\n            res += string(ch + 32)\n        default:\n     \
    \       res += string(ch)\n        }\n    }\n    return res\n}\n", "    result\
    \ := \"\"\n    for _, ch := range myString {\n        if (ch >= 'a' && ch <= 'z')\
    \ {\n            result += string(ch - 32)\n        } else if (ch >= 'A' && ch\
    \ <= 'Z') {\n            result += string(ch + 32)\n        } else {\n       \
    \     result += string(ch)\n        }\n    }\n    return result\n}\n", "    var\
    \ s []rune = []rune(myString)\n    fmt.Println(s)\n    fmt.Println(s[0])\n   \
    \ for i := 0; i < len(s); i++ {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n  \
    \          s[i] = s[i] - 32\n        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            s[i] = s[i] + 32\n        }\n    }\n    return string(s)\n}\n", " \
    \   letters := []rune(myString)\n    for i, char := range letters {\n        if\
    \ char == unicode.ToLower(char) {\n            letters[i] = unicode.ToUpper(char)\n\
    \        } else {\n            letters[i] = unicode.ToLower(char)\n        }\n\
    \    }\n    return string(letters)\n}\n", "    var newString string\n    for _,\
    \ char := range myString {\n        if char >= 'a' && char <= 'z' {\n        \
    \    char = char - 32\n        } else if char >= 'A' && char <= 'Z' {\n      \
    \      char = char + 32\n        }\n        newString += string(char)\n    }\n\
    \    return newString\n}\n", "    // Variables to hold the new string, and the\
    \ characters which make it up.\n    var newString string\n    var myChar byte\n\
    \n    // Loop through the string, one character at a time.\n    for i := 0; i\
    \ < len(myString); i++ {\n        // Assign the character to myChar.\n       \
    \ myChar = myString[i]\n\n        // If the character is uppercase, change it\
    \ to lowercase. If lowercase, change to uppercase.\n        if myChar >= 65 &&\
    \ myChar <= 90 {\n            myChar += 32\n        } else if myChar >= 97 &&\
    \ myChar <= 122 {\n            myChar -= 32\n        }\n\n        // Add the character\
    \ to the new string.\n        newString += string(myChar)\n    }\n\n    // Return\
    \ the new string.\n    return newString\n}\n", "    flip := \"\"\n    for _, v\
    \ := range myString {\n        //fmt.Println(v)\n        if (v >= 'A' && v <=\
    \ 'Z') {\n            flip += string(v + 32)\n        } else if (v >= 'a' && v\
    \ <= 'z') {\n            flip += string(v - 32)\n        } else {\n          \
    \  flip += string(v)\n        }\n    }\n    return flip\n}\n", "    var flippedString\
    \ string\n    for _, letter := range myString {\n        if letter >= 'a' && letter\
    \ <= 'z' {\n            flippedString += string(letter + ('A' - 'a'))\n      \
    \  } else if letter >= 'A' && letter <= 'Z' {\n            flippedString += string(letter\
    \ - ('A' - 'a'))\n        } else {\n            flippedString += string(letter)\n\
    \        }\n    }\n    return flippedString\n}\n", "    // We're going to assume\
    \ we have an ASCII string.\n    var flip []byte\n    for _, b := range []byte(myString)\
    \ {\n        if b >= 65 && b <= 90 {\n            flip = append(flip, b + 32)\n\
    \        } else if b >= 97 && b <= 122 {\n            flip = append(flip, b -\
    \ 32)\n        } else {\n            flip = append(flip, b)\n        }\n    }\n\
    \    return string(flip)\n}\n", "\tvar flippedString string\n\tfor i := 0; i <\
    \ len(myString); i++ {\n\t\tif myString[i] >= 65 && myString[i] <= 90 {\n\t\t\t\
    flippedString += string(myString[i] + 32)\n\t\t} else if myString[i] >= 97 &&\
    \ myString[i] <= 122 {\n\t\t\tflippedString += string(myString[i] - 32)\n\t\t\
    } else {\n\t\t\tflippedString += string(myString[i])\n\t\t}\n\t}\n\treturn flippedString\n\
    }\n", "    var myArray []rune = []rune(myString)\n    var result []rune = []rune{}\n\
    \    for _, c := range myArray {\n        if (c > 64 && c < 91) {\n          \
    \  result = append(result, c + 32)\n        } else if (c > 96 && c < 123) {\n\
    \            result = append(result, c - 32)\n        } else {\n            result\
    \ = append(result, c)\n        }\n    }\n    return string(result)\n}\n", "  \
    \  var flipcaseString string\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            flipcaseString += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            flipcaseString +=\
    \ string(char + 32)\n        } else {\n            flipcaseString += string(char)\n\
    \        }\n    }\n    return flipcaseString\n}\n", "    mySlice := []rune(myString)\n\
    \    for i, char := range mySlice {\n        if char >= 'a' && char <= 'z' {\n\
    \            mySlice[i] = char - 32\n        } else if char >= 'A' && char <=\
    \ 'Z' {\n            mySlice[i] = char + 32\n        }\n    }\n    return string(mySlice)\n\
    }\n", "    var charArray []byte\n    for i := 0; i < len(myString); i++ {\n  \
    \      if myString[i] >= 'a' && myString[i] <= 'z' {\n            charArray =\
    \ append(charArray, myString[i] - 32)\n        } else if myString[i] >= 'A' &&\
    \ myString[i] <= 'Z' {\n            charArray = append(charArray, myString[i]\
    \ + 32)\n        } else {\n            charArray = append(charArray, myString[i])\n\
    \        }\n    }\n    return string(charArray)\n}\n", "    var ret string = \"\
    \"\n    for _, l := range myString {\n        if l >= 'a' && l <= 'z' {\n    \
    \        ret += string(l - 32)\n        } else if l >= 'A' && l <= 'Z' {\n   \
    \         ret += string(l + 32)\n        } else {\n            ret += string(l)\n\
    \        }\n    }\n    return ret\n}\n", "    var outputString string\n    for\
    \ _, char := range myString {\n        if string(char) == string(char+32) {\n\
    \            outputString += string(char-32)\n        } else {\n            outputString\
    \ += string(char+32)\n        }\n    }\n    return outputString\n}\n", "    var\
    \ result string\n    for _, v := range myString {\n        if v > 96 {\n     \
    \       result += string(v - 32)\n        } else {\n            result += string(v\
    \ + 32)\n        }\n    }\n    return result\n}\n", "    var retString string\n\
    \    for _, char := range myString {\n        // if lowercase, make uppercase\n\
    \        if char >= 'a' && char <= 'z' {\n            retString += string(char\
    \ - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            retString\
    \ += string(char + 32)\n        } else {\n            retString += string(char)\n\
    \        }\n    }\n    return retString\n}\n", "    chars := []rune(myString)\n\
    \    result := make([]rune, len(chars))\n    for i, char := range chars {\n  \
    \      if 'a' <= char && char <= 'z' {\n            result[i] = char - 32\n  \
    \      } else if 'A' <= char && char <= 'Z' {\n            result[i] = char +\
    \ 32\n        } else {\n            result[i] = char\n        }\n    }\n    return\
    \ string(result)\n}\n", "    var ret string\n    for _, char := range myString\
    \ {\n        // fmt.Println(char)\n        var retChar string\n        if char\
    \ >= 'a' && char <= 'z' {\n            retChar = string(char - 32)\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            retChar = string(char + 32)\n\
    \        } else {\n            retChar = string(char)\n        }\n        ret\
    \ += retChar\n    }\n    return ret\n}\n", "    var result string\n    for _,\
    \ letter := range myString {\n        if letter >= 65 && letter <= 90 {\n    \
    \        result += string(letter + 32)\n        } else if letter >= 97 && letter\
    \ <= 122 {\n            result += string(letter - 32)\n        } else {\n    \
    \        result += string(letter)\n        }\n    }\n    return result\n}\n",
  "    // Your code goes here\n    return myString\n}\n", "    myBytes := []byte(myString)\n\
    \    var newChar byte\n    for i, char := range myBytes {\n        if char >=\
    \ 65 && char <= 90 {\n            newChar = char + 32\n        } else if char\
    \ >= 97 && char <= 122 {\n            newChar = char - 32\n        } else {\n\
    \            newChar = char\n        }\n        myBytes[i] = newChar\n    }\n\
    \    myString = string(myBytes)\n    return myString\n}\n", "    // Your code\
    \ goes here\n    return \"\"\n}\n", "    var result string\n    for _, c := range\
    \ myString {\n        // If character is uppercase, convert to lowercase.\n  \
    \      if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n     \
    \   } else {\n            result += string(c - 32)\n        }\n    }\n    return\
    \ result\n}\n", "    myRunes := []rune(myString)\n    for i, myRune := range myRunes\
    \ {\n        if myRune >= 'a' && myRune <= 'z' {\n            myRunes[i] = myRune\
    \ - 'a' + 'A'\n        } else if myRune >= 'A' && myRune <= 'Z' {\n          \
    \  myRunes[i] = myRune - 'A' + 'a'\n        }\n    }\n    return string(myRunes)\n\
    }\n", "    var newString string\n    for _, c := range myString {\n        if\
    \ c >= 'a' && c <= 'z' {\n            newString += string(c - 32)\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            newString += string(c + 32)\n       \
    \ } else {\n            newString += string(c)\n        }\n    }\n    return newString\n\
    }\n", "\tvar newString string\n\tfor _, char := range myString {\n\t\t// works\
    \ but there is a better way\n\t\t// if char >= 'a' && char <= 'z' {\n\t\t// \t\
    newString += string(char - 32)\n\t\t// } else if char >= 'A' && char <= 'Z' {\n\
    \t\t// \tnewString += string(char + 32)\n\t\t// } else {\n\t\t// \tnewString +=\
    \ string(char)\n\t\t// }\n\t\t// Better way: use unicode for the conditional\n\
    \t\tif unicode.IsUpper(char) {\n\t\t\tnewString += string(unicode.ToLower(char))\n\
    \t\t} else if unicode.IsLower(char) {\n\t\t\tnewString += string(unicode.ToUpper(char))\n\
    \t\t} else {\n\t\t\tnewString += string(char)\n\t\t}\n\t}\n\treturn newString\n\
    }\n", "\t// var result string\n\tresult := \"\"\n\tfor i := 0; i < len(myString);\
    \ i++ {\n\t\tif myString[i] > 64 && myString[i] < 91 {\n\t\t\tresult += string(myString[i]\
    \ + 32)\n\t\t} else if myString[i] > 96 && myString[i] < 123 {\n\t\t\tresult +=\
    \ string(myString[i] - 32)\n\t\t} else {\n\t\t\tresult += string(myString[i])\n\
    \t\t}\n\t}\n\treturn result\n}\n", "    var newString string\n    for _, c :=\
    \ range myString {\n        // fmt.Println(string(c))\n        if c >= 65 && c\
    \ <= 90 {\n            // uppercase\n            newString += string(c + 32)\n\
    \        } else if c >= 97 && c <= 122 {\n            // lowercase\n         \
    \   newString += string(c - 32)\n        } else {\n            newString += string(c)\n\
    \        }\n    }\n    return newString\n}\n", "    var new_string string = \"\
    \"\n    for _, i := range myString {\n        if (i > 64 && i < 91) {\n      \
    \      new_string += string(i + 32)\n        } else if (i > 96 && i < 123) {\n\
    \            new_string += string(i - 32)\n        } else {\n            new_string\
    \ += string(i)\n        }\n    }\n    return new_string\n}\n", "    var newString\
    \ string\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n\
    \            newString += string(c - 32)\n        } else if c >= 'A' && c <= 'Z'\
    \ {\n            newString += string(c + 32)\n        } else {\n            newString\
    \ += string(c)\n        }\n    }\n    return newString\n}\n", "    var result\
    \ string\n    for _, v := range myString {\n        if v > 96 {\n            result\
    \ += string(v - 32)\n        } else {\n            result += string(v + 32)\n\
    \        }\n    }\n    return result\n}\n", "    // convert to byte array\n  \
    \  stringBytes := []byte(myString)\n    // loop through the string and change\
    \ case\n    for i := 0; i < len(stringBytes); i++ {\n        // lowercase\n  \
    \      if stringBytes[i] >= 65 && stringBytes[i] <= 90 {\n            stringBytes[i]\
    \ += 32\n        } else if stringBytes[i] >= 97 && stringBytes[i] <= 122 {\n \
    \           stringBytes[i] -= 32\n        }\n    }\n    // return converted string\n\
    \    return string(stringBytes)\n}\n", "    chars := []rune(myString)\n    for\
    \ index, char := range chars {\n        if char >= 'a' && char <= 'z' {\n    \
    \        chars[index] = char - 32\n        } else if char >= 'A' && char <= 'Z'\
    \ {\n            chars[index] = char + 32\n        }\n    }\n    return string(chars)\n\
    }\n", "    flippedString := \"\"\n    for _, letter := range myString {\n    \
    \    if letter >= 'A' && letter <= 'Z' {\n            flippedString += string(letter\
    \ + 32)\n        } else if letter >= 'a' && letter <= 'z' {\n            flippedString\
    \ += string(letter - 32)\n        } else {\n            flippedString += string(letter)\n\
    \        }\n    }\n    return flippedString\n}\n", "    runeStr := []rune(myString)\n\
    \    for i, char := range runeStr {\n        if char >= 'a' && char <= 'z' {\n\
    \            runeStr[i] = unicode.ToUpper(char)\n        } else if char >= 'A'\
    \ && char <= 'Z' {\n            runeStr[i] = unicode.ToLower(char)\n        }\n\
    \    }\n    return string(runeStr)\n}\n", "    // lowercase characters = 97 to\
    \ 122\n    // uppercase characters = 65 to 90\n    myBytes := []byte(myString)\n\
    \    var flipped []byte\n    for _, letter := range myBytes {\n        if letter\
    \ >= 97 && letter <= 122 {\n            letter = letter - 32\n        } else if\
    \ letter >= 65 && letter <= 90 {\n            letter = letter + 32\n        }\n\
    \        flipped = append(flipped, letter)\n    }\n    return string(flipped)\n\
    }\n", "    var result string\n    for _, c := range myString {\n        if c >=\
    \ 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c\
    \ >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   // Flip Case\n    var strBuilder string\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] >= 65 && myString[i] <= 90 {\n            strBuilder\
    \ += string(myString[i] + 32)\n        } else if myString[i] >= 97 && myString[i]\
    \ <= 122 {\n            strBuilder += string(myString[i] - 32)\n        } else\
    \ {\n            strBuilder += string(myString[i])\n        }\n    }\n    return\
    \ strBuilder\n}\n", "    var result string\n    for _, char := range myString\
    \ {\n        if char >= 'a' && char <= 'z' {\n            result += string(char\
    \ - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result +=\
    \ string(char + 32)\n        } else {\n            result += string(char)\n  \
    \      }\n    }\n    return result\n}\n", "    newString := \"\"\n    for _, c\
    \ := range myString {\n        if c >= 'a' && c <= 'z' {\n            newString\
    \ += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            newString\
    \ += string(c + 32)\n        } else {\n            newString += string(c)\n  \
    \      }\n    }\n    return newString\n}\n", "    flipMe := []rune(myString)\n\
    \    for i,char := range flipMe {\n        if char >= 65 && char <= 90 {\n   \
    \         flipMe[i] = char + 32\n        } else if char >= 97 && char <= 122 {\n\
    \            flipMe[i] = char - 32\n        }\n    }\n    return string(flipMe)\n\
    }\n", "    result := \"\"\n    for _, char := range myString {\n        if char\
    \ > 96 {\n            result += string(char - 32)\n        } else {\n        \
    \    result += string(char + 32)\n        }\n    }\n    return result\n}\n", " \
    \   runes := []rune(myString)\n    for i, c := range runes {\n        if c >=\
    \ 'A' && c <= 'Z' {\n            runes[i] = c + 32\n        } else if c >= 'a'\
    \ && c <= 'z' {\n            runes[i] = c - 32\n        }\n    }\n    return string(runes)\n\
    }\n", "    var outString string\n    outString = \"\"\n    for _, c := range myString\
    \ {\n        if c >= 'a' && c <= 'z' {\n            outString += string(c - 32)\n\
    \        } else if c >= 'A' && c <= 'Z' {\n            outString += string(c +\
    \ 32)\n        } else {\n            outString += string(c)\n        }\n    }\n\
    \    return outString\n}\n", "    var output []byte\n    for _,c := range myString\
    \ {\n        if c >= 'a' && c <= 'z' {\n            output = append(output, byte(c\
    \ - 32))\n        } else if c >= 'A' && c <= 'Z' {\n            output = append(output,\
    \ byte(c + 32))\n        } else {\n            output = append(output, byte(c))\n\
    \        }\n    }\n    return string(output)\n}\n", "    var r []rune\n    for\
    \ _, char := range myString {\n        if 65 <= char && char <= 90 {\n       \
    \     r = append(r, char + 32)\n        } else if 97 <= char && char <= 122 {\n\
    \            r = append(r, char - 32)\n        } else {\n            r = append(r,\
    \ char)\n        }\n    }\n    return string(r)\n}\n", "    var myRuneSlice []rune\n\
    \    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n\
    \            myRuneSlice = append(myRuneSlice, char + 32)\n        } else if char\
    \ >= 97 && char <= 122 {\n            myRuneSlice = append(myRuneSlice, char -\
    \ 32)\n        } else {\n            myRuneSlice = append(myRuneSlice, char)\n\
    \        }\n    }\n    return string(myRuneSlice)\n}\n", "    return \"\"\n}\n",
  "    myRunes := []rune(myString)\n    for i, c := range myRunes {\n        if c\
    \ >= 'a' && c <= 'z' {\n            myRunes[i] = c - 32\n        } else if c >=\
    \ 'A' && c <= 'Z' {\n            myRunes[i] = c + 32\n        }\n    }\n    return\
    \ string(myRunes)\n}\n", "    var result string\n    for _, char := range myString\
    \ {\n        if char >= 'a' && char <= 'z' {\n            result += string(char\
    \ + 'A' - 'a')\n        } else if char >= 'A' && char <= 'Z' {\n            result\
    \ += string(char + 'a' - 'A')\n        } else {\n            result += string(char)\n\
    \        }\n    }\n    return result\n}\n", "    chars := []rune(myString)\n \
    \   for i, c := range chars {\n        if c >= 'a' && c <= 'z' {\n           \
    \ chars[i] = c - 'a' + 'A'\n        } else if c >= 'A' && c <= 'Z' {\n       \
    \     chars[i] = c - 'A' + 'a'\n        }\n    }\n    return string(chars)\n}\n",
  "    var temp string\n    for i:=0; i<len(myString); i++ {\n        if myString[i]\
    \ >= 'a' && myString[i] <= 'z' {\n            temp += string(myString[i] - 32)\n\
    \        } else if myString[i] >= 'A' && myString[i] <= 'Z' {\n            temp\
    \ += string(myString[i] + 32)\n        } else {\n            temp += string(myString[i])\n\
    \        }\n    }\n    return temp\n}\n", "    r := []rune(myString)\n    for\
    \ i, c := range r {\n        if c >= 'A' && c <= 'Z' {\n            r[i] = c +\
    \ 32\n        } else if c >= 'a' && c <= 'z' {\n            r[i] = c - 32\n  \
    \      }\n    }\n    return string(r)\n}\n", "    var result string\n\n    for\
    \ _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n     \
    \       result += string(char - ('a' - 'A'))\n        } else if char >= 'A' &&\
    \ char <= 'Z' {\n            result += string(char + ('a' - 'A'))\n        } else\
    \ {\n            result += string(char)\n        }\n    }\n\n    return result\n\
    }\n", "    // TODO\n    return \"\"\n}\n", "    new_string := \"\"\n    for _,\
    \ char := range myString {\n        if (char >= 'a' && char <= 'z') {\n      \
    \      new_string += string(char - 32)\n        } else if (char >= 'A' && char\
    \ <= 'Z') {\n            new_string += string(char + 32)\n        } else {\n \
    \           new_string += string(char)\n        }\n    }\n    return new_string\n\
    }\n", "    runeArray := []rune(myString)\n    for i, char := range runeArray {\n\
    \        if char >= 'a' && char <= 'z' {\n            runeArray[i] = rune(char\
    \ - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            runeArray[i]\
    \ = rune(char + 32)\n        }\n    }\n    return string(runeArray)\n}\n", " \
    \   var result = \"\"\n    for _, value := range myString {\n        if value\
    \ >= 65 && value <= 90 {\n            result += string(value + 32)\n        }\
    \ else if value >= 97 && value <= 122 {\n            result += string(value -\
    \ 32)\n        } else {\n            result += string(value)\n        }\n    }\n\
    \    return result\n}\n", "    var newString string\n\n    for _, char := range\
    \ myString {\n        if char > 64 && char < 91 {\n            newString += string(char\
    \ + 32)\n        } else if char > 96 && char < 123 {\n            newString +=\
    \ string(char - 32)\n        } else {\n            newString += string(char)\n\
    \        }\n    }\n\n    return newString\n}\n", "    var outputString string\n\
    \n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            outputString += string(char - 32)\n        } else if char >= 'A'\
    \ && char <= 'Z' {\n            outputString += string(char + 32)\n        } else\
    \ {\n            outputString += string(char)\n        }\n    }\n\n    return\
    \ outputString\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    //\
    \ Create a new string to be returned\n    var myNewString string\n\n    // Loop\
    \ through characters in string\n    for i := 0; i < len(myString); i++ {\n   \
    \     if myString[i] >= 65 && myString[i] <= 90 {\n            myNewString +=\
    \ string(myString[i] + 32)\n        } else if myString[i] >= 97 && myString[i]\
    \ <= 122 {\n            myNewString += string(myString[i] - 32)\n        } else\
    \ {\n            myNewString += string(myString[i])\n        }\n    }\n\n    return\
    \ myNewString\n}\n", "    runeArray := []rune(myString)\n    for i, char := range\
    \ runeArray {\n        if char >= 'a' && char <= 'z' {\n            runeArray[i]\
    \ = char - 32\n        } else if char >= 'A' && char <= 'Z' {\n            runeArray[i]\
    \ = char + 32\n        }\n    }\n    return string(runeArray)\n}\n", "    var\
    \ result string\n    for _, runeValue := range myString {\n        if runeValue\
    \ >= 65 && runeValue <= 90 {\n            result += string(runeValue + 32)\n \
    \       } else if runeValue >= 97 && runeValue <= 122 {\n            result +=\
    \ string(runeValue - 32)\n        } else {\n            result += string(runeValue)\n\
    \        }\n    }\n    return result\n}\n", "    var newString string\n    for\
    \ _, value := range myString {\n        if value >= 'A' && value <= 'Z' {\n  \
    \          newString += string(value + ('a' - 'A'))\n        } else if value >=\
    \ 'a' && value <= 'z' {\n            newString += string(value - ('a' - 'A'))\n\
    \        } else {\n            newString += string(value)\n        }\n    }\n\
    \    return newString\n}\n", "    var newString string\n    for _, value := range\
    \ myString {\n        if string(value) == string(value) {\n            newString\
    \ += string(value)\n        } else {\n            newString += string(value)\n\
    \        }\n    }\n    return newString\n}\n", "    runes := []rune(myString)\n\
    \    for i, r := range runes {\n        if r >= 'A' && r <= 'Z' {\n          \
    \  runes[i] = r + ('a' - 'A')\n        } else if r >= 'a' && r <= 'z' {\n    \
    \        runes[i] = r - ('a' - 'A')\n        }\n    }\n    return string(runes)\n\
    }\n", "    if len(myString) == 0 {\n        return \"\"\n    }\n\n    outputString\
    \ := \"\"\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n\
    \            outputString += string(c - 32)\n        } else if c >= 'A' && c <=\
    \ 'Z' {\n            outputString += string(c + 32)\n        } else {\n      \
    \      outputString += string(c)\n        }\n    }\n    return outputString\n\
    }\n", "    var x string\n    for _, c := range myString {\n        if c >= 65\
    \ && c <= 90 {\n            x += string(c + 32)\n        } else if c >= 97 &&\
    \ c <= 122 {\n            x += string(c - 32)\n        } else {\n            x\
    \ += string(c)\n        }\n    }\n    return x\n}\n", "    var flipped string\n\
    \    for _, v := range myString {\n        if v >= 65 && v <= 90 {\n         \
    \   flipped += string(v + 32)\n        } else if v >= 97 && v <= 122 {\n     \
    \       flipped += string(v - 32)\n        } else {\n            flipped += string(v)\n\
    \        }\n    }\n    return flipped\n}\n", "    // make an array of characters.\
    \ If a character is found to be a lower case,\n    // make it uppercase. If a\
    \ character is uppercase, make it lowercase.\n    // TODO: make sure to take into\
    \ account non-alphabetic characters!\n    var newString string\n    for _, ch\
    \ := range myString {\n        if ch >= 'a' && ch <= 'z' {\n            ch = ch\
    \ - 32\n        } else if ch >= 'A' && ch <= 'Z' {\n            ch = ch + 32\n\
    \        }\n        newString += string(ch)\n    }\n    return newString\n}\n",
  "    return \"\"\n}\n", "    result := \"\"\n    for _, myChar := range myString\
    \ {\n        if (myChar >= 65 && myChar <= 90) {\n            result += string(myChar\
    \ + 32)\n        } else if (myChar >= 97 && myChar <= 122) {\n            result\
    \ += string(myChar - 32)\n        } else {\n            result += string(myChar)\n\
    \        }\n    }\n    return result\n}\n", "    // Create a string containing\
    \ only lowercase\n    lowerCaseString := \"abcdefghijklmnopqrstuvwxyz\"\n    //\
    \ Create a string containing only uppercase\n    upperCaseString := \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    // Convert the given string to a slice of runes\n    stringSlice := []rune(myString)\n\
    \    // For each character in the given string\n    for index, character := range\
    \ stringSlice {\n        // Check if it's a lowercase letter\n        if lowerCaseString[character\
    \ - 'a'] == character {\n            // If so, flip to uppercase\n           \
    \ stringSlice[index] = character - 'a' + 'A'\n        } else if upperCaseString[character\
    \ - 'A'] == character {\n            // If it's an uppercase letter, flip to lowercase\n\
    \            stringSlice[index] = character - 'A' + 'a'\n        }\n    }\n  \
    \  // Return the new string\n    return string(stringSlice)\n}\n", "    var result\
    \ string\n    for _, char := range myString {\n        if char >= 65 && char <=\
    \ 90 {\n            result += string(char + 32)\n        } else if char >= 97\
    \ && char <= 122 {\n            result += string(char - 32)\n        } else {\n\
    \            result += string(char)\n        }\n    }\n    return result\n}\n",
  "    ret := []rune(myString)\n    for i, c := range ret {\n        if c >= 65 &&\
    \ c <= 90 {\n            ret[i] = c + 32\n        } else if c >= 97 && c <= 122\
    \ {\n            ret[i] = c - 32\n        }\n    }\n    return string(ret)\n}\n",
  "    var retVal string\n    for _, char := range myString {\n        if char >=\
    \ 65 && char <= 90 {\n            retVal += string(char + 32)\n        } else\
    \ if char >= 97 && char <= 122 {\n            retVal += string(char - 32)\n  \
    \      } else {\n            retVal += string(char)\n        }\n    }\n    return\
    \ retVal\n}\n", "    var newString string\n    newString = \"\"\n    for _, value\
    \ := range myString {\n        if value > 96 && value < 123 {\n            newString\
    \ += string(value - 32)\n        } else if value > 64 && value < 91 {\n      \
    \      newString += string(value + 32)\n        } else {\n            newString\
    \ += string(value)\n        }\n    }\n    return newString\n}\n", "    var newString\
    \ []byte\n    newString = make([]byte, len(myString))\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] >= 97 && myString[i] <= 122 {\n            newString[i]\
    \ = myString[i] - 32\n        } else if myString[i] >= 65 && myString[i] <= 90\
    \ {\n            newString[i] = myString[i] + 32\n        } else {\n         \
    \   newString[i] = myString[i]\n        }\n    }\n    return string(newString)\n\
    }\n", "    rune_array := []rune(myString)\n    for key, value := range rune_array\
    \ {\n        if value >= 'a' && value <= 'z' {\n            rune_array[key] =\
    \ value - 32\n        } else if value >= 'A' && value <= 'Z' {\n            rune_array[key]\
    \ = value + 32\n        }\n    }\n    return string(rune_array)\n}\n", "\tvar\
    \ s string\n\ts = \"\"\n\tfor _, value := range myString {\n\t\tfmt.Println(value)\n\
    \t\tif value >= 'a' && value <= 'z' {\n\t\t\tvalue = value - 'a' + 'A'\n\t\t}\
    \ else if value >= 'A' && value <= 'Z' {\n\t\t\tvalue = value - 'A' + 'a'\n\t\t\
    }\n\t\ts = s + string(value)\n\t}\n\treturn s\n}\n", "    // see https://en.wikipedia.org/wiki/ASCII#Printable_characters\n\
    \    // ASCII A = 65, Z = 90, a = 97, z = 122\n    outString := []rune(myString)\n\
    \    for i, r := range outString {\n        if r >= 65 && r <= 90 {\n        \
    \    outString[i] = r + 32\n        } else if r >= 97 && r <= 122 {\n        \
    \    outString[i] = r - 32\n        }\n    }\n    return string(outString)\n}\n",
  "    var flipped []byte\n    for _, char := range myString {\n        if char >=\
    \ 'a' && char <= 'z' {\n            flipped = append(flipped, byte(char - 32))\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            flipped = append(flipped,\
    \ byte(char + 32))\n        } else {\n            flipped = append(flipped, byte(char))\n\
    \        }\n    }\n    return string(flipped)\n}\n", "    // split the string\
    \ into a slice of runes\n    myRunes := []rune(myString)\n    // loop through\
    \ each rune\n    for i, r := range myRunes {\n        // determine if the rune\
    \ is a letter\n        if r >= 65 && r <= 90 {\n            // if so, increment\
    \ it by 32, which will make it a lowercase letter\n            myRunes[i] = r\
    \ + 32\n        } else if r >= 97 && r <= 122 {\n            // if not, decrement\
    \ it by 32, which will make it an uppercase letter\n            myRunes[i] = r\
    \ - 32\n        }\n    }\n    // turn the rune slice back into a string and return\
    \ it\n    return string(myRunes)\n}\n", "    mySlice := []rune(myString)\n   \
    \ for i, char := range mySlice {\n        if unicode.IsLower(char) {\n       \
    \     mySlice[i] = unicode.ToUpper(char)\n        } else if unicode.IsUpper(char)\
    \ {\n            mySlice[i] = unicode.ToLower(char)\n        }\n    }\n    return\
    \ string(mySlice)\n}\n", "    myBytes := []byte(myString)\n    for i, b := range\
    \ myBytes {\n        if b >= 'a' && b <= 'z' {\n            myBytes[i] = b - 32\n\
    \        } else if b >= 'A' && b <= 'Z' {\n            myBytes[i] = b + 32\n \
    \       }\n    }\n    return string(myBytes)\n}\n", "    str := \"\"\n    for\
    \ _, c := range myString {\n        var n byte\n        if 'a' <= c && c <= 'z'\
    \ {\n            n = byte(c) - 32\n        } else if 'A' <= c && c <= 'Z' {\n\
    \            n = byte(c) + 32\n        } else {\n            n = byte(c)\n   \
    \     }\n        str += string(n)\n    }\n    return str\n}\n", "    var myBytes\
    \ []byte\n    for _, v := range myString {\n        if v >= 'a' && v <= 'z' {\n\
    \            myBytes = append(myBytes, byte(v)-32)\n        } else if v >= 'A'\
    \ && v <= 'Z' {\n            myBytes = append(myBytes, byte(v)+32)\n        }\
    \ else {\n            myBytes = append(myBytes, byte(v))\n        }\n    }\n \
    \   return string(myBytes)\n}\n", "    // fill the solution here\n    return \"\
    \"\n}\n", "    // You code goes here\n    fmt.Println(\"String to be flipped -\
    \ \", myString)\n    fmt.Println(\"Length of String to be flipped - \", len(myString))\n\
    \    myNewString := \"\"\n    for i:=0; i<len(myString); i++ {\n        if (int(myString[i])\
    \ > 64 && int(myString[i]) < 91) {\n            myNewString += string(int(myString[i])\
    \ + 32)\n        } else if (int(myString[i]) > 96 && int(myString[i]) < 123) {\n\
    \            myNewString += string(int(myString[i]) - 32)\n        } else {\n\
    \            myNewString += string(myString[i])\n        }\n    }\n    return\
    \ myNewString\n}\n", "    var n bytes.Buffer\n    for _, char := range myString\
    \ {\n        if unicode.IsLower(char) {\n            n.WriteString(strings.ToUpper(string(char)))\n\
    \        } else {\n            n.WriteString(strings.ToLower(string(char)))\n\
    \        }\n    }\n    return n.String()\n}\n", "    var mySlice []rune\n    mySlice\
    \ = []rune(myString)\n    for i, r := range mySlice {\n        if r >= 'a' &&\
    \ r <= 'z' {\n            mySlice[i] = unicode.ToUpper(r)\n        } else if r\
    \ >= 'A' && r <= 'Z' {\n            mySlice[i] = unicode.ToLower(r)\n        }\n\
    \    }\n    return string(mySlice)\n}\n", "    //return strings.ToUpper(myString)\n\
    \    runeArray := []rune(myString)\n    for i, c := range runeArray {\n      \
    \  if c >= 'a' && c <= 'z' {\n            runeArray[i] = c - 32\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            runeArray[i] = c + 32\n        }\n  \
    \  }\n    return string(runeArray)\n}\n", "    var newString []byte\n    for i\
    \ := 0; i < len(myString); i++ {\n        if myString[i] >= 'a' && myString[i]\
    \ <= 'z' {\n            newString = append(newString, myString[i] - 32)\n    \
    \    } else if myString[i] >= 'A' && myString[i] <= 'Z' {\n            newString\
    \ = append(newString, myString[i] + 32)\n        } else {\n            newString\
    \ = append(newString, myString[i])\n        }\n    }\n    return string(newString)\n\
    }\n", "    // Initialize a string with the same length\n    s := make([]rune,\
    \ len(myString))\n    for i, c := range myString {\n        if 'a' <= c && c <=\
    \ 'z' {\n            s[i] = c - 32\n        } else if 'A' <= c && c <= 'Z' {\n\
    \            s[i] = c + 32\n        } else {\n            s[i] = c\n        }\n\
    \    }\n    return string(s)\n}\n", "    var result string\n\n    for _, char\
    \ := range myString {\n        if char >= 'a' && char <= 'z' {\n            result\
    \ += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n     \
    \       result += string(char + 32)\n        } else {\n            result += string(char)\n\
    \        }\n    }\n\n    return result\n}\n", "    var result string\n    for\
    \ _,r := range myString {\n        if r >= 'a' && r <= 'z' {\n            result\
    \ += string(r - 'a' + 'A')\n        } else if r >= 'A' && r <= 'Z' {\n       \
    \     result += string(r - 'A' + 'a')\n        } else {\n            result +=\
    \ string(r)\n        }\n    }\n    return result\n}\n", "    // create a string\
    \ to hold the flipped string\n    result := \"\"\n    // iterate over the string\n\
    \    for i := 0; i < len(myString); i++ {\n        c := myString[i]\n        //\
    \ if character is lowercase, flip to uppercase and vice versa\n        if c >=\
    \ 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c\
    \ >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n\
    \            result += string(c)\n        }\n    }\n    return result\n}\n", " \
    \   var newString []byte\n    for _, char := range []byte(myString) {\n      \
    \  if char >= 65 && char <= 90 {\n            newString = append(newString, char\
    \ + 32)\n        } else if char >= 97 && char <= 122 {\n            newString\
    \ = append(newString, char - 32)\n        } else {\n            newString = append(newString,\
    \ char)\n        }\n    }\n    return string(newString)\n}\n", "    var myBytes\
    \ []byte\n    for i := 0; i < len(myString); i++ {\n        if myString[i] >=\
    \ 'a' && myString[i] <= 'z' {\n            myBytes = append(myBytes, myString[i]\
    \ - 32)\n        } else if myString[i] >= 'A' && myString[i] <= 'Z' {\n      \
    \      myBytes = append(myBytes, myString[i] + 32)\n        } else {\n       \
    \     myBytes = append(myBytes, myString[i])\n        }\n    }\n    return string(myBytes)\n\
    }\n", "    return \"\"\n}\n", "    var flippedString string\n    for _, char :=\
    \ range myString {\n        if char >= 'a' && char <= 'z' {\n            flippedString\
    \ += string(unicode.ToUpper(char))\n        } else if char >= 'A' && char <= 'Z'\
    \ {\n            flippedString += string(unicode.ToLower(char))\n        } else\
    \ {\n            flippedString += string(char)\n        }\n    }\n    return flippedString\n\
    }\n", "    var newString string\n    for _, c := range myString {\n        if\
    \ c >= 65 && c <= 90 {\n            newString += string(c + 32)\n        } else\
    \ if c >= 97 && c <= 122 {\n            newString += string(c - 32)\n        }\
    \ else {\n            newString += string(c)\n        }\n    }\n    return newString\n\
    }\n", "    var myStringLength int = len(myString)\n    var myStringRunes []rune\
    \ = []rune(myString)\n    var myReturnString string\n    for i := 0; i < myStringLength;\
    \ i++ {\n        if myStringRunes[i] >= 'a' && myStringRunes[i] <= 'z' {\n   \
    \         myStringRunes[i] = myStringRunes[i] - 32\n        } else if myStringRunes[i]\
    \ >= 'A' && myStringRunes[i] <= 'Z' {\n            myStringRunes[i] = myStringRunes[i]\
    \ + 32\n        }\n        myReturnString = myReturnString + string(myStringRunes[i])\n\
    \    }\n    return myReturnString\n}\n", "    var result []rune\n\n    for _,\
    \ char := range myString {\n        if char >= 'a' && char <= 'z' {\n        \
    \    result = append(result, char - 32)\n        } else if char >= 'A' && char\
    \ <= 'Z' {\n            result = append(result, char + 32)\n        } else {\n\
    \            result = append(result, char)\n        }\n    }\n\n    return string(result)\n\
    }\n", "    // put your code here\n    return \"\"\n}\n", "    r := []rune(myString)\n\
    \    for i, c := range r {\n        if c >= 65 && c <= 90 {\n            r[i]\
    \ = c + 32\n        } else if c >= 97 && c <= 122 {\n            r[i] = c - 32\n\
    \        }\n    }\n    return string(r)\n}\n", "    var newString []rune\n   \
    \ for _, v := range myString {\n        if v >= 'a' && v <= 'z' {\n          \
    \  newString = append(newString, v - 32)\n        } else if v >= 'A' && v <= 'Z'\
    \ {\n            newString = append(newString, v + 32)\n        } else {\n   \
    \         newString = append(newString, v)\n        }\n    }\n    return string(newString)\n\
    }\n", "    var result []byte\n\n    for _, char := range myString {\n        if\
    \ char >= 'a' && char <= 'z' {\n            result = append(result, byte(char)-32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            result = append(result,\
    \ byte(char)+32)\n        } else {\n            result = append(result, byte(char))\n\
    \        }\n    }\n\n    return string(result)\n}\n", "    output := \"\"\n  \
    \  for _, letter := range myString {\n        if letter >= 'a' && letter <= 'z'\
    \ {\n            output += string(letter - 32)\n        } else if letter >= 'A'\
    \ && letter <= 'Z' {\n            output += string(letter + 32)\n        } else\
    \ {\n            output += string(letter)\n        }\n    }\n    return output\n\
    }\n", "    // CODE HERE\n    return \"\"\n}\n", "    var myStringBytes = []byte(myString)\n\
    \    for idx, char := range myStringBytes {\n        if char >= 65 && char <=\
    \ 90 {\n            myStringBytes[idx] = char + 32\n        } else if char >=\
    \ 97 && char <= 122 {\n            myStringBytes[idx] = char - 32\n        }\n\
    \    }\n    return string(myStringBytes)\n}\n", "    return myString\n}\n", " \
    \   runes := []rune(myString)\n    for i, r := range runes {\n        if r >=\
    \ 'A' && r <= 'Z' {\n            runes[i] = r + 32\n        } else if r >= 'a'\
    \ && r <= 'z' {\n            runes[i] = r - 32\n        }\n    }\n    return string(runes)\n\
    }\n", "    var result string\n\n    for _, c := range myString {\n        if c\
    \ >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if\
    \ c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else\
    \ {\n            result += string(c)\n        }\n    }\n\n    return result\n\
    }\n", "\tflipped := \"\"\n\tfor _, letter := range myString {\n\t\tif letter >\
    \ 64 && letter < 91 {\n\t\t\tflipped += string(letter + 32)\n\t\t} else if letter\
    \ > 96 && letter < 123 {\n\t\t\tflipped += string(letter - 32)\n\t\t} else {\n\
    \t\t\tflipped += string(letter)\n\t\t}\n\t}\n\treturn flipped\n}\n", "    return\
    \ myString\n}\n", "    // Convert string to []rune\n    stringAsRune := []rune(myString)\n\
    \    for index, rune := range stringAsRune {\n        // Flip cases\n        if\
    \ rune >= 'A' && rune <= 'Z' {\n            stringAsRune[index] = rune + ('a'\
    \ - 'A')\n        } else if rune >= 'a' && rune <= 'z' {\n            stringAsRune[index]\
    \ = rune - ('a' - 'A')\n        }\n    }\n    // Convert back to string\n    return\
    \ string(stringAsRune)\n}\n", "    s := []rune(myString)\n\n    for i, _ := range\
    \ s {\n        if 'a' <= s[i] && s[i] <= 'z' {\n            s[i] = s[i] - 32\n\
    \        } else if 'A' <= s[i] && s[i] <= 'Z' {\n            s[i] = s[i] + 32\n\
    \        }\n    }\n\n    return string(s)\n}\n", "    var result string\n    for\
    \ _, char := range myString {\n        var x int32\n        if char >= 'a' &&\
    \ char <= 'z' {\n            x = char - 32\n        } else if char >= 'A' && char\
    \ <= 'Z' {\n            x = char + 32\n        } else {\n            x = char\n\
    \        }\n        result += string(x)\n    }\n    return result\n}\n", "   \
    \ // Your code goes here\n    return myString\n}\n", "    myRunes := []rune(myString)\n\
    \    for i, v := range myRunes {\n        if v >= 'a' && v <= 'z' {\n        \
    \    myRunes[i] = v - 32\n        } else if v >= 'A' && v <= 'Z' {\n         \
    \   myRunes[i] = v + 32\n        }\n    }\n    return string(myRunes)\n}\n", " \
    \   var mySlice = []rune(myString)\n    for i, char := range mySlice {\n     \
    \   if char >= 'a' && char <= 'z' {\n            mySlice[i] = char - ('a' - 'A')\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            mySlice[i] = char\
    \ + ('a' - 'A')\n        }\n    }\n    return string(mySlice)\n}\n", "    myFlippedString\
    \ := \"\"\n    for _, character := range myString {\n        if character > 64\
    \ && character < 91 {\n            myFlippedString += string(character + 32)\n\
    \        } else if character > 96 && character < 123 {\n            myFlippedString\
    \ += string(character - 32)\n        } else {\n            myFlippedString +=\
    \ string(character)\n        }\n    }\n    return myFlippedString\n}\n", "   \
    \ length := len(myString)\n    newString := \"\"\n    for i := 0; i < length;\
    \ i++ {\n        char := myString[i]\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 32)\n        } else if char >= 'A' &&\
    \ char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n\
    \            newString += string(char)\n        }\n    }\n    return newString\n\
    }\n", "    var newString string\n    for _, char := range myString {\n       \
    \ if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n\
    \        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char\
    \ + 32)\n        } else {\n            newString += string(char)\n        }\n\
    \    }\n    return newString\n}\n", "\tresult := \"\"\n\tfor _, char := range\
    \ myString {\n\t\tif char >= 65 && char <= 90 {\n\t\t\tresult += string(char +\
    \ 32)\n\t\t} else if char >= 97 && char <= 122 {\n\t\t\tresult += string(char\
    \ - 32)\n\t\t} else {\n\t\t\tresult += string(char)\n\t\t}\n\t}\n\treturn result\n\
    }\n", "\tvar runeString []rune = []rune(myString)\n\t\n\tfor index, runeCharacter\
    \ := range runeString {\n\t\tif runeCharacter < 'a' {\n\t\t\truneString[index]\
    \ = runeCharacter + ('a' - 'A')\n\t\t} else {\n\t\t\truneString[index] = runeCharacter\
    \ - ('a' - 'A')\n\t\t}\n\t}\n\t\n\treturn string(runeString)\n}\n", "    // make\
    \ an array of runes (equivalent to a map of single character strings)\n    //\
    \ because we can't directly change the value of a single character\n    // in\
    \ a string\n    myRunes := []rune(myString)\n    // iterate over each rune in\
    \ the array\n    for i, char := range myRunes {\n        // if a character is\
    \ uppercase, make it lowercase, and vice versa\n        // if you're interested\
    \ in how this works, check out the docs for unicode\n        // at: https://golang.org/pkg/unicode/\n\
    \        if char > 96 {\n            myRunes[i] = char - 32\n        } else {\n\
    \            myRunes[i] = char + 32\n        }\n    }\n    // reassemble the array\
    \ of runes into a string\n    return string(myRunes)\n}\n", "    r := []rune(myString)\n\
    \    for i, c := range r {\n        if c >= 'A' && c <= 'Z' {\n            r[i]\
    \ = c + 32\n        } else if c >= 'a' && c <= 'z' {\n            r[i] = c - 32\n\
    \        }\n    }\n    return string(r)\n}\n", "\trunes := []rune(myString)\n\t\
    for i,r := range runes {\n\t\tif r >= 'A' && r <= 'Z' {\n\t\t\trunes[i] = r +\
    \ 32\n\t\t} else if r >= 'a' && r <= 'z' {\n\t\t\trunes[i] = r - 32\n\t\t}\n\t\
    }\n\treturn string(runes)\n}\n", "    var letters string\n    for _, i := range\
    \ myString {\n        if i >= 'A' && i <= 'Z' {\n            i += 32\n       \
    \ } else if i >= 'a' && i <= 'z' {\n            i -= 32\n        }\n        letters\
    \ += string(i)\n    }\n    return letters\n}\n", "    runeSlice := []rune(myString)\n\
    \    for _, r := range runeSlice {\n        if r >= 65 && r <= 90 {\n        \
    \    r += 32\n        } else if r >= 97 && r <= 122 {\n            r -= 32\n \
    \       }\n    }\n    return string(runeSlice)\n}\n", "    newString := \"\"\n\
    \    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n\
    \            newString += string(char + 32)\n        } else if char >= 97 && char\
    \ <= 122 {\n            newString += string(char - 32)\n        } else {\n   \
    \         newString += string(char)\n        }\n    }\n    return newString\n\
    }\n", "    myBytes := []byte(myString)\n    for i, b := range myBytes {\n    \
    \    if 65 <= b && b <= 90 {\n            myBytes[i] = myBytes[i] + 32\n     \
    \   } else if 97 <= b && b <= 122 {\n            myBytes[i] = myBytes[i] - 32\n\
    \        }\n    }\n    return string(myBytes)\n}\n", "    runes := []rune(myString)\n\
    \    for i, c := range runes {\n        if c >= 'A' && c <= 'Z' {\n          \
    \  runes[i] = c + 32\n        } else if c >= 'a' && c <= 'z' {\n            runes[i]\
    \ = c - 32\n        }\n    }\n    return string(runes)\n}\n", "    runes := []rune(myString)\n\
    \    for i, c := range runes {\n        if c >= 'A' && c <= 'Z' {\n          \
    \  runes[i] = c + 32\n        } else if c >= 'a' && c <= 'z' {\n            runes[i]\
    \ = c - 32\n        }\n    }\n    return string(runes)\n}\n", "    myRunes :=\
    \ []rune(myString)\n    result := \"\"\n    for _, myRune := range myRunes {\n\
    \        if myRune >= 'a' && myRune <= 'z' {\n            result += string(myRune\
    \ - 32)\n        } else if myRune >= 'A' && myRune <= 'Z' {\n            result\
    \ += string(myRune + 32)\n        } else {\n            result += string(myRune)\n\
    \        }\n    }\n    return result\n}\n", "    flip := \"\"\n    for _, c :=\
    \ range myString {\n        if c >= 'a' && c <= 'z' {\n            flip += string(c\
    \ - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            flip += string(c\
    \ + 32)\n        } else {\n            flip += string(c)\n        }\n    }\n \
    \   return flip\n}\n", "    if len(myString) < 1 {\n        return \"\"\n    }\n\
    \    // How to tell if a rune is a lowercase letter?\n    if myString[0] >= 'a'\
    \ && myString[0] <= 'z' {\n        return string(myString[0] - 32) + flip_case(myString[1:])\n\
    \    } else if myString[0] >= 'A' && myString[0] <= 'Z' {\n        return string(myString[0]\
    \ + 32) + flip_case(myString[1:])\n    } else {\n        return string(myString[0])\
    \ + flip_case(myString[1:])\n    }\n}\n", "    var flippedString string\n\n  \
    \  for _,value := range myString {\n        if value >= 'A' && value <= 'Z' {\n\
    \            flippedString += string(value + 32)\n        } else if value >= 'a'\
    \ && value <= 'z' {\n            flippedString += string(value - 32)\n       \
    \ } else {\n            flippedString += string(value)\n        }\n    }\n\n \
    \   return flippedString\n}\n", "    var myRuneArray []rune = []rune(myString)\n\
    \    for index, item := range myRuneArray {\n        if item >= 65 && item <=\
    \ 90 {\n            myRuneArray[index] = item + 32\n        } else if item >=\
    \ 97 && item <= 122 {\n            myRuneArray[index] = item - 32\n        }\n\
    \    }\n    return string(myRuneArray)\n}\n", "    //what is the length of the\
    \ string\n    //loop over the string and flip the case\n    //return the new string\n\
    \    myStringLength := len(myString)\n    myNewString := \"\"\n    for i := 0;\
    \ i < myStringLength; i++ {\n        if myString[i] >= 'a' && myString[i] <= 'z'\
    \ {\n            myNewString += string(myString[i] - 32)\n        } else if myString[i]\
    \ >= 'A' && myString[i] <= 'Z' {\n            myNewString += string(myString[i]\
    \ + 32)\n        } else {\n            myNewString += string(myString[i])\n  \
    \      }\n    }\n    return myNewString\n}\n", "    newString := []rune(myString)\n\
    \    for i,r := range newString {\n        if unicode.IsLower(r) {\n         \
    \   newString[i] = unicode.ToUpper(r)\n        } else {\n            newString[i]\
    \ = unicode.ToLower(r)\n        }\n    }\n    return string(newString)\n}\n",
  "    myStringSlice := []rune(myString)\n    for i,char := range myStringSlice {\n\
    \        if char >= 'a' && char <= 'z' {\n            myStringSlice[i] = char\
    \ - 32\n        } else if char >= 'A' && char <= 'Z' {\n            myStringSlice[i]\
    \ = char + 32\n        }\n    }\n    return string(myStringSlice)\n}\n", "   \
    \ newString := \"\"\n    for _, char := range myString {\n        if char >= 65\
    \ && char <= 90 {\n            newString += string(char + 32)\n        } else\
    \ if char >= 97 && char <= 122 {\n            newString += string(char - 32)\n\
    \        } else {\n            newString += string(char)\n        }\n    }\n \
    \   return newString\n}\n", "    var result string\n    for _, c := range myString\
    \ {\n        if c > 64 && c < 91 {\n            result += string(c + 32)\n   \
    \     } else if c > 96 && c < 123 {\n            result += string(c - 32)\n  \
    \      } else {\n            result += string(c)\n        }\n    }\n    return\
    \ result\n}\n", "    var myBytes []byte = []byte(myString)\n    for i, myByte\
    \ := range myBytes {\n        if myByte >= 'a' && myByte <= 'z' {\n          \
    \  myBytes[i] = myByte - 32\n        } else if myByte >= 'A' && myByte <= 'Z'\
    \ {\n            myBytes[i] = myByte + 32\n        }\n    }\n    return string(myBytes)\n\
    }\n", "    // TODO: implement me!\n    return \"\"\n}\n", "    newString := \"\
    \"\n    for _, letter := range myString {\n        if letter >= 65 && letter <=\
    \ 90 {\n            newString += string(letter + 32)\n        } else if letter\
    \ >= 97 && letter <= 122 {\n            newString += string(letter - 32)\n   \
    \     } else {\n            newString += string(letter)\n        }\n    }\n  \
    \  return newString\n}\n", "    var newString string\n    for _, char := range\
    \ myString {\n        if char >= 'a' && char <= 'z' {\n            char = char\
    \ - 'a' + 'A'\n        } else if char >= 'A' && char <= 'Z' {\n            char\
    \ = char - 'A' + 'a'\n        }\n        newString += string(char)\n    }\n  \
    \  return newString\n}\n", "    myBytes := []byte(myString)\n    for index, eachByte\
    \ := range myBytes {\n        if eachByte >= 65 && eachByte <= 90 {\n        \
    \    myBytes[index] = eachByte + 32\n        } else if eachByte >= 97 && eachByte\
    \ <= 122 {\n            myBytes[index] = eachByte - 32\n        }\n    }\n   \
    \ return string(myBytes)\n}\n", "    // your code here\n    var flippedString\
    \ string\n    for _, v := range myString {\n        if v == unicode.ToLower(v)\
    \ {\n            flippedString += string(unicode.ToUpper(v))\n        } else {\n\
    \            flippedString += string(unicode.ToLower(v))\n        }\n    }\n \
    \   return flippedString\n}\n", "    fmt.Println(\"myString %v\", myString)\n\
    \    s := \"\"\n    for _,c := range myString {\n        if (c >= 65 && c <= 90)\
    \ {\n            s += string(c + 32)\n        } else if (c >= 97 && c <= 122)\
    \ {\n            s += string(c - 32)\n        } else {\n            s += string(c)\n\
    \        }\n    }\n    return s\n}\n", "    flip_case := \"\"\n    for _, r :=\
    \ range myString {\n        if r >= 'A' && r <= 'Z' {\n            flip_case +=\
    \ string(r + 32)\n        } else if r >= 'a' && r <= 'z' {\n            flip_case\
    \ += string(r - 32)\n        } else {\n            flip_case += string(r)\n  \
    \      }\n    }\n    return flip_case\n}\n", "    // Convert string to a rune\
    \ array\n    runes := []rune(myString)\n    // Loop through the array of runes\n\
    \    for i, v := range runes {\n        // Check if rune is uppercase\n      \
    \  if v >= 'A' && v <= 'Z' {\n            // If so, convert it to lowercase\n\
    \            runes[i] = v + 32\n        } else if v >= 'a' && v <= 'z' {\n   \
    \         // If not, and it's lowercase, convert it to uppercase\n           \
    \ runes[i] = v - 32\n        }\n    }\n    // Convert runes array back to string\
    \ and return\n    return string(runes)\n}\n", "    runes := []rune(myString)\n\
    \    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i],\
    \ runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n", "    //\
    \ Create an empty string to be returned.\n    newString := \"\"\n    // Loop through\
    \ each character in the string.\n    for _, char := range myString {\n       \
    \ // Check if the character is uppercase.\n        if char >= 'A' && char <= 'Z'\
    \ {\n            // Append the lowercase equivalent to the string.\n         \
    \   newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z'\
    \ {\n            // Append the uppercase equivalent to the string.\n         \
    \   newString += string(char - 32)\n        } else {\n            // Append the\
    \ character as is.\n            newString += string(char)\n        }\n    }\n\
    \    // Return the new string.\n    return newString\n}\n", "    res := \"\"\n\
    \    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n\
    \            res += string(char + 32)\n        } else if char >= 97 && char <=\
    \ 122 {\n            res += string(char - 32)\n        } else {\n            res\
    \ += string(char)\n        }\n    }\n    return res\n}\n", "    var newString\
    \ string\n    for _, myChar := range myString {\n        if myChar >= 'a' && myChar\
    \ <= 'z' {\n            newString += string(myChar - 32)\n        } else if myChar\
    \ >= 'A' && myChar <= 'Z' {\n            newString += string(myChar + 32)\n  \
    \      } else {\n            newString += string(myChar)\n        }\n    }\n \
    \   return newString\n}\n", "    // initialize a new string\n    var flippedString\
    \ string\n\n    // for each character in the string, convert it to a rune\n  \
    \  for _, letter := range myString {\n        // if the rune is in the lowercase\
    \ set...\n        if letter >= 'a' && letter <= 'z' {\n            // ...then\
    \ convert to uppercase\n            flippedString += string(letter - ('a' - 'A'))\n\
    \        } else if letter >= 'A' && letter <= 'Z' {\n            // ...otherwise,\
    \ convert to lowercase\n            flippedString += string(letter + ('a' - 'A'))\n\
    \        } else {\n            // ...if the rune is not in the alphabet, then\
    \ don't change it\n            flippedString += string(letter)\n        }\n  \
    \  }\n\n    return flippedString\n}\n", "    var flipString string\n    for i\
    \ := 0; i < len(myString); i++ {\n        char := myString[i]\n        if (char\
    \ >= 'a' && char <= 'z') {\n            flipString += string(char - 32)\n    \
    \    } else if (char >= 'A' && char <= 'Z') {\n            flipString += string(char\
    \ + 32)\n        } else {\n            flipString += string(char)\n        }\n\
    \    }\n    return flipString\n}\n", "    var newString string\n    for _, letter\
    \ := range myString {\n        if letter >= 'a' && letter <= 'z' {\n         \
    \   newString += string(letter - 32)\n        } else if letter >= 'A' && letter\
    \ <= 'Z' {\n            newString += string(letter + 32)\n        } else {\n \
    \           newString += string(letter)\n        }\n    }\n    return newString\n\
    }\n", "    // Problem: The given string is immutable, I want to be able to flip\
    \ case.\n\n    // Solution:\n    // 1. convert myString to a slice of runes\n\
    \    // 2. Create an empty slice of runes to store the converted string\n    //\
    \ 3. Iterate through each rune in the myString slice\n    // 4. Check the unicode\
    \ value of each rune to see if it is uppercase or lowercase\n    // 5. If uppercase,\
    \ convert to lowercase using unicode.ToLower()\n    // 6. If lowercase, convert\
    \ to uppercase using unicode.ToUpper()\n    // 7. Append converted rune to the\
    \ newSlice\n    // 8. Convert newSlice to a string using the string() function\
    \ and return it\n\n    // Converting a string to a slice of runes\n    // http://stackoverflow.com/questions/29630808/why-does-len-output-different-numbers-when-using-strings-and-runes\n\
    \    myStringRunes := []rune(myString)\n\n    newStringRunes := []rune{}\n\n \
    \   for _, r := range myStringRunes {\n        if r >= 'A' && r <= 'Z' {\n   \
    \         r = unicode.ToLower(r)\n        } else if r >= 'a' && r <= 'z' {\n \
    \           r = unicode.ToUpper(r)\n        }\n        newStringRunes = append(newStringRunes,\
    \ r)\n    }\n\n    return string(newStringRunes)\n}\n", "    var newString []byte\n\
    \    for _, i := range myString {\n        if (i >= 'a' && i <= 'z') {\n     \
    \       i = i - 32\n        } else if (i >= 'A' && i <= 'Z') {\n            i\
    \ = i + 32\n        }\n        newString = append(newString, byte(i))\n    }\n\
    \    return string(newString)\n}\n", "    myBytes := []byte(myString)\n    for\
    \ i, letter := range myBytes {\n        if letter > 64 && letter < 91 {\n    \
    \        myBytes[i] = letter + 32\n        } else if letter > 96 && letter < 123\
    \ {\n            myBytes[i] = letter - 32\n        }\n    }\n    return string(myBytes)\n\
    }\n", "    var mySlice []byte\n    for _, char := range myString {\n        if\
    \ char >= 65 && char <= 90 {\n            mySlice = append(mySlice, byte(char\
    \ + 32))\n        } else if char >= 97 && char <= 122 {\n            mySlice =\
    \ append(mySlice, byte(char - 32))\n        } else {\n            mySlice = append(mySlice,\
    \ byte(char))\n        }\n    }\n    return string(mySlice)\n}\n", "\ti := 0\n\
    \tnewString := \"\"\n\tfor i < len(myString) {\n\t\tif myString[i] >= 65 && myString[i]\
    \ <= 90 {\n\t\t\tnewString += string(myString[i] + 32)\n\t\t} else if myString[i]\
    \ >= 97 && myString[i] <= 122 {\n\t\t\tnewString += string(myString[i] - 32)\n\
    \t\t} else {\n\t\t\tnewString += string(myString[i])\n\t\t}\n\t\ti += 1\n\t}\n\
    \treturn newString\n}\n", "    var flippedString string\n    flippedString = \"\
    \"\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z'\
    \ {\n            flippedString += string(char - 32)\n        } else if char >=\
    \ 'A' && char <= 'Z' {\n            flippedString += string(char + 32)\n     \
    \   } else {\n            flippedString += string(char)\n        }\n    }\n  \
    \  return flippedString\n}\n", "    r := []rune(myString)\n    for i, c := range\
    \ r {\n        if c >= 65 && c <= 90 {\n            r[i] = c + 32\n        } else\
    \ if c >= 97 && c <= 122 {\n            r[i] = c - 32\n        }\n    }\n    return\
    \ string(r)\n}\n", "    byteString := []byte(myString)\n    for i := 0; i < len(byteString);\
    \ i++ {\n        if byteString[i] >= 65 && byteString[i] <= 90 {\n           \
    \ byteString[i] += 32\n        } else if byteString[i] >= 97 && byteString[i]\
    \ <= 122 {\n            byteString[i] -= 32\n        }\n    }\n    return string(byteString)\n\
    }\n", "    var newString string\n    for _, c := range myString {\n        if\
    \ c >= 'a' && c <= 'z' {\n            newString += string(c - 32)\n        } else\
    \ if c >= 'A' && c <= 'Z' {\n            newString += string(c + 32)\n       \
    \ } else {\n            newString += string(c)\n        }\n    }\n    return newString\n\
    }\n", "    if len(myString) == 0 {\n        return \"\"\n    }\n    var flip_string\
    \ string = \"\"\n    var i uint8 = 0\n    for ; i < uint8(len(myString)); i++\
    \ {\n        if (myString[i] >= 65 && myString[i] <= 90) {\n            flip_string\
    \ += string(myString[i] + 32)\n        } else if (myString[i] >= 97 && myString[i]\
    \ <= 122) {\n            flip_string += string(myString[i] - 32)\n        } else\
    \ {\n            flip_string += string(myString[i])\n        }\n    }\n    return\
    \ flip_string\n}\n", "    fmt.Println(\"Input: \", myString)\n    stringArr :=\
    \ []rune(myString)\n    for i, _ := range stringArr {\n        if stringArr[i]\
    \ >= 'a' && stringArr[i] <= 'z' {\n            stringArr[i] = rune(stringArr[i]\
    \ - 32)\n        } else if stringArr[i] >= 'A' && stringArr[i] <= 'Z' {\n    \
    \        stringArr[i] = rune(stringArr[i] + 32)\n        }\n    }\n    myString\
    \ = string(stringArr)\n    fmt.Println(\"Output: \", myString)\n    return myString\n\
    }\n", "    // Convert the input string to an array of runes (UTF-8 characters)\n\
    \    runeArray := []rune(myString)\n    fmt.Println(runeArray)\n    for index,\
    \ value := range runeArray {\n        // Only run this if the value is a letter\n\
    \        if value >= 65 && value <= 90 || value >= 97 && value <= 122 {\n    \
    \        // Check if the letter is already uppercase\n            if value >=\
    \ 65 && value <= 90 {\n                runeArray[index] = value + 32\n       \
    \     } else {\n                runeArray[index] = value - 32\n            }\n\
    \        }\n    }\n    return string(runeArray)\n}\n", "    var flipped = \"\"\
    \n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n      \
    \      flipped += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n \
    \           flipped += string(c + 32)\n        } else {\n            flipped +=\
    \ string(c)\n        }\n    }\n    return flipped\n}\n", "    return \"\"\n}\n",
  "    var convertedString []rune\n    for _, char := range myString {\n        if\
    \ char > 64 && char < 91 {\n            convertedString = append(convertedString,\
    \ char + 32)\n        } else if char > 96 && char < 123 {\n            convertedString\
    \ = append(convertedString, char - 32)\n        } else {\n            convertedString\
    \ = append(convertedString, char)\n        }\n    }\n    return string(convertedString)\n\
    }\n", "    var retVal string\n    for i := 0; i < len(myString); i++ {\n     \
    \   var runeVal = myString[i]\n        var charVal = string(runeVal)\n       \
    \ if charVal == strings.ToUpper(charVal) {\n            retVal += strings.ToLower(charVal)\n\
    \        } else {\n            retVal += strings.ToUpper(charVal)\n        }\n\
    \    }\n    return retVal\n}\n", "    // Initialise our new string\n    var newString\
    \ string\n    // Loop through our string\n    for _, c := range myString {\n \
    \       // Determine if our character is uppercase\n        if (c >= 'A' && c\
    \ <= 'Z') {\n            // Append the lowercase version of our character to our\
    \ new string\n            newString += string(c + 32)\n        } else {\n    \
    \        // Append the uppercase version of our character to our new string\n\
    \            newString += string(c - 32)\n        }\n    }\n    // Return our\
    \ new string\n    return newString\n}\n", "    // Could not figure out a way to\
    \ do this with a for loop\n    // fmt.Println(len(myString))\n    // for i :=\
    \ 0; i < len(myString); i++ {\n    //     fmt.Println(myString[i])\n    // }\n\
    \    flippedString := \"\"\n    for _, c := range myString {\n        if c >=\
    \ 'a' && c <= 'z' {\n            flippedString += string(c - ('a' - 'A'))\n  \
    \      } else if c >= 'A' && c <= 'Z' {\n            flippedString += string(c\
    \ + ('a' - 'A'))\n        } else {\n            flippedString += string(c)\n \
    \       }\n    }\n    return flippedString\n}\n", "    //TODO: Your code here\n\
    \n    return \"\"\n}\n", "    var outString string\n\n    for _, char := range\
    \ myString {\n        if string(char) == string(char) {\n            outString\
    \ += strings.ToUpper(string(char))\n        } else {\n            outString +=\
    \ strings.ToLower(string(char))\n        }\n    }\n\n    return outString\n}\n",
  "    return \"\"\n}\n", "    var result string\n    for _, value := range myString\
    \ {\n        if value > 96 && value < 123 {\n            result += string(value\
    \ - 32)\n        } else if value > 64 && value < 91 {\n            result += string(value\
    \ + 32)\n        } else {\n            result += string(value)\n        }\n  \
    \  }\n    return result\n}\n", "    return \"\"\n}\n", "    var myStringConv string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            myStringConv += string(char + 'A' - 'a')\n        } else if char\
    \ >= 'A' && char <= 'Z' {\n            myStringConv += string(char + 'a' - 'A')\n\
    \        } else {\n            myStringConv += string(char)\n        }\n    }\n\
    \    return myStringConv\n}\n", "    if myString == \"\" {\n        return \"\"\
    \n    }\n    var s []byte\n    for _, c := range myString {\n        if c >= 'a'\
    \ && c <= 'z' {\n            s = append(s, c - 32)\n        } else if c >= 'A'\
    \ && c <= 'Z' {\n            s = append(s, c + 32)\n        } else {\n       \
    \     s = append(s, c)\n        }\n    }\n    return string(s)\n}\n", "    mySlice\
    \ := []rune(myString)\n    for i, char := range mySlice {\n        if char >=\
    \ 'a' && char <= 'z' {\n            mySlice[i] = 'A' + (char - 'a')\n        }\
    \ else if char >= 'A' && char <= 'Z' {\n            mySlice[i] = 'a' + (char -\
    \ 'A')\n        }\n    }\n    return string(mySlice)\n}\n", "    var char string\n\
    \    var outString string\n\n    for _, char = range myString {\n        if char\
    \ >= 'a' && char <= 'z' {\n            outString += string(char - 32)\n      \
    \  } else if char >= 'A' && char <= 'Z' {\n            outString += string(char\
    \ + 32)\n        } else {\n            outString += string(char)\n        }\n\
    \    }\n    return outString\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
